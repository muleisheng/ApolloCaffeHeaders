// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_fcn_data_layer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe_fcn_data_layer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe_fcn_data_layer {
class FCNImageDataSourceParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataSourceParameter> {
} _FCNImageDataSourceParameter_default_instance_;
class SaltPepperParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SaltPepperParameter> {
} _SaltPepperParameter_default_instance_;
class NoiseParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoiseParameter> {
} _NoiseParameter_default_instance_;
class DistortionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistortionParameter> {
} _DistortionParameter_default_instance_;
class FCNImageDataReaderParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataReaderParameter> {
} _FCNImageDataReaderParameter_default_instance_;
class FCNImageDataCommonParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataCommonParameter> {
} _FCNImageDataCommonParameter_default_instance_;
class FCNImageDataKeyPointParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataKeyPointParameter> {
} _FCNImageDataKeyPointParameter_default_instance_;
class FCNImageDataBoxNormParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataBoxNormParameter> {
} _FCNImageDataBoxNormParameter_default_instance_;
class FCNImageDataDetectionBoxParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataDetectionBoxParameter> {
} _FCNImageDataDetectionBoxParameter_default_instance_;
class FCNImageDataIgnoreBoxParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataIgnoreBoxParameter> {
} _FCNImageDataIgnoreBoxParameter_default_instance_;
class FCNImageDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCNImageDataParameter> {
} _FCNImageDataParameter_default_instance_;

namespace protobuf_caffe_5ffcn_5fdata_5flayer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, pos_samples_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, pos_img_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, neg_samples_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, neg_img_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, neg_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, bootstrap_hard_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, bootstrap_std_length_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, bootstrap_std_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataSourceParameter, multi_class_sample_balance_),
  0,
  2,
  1,
  3,
  7,
  9,
  10,
  8,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaltPepperParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaltPepperParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaltPepperParameter, fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaltPepperParameter, value_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, hist_eq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, inverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, decolorize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, gauss_blur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, jpeg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, posterize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, erode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, saltpepper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, saltpepper_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, clahe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, convert_to_hsv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, convert_to_lab_),
  1,
  2,
  3,
  4,
  5,
  12,
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, brightness_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, brightness_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, contrast_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, contrast_lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, contrast_upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, hue_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, hue_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, saturation_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, saturation_lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, saturation_upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistortionParameter, random_order_prob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, scale_lower_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, scale_upper_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, roi_center_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, standard_len_point_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, standard_len_point_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, standard_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, mean_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, mean_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, mean_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, random_rotate_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, coord_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataReaderParameter, random_roi_prob_),
  10,
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, scale_choose_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, scale_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, scale_positive_upper_bounder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, scale_positive_lower_bounder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, scale_ignore_upper_bounder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, scale_ignore_lower_bounder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, input_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, input_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, out_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, out_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, num_anno_points_per_instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataCommonParameter, single_thread_),
  7,
  ~0u,
  9,
  10,
  11,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, valid_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, min_out_valid_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, key_point_counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, used_key_points_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, ignore_flag_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, ignore_flag_list_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, need_point_loc_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataKeyPointParameter, valid_point_loc_diff_dist_),
  4,
  6,
  3,
  1,
  5,
  0,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataBoxNormParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataBoxNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataBoxNormParameter, bbox_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataBoxNormParameter, bbox_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataBoxNormParameter, bbox_size_norm_type_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, min_output_pos_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, need_detection_loc_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, bbox_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, bbox_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, bbox_size_norm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, bbox_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, bbox_valid_dist_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, bbox_loc_diff_valid_dist_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, list_point_diff_from_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, ignore_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, loc_regress_on_ignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, class_flag_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataDetectionBoxParameter, total_class_num_),
  4,
  1,
  8,
  9,
  2,
  ~0u,
  5,
  6,
  0,
  7,
  11,
  3,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataIgnoreBoxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataIgnoreBoxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataIgnoreBoxParameter, ignore_box_flag_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataIgnoreBoxParameter, ignore_box_point_id_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, fcn_image_data_common_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, fcn_image_data_key_point_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, fcn_image_data_detection_box_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, fcn_image_data_ignore_box_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, fcn_image_data_source_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCNImageDataParameter, fcn_image_data_reader_param_),
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(FCNImageDataSourceParameter)},
  { 27, 34, sizeof(SaltPepperParameter)},
  { 36, 54, sizeof(NoiseParameter)},
  { 67, 83, sizeof(DistortionParameter)},
  { 94, 111, sizeof(FCNImageDataReaderParameter)},
  { 123, 142, sizeof(FCNImageDataCommonParameter)},
  { 156, 169, sizeof(FCNImageDataKeyPointParameter)},
  { 177, 185, sizeof(FCNImageDataBoxNormParameter)},
  { 188, 206, sizeof(FCNImageDataDetectionBoxParameter)},
  { 219, 226, sizeof(FCNImageDataIgnoreBoxParameter)},
  { 228, 239, sizeof(FCNImageDataParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataSourceParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SaltPepperParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoiseParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DistortionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataReaderParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataCommonParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataKeyPointParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataBoxNormParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataDetectionBoxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataIgnoreBoxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FCNImageDataParameter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "caffe_fcn_data_layer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _FCNImageDataSourceParameter_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SaltPepperParameter_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NoiseParameter_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DistortionParameter_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FCNImageDataReaderParameter_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _FCNImageDataCommonParameter_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FCNImageDataKeyPointParameter_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _FCNImageDataBoxNormParameter_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _FCNImageDataDetectionBoxParameter_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _FCNImageDataIgnoreBoxParameter_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _FCNImageDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FCNImageDataSourceParameter_default_instance_.DefaultConstruct();
  _SaltPepperParameter_default_instance_.DefaultConstruct();
  _NoiseParameter_default_instance_.DefaultConstruct();
  _DistortionParameter_default_instance_.DefaultConstruct();
  _FCNImageDataReaderParameter_default_instance_.DefaultConstruct();
  _FCNImageDataCommonParameter_default_instance_.DefaultConstruct();
  _FCNImageDataKeyPointParameter_default_instance_.DefaultConstruct();
  _FCNImageDataBoxNormParameter_default_instance_.DefaultConstruct();
  _FCNImageDataDetectionBoxParameter_default_instance_.DefaultConstruct();
  _FCNImageDataIgnoreBoxParameter_default_instance_.DefaultConstruct();
  _FCNImageDataParameter_default_instance_.DefaultConstruct();
  _NoiseParameter_default_instance_.get_mutable()->saltpepper_param_ = const_cast< ::caffe_fcn_data_layer::SaltPepperParameter*>(
      ::caffe_fcn_data_layer::SaltPepperParameter::internal_default_instance());
  _FCNImageDataParameter_default_instance_.get_mutable()->fcn_image_data_common_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataCommonParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataCommonParameter::internal_default_instance());
  _FCNImageDataParameter_default_instance_.get_mutable()->fcn_image_data_key_point_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::internal_default_instance());
  _FCNImageDataParameter_default_instance_.get_mutable()->fcn_image_data_detection_box_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::internal_default_instance());
  _FCNImageDataParameter_default_instance_.get_mutable()->fcn_image_data_ignore_box_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::internal_default_instance());
  _FCNImageDataParameter_default_instance_.get_mutable()->fcn_image_data_source_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataSourceParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataSourceParameter::internal_default_instance());
  _FCNImageDataParameter_default_instance_.get_mutable()->fcn_image_data_reader_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataReaderParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataReaderParameter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032caffe_fcn_data_layer.proto\022\024caffe_fcn_"
      "data_layer\"\330\003\n\033FCNImageDataSourceParamet"
      "er\022\032\n\022pos_samples_source\030\001 \001(\t\022\026\n\016pos_im"
      "g_folder\030\t \001(\t\022\032\n\022neg_samples_source\030\002 \001"
      "(\t\022\026\n\016neg_img_folder\030\n \001(\t\022\026\n\tneg_ratio\030"
      "\003 \001(\002:\0030.5\022\025\n\nbatch_size\030\005 \001(\r:\0011\022\025\n\007shu"
      "ffle\030\006 \001(\010:\004true\022!\n\024bootstrap_hard_ratio"
      "\030\004 \001(\002:\0030.5\022j\n\031bootstrap_std_length_type"
      "\030\007 \001(\0162\?.caffe_fcn_data_layer.FCNImageDa"
      "taSourceParameter.STDLengthType:\006HEIGHT\022"
      "\037\n\024bootstrap_std_length\030\010 \001(\002:\0010\022)\n\032mult"
      "i_class_sample_balance\030\013 \001(\010:\005false\"0\n\rS"
      "TDLengthType\022\n\n\006HEIGHT\020\000\022\t\n\005WIDTH\020\001\022\010\n\004D"
      "IAG\020\002\"9\n\023SaltPepperParameter\022\023\n\010fraction"
      "\030\001 \001(\002:\0010\022\r\n\005value\030\002 \003(\002\"\375\002\n\016NoiseParame"
      "ter\022\017\n\004prob\030\001 \001(\002:\0010\022\026\n\007hist_eq\030\002 \001(\010:\005f"
      "alse\022\026\n\007inverse\030\003 \001(\010:\005false\022\031\n\ndecolori"
      "ze\030\004 \001(\010:\005false\022\031\n\ngauss_blur\030\005 \001(\010:\005fal"
      "se\022\020\n\004jpeg\030\006 \001(\002:\002-1\022\030\n\tposterize\030\007 \001(\010:"
      "\005false\022\024\n\005erode\030\010 \001(\010:\005false\022\031\n\nsaltpepp"
      "er\030\t \001(\010:\005false\022C\n\020saltpepper_param\030\n \001("
      "\0132).caffe_fcn_data_layer.SaltPepperParam"
      "eter\022\024\n\005clahe\030\013 \001(\010:\005false\022\035\n\016convert_to"
      "_hsv\030\014 \001(\010:\005false\022\035\n\016convert_to_lab\030\r \001("
      "\010:\005false\"\275\002\n\023DistortionParameter\022\032\n\017brig"
      "htness_prob\030\001 \001(\002:\0010\022\033\n\020brightness_delta"
      "\030\002 \001(\002:\0010\022\030\n\rcontrast_prob\030\003 \001(\002:\0010\022\031\n\016c"
      "ontrast_lower\030\004 \001(\002:\0010\022\031\n\016contrast_upper"
      "\030\005 \001(\002:\0010\022\023\n\010hue_prob\030\006 \001(\002:\0010\022\024\n\thue_de"
      "lta\030\007 \001(\002:\0010\022\032\n\017saturation_prob\030\010 \001(\002:\0010"
      "\022\033\n\020saturation_lower\030\t \001(\002:\0010\022\033\n\020saturat"
      "ion_upper\030\n \001(\002:\0010\022\034\n\021random_order_prob\030"
      "\013 \001(\002:\0010\"\324\002\n\033FCNImageDataReaderParameter"
      "\022\034\n\021scale_lower_limit\030\001 \001(\002:\0011\022\034\n\021scale_"
      "upper_limit\030\002 \001(\002:\0011\022\030\n\020roi_center_point"
      "\030\003 \001(\r\022\034\n\024standard_len_point_1\030\004 \001(\r\022\034\n\024"
      "standard_len_point_2\030\005 \001(\r\022\024\n\014standard_l"
      "en\030\006 \001(\r\022\021\n\006mean_r\030\007 \001(\002:\0010\022\021\n\006mean_g\030\010 "
      "\001(\002:\0010\022\021\n\006mean_b\030\t \001(\002:\0010\022\037\n\024random_rota"
      "te_degree\030\n \001(\002:\0010\022\027\n\014coord_jitter\030\013 \001(\002"
      ":\0010\022\032\n\017random_roi_prob\030\014 \001(\002:\0010\"\311\004\n\033FCNI"
      "mageDataCommonParameter\022n\n\025scale_choose_"
      "strategy\030\001 \001(\0162E.caffe_fcn_data_layer.FC"
      "NImageDataCommonParameter.ScaleChooseStr"
      "ategy:\010WEIGHTED\022\022\n\nscale_base\030\002 \003(\002\022)\n\034s"
      "cale_positive_upper_bounder\030\014 \001(\002:\0031.2\022)"
      "\n\034scale_positive_lower_bounder\030\r \001(\002:\0030."
      "8\022\'\n\032scale_ignore_upper_bounder\030\016 \001(\002:\0031"
      ".2\022\'\n\032scale_ignore_lower_bounder\030\017 \001(\002:\003"
      "0.8\022\027\n\014input_height\030\003 \001(\r:\0010\022\026\n\013input_wi"
      "dth\030\004 \001(\r:\0010\022\025\n\nheat_map_a\030\005 \001(\r:\0010\022\025\n\nh"
      "eat_map_b\030\006 \001(\r:\0010\022\025\n\nout_height\030\007 \001(\r:\001"
      "0\022\024\n\tout_width\030\010 \001(\r:\0010\022$\n\034num_anno_poin"
      "ts_per_instance\030\t \001(\r\022\033\n\rsingle_thread\030\013"
      " \001(\010:\004true\"/\n\023ScaleChooseStrategy\022\n\n\006RAN"
      "DOM\020\000\022\014\n\010WEIGHTED\020\001\"\234\002\n\035FCNImageDataKeyP"
      "ointParameter\022\031\n\016valid_distance\030\001 \001(\r:\0016"
      "\022\034\n\021min_out_valid_len\030\004 \001(\r:\0011\022\033\n\020key_po"
      "int_counts\030\010 \001(\r:\0010\022\034\n\024used_key_points_f"
      "ile\030\t \001(\t\022\036\n\022ignore_flag_radius\030\002 \001(\r:\0022"
      "0\022\035\n\025ignore_flag_list_file\030\003 \001(\t\022\"\n\023need"
      "_point_loc_diff\030\005 \001(\010:\005false\022$\n\031valid_po"
      "int_loc_diff_dist\030\006 \001(\r:\0016\"\356\001\n\034FCNImageD"
      "ataBoxNormParameter\022\027\n\013bbox_height\030\n \001(\r"
      ":\00250\022\026\n\nbbox_width\030\013 \001(\r:\00250\022h\n\023bbox_siz"
      "e_norm_type\030\t \001(\0162C.caffe_fcn_data_layer"
      ".FCNImageDataBoxNormParameter.BBoxSizeNo"
      "rmType:\006HEIGHT\"3\n\020BBoxSizeNormType\022\n\n\006HE"
      "IGHT\020\000\022\t\n\005WIDTH\020\001\022\010\n\004DIAG\020\002\"\301\004\n!FCNImage"
      "DataDetectionBoxParameter\022 \n\025min_output_"
      "pos_radius\030\001 \001(\r:\0011\022&\n\027need_detection_lo"
      "c_diff\030\002 \001(\010:\005false\022\027\n\013bbox_height\030\n \001(\r"
      ":\00250\022\026\n\nbbox_width\030\013 \001(\r:\00250\022m\n\023bbox_siz"
      "e_norm_type\030\t \001(\0162H.caffe_fcn_data_layer"
      ".FCNImageDataDetectionBoxParameter.BBoxS"
      "izeNormType:\006HEIGHT\022\025\n\rbbox_point_id\030\004 \003"
      "(\r\022\"\n\025bbox_valid_dist_ratio\030\005 \001(\002:\0030.6\022+"
      "\n\036bbox_loc_diff_valid_dist_ratio\030\006 \001(\002:\003"
      "0.5\022#\n\033list_point_diff_from_center\030\007 \001(\t"
      "\022\030\n\rignore_margin\030\010 \001(\r:\0013\022#\n\025loc_regres"
      "s_on_ignore\030\016 \001(\010:\004true\022\025\n\rclass_flag_id"
      "\030\014 \001(\r\022\032\n\017total_class_num\030\r \001(\r:\0011\"3\n\020BB"
      "oxSizeNormType\022\n\n\006HEIGHT\020\000\022\t\n\005WIDTH\020\001\022\010\n"
      "\004DIAG\020\002\"_\n\036FCNImageDataIgnoreBoxParamete"
      "r\022 \n\022ignore_box_flag_id\030\001 \001(\r:\0041000\022\033\n\023i"
      "gnore_box_point_id\030\002 \003(\r\"\300\004\n\025FCNImageDat"
      "aParameter\022V\n\033fcn_image_data_common_para"
      "m\030\001 \001(\01321.caffe_fcn_data_layer.FCNImageD"
      "ataCommonParameter\022[\n\036fcn_image_data_key"
      "_point_param\030\002 \001(\01323.caffe_fcn_data_laye"
      "r.FCNImageDataKeyPointParameter\022c\n\"fcn_i"
      "mage_data_detection_box_param\030\003 \001(\01327.ca"
      "ffe_fcn_data_layer.FCNImageDataDetection"
      "BoxParameter\022]\n\037fcn_image_data_ignore_bo"
      "x_param\030\004 \001(\01324.caffe_fcn_data_layer.FCN"
      "ImageDataIgnoreBoxParameter\022V\n\033fcn_image"
      "_data_source_param\030\005 \001(\01321.caffe_fcn_dat"
      "a_layer.FCNImageDataSourceParameter\022V\n\033f"
      "cn_image_data_reader_param\030\006 \001(\01321.caffe"
      "_fcn_data_layer.FCNImageDataReaderParame"
      "ter"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4003);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe_fcn_data_layer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_caffe_5ffcn_5fdata_5flayer_2eproto

const ::google::protobuf::EnumDescriptor* FCNImageDataSourceParameter_STDLengthType_descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_enum_descriptors[0];
}
bool FCNImageDataSourceParameter_STDLengthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::HEIGHT;
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::WIDTH;
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::DIAG;
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::STDLengthType_MIN;
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::STDLengthType_MAX;
const int FCNImageDataSourceParameter::STDLengthType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FCNImageDataCommonParameter_ScaleChooseStrategy_descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_enum_descriptors[1];
}
bool FCNImageDataCommonParameter_ScaleChooseStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter::RANDOM;
const FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter::WEIGHTED;
const FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter::ScaleChooseStrategy_MIN;
const FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter::ScaleChooseStrategy_MAX;
const int FCNImageDataCommonParameter::ScaleChooseStrategy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FCNImageDataBoxNormParameter_BBoxSizeNormType_descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_enum_descriptors[2];
}
bool FCNImageDataBoxNormParameter_BBoxSizeNormType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::HEIGHT;
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::WIDTH;
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::DIAG;
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::BBoxSizeNormType_MIN;
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::BBoxSizeNormType_MAX;
const int FCNImageDataBoxNormParameter::BBoxSizeNormType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FCNImageDataDetectionBoxParameter_BBoxSizeNormType_descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_enum_descriptors[3];
}
bool FCNImageDataDetectionBoxParameter_BBoxSizeNormType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::HEIGHT;
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::WIDTH;
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::DIAG;
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::BBoxSizeNormType_MIN;
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::BBoxSizeNormType_MAX;
const int FCNImageDataDetectionBoxParameter::BBoxSizeNormType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataSourceParameter::kPosSamplesSourceFieldNumber;
const int FCNImageDataSourceParameter::kPosImgFolderFieldNumber;
const int FCNImageDataSourceParameter::kNegSamplesSourceFieldNumber;
const int FCNImageDataSourceParameter::kNegImgFolderFieldNumber;
const int FCNImageDataSourceParameter::kNegRatioFieldNumber;
const int FCNImageDataSourceParameter::kBatchSizeFieldNumber;
const int FCNImageDataSourceParameter::kShuffleFieldNumber;
const int FCNImageDataSourceParameter::kBootstrapHardRatioFieldNumber;
const int FCNImageDataSourceParameter::kBootstrapStdLengthTypeFieldNumber;
const int FCNImageDataSourceParameter::kBootstrapStdLengthFieldNumber;
const int FCNImageDataSourceParameter::kMultiClassSampleBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataSourceParameter::FCNImageDataSourceParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataSourceParameter)
}
FCNImageDataSourceParameter::FCNImageDataSourceParameter(const FCNImageDataSourceParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pos_samples_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pos_samples_source()) {
    pos_samples_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos_samples_source_);
  }
  neg_samples_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_neg_samples_source()) {
    neg_samples_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_samples_source_);
  }
  pos_img_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pos_img_folder()) {
    pos_img_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos_img_folder_);
  }
  neg_img_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_neg_img_folder()) {
    neg_img_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_img_folder_);
  }
  ::memcpy(&bootstrap_std_length_type_, &from.bootstrap_std_length_type_,
    reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&bootstrap_std_length_type_) + sizeof(shuffle_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataSourceParameter)
}

void FCNImageDataSourceParameter::SharedCtor() {
  _cached_size_ = 0;
  pos_samples_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neg_samples_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_img_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neg_img_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bootstrap_std_length_type_, 0, reinterpret_cast<char*>(&multi_class_sample_balance_) -
    reinterpret_cast<char*>(&bootstrap_std_length_type_) + sizeof(multi_class_sample_balance_));
  neg_ratio_ = 0.5f;
  bootstrap_hard_ratio_ = 0.5f;
  batch_size_ = 1u;
  shuffle_ = true;
}

FCNImageDataSourceParameter::~FCNImageDataSourceParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  SharedDtor();
}

void FCNImageDataSourceParameter::SharedDtor() {
  pos_samples_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neg_samples_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_img_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neg_img_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FCNImageDataSourceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataSourceParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataSourceParameter& FCNImageDataSourceParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataSourceParameter* FCNImageDataSourceParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataSourceParameter* n = new FCNImageDataSourceParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataSourceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_pos_samples_source()) {
      GOOGLE_DCHECK(!pos_samples_source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pos_samples_source_.UnsafeRawStringPointer())->clear();
    }
    if (has_neg_samples_source()) {
      GOOGLE_DCHECK(!neg_samples_source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*neg_samples_source_.UnsafeRawStringPointer())->clear();
    }
    if (has_pos_img_folder()) {
      GOOGLE_DCHECK(!pos_img_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pos_img_folder_.UnsafeRawStringPointer())->clear();
    }
    if (has_neg_img_folder()) {
      GOOGLE_DCHECK(!neg_img_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*neg_img_folder_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&bootstrap_std_length_type_, 0, reinterpret_cast<char*>(&multi_class_sample_balance_) -
      reinterpret_cast<char*>(&bootstrap_std_length_type_) + sizeof(multi_class_sample_balance_));
    neg_ratio_ = 0.5f;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    bootstrap_hard_ratio_ = 0.5f;
    batch_size_ = 1u;
    shuffle_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataSourceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pos_samples_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos_samples_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pos_samples_source().data(), this->pos_samples_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string neg_samples_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg_samples_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->neg_samples_source().data(), this->neg_samples_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_ratio = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_neg_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bootstrap_hard_ratio = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_bootstrap_hard_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bootstrap_hard_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType_IsValid(value)) {
            set_bootstrap_std_length_type(static_cast< ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bootstrap_std_length = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_bootstrap_std_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bootstrap_std_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pos_img_folder = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos_img_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pos_img_folder().data(), this->pos_img_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string neg_img_folder = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg_img_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->neg_img_folder().data(), this->neg_img_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool multi_class_sample_balance = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_multi_class_sample_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multi_class_sample_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  return false;
#undef DO_
}

void FCNImageDataSourceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pos_samples_source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos_samples_source().data(), this->pos_samples_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pos_samples_source(), output);
  }

  // optional string neg_samples_source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neg_samples_source().data(), this->neg_samples_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->neg_samples_source(), output);
  }

  // optional float neg_ratio = 3 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->neg_ratio(), output);
  }

  // optional float bootstrap_hard_ratio = 4 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bootstrap_hard_ratio(), output);
  }

  // optional uint32 batch_size = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->batch_size(), output);
  }

  // optional bool shuffle = 6 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->shuffle(), output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->bootstrap_std_length_type(), output);
  }

  // optional float bootstrap_std_length = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bootstrap_std_length(), output);
  }

  // optional string pos_img_folder = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos_img_folder().data(), this->pos_img_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pos_img_folder(), output);
  }

  // optional string neg_img_folder = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neg_img_folder().data(), this->neg_img_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->neg_img_folder(), output);
  }

  // optional bool multi_class_sample_balance = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->multi_class_sample_balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataSourceParameter)
}

::google::protobuf::uint8* FCNImageDataSourceParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pos_samples_source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos_samples_source().data(), this->pos_samples_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pos_samples_source(), target);
  }

  // optional string neg_samples_source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neg_samples_source().data(), this->neg_samples_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->neg_samples_source(), target);
  }

  // optional float neg_ratio = 3 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->neg_ratio(), target);
  }

  // optional float bootstrap_hard_ratio = 4 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bootstrap_hard_ratio(), target);
  }

  // optional uint32 batch_size = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->batch_size(), target);
  }

  // optional bool shuffle = 6 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->shuffle(), target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->bootstrap_std_length_type(), target);
  }

  // optional float bootstrap_std_length = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bootstrap_std_length(), target);
  }

  // optional string pos_img_folder = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos_img_folder().data(), this->pos_img_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pos_img_folder(), target);
  }

  // optional string neg_img_folder = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neg_img_folder().data(), this->neg_img_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->neg_img_folder(), target);
  }

  // optional bool multi_class_sample_balance = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->multi_class_sample_balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  return target;
}

size_t FCNImageDataSourceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string pos_samples_source = 1;
    if (has_pos_samples_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos_samples_source());
    }

    // optional string neg_samples_source = 2;
    if (has_neg_samples_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->neg_samples_source());
    }

    // optional string pos_img_folder = 9;
    if (has_pos_img_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos_img_folder());
    }

    // optional string neg_img_folder = 10;
    if (has_neg_img_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->neg_img_folder());
    }

    // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
    if (has_bootstrap_std_length_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bootstrap_std_length_type());
    }

    // optional float bootstrap_std_length = 8 [default = 0];
    if (has_bootstrap_std_length()) {
      total_size += 1 + 4;
    }

    // optional bool multi_class_sample_balance = 11 [default = false];
    if (has_multi_class_sample_balance()) {
      total_size += 1 + 1;
    }

    // optional float neg_ratio = 3 [default = 0.5];
    if (has_neg_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float bootstrap_hard_ratio = 4 [default = 0.5];
    if (has_bootstrap_hard_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 batch_size = 5 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional bool shuffle = 6 [default = true];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataSourceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataSourceParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataSourceParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataSourceParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataSourceParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataSourceParameter::MergeFrom(const FCNImageDataSourceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pos_samples_source();
      pos_samples_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos_samples_source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_neg_samples_source();
      neg_samples_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_samples_source_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pos_img_folder();
      pos_img_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos_img_folder_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_neg_img_folder();
      neg_img_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_img_folder_);
    }
    if (cached_has_bits & 0x00000010u) {
      bootstrap_std_length_type_ = from.bootstrap_std_length_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      bootstrap_std_length_ = from.bootstrap_std_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      multi_class_sample_balance_ = from.multi_class_sample_balance_;
    }
    if (cached_has_bits & 0x00000080u) {
      neg_ratio_ = from.neg_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      bootstrap_hard_ratio_ = from.bootstrap_hard_ratio_;
    }
    if (cached_has_bits & 0x00000200u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCNImageDataSourceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataSourceParameter::CopyFrom(const FCNImageDataSourceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataSourceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataSourceParameter::IsInitialized() const {
  return true;
}

void FCNImageDataSourceParameter::Swap(FCNImageDataSourceParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataSourceParameter::InternalSwap(FCNImageDataSourceParameter* other) {
  pos_samples_source_.Swap(&other->pos_samples_source_);
  neg_samples_source_.Swap(&other->neg_samples_source_);
  pos_img_folder_.Swap(&other->pos_img_folder_);
  neg_img_folder_.Swap(&other->neg_img_folder_);
  std::swap(bootstrap_std_length_type_, other->bootstrap_std_length_type_);
  std::swap(bootstrap_std_length_, other->bootstrap_std_length_);
  std::swap(multi_class_sample_balance_, other->multi_class_sample_balance_);
  std::swap(neg_ratio_, other->neg_ratio_);
  std::swap(bootstrap_hard_ratio_, other->bootstrap_hard_ratio_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataSourceParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataSourceParameter

// optional string pos_samples_source = 1;
bool FCNImageDataSourceParameter::has_pos_samples_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataSourceParameter::set_has_pos_samples_source() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataSourceParameter::clear_has_pos_samples_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataSourceParameter::clear_pos_samples_source() {
  pos_samples_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pos_samples_source();
}
const ::std::string& FCNImageDataSourceParameter::pos_samples_source() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
  return pos_samples_source_.GetNoArena();
}
void FCNImageDataSourceParameter::set_pos_samples_source(const ::std::string& value) {
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
#if LANG_CXX11
void FCNImageDataSourceParameter::set_pos_samples_source(::std::string&& value) {
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
#endif
void FCNImageDataSourceParameter::set_pos_samples_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
void FCNImageDataSourceParameter::set_pos_samples_source(const char* value, size_t size) {
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
::std::string* FCNImageDataSourceParameter::mutable_pos_samples_source() {
  set_has_pos_samples_source();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
  return pos_samples_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataSourceParameter::release_pos_samples_source() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
  clear_has_pos_samples_source();
  return pos_samples_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataSourceParameter::set_allocated_pos_samples_source(::std::string* pos_samples_source) {
  if (pos_samples_source != NULL) {
    set_has_pos_samples_source();
  } else {
    clear_has_pos_samples_source();
  }
  pos_samples_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos_samples_source);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}

// optional string pos_img_folder = 9;
bool FCNImageDataSourceParameter::has_pos_img_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataSourceParameter::set_has_pos_img_folder() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataSourceParameter::clear_has_pos_img_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataSourceParameter::clear_pos_img_folder() {
  pos_img_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pos_img_folder();
}
const ::std::string& FCNImageDataSourceParameter::pos_img_folder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
  return pos_img_folder_.GetNoArena();
}
void FCNImageDataSourceParameter::set_pos_img_folder(const ::std::string& value) {
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
#if LANG_CXX11
void FCNImageDataSourceParameter::set_pos_img_folder(::std::string&& value) {
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
#endif
void FCNImageDataSourceParameter::set_pos_img_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
void FCNImageDataSourceParameter::set_pos_img_folder(const char* value, size_t size) {
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
::std::string* FCNImageDataSourceParameter::mutable_pos_img_folder() {
  set_has_pos_img_folder();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
  return pos_img_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataSourceParameter::release_pos_img_folder() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
  clear_has_pos_img_folder();
  return pos_img_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataSourceParameter::set_allocated_pos_img_folder(::std::string* pos_img_folder) {
  if (pos_img_folder != NULL) {
    set_has_pos_img_folder();
  } else {
    clear_has_pos_img_folder();
  }
  pos_img_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos_img_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}

// optional string neg_samples_source = 2;
bool FCNImageDataSourceParameter::has_neg_samples_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataSourceParameter::set_has_neg_samples_source() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataSourceParameter::clear_has_neg_samples_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataSourceParameter::clear_neg_samples_source() {
  neg_samples_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_neg_samples_source();
}
const ::std::string& FCNImageDataSourceParameter::neg_samples_source() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
  return neg_samples_source_.GetNoArena();
}
void FCNImageDataSourceParameter::set_neg_samples_source(const ::std::string& value) {
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
#if LANG_CXX11
void FCNImageDataSourceParameter::set_neg_samples_source(::std::string&& value) {
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
#endif
void FCNImageDataSourceParameter::set_neg_samples_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
void FCNImageDataSourceParameter::set_neg_samples_source(const char* value, size_t size) {
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
::std::string* FCNImageDataSourceParameter::mutable_neg_samples_source() {
  set_has_neg_samples_source();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
  return neg_samples_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataSourceParameter::release_neg_samples_source() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
  clear_has_neg_samples_source();
  return neg_samples_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataSourceParameter::set_allocated_neg_samples_source(::std::string* neg_samples_source) {
  if (neg_samples_source != NULL) {
    set_has_neg_samples_source();
  } else {
    clear_has_neg_samples_source();
  }
  neg_samples_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg_samples_source);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}

// optional string neg_img_folder = 10;
bool FCNImageDataSourceParameter::has_neg_img_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNImageDataSourceParameter::set_has_neg_img_folder() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNImageDataSourceParameter::clear_has_neg_img_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNImageDataSourceParameter::clear_neg_img_folder() {
  neg_img_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_neg_img_folder();
}
const ::std::string& FCNImageDataSourceParameter::neg_img_folder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
  return neg_img_folder_.GetNoArena();
}
void FCNImageDataSourceParameter::set_neg_img_folder(const ::std::string& value) {
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
#if LANG_CXX11
void FCNImageDataSourceParameter::set_neg_img_folder(::std::string&& value) {
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
#endif
void FCNImageDataSourceParameter::set_neg_img_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
void FCNImageDataSourceParameter::set_neg_img_folder(const char* value, size_t size) {
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
::std::string* FCNImageDataSourceParameter::mutable_neg_img_folder() {
  set_has_neg_img_folder();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
  return neg_img_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataSourceParameter::release_neg_img_folder() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
  clear_has_neg_img_folder();
  return neg_img_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataSourceParameter::set_allocated_neg_img_folder(::std::string* neg_img_folder) {
  if (neg_img_folder != NULL) {
    set_has_neg_img_folder();
  } else {
    clear_has_neg_img_folder();
  }
  neg_img_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg_img_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}

// optional float neg_ratio = 3 [default = 0.5];
bool FCNImageDataSourceParameter::has_neg_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FCNImageDataSourceParameter::set_has_neg_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
void FCNImageDataSourceParameter::clear_has_neg_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
void FCNImageDataSourceParameter::clear_neg_ratio() {
  neg_ratio_ = 0.5f;
  clear_has_neg_ratio();
}
float FCNImageDataSourceParameter::neg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_ratio)
  return neg_ratio_;
}
void FCNImageDataSourceParameter::set_neg_ratio(float value) {
  set_has_neg_ratio();
  neg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_ratio)
}

// optional uint32 batch_size = 5 [default = 1];
bool FCNImageDataSourceParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FCNImageDataSourceParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000200u;
}
void FCNImageDataSourceParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void FCNImageDataSourceParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 FCNImageDataSourceParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.batch_size)
  return batch_size_;
}
void FCNImageDataSourceParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.batch_size)
}

// optional bool shuffle = 6 [default = true];
bool FCNImageDataSourceParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FCNImageDataSourceParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000400u;
}
void FCNImageDataSourceParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000400u;
}
void FCNImageDataSourceParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
bool FCNImageDataSourceParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.shuffle)
  return shuffle_;
}
void FCNImageDataSourceParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.shuffle)
}

// optional float bootstrap_hard_ratio = 4 [default = 0.5];
bool FCNImageDataSourceParameter::has_bootstrap_hard_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FCNImageDataSourceParameter::set_has_bootstrap_hard_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
void FCNImageDataSourceParameter::clear_has_bootstrap_hard_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
void FCNImageDataSourceParameter::clear_bootstrap_hard_ratio() {
  bootstrap_hard_ratio_ = 0.5f;
  clear_has_bootstrap_hard_ratio();
}
float FCNImageDataSourceParameter::bootstrap_hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_hard_ratio)
  return bootstrap_hard_ratio_;
}
void FCNImageDataSourceParameter::set_bootstrap_hard_ratio(float value) {
  set_has_bootstrap_hard_ratio();
  bootstrap_hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_hard_ratio)
}

// optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
bool FCNImageDataSourceParameter::has_bootstrap_std_length_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNImageDataSourceParameter::set_has_bootstrap_std_length_type() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNImageDataSourceParameter::clear_has_bootstrap_std_length_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNImageDataSourceParameter::clear_bootstrap_std_length_type() {
  bootstrap_std_length_type_ = 0;
  clear_has_bootstrap_std_length_type();
}
::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::bootstrap_std_length_type() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length_type)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType >(bootstrap_std_length_type_);
}
void FCNImageDataSourceParameter::set_bootstrap_std_length_type(::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType value) {
  assert(::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType_IsValid(value));
  set_has_bootstrap_std_length_type();
  bootstrap_std_length_type_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length_type)
}

// optional float bootstrap_std_length = 8 [default = 0];
bool FCNImageDataSourceParameter::has_bootstrap_std_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNImageDataSourceParameter::set_has_bootstrap_std_length() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNImageDataSourceParameter::clear_has_bootstrap_std_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNImageDataSourceParameter::clear_bootstrap_std_length() {
  bootstrap_std_length_ = 0;
  clear_has_bootstrap_std_length();
}
float FCNImageDataSourceParameter::bootstrap_std_length() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length)
  return bootstrap_std_length_;
}
void FCNImageDataSourceParameter::set_bootstrap_std_length(float value) {
  set_has_bootstrap_std_length();
  bootstrap_std_length_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length)
}

// optional bool multi_class_sample_balance = 11 [default = false];
bool FCNImageDataSourceParameter::has_multi_class_sample_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FCNImageDataSourceParameter::set_has_multi_class_sample_balance() {
  _has_bits_[0] |= 0x00000040u;
}
void FCNImageDataSourceParameter::clear_has_multi_class_sample_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
void FCNImageDataSourceParameter::clear_multi_class_sample_balance() {
  multi_class_sample_balance_ = false;
  clear_has_multi_class_sample_balance();
}
bool FCNImageDataSourceParameter::multi_class_sample_balance() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.multi_class_sample_balance)
  return multi_class_sample_balance_;
}
void FCNImageDataSourceParameter::set_multi_class_sample_balance(bool value) {
  set_has_multi_class_sample_balance();
  multi_class_sample_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.multi_class_sample_balance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaltPepperParameter::kFractionFieldNumber;
const int SaltPepperParameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaltPepperParameter::SaltPepperParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.SaltPepperParameter)
}
SaltPepperParameter::SaltPepperParameter(const SaltPepperParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fraction_ = from.fraction_;
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.SaltPepperParameter)
}

void SaltPepperParameter::SharedCtor() {
  _cached_size_ = 0;
  fraction_ = 0;
}

SaltPepperParameter::~SaltPepperParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.SaltPepperParameter)
  SharedDtor();
}

void SaltPepperParameter::SharedDtor() {
}

void SaltPepperParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaltPepperParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SaltPepperParameter& SaltPepperParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

SaltPepperParameter* SaltPepperParameter::New(::google::protobuf::Arena* arena) const {
  SaltPepperParameter* n = new SaltPepperParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SaltPepperParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.SaltPepperParameter)
  value_.Clear();
  fraction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SaltPepperParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.SaltPepperParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float fraction = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.SaltPepperParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.SaltPepperParameter)
  return false;
#undef DO_
}

void SaltPepperParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.SaltPepperParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fraction = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fraction(), output);
  }

  // repeated float value = 2;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.SaltPepperParameter)
}

::google::protobuf::uint8* SaltPepperParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.SaltPepperParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fraction = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fraction(), target);
  }

  // repeated float value = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->value_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.SaltPepperParameter)
  return target;
}

size_t SaltPepperParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.SaltPepperParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float value = 2;
  {
    unsigned int count = this->value_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  // optional float fraction = 1 [default = 0];
  if (has_fraction()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaltPepperParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.SaltPepperParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SaltPepperParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SaltPepperParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.SaltPepperParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.SaltPepperParameter)
    MergeFrom(*source);
  }
}

void SaltPepperParameter::MergeFrom(const SaltPepperParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.SaltPepperParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.has_fraction()) {
    set_fraction(from.fraction());
  }
}

void SaltPepperParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.SaltPepperParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaltPepperParameter::CopyFrom(const SaltPepperParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.SaltPepperParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaltPepperParameter::IsInitialized() const {
  return true;
}

void SaltPepperParameter::Swap(SaltPepperParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaltPepperParameter::InternalSwap(SaltPepperParameter* other) {
  value_.InternalSwap(&other->value_);
  std::swap(fraction_, other->fraction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SaltPepperParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SaltPepperParameter

// optional float fraction = 1 [default = 0];
bool SaltPepperParameter::has_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SaltPepperParameter::set_has_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
void SaltPepperParameter::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
void SaltPepperParameter::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
float SaltPepperParameter::fraction() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.SaltPepperParameter.fraction)
  return fraction_;
}
void SaltPepperParameter::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.SaltPepperParameter.fraction)
}

// repeated float value = 2;
int SaltPepperParameter::value_size() const {
  return value_.size();
}
void SaltPepperParameter::clear_value() {
  value_.Clear();
}
float SaltPepperParameter::value(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.SaltPepperParameter.value)
  return value_.Get(index);
}
void SaltPepperParameter::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.SaltPepperParameter.value)
}
void SaltPepperParameter::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.SaltPepperParameter.value)
}
const ::google::protobuf::RepeatedField< float >&
SaltPepperParameter::value() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.SaltPepperParameter.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
SaltPepperParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.SaltPepperParameter.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoiseParameter::kProbFieldNumber;
const int NoiseParameter::kHistEqFieldNumber;
const int NoiseParameter::kInverseFieldNumber;
const int NoiseParameter::kDecolorizeFieldNumber;
const int NoiseParameter::kGaussBlurFieldNumber;
const int NoiseParameter::kJpegFieldNumber;
const int NoiseParameter::kPosterizeFieldNumber;
const int NoiseParameter::kErodeFieldNumber;
const int NoiseParameter::kSaltpepperFieldNumber;
const int NoiseParameter::kSaltpepperParamFieldNumber;
const int NoiseParameter::kClaheFieldNumber;
const int NoiseParameter::kConvertToHsvFieldNumber;
const int NoiseParameter::kConvertToLabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoiseParameter::NoiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.NoiseParameter)
}
NoiseParameter::NoiseParameter(const NoiseParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_saltpepper_param()) {
    saltpepper_param_ = new ::caffe_fcn_data_layer::SaltPepperParameter(*from.saltpepper_param_);
  } else {
    saltpepper_param_ = NULL;
  }
  ::memcpy(&prob_, &from.prob_,
    reinterpret_cast<char*>(&jpeg_) -
    reinterpret_cast<char*>(&prob_) + sizeof(jpeg_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.NoiseParameter)
}

void NoiseParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&saltpepper_param_, 0, reinterpret_cast<char*>(&convert_to_lab_) -
    reinterpret_cast<char*>(&saltpepper_param_) + sizeof(convert_to_lab_));
  jpeg_ = -1;
}

NoiseParameter::~NoiseParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.NoiseParameter)
  SharedDtor();
}

void NoiseParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete saltpepper_param_;
  }
}

void NoiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoiseParameter& NoiseParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoiseParameter* NoiseParameter::New(::google::protobuf::Arena* arena) const {
  NoiseParameter* n = new NoiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.NoiseParameter)
  if (has_saltpepper_param()) {
    GOOGLE_DCHECK(saltpepper_param_ != NULL);
    saltpepper_param_->::caffe_fcn_data_layer::SaltPepperParameter::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&prob_, 0, reinterpret_cast<char*>(&erode_) -
      reinterpret_cast<char*>(&prob_) + sizeof(erode_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&saltpepper_, 0, reinterpret_cast<char*>(&convert_to_lab_) -
      reinterpret_cast<char*>(&saltpepper_) + sizeof(convert_to_lab_));
    jpeg_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NoiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.NoiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float prob = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hist_eq = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hist_eq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hist_eq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inverse = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_inverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool decolorize = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_decolorize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &decolorize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gauss_blur = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_gauss_blur();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gauss_blur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float jpeg = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_jpeg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jpeg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool posterize = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_posterize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &posterize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool erode = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_erode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &erode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool saltpepper = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_saltpepper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saltpepper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saltpepper_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clahe = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_clahe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clahe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_hsv = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_convert_to_hsv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_hsv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_lab = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_convert_to_lab();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_lab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.NoiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.NoiseParameter)
  return false;
#undef DO_
}

void NoiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.NoiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prob(), output);
  }

  // optional bool hist_eq = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hist_eq(), output);
  }

  // optional bool inverse = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inverse(), output);
  }

  // optional bool decolorize = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->decolorize(), output);
  }

  // optional bool gauss_blur = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gauss_blur(), output);
  }

  // optional float jpeg = 6 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->jpeg(), output);
  }

  // optional bool posterize = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->posterize(), output);
  }

  // optional bool erode = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->erode(), output);
  }

  // optional bool saltpepper = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->saltpepper(), output);
  }

  // optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->saltpepper_param_, output);
  }

  // optional bool clahe = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->clahe(), output);
  }

  // optional bool convert_to_hsv = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->convert_to_hsv(), output);
  }

  // optional bool convert_to_lab = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->convert_to_lab(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.NoiseParameter)
}

::google::protobuf::uint8* NoiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.NoiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prob(), target);
  }

  // optional bool hist_eq = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hist_eq(), target);
  }

  // optional bool inverse = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inverse(), target);
  }

  // optional bool decolorize = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->decolorize(), target);
  }

  // optional bool gauss_blur = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->gauss_blur(), target);
  }

  // optional float jpeg = 6 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->jpeg(), target);
  }

  // optional bool posterize = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->posterize(), target);
  }

  // optional bool erode = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->erode(), target);
  }

  // optional bool saltpepper = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->saltpepper(), target);
  }

  // optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->saltpepper_param_, deterministic, target);
  }

  // optional bool clahe = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->clahe(), target);
  }

  // optional bool convert_to_hsv = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->convert_to_hsv(), target);
  }

  // optional bool convert_to_lab = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->convert_to_lab(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.NoiseParameter)
  return target;
}

size_t NoiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.NoiseParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
    if (has_saltpepper_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->saltpepper_param_);
    }

    // optional float prob = 1 [default = 0];
    if (has_prob()) {
      total_size += 1 + 4;
    }

    // optional bool hist_eq = 2 [default = false];
    if (has_hist_eq()) {
      total_size += 1 + 1;
    }

    // optional bool inverse = 3 [default = false];
    if (has_inverse()) {
      total_size += 1 + 1;
    }

    // optional bool decolorize = 4 [default = false];
    if (has_decolorize()) {
      total_size += 1 + 1;
    }

    // optional bool gauss_blur = 5 [default = false];
    if (has_gauss_blur()) {
      total_size += 1 + 1;
    }

    // optional bool posterize = 7 [default = false];
    if (has_posterize()) {
      total_size += 1 + 1;
    }

    // optional bool erode = 8 [default = false];
    if (has_erode()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool saltpepper = 9 [default = false];
    if (has_saltpepper()) {
      total_size += 1 + 1;
    }

    // optional bool clahe = 11 [default = false];
    if (has_clahe()) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_hsv = 12 [default = false];
    if (has_convert_to_hsv()) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_lab = 13 [default = false];
    if (has_convert_to_lab()) {
      total_size += 1 + 1;
    }

    // optional float jpeg = 6 [default = -1];
    if (has_jpeg()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.NoiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.NoiseParameter)
    MergeFrom(*source);
  }
}

void NoiseParameter::MergeFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_saltpepper_param()->::caffe_fcn_data_layer::SaltPepperParameter::MergeFrom(from.saltpepper_param());
    }
    if (cached_has_bits & 0x00000002u) {
      prob_ = from.prob_;
    }
    if (cached_has_bits & 0x00000004u) {
      hist_eq_ = from.hist_eq_;
    }
    if (cached_has_bits & 0x00000008u) {
      inverse_ = from.inverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      decolorize_ = from.decolorize_;
    }
    if (cached_has_bits & 0x00000020u) {
      gauss_blur_ = from.gauss_blur_;
    }
    if (cached_has_bits & 0x00000040u) {
      posterize_ = from.posterize_;
    }
    if (cached_has_bits & 0x00000080u) {
      erode_ = from.erode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      saltpepper_ = from.saltpepper_;
    }
    if (cached_has_bits & 0x00000200u) {
      clahe_ = from.clahe_;
    }
    if (cached_has_bits & 0x00000400u) {
      convert_to_hsv_ = from.convert_to_hsv_;
    }
    if (cached_has_bits & 0x00000800u) {
      convert_to_lab_ = from.convert_to_lab_;
    }
    if (cached_has_bits & 0x00001000u) {
      jpeg_ = from.jpeg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NoiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseParameter::CopyFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseParameter::IsInitialized() const {
  return true;
}

void NoiseParameter::Swap(NoiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoiseParameter::InternalSwap(NoiseParameter* other) {
  std::swap(saltpepper_param_, other->saltpepper_param_);
  std::swap(prob_, other->prob_);
  std::swap(hist_eq_, other->hist_eq_);
  std::swap(inverse_, other->inverse_);
  std::swap(decolorize_, other->decolorize_);
  std::swap(gauss_blur_, other->gauss_blur_);
  std::swap(posterize_, other->posterize_);
  std::swap(erode_, other->erode_);
  std::swap(saltpepper_, other->saltpepper_);
  std::swap(clahe_, other->clahe_);
  std::swap(convert_to_hsv_, other->convert_to_hsv_);
  std::swap(convert_to_lab_, other->convert_to_lab_);
  std::swap(jpeg_, other->jpeg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoiseParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoiseParameter

// optional float prob = 1 [default = 0];
bool NoiseParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NoiseParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
void NoiseParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
void NoiseParameter::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
float NoiseParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.prob)
  return prob_;
}
void NoiseParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.prob)
}

// optional bool hist_eq = 2 [default = false];
bool NoiseParameter::has_hist_eq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NoiseParameter::set_has_hist_eq() {
  _has_bits_[0] |= 0x00000004u;
}
void NoiseParameter::clear_has_hist_eq() {
  _has_bits_[0] &= ~0x00000004u;
}
void NoiseParameter::clear_hist_eq() {
  hist_eq_ = false;
  clear_has_hist_eq();
}
bool NoiseParameter::hist_eq() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.hist_eq)
  return hist_eq_;
}
void NoiseParameter::set_hist_eq(bool value) {
  set_has_hist_eq();
  hist_eq_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.hist_eq)
}

// optional bool inverse = 3 [default = false];
bool NoiseParameter::has_inverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NoiseParameter::set_has_inverse() {
  _has_bits_[0] |= 0x00000008u;
}
void NoiseParameter::clear_has_inverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void NoiseParameter::clear_inverse() {
  inverse_ = false;
  clear_has_inverse();
}
bool NoiseParameter::inverse() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.inverse)
  return inverse_;
}
void NoiseParameter::set_inverse(bool value) {
  set_has_inverse();
  inverse_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.inverse)
}

// optional bool decolorize = 4 [default = false];
bool NoiseParameter::has_decolorize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NoiseParameter::set_has_decolorize() {
  _has_bits_[0] |= 0x00000010u;
}
void NoiseParameter::clear_has_decolorize() {
  _has_bits_[0] &= ~0x00000010u;
}
void NoiseParameter::clear_decolorize() {
  decolorize_ = false;
  clear_has_decolorize();
}
bool NoiseParameter::decolorize() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.decolorize)
  return decolorize_;
}
void NoiseParameter::set_decolorize(bool value) {
  set_has_decolorize();
  decolorize_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.decolorize)
}

// optional bool gauss_blur = 5 [default = false];
bool NoiseParameter::has_gauss_blur() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NoiseParameter::set_has_gauss_blur() {
  _has_bits_[0] |= 0x00000020u;
}
void NoiseParameter::clear_has_gauss_blur() {
  _has_bits_[0] &= ~0x00000020u;
}
void NoiseParameter::clear_gauss_blur() {
  gauss_blur_ = false;
  clear_has_gauss_blur();
}
bool NoiseParameter::gauss_blur() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.gauss_blur)
  return gauss_blur_;
}
void NoiseParameter::set_gauss_blur(bool value) {
  set_has_gauss_blur();
  gauss_blur_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.gauss_blur)
}

// optional float jpeg = 6 [default = -1];
bool NoiseParameter::has_jpeg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NoiseParameter::set_has_jpeg() {
  _has_bits_[0] |= 0x00001000u;
}
void NoiseParameter::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00001000u;
}
void NoiseParameter::clear_jpeg() {
  jpeg_ = -1;
  clear_has_jpeg();
}
float NoiseParameter::jpeg() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.jpeg)
  return jpeg_;
}
void NoiseParameter::set_jpeg(float value) {
  set_has_jpeg();
  jpeg_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.jpeg)
}

// optional bool posterize = 7 [default = false];
bool NoiseParameter::has_posterize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NoiseParameter::set_has_posterize() {
  _has_bits_[0] |= 0x00000040u;
}
void NoiseParameter::clear_has_posterize() {
  _has_bits_[0] &= ~0x00000040u;
}
void NoiseParameter::clear_posterize() {
  posterize_ = false;
  clear_has_posterize();
}
bool NoiseParameter::posterize() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.posterize)
  return posterize_;
}
void NoiseParameter::set_posterize(bool value) {
  set_has_posterize();
  posterize_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.posterize)
}

// optional bool erode = 8 [default = false];
bool NoiseParameter::has_erode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NoiseParameter::set_has_erode() {
  _has_bits_[0] |= 0x00000080u;
}
void NoiseParameter::clear_has_erode() {
  _has_bits_[0] &= ~0x00000080u;
}
void NoiseParameter::clear_erode() {
  erode_ = false;
  clear_has_erode();
}
bool NoiseParameter::erode() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.erode)
  return erode_;
}
void NoiseParameter::set_erode(bool value) {
  set_has_erode();
  erode_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.erode)
}

// optional bool saltpepper = 9 [default = false];
bool NoiseParameter::has_saltpepper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NoiseParameter::set_has_saltpepper() {
  _has_bits_[0] |= 0x00000100u;
}
void NoiseParameter::clear_has_saltpepper() {
  _has_bits_[0] &= ~0x00000100u;
}
void NoiseParameter::clear_saltpepper() {
  saltpepper_ = false;
  clear_has_saltpepper();
}
bool NoiseParameter::saltpepper() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.saltpepper)
  return saltpepper_;
}
void NoiseParameter::set_saltpepper(bool value) {
  set_has_saltpepper();
  saltpepper_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.saltpepper)
}

// optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
bool NoiseParameter::has_saltpepper_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NoiseParameter::set_has_saltpepper_param() {
  _has_bits_[0] |= 0x00000001u;
}
void NoiseParameter::clear_has_saltpepper_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void NoiseParameter::clear_saltpepper_param() {
  if (saltpepper_param_ != NULL) saltpepper_param_->::caffe_fcn_data_layer::SaltPepperParameter::Clear();
  clear_has_saltpepper_param();
}
const ::caffe_fcn_data_layer::SaltPepperParameter& NoiseParameter::saltpepper_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
  return saltpepper_param_ != NULL ? *saltpepper_param_
                         : *::caffe_fcn_data_layer::SaltPepperParameter::internal_default_instance();
}
::caffe_fcn_data_layer::SaltPepperParameter* NoiseParameter::mutable_saltpepper_param() {
  set_has_saltpepper_param();
  if (saltpepper_param_ == NULL) {
    saltpepper_param_ = new ::caffe_fcn_data_layer::SaltPepperParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
  return saltpepper_param_;
}
::caffe_fcn_data_layer::SaltPepperParameter* NoiseParameter::release_saltpepper_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
  clear_has_saltpepper_param();
  ::caffe_fcn_data_layer::SaltPepperParameter* temp = saltpepper_param_;
  saltpepper_param_ = NULL;
  return temp;
}
void NoiseParameter::set_allocated_saltpepper_param(::caffe_fcn_data_layer::SaltPepperParameter* saltpepper_param) {
  delete saltpepper_param_;
  saltpepper_param_ = saltpepper_param;
  if (saltpepper_param) {
    set_has_saltpepper_param();
  } else {
    clear_has_saltpepper_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
}

// optional bool clahe = 11 [default = false];
bool NoiseParameter::has_clahe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NoiseParameter::set_has_clahe() {
  _has_bits_[0] |= 0x00000200u;
}
void NoiseParameter::clear_has_clahe() {
  _has_bits_[0] &= ~0x00000200u;
}
void NoiseParameter::clear_clahe() {
  clahe_ = false;
  clear_has_clahe();
}
bool NoiseParameter::clahe() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.clahe)
  return clahe_;
}
void NoiseParameter::set_clahe(bool value) {
  set_has_clahe();
  clahe_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.clahe)
}

// optional bool convert_to_hsv = 12 [default = false];
bool NoiseParameter::has_convert_to_hsv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NoiseParameter::set_has_convert_to_hsv() {
  _has_bits_[0] |= 0x00000400u;
}
void NoiseParameter::clear_has_convert_to_hsv() {
  _has_bits_[0] &= ~0x00000400u;
}
void NoiseParameter::clear_convert_to_hsv() {
  convert_to_hsv_ = false;
  clear_has_convert_to_hsv();
}
bool NoiseParameter::convert_to_hsv() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.convert_to_hsv)
  return convert_to_hsv_;
}
void NoiseParameter::set_convert_to_hsv(bool value) {
  set_has_convert_to_hsv();
  convert_to_hsv_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.convert_to_hsv)
}

// optional bool convert_to_lab = 13 [default = false];
bool NoiseParameter::has_convert_to_lab() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NoiseParameter::set_has_convert_to_lab() {
  _has_bits_[0] |= 0x00000800u;
}
void NoiseParameter::clear_has_convert_to_lab() {
  _has_bits_[0] &= ~0x00000800u;
}
void NoiseParameter::clear_convert_to_lab() {
  convert_to_lab_ = false;
  clear_has_convert_to_lab();
}
bool NoiseParameter::convert_to_lab() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.convert_to_lab)
  return convert_to_lab_;
}
void NoiseParameter::set_convert_to_lab(bool value) {
  set_has_convert_to_lab();
  convert_to_lab_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.convert_to_lab)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistortionParameter::kBrightnessProbFieldNumber;
const int DistortionParameter::kBrightnessDeltaFieldNumber;
const int DistortionParameter::kContrastProbFieldNumber;
const int DistortionParameter::kContrastLowerFieldNumber;
const int DistortionParameter::kContrastUpperFieldNumber;
const int DistortionParameter::kHueProbFieldNumber;
const int DistortionParameter::kHueDeltaFieldNumber;
const int DistortionParameter::kSaturationProbFieldNumber;
const int DistortionParameter::kSaturationLowerFieldNumber;
const int DistortionParameter::kSaturationUpperFieldNumber;
const int DistortionParameter::kRandomOrderProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistortionParameter::DistortionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.DistortionParameter)
}
DistortionParameter::DistortionParameter(const DistortionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brightness_prob_, &from.brightness_prob_,
    reinterpret_cast<char*>(&random_order_prob_) -
    reinterpret_cast<char*>(&brightness_prob_) + sizeof(random_order_prob_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.DistortionParameter)
}

void DistortionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brightness_prob_, 0, reinterpret_cast<char*>(&random_order_prob_) -
    reinterpret_cast<char*>(&brightness_prob_) + sizeof(random_order_prob_));
}

DistortionParameter::~DistortionParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.DistortionParameter)
  SharedDtor();
}

void DistortionParameter::SharedDtor() {
}

void DistortionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistortionParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistortionParameter& DistortionParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistortionParameter* DistortionParameter::New(::google::protobuf::Arena* arena) const {
  DistortionParameter* n = new DistortionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistortionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.DistortionParameter)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&brightness_prob_, 0, reinterpret_cast<char*>(&saturation_prob_) -
      reinterpret_cast<char*>(&brightness_prob_) + sizeof(saturation_prob_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&saturation_lower_, 0, reinterpret_cast<char*>(&random_order_prob_) -
      reinterpret_cast<char*>(&saturation_lower_) + sizeof(random_order_prob_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistortionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.DistortionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float brightness_prob = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_brightness_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brightness_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brightness_delta = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_brightness_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brightness_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float contrast_prob = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_contrast_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contrast_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float contrast_lower = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_contrast_lower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contrast_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float contrast_upper = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_contrast_upper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contrast_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hue_prob = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_hue_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hue_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hue_delta = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_hue_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hue_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float saturation_prob = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_saturation_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &saturation_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float saturation_lower = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_saturation_lower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &saturation_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float saturation_upper = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_saturation_upper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &saturation_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_order_prob = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_random_order_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_order_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.DistortionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.DistortionParameter)
  return false;
#undef DO_
}

void DistortionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.DistortionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float brightness_prob = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->brightness_prob(), output);
  }

  // optional float brightness_delta = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->brightness_delta(), output);
  }

  // optional float contrast_prob = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->contrast_prob(), output);
  }

  // optional float contrast_lower = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->contrast_lower(), output);
  }

  // optional float contrast_upper = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->contrast_upper(), output);
  }

  // optional float hue_prob = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hue_prob(), output);
  }

  // optional float hue_delta = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hue_delta(), output);
  }

  // optional float saturation_prob = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->saturation_prob(), output);
  }

  // optional float saturation_lower = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->saturation_lower(), output);
  }

  // optional float saturation_upper = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->saturation_upper(), output);
  }

  // optional float random_order_prob = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->random_order_prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.DistortionParameter)
}

::google::protobuf::uint8* DistortionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.DistortionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float brightness_prob = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->brightness_prob(), target);
  }

  // optional float brightness_delta = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->brightness_delta(), target);
  }

  // optional float contrast_prob = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->contrast_prob(), target);
  }

  // optional float contrast_lower = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->contrast_lower(), target);
  }

  // optional float contrast_upper = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->contrast_upper(), target);
  }

  // optional float hue_prob = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hue_prob(), target);
  }

  // optional float hue_delta = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hue_delta(), target);
  }

  // optional float saturation_prob = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->saturation_prob(), target);
  }

  // optional float saturation_lower = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->saturation_lower(), target);
  }

  // optional float saturation_upper = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->saturation_upper(), target);
  }

  // optional float random_order_prob = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->random_order_prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.DistortionParameter)
  return target;
}

size_t DistortionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.DistortionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float brightness_prob = 1 [default = 0];
    if (has_brightness_prob()) {
      total_size += 1 + 4;
    }

    // optional float brightness_delta = 2 [default = 0];
    if (has_brightness_delta()) {
      total_size += 1 + 4;
    }

    // optional float contrast_prob = 3 [default = 0];
    if (has_contrast_prob()) {
      total_size += 1 + 4;
    }

    // optional float contrast_lower = 4 [default = 0];
    if (has_contrast_lower()) {
      total_size += 1 + 4;
    }

    // optional float contrast_upper = 5 [default = 0];
    if (has_contrast_upper()) {
      total_size += 1 + 4;
    }

    // optional float hue_prob = 6 [default = 0];
    if (has_hue_prob()) {
      total_size += 1 + 4;
    }

    // optional float hue_delta = 7 [default = 0];
    if (has_hue_delta()) {
      total_size += 1 + 4;
    }

    // optional float saturation_prob = 8 [default = 0];
    if (has_saturation_prob()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float saturation_lower = 9 [default = 0];
    if (has_saturation_lower()) {
      total_size += 1 + 4;
    }

    // optional float saturation_upper = 10 [default = 0];
    if (has_saturation_upper()) {
      total_size += 1 + 4;
    }

    // optional float random_order_prob = 11 [default = 0];
    if (has_random_order_prob()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistortionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.DistortionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DistortionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistortionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.DistortionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.DistortionParameter)
    MergeFrom(*source);
  }
}

void DistortionParameter::MergeFrom(const DistortionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.DistortionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      brightness_prob_ = from.brightness_prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      brightness_delta_ = from.brightness_delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      contrast_prob_ = from.contrast_prob_;
    }
    if (cached_has_bits & 0x00000008u) {
      contrast_lower_ = from.contrast_lower_;
    }
    if (cached_has_bits & 0x00000010u) {
      contrast_upper_ = from.contrast_upper_;
    }
    if (cached_has_bits & 0x00000020u) {
      hue_prob_ = from.hue_prob_;
    }
    if (cached_has_bits & 0x00000040u) {
      hue_delta_ = from.hue_delta_;
    }
    if (cached_has_bits & 0x00000080u) {
      saturation_prob_ = from.saturation_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      saturation_lower_ = from.saturation_lower_;
    }
    if (cached_has_bits & 0x00000200u) {
      saturation_upper_ = from.saturation_upper_;
    }
    if (cached_has_bits & 0x00000400u) {
      random_order_prob_ = from.random_order_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistortionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.DistortionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistortionParameter::CopyFrom(const DistortionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.DistortionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortionParameter::IsInitialized() const {
  return true;
}

void DistortionParameter::Swap(DistortionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistortionParameter::InternalSwap(DistortionParameter* other) {
  std::swap(brightness_prob_, other->brightness_prob_);
  std::swap(brightness_delta_, other->brightness_delta_);
  std::swap(contrast_prob_, other->contrast_prob_);
  std::swap(contrast_lower_, other->contrast_lower_);
  std::swap(contrast_upper_, other->contrast_upper_);
  std::swap(hue_prob_, other->hue_prob_);
  std::swap(hue_delta_, other->hue_delta_);
  std::swap(saturation_prob_, other->saturation_prob_);
  std::swap(saturation_lower_, other->saturation_lower_);
  std::swap(saturation_upper_, other->saturation_upper_);
  std::swap(random_order_prob_, other->random_order_prob_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistortionParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistortionParameter

// optional float brightness_prob = 1 [default = 0];
bool DistortionParameter::has_brightness_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistortionParameter::set_has_brightness_prob() {
  _has_bits_[0] |= 0x00000001u;
}
void DistortionParameter::clear_has_brightness_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistortionParameter::clear_brightness_prob() {
  brightness_prob_ = 0;
  clear_has_brightness_prob();
}
float DistortionParameter::brightness_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.brightness_prob)
  return brightness_prob_;
}
void DistortionParameter::set_brightness_prob(float value) {
  set_has_brightness_prob();
  brightness_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.brightness_prob)
}

// optional float brightness_delta = 2 [default = 0];
bool DistortionParameter::has_brightness_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistortionParameter::set_has_brightness_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void DistortionParameter::clear_has_brightness_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistortionParameter::clear_brightness_delta() {
  brightness_delta_ = 0;
  clear_has_brightness_delta();
}
float DistortionParameter::brightness_delta() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.brightness_delta)
  return brightness_delta_;
}
void DistortionParameter::set_brightness_delta(float value) {
  set_has_brightness_delta();
  brightness_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.brightness_delta)
}

// optional float contrast_prob = 3 [default = 0];
bool DistortionParameter::has_contrast_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistortionParameter::set_has_contrast_prob() {
  _has_bits_[0] |= 0x00000004u;
}
void DistortionParameter::clear_has_contrast_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistortionParameter::clear_contrast_prob() {
  contrast_prob_ = 0;
  clear_has_contrast_prob();
}
float DistortionParameter::contrast_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.contrast_prob)
  return contrast_prob_;
}
void DistortionParameter::set_contrast_prob(float value) {
  set_has_contrast_prob();
  contrast_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.contrast_prob)
}

// optional float contrast_lower = 4 [default = 0];
bool DistortionParameter::has_contrast_lower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DistortionParameter::set_has_contrast_lower() {
  _has_bits_[0] |= 0x00000008u;
}
void DistortionParameter::clear_has_contrast_lower() {
  _has_bits_[0] &= ~0x00000008u;
}
void DistortionParameter::clear_contrast_lower() {
  contrast_lower_ = 0;
  clear_has_contrast_lower();
}
float DistortionParameter::contrast_lower() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.contrast_lower)
  return contrast_lower_;
}
void DistortionParameter::set_contrast_lower(float value) {
  set_has_contrast_lower();
  contrast_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.contrast_lower)
}

// optional float contrast_upper = 5 [default = 0];
bool DistortionParameter::has_contrast_upper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DistortionParameter::set_has_contrast_upper() {
  _has_bits_[0] |= 0x00000010u;
}
void DistortionParameter::clear_has_contrast_upper() {
  _has_bits_[0] &= ~0x00000010u;
}
void DistortionParameter::clear_contrast_upper() {
  contrast_upper_ = 0;
  clear_has_contrast_upper();
}
float DistortionParameter::contrast_upper() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.contrast_upper)
  return contrast_upper_;
}
void DistortionParameter::set_contrast_upper(float value) {
  set_has_contrast_upper();
  contrast_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.contrast_upper)
}

// optional float hue_prob = 6 [default = 0];
bool DistortionParameter::has_hue_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DistortionParameter::set_has_hue_prob() {
  _has_bits_[0] |= 0x00000020u;
}
void DistortionParameter::clear_has_hue_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
void DistortionParameter::clear_hue_prob() {
  hue_prob_ = 0;
  clear_has_hue_prob();
}
float DistortionParameter::hue_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.hue_prob)
  return hue_prob_;
}
void DistortionParameter::set_hue_prob(float value) {
  set_has_hue_prob();
  hue_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.hue_prob)
}

// optional float hue_delta = 7 [default = 0];
bool DistortionParameter::has_hue_delta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DistortionParameter::set_has_hue_delta() {
  _has_bits_[0] |= 0x00000040u;
}
void DistortionParameter::clear_has_hue_delta() {
  _has_bits_[0] &= ~0x00000040u;
}
void DistortionParameter::clear_hue_delta() {
  hue_delta_ = 0;
  clear_has_hue_delta();
}
float DistortionParameter::hue_delta() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.hue_delta)
  return hue_delta_;
}
void DistortionParameter::set_hue_delta(float value) {
  set_has_hue_delta();
  hue_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.hue_delta)
}

// optional float saturation_prob = 8 [default = 0];
bool DistortionParameter::has_saturation_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DistortionParameter::set_has_saturation_prob() {
  _has_bits_[0] |= 0x00000080u;
}
void DistortionParameter::clear_has_saturation_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
void DistortionParameter::clear_saturation_prob() {
  saturation_prob_ = 0;
  clear_has_saturation_prob();
}
float DistortionParameter::saturation_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.saturation_prob)
  return saturation_prob_;
}
void DistortionParameter::set_saturation_prob(float value) {
  set_has_saturation_prob();
  saturation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.saturation_prob)
}

// optional float saturation_lower = 9 [default = 0];
bool DistortionParameter::has_saturation_lower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DistortionParameter::set_has_saturation_lower() {
  _has_bits_[0] |= 0x00000100u;
}
void DistortionParameter::clear_has_saturation_lower() {
  _has_bits_[0] &= ~0x00000100u;
}
void DistortionParameter::clear_saturation_lower() {
  saturation_lower_ = 0;
  clear_has_saturation_lower();
}
float DistortionParameter::saturation_lower() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.saturation_lower)
  return saturation_lower_;
}
void DistortionParameter::set_saturation_lower(float value) {
  set_has_saturation_lower();
  saturation_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.saturation_lower)
}

// optional float saturation_upper = 10 [default = 0];
bool DistortionParameter::has_saturation_upper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DistortionParameter::set_has_saturation_upper() {
  _has_bits_[0] |= 0x00000200u;
}
void DistortionParameter::clear_has_saturation_upper() {
  _has_bits_[0] &= ~0x00000200u;
}
void DistortionParameter::clear_saturation_upper() {
  saturation_upper_ = 0;
  clear_has_saturation_upper();
}
float DistortionParameter::saturation_upper() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.saturation_upper)
  return saturation_upper_;
}
void DistortionParameter::set_saturation_upper(float value) {
  set_has_saturation_upper();
  saturation_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.saturation_upper)
}

// optional float random_order_prob = 11 [default = 0];
bool DistortionParameter::has_random_order_prob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DistortionParameter::set_has_random_order_prob() {
  _has_bits_[0] |= 0x00000400u;
}
void DistortionParameter::clear_has_random_order_prob() {
  _has_bits_[0] &= ~0x00000400u;
}
void DistortionParameter::clear_random_order_prob() {
  random_order_prob_ = 0;
  clear_has_random_order_prob();
}
float DistortionParameter::random_order_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.random_order_prob)
  return random_order_prob_;
}
void DistortionParameter::set_random_order_prob(float value) {
  set_has_random_order_prob();
  random_order_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.random_order_prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataReaderParameter::kScaleLowerLimitFieldNumber;
const int FCNImageDataReaderParameter::kScaleUpperLimitFieldNumber;
const int FCNImageDataReaderParameter::kRoiCenterPointFieldNumber;
const int FCNImageDataReaderParameter::kStandardLenPoint1FieldNumber;
const int FCNImageDataReaderParameter::kStandardLenPoint2FieldNumber;
const int FCNImageDataReaderParameter::kStandardLenFieldNumber;
const int FCNImageDataReaderParameter::kMeanRFieldNumber;
const int FCNImageDataReaderParameter::kMeanGFieldNumber;
const int FCNImageDataReaderParameter::kMeanBFieldNumber;
const int FCNImageDataReaderParameter::kRandomRotateDegreeFieldNumber;
const int FCNImageDataReaderParameter::kCoordJitterFieldNumber;
const int FCNImageDataReaderParameter::kRandomRoiProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataReaderParameter::FCNImageDataReaderParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataReaderParameter)
}
FCNImageDataReaderParameter::FCNImageDataReaderParameter(const FCNImageDataReaderParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roi_center_point_, &from.roi_center_point_,
    reinterpret_cast<char*>(&scale_upper_limit_) -
    reinterpret_cast<char*>(&roi_center_point_) + sizeof(scale_upper_limit_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataReaderParameter)
}

void FCNImageDataReaderParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&roi_center_point_, 0, reinterpret_cast<char*>(&random_roi_prob_) -
    reinterpret_cast<char*>(&roi_center_point_) + sizeof(random_roi_prob_));
  scale_lower_limit_ = 1;
  scale_upper_limit_ = 1;
}

FCNImageDataReaderParameter::~FCNImageDataReaderParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  SharedDtor();
}

void FCNImageDataReaderParameter::SharedDtor() {
}

void FCNImageDataReaderParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataReaderParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataReaderParameter& FCNImageDataReaderParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataReaderParameter* FCNImageDataReaderParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataReaderParameter* n = new FCNImageDataReaderParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataReaderParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&roi_center_point_, 0, reinterpret_cast<char*>(&random_rotate_degree_) -
      reinterpret_cast<char*>(&roi_center_point_) + sizeof(random_rotate_degree_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&coord_jitter_, 0, reinterpret_cast<char*>(&random_roi_prob_) -
      reinterpret_cast<char*>(&coord_jitter_) + sizeof(random_roi_prob_));
    scale_lower_limit_ = 1;
    scale_upper_limit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataReaderParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale_lower_limit = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_scale_lower_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_lower_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_upper_limit = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale_upper_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_upper_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roi_center_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roi_center_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roi_center_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 standard_len_point_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_standard_len_point_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standard_len_point_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 standard_len_point_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_standard_len_point_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standard_len_point_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 standard_len = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_standard_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standard_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_r = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_mean_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_g = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_mean_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_b = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_mean_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_rotate_degree = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_random_rotate_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_rotate_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float coord_jitter = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_coord_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coord_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_roi_prob = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_random_roi_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_roi_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  return false;
#undef DO_
}

void FCNImageDataReaderParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale_lower_limit = 1 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_lower_limit(), output);
  }

  // optional float scale_upper_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale_upper_limit(), output);
  }

  // optional uint32 roi_center_point = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roi_center_point(), output);
  }

  // optional uint32 standard_len_point_1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->standard_len_point_1(), output);
  }

  // optional uint32 standard_len_point_2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->standard_len_point_2(), output);
  }

  // optional uint32 standard_len = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->standard_len(), output);
  }

  // optional float mean_r = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mean_r(), output);
  }

  // optional float mean_g = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mean_g(), output);
  }

  // optional float mean_b = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mean_b(), output);
  }

  // optional float random_rotate_degree = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->random_rotate_degree(), output);
  }

  // optional float coord_jitter = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->coord_jitter(), output);
  }

  // optional float random_roi_prob = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->random_roi_prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataReaderParameter)
}

::google::protobuf::uint8* FCNImageDataReaderParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale_lower_limit = 1 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_lower_limit(), target);
  }

  // optional float scale_upper_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale_upper_limit(), target);
  }

  // optional uint32 roi_center_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roi_center_point(), target);
  }

  // optional uint32 standard_len_point_1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->standard_len_point_1(), target);
  }

  // optional uint32 standard_len_point_2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->standard_len_point_2(), target);
  }

  // optional uint32 standard_len = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->standard_len(), target);
  }

  // optional float mean_r = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mean_r(), target);
  }

  // optional float mean_g = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mean_g(), target);
  }

  // optional float mean_b = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mean_b(), target);
  }

  // optional float random_rotate_degree = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->random_rotate_degree(), target);
  }

  // optional float coord_jitter = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->coord_jitter(), target);
  }

  // optional float random_roi_prob = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->random_roi_prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  return target;
}

size_t FCNImageDataReaderParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 roi_center_point = 3;
    if (has_roi_center_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roi_center_point());
    }

    // optional uint32 standard_len_point_1 = 4;
    if (has_standard_len_point_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standard_len_point_1());
    }

    // optional uint32 standard_len_point_2 = 5;
    if (has_standard_len_point_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standard_len_point_2());
    }

    // optional uint32 standard_len = 6;
    if (has_standard_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standard_len());
    }

    // optional float mean_r = 7 [default = 0];
    if (has_mean_r()) {
      total_size += 1 + 4;
    }

    // optional float mean_g = 8 [default = 0];
    if (has_mean_g()) {
      total_size += 1 + 4;
    }

    // optional float mean_b = 9 [default = 0];
    if (has_mean_b()) {
      total_size += 1 + 4;
    }

    // optional float random_rotate_degree = 10 [default = 0];
    if (has_random_rotate_degree()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float coord_jitter = 11 [default = 0];
    if (has_coord_jitter()) {
      total_size += 1 + 4;
    }

    // optional float random_roi_prob = 12 [default = 0];
    if (has_random_roi_prob()) {
      total_size += 1 + 4;
    }

    // optional float scale_lower_limit = 1 [default = 1];
    if (has_scale_lower_limit()) {
      total_size += 1 + 4;
    }

    // optional float scale_upper_limit = 2 [default = 1];
    if (has_scale_upper_limit()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataReaderParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataReaderParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataReaderParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataReaderParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataReaderParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataReaderParameter::MergeFrom(const FCNImageDataReaderParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      roi_center_point_ = from.roi_center_point_;
    }
    if (cached_has_bits & 0x00000002u) {
      standard_len_point_1_ = from.standard_len_point_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      standard_len_point_2_ = from.standard_len_point_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      standard_len_ = from.standard_len_;
    }
    if (cached_has_bits & 0x00000010u) {
      mean_r_ = from.mean_r_;
    }
    if (cached_has_bits & 0x00000020u) {
      mean_g_ = from.mean_g_;
    }
    if (cached_has_bits & 0x00000040u) {
      mean_b_ = from.mean_b_;
    }
    if (cached_has_bits & 0x00000080u) {
      random_rotate_degree_ = from.random_rotate_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      coord_jitter_ = from.coord_jitter_;
    }
    if (cached_has_bits & 0x00000200u) {
      random_roi_prob_ = from.random_roi_prob_;
    }
    if (cached_has_bits & 0x00000400u) {
      scale_lower_limit_ = from.scale_lower_limit_;
    }
    if (cached_has_bits & 0x00000800u) {
      scale_upper_limit_ = from.scale_upper_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCNImageDataReaderParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataReaderParameter::CopyFrom(const FCNImageDataReaderParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataReaderParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataReaderParameter::IsInitialized() const {
  return true;
}

void FCNImageDataReaderParameter::Swap(FCNImageDataReaderParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataReaderParameter::InternalSwap(FCNImageDataReaderParameter* other) {
  std::swap(roi_center_point_, other->roi_center_point_);
  std::swap(standard_len_point_1_, other->standard_len_point_1_);
  std::swap(standard_len_point_2_, other->standard_len_point_2_);
  std::swap(standard_len_, other->standard_len_);
  std::swap(mean_r_, other->mean_r_);
  std::swap(mean_g_, other->mean_g_);
  std::swap(mean_b_, other->mean_b_);
  std::swap(random_rotate_degree_, other->random_rotate_degree_);
  std::swap(coord_jitter_, other->coord_jitter_);
  std::swap(random_roi_prob_, other->random_roi_prob_);
  std::swap(scale_lower_limit_, other->scale_lower_limit_);
  std::swap(scale_upper_limit_, other->scale_upper_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataReaderParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataReaderParameter

// optional float scale_lower_limit = 1 [default = 1];
bool FCNImageDataReaderParameter::has_scale_lower_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FCNImageDataReaderParameter::set_has_scale_lower_limit() {
  _has_bits_[0] |= 0x00000400u;
}
void FCNImageDataReaderParameter::clear_has_scale_lower_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
void FCNImageDataReaderParameter::clear_scale_lower_limit() {
  scale_lower_limit_ = 1;
  clear_has_scale_lower_limit();
}
float FCNImageDataReaderParameter::scale_lower_limit() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_lower_limit)
  return scale_lower_limit_;
}
void FCNImageDataReaderParameter::set_scale_lower_limit(float value) {
  set_has_scale_lower_limit();
  scale_lower_limit_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_lower_limit)
}

// optional float scale_upper_limit = 2 [default = 1];
bool FCNImageDataReaderParameter::has_scale_upper_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FCNImageDataReaderParameter::set_has_scale_upper_limit() {
  _has_bits_[0] |= 0x00000800u;
}
void FCNImageDataReaderParameter::clear_has_scale_upper_limit() {
  _has_bits_[0] &= ~0x00000800u;
}
void FCNImageDataReaderParameter::clear_scale_upper_limit() {
  scale_upper_limit_ = 1;
  clear_has_scale_upper_limit();
}
float FCNImageDataReaderParameter::scale_upper_limit() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_upper_limit)
  return scale_upper_limit_;
}
void FCNImageDataReaderParameter::set_scale_upper_limit(float value) {
  set_has_scale_upper_limit();
  scale_upper_limit_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_upper_limit)
}

// optional uint32 roi_center_point = 3;
bool FCNImageDataReaderParameter::has_roi_center_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataReaderParameter::set_has_roi_center_point() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataReaderParameter::clear_has_roi_center_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataReaderParameter::clear_roi_center_point() {
  roi_center_point_ = 0u;
  clear_has_roi_center_point();
}
::google::protobuf::uint32 FCNImageDataReaderParameter::roi_center_point() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.roi_center_point)
  return roi_center_point_;
}
void FCNImageDataReaderParameter::set_roi_center_point(::google::protobuf::uint32 value) {
  set_has_roi_center_point();
  roi_center_point_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.roi_center_point)
}

// optional uint32 standard_len_point_1 = 4;
bool FCNImageDataReaderParameter::has_standard_len_point_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataReaderParameter::set_has_standard_len_point_1() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataReaderParameter::clear_has_standard_len_point_1() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataReaderParameter::clear_standard_len_point_1() {
  standard_len_point_1_ = 0u;
  clear_has_standard_len_point_1();
}
::google::protobuf::uint32 FCNImageDataReaderParameter::standard_len_point_1() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_1)
  return standard_len_point_1_;
}
void FCNImageDataReaderParameter::set_standard_len_point_1(::google::protobuf::uint32 value) {
  set_has_standard_len_point_1();
  standard_len_point_1_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_1)
}

// optional uint32 standard_len_point_2 = 5;
bool FCNImageDataReaderParameter::has_standard_len_point_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataReaderParameter::set_has_standard_len_point_2() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataReaderParameter::clear_has_standard_len_point_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataReaderParameter::clear_standard_len_point_2() {
  standard_len_point_2_ = 0u;
  clear_has_standard_len_point_2();
}
::google::protobuf::uint32 FCNImageDataReaderParameter::standard_len_point_2() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_2)
  return standard_len_point_2_;
}
void FCNImageDataReaderParameter::set_standard_len_point_2(::google::protobuf::uint32 value) {
  set_has_standard_len_point_2();
  standard_len_point_2_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_2)
}

// optional uint32 standard_len = 6;
bool FCNImageDataReaderParameter::has_standard_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNImageDataReaderParameter::set_has_standard_len() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNImageDataReaderParameter::clear_has_standard_len() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNImageDataReaderParameter::clear_standard_len() {
  standard_len_ = 0u;
  clear_has_standard_len();
}
::google::protobuf::uint32 FCNImageDataReaderParameter::standard_len() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len)
  return standard_len_;
}
void FCNImageDataReaderParameter::set_standard_len(::google::protobuf::uint32 value) {
  set_has_standard_len();
  standard_len_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len)
}

// optional float mean_r = 7 [default = 0];
bool FCNImageDataReaderParameter::has_mean_r() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNImageDataReaderParameter::set_has_mean_r() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNImageDataReaderParameter::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNImageDataReaderParameter::clear_mean_r() {
  mean_r_ = 0;
  clear_has_mean_r();
}
float FCNImageDataReaderParameter::mean_r() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_r)
  return mean_r_;
}
void FCNImageDataReaderParameter::set_mean_r(float value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_r)
}

// optional float mean_g = 8 [default = 0];
bool FCNImageDataReaderParameter::has_mean_g() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNImageDataReaderParameter::set_has_mean_g() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNImageDataReaderParameter::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNImageDataReaderParameter::clear_mean_g() {
  mean_g_ = 0;
  clear_has_mean_g();
}
float FCNImageDataReaderParameter::mean_g() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_g)
  return mean_g_;
}
void FCNImageDataReaderParameter::set_mean_g(float value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_g)
}

// optional float mean_b = 9 [default = 0];
bool FCNImageDataReaderParameter::has_mean_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FCNImageDataReaderParameter::set_has_mean_b() {
  _has_bits_[0] |= 0x00000040u;
}
void FCNImageDataReaderParameter::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000040u;
}
void FCNImageDataReaderParameter::clear_mean_b() {
  mean_b_ = 0;
  clear_has_mean_b();
}
float FCNImageDataReaderParameter::mean_b() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_b)
  return mean_b_;
}
void FCNImageDataReaderParameter::set_mean_b(float value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_b)
}

// optional float random_rotate_degree = 10 [default = 0];
bool FCNImageDataReaderParameter::has_random_rotate_degree() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FCNImageDataReaderParameter::set_has_random_rotate_degree() {
  _has_bits_[0] |= 0x00000080u;
}
void FCNImageDataReaderParameter::clear_has_random_rotate_degree() {
  _has_bits_[0] &= ~0x00000080u;
}
void FCNImageDataReaderParameter::clear_random_rotate_degree() {
  random_rotate_degree_ = 0;
  clear_has_random_rotate_degree();
}
float FCNImageDataReaderParameter::random_rotate_degree() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_rotate_degree)
  return random_rotate_degree_;
}
void FCNImageDataReaderParameter::set_random_rotate_degree(float value) {
  set_has_random_rotate_degree();
  random_rotate_degree_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_rotate_degree)
}

// optional float coord_jitter = 11 [default = 0];
bool FCNImageDataReaderParameter::has_coord_jitter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FCNImageDataReaderParameter::set_has_coord_jitter() {
  _has_bits_[0] |= 0x00000100u;
}
void FCNImageDataReaderParameter::clear_has_coord_jitter() {
  _has_bits_[0] &= ~0x00000100u;
}
void FCNImageDataReaderParameter::clear_coord_jitter() {
  coord_jitter_ = 0;
  clear_has_coord_jitter();
}
float FCNImageDataReaderParameter::coord_jitter() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.coord_jitter)
  return coord_jitter_;
}
void FCNImageDataReaderParameter::set_coord_jitter(float value) {
  set_has_coord_jitter();
  coord_jitter_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.coord_jitter)
}

// optional float random_roi_prob = 12 [default = 0];
bool FCNImageDataReaderParameter::has_random_roi_prob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FCNImageDataReaderParameter::set_has_random_roi_prob() {
  _has_bits_[0] |= 0x00000200u;
}
void FCNImageDataReaderParameter::clear_has_random_roi_prob() {
  _has_bits_[0] &= ~0x00000200u;
}
void FCNImageDataReaderParameter::clear_random_roi_prob() {
  random_roi_prob_ = 0;
  clear_has_random_roi_prob();
}
float FCNImageDataReaderParameter::random_roi_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_roi_prob)
  return random_roi_prob_;
}
void FCNImageDataReaderParameter::set_random_roi_prob(float value) {
  set_has_random_roi_prob();
  random_roi_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_roi_prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataCommonParameter::kScaleChooseStrategyFieldNumber;
const int FCNImageDataCommonParameter::kScaleBaseFieldNumber;
const int FCNImageDataCommonParameter::kScalePositiveUpperBounderFieldNumber;
const int FCNImageDataCommonParameter::kScalePositiveLowerBounderFieldNumber;
const int FCNImageDataCommonParameter::kScaleIgnoreUpperBounderFieldNumber;
const int FCNImageDataCommonParameter::kScaleIgnoreLowerBounderFieldNumber;
const int FCNImageDataCommonParameter::kInputHeightFieldNumber;
const int FCNImageDataCommonParameter::kInputWidthFieldNumber;
const int FCNImageDataCommonParameter::kHeatMapAFieldNumber;
const int FCNImageDataCommonParameter::kHeatMapBFieldNumber;
const int FCNImageDataCommonParameter::kOutHeightFieldNumber;
const int FCNImageDataCommonParameter::kOutWidthFieldNumber;
const int FCNImageDataCommonParameter::kNumAnnoPointsPerInstanceFieldNumber;
const int FCNImageDataCommonParameter::kSingleThreadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataCommonParameter::FCNImageDataCommonParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataCommonParameter)
}
FCNImageDataCommonParameter::FCNImageDataCommonParameter(const FCNImageDataCommonParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      scale_base_(from.scale_base_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_height_, &from.input_height_,
    reinterpret_cast<char*>(&scale_ignore_lower_bounder_) -
    reinterpret_cast<char*>(&input_height_) + sizeof(scale_ignore_lower_bounder_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataCommonParameter)
}

void FCNImageDataCommonParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&input_height_, 0, reinterpret_cast<char*>(&num_anno_points_per_instance_) -
    reinterpret_cast<char*>(&input_height_) + sizeof(num_anno_points_per_instance_));
  scale_choose_strategy_ = 1;
  single_thread_ = true;
  scale_positive_upper_bounder_ = 1.2f;
  scale_positive_lower_bounder_ = 0.8f;
  scale_ignore_upper_bounder_ = 1.2f;
  scale_ignore_lower_bounder_ = 0.8f;
}

FCNImageDataCommonParameter::~FCNImageDataCommonParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  SharedDtor();
}

void FCNImageDataCommonParameter::SharedDtor() {
}

void FCNImageDataCommonParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataCommonParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataCommonParameter& FCNImageDataCommonParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataCommonParameter* FCNImageDataCommonParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataCommonParameter* n = new FCNImageDataCommonParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataCommonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  scale_base_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&input_height_, 0, reinterpret_cast<char*>(&num_anno_points_per_instance_) -
      reinterpret_cast<char*>(&input_height_) + sizeof(num_anno_points_per_instance_));
    scale_choose_strategy_ = 1;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    single_thread_ = true;
    scale_positive_upper_bounder_ = 1.2f;
    scale_positive_lower_bounder_ = 0.8f;
    scale_ignore_upper_bounder_ = 1.2f;
    scale_ignore_lower_bounder_ = 0.8f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataCommonParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy_IsValid(value)) {
            set_scale_choose_strategy(static_cast< ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scale_base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_scale_base())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale_base())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_height = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_input_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_width = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_input_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heat_map_a = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_heat_map_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_map_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heat_map_b = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_heat_map_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_map_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 out_height = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_out_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 out_width = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_out_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_anno_points_per_instance = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_num_anno_points_per_instance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_anno_points_per_instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool single_thread = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_single_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_positive_upper_bounder = 12 [default = 1.2];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_scale_positive_upper_bounder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_positive_upper_bounder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_positive_lower_bounder = 13 [default = 0.8];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_scale_positive_lower_bounder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_positive_lower_bounder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_ignore_upper_bounder = 14 [default = 1.2];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_scale_ignore_upper_bounder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_ignore_upper_bounder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_ignore_lower_bounder = 15 [default = 0.8];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_scale_ignore_lower_bounder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_ignore_lower_bounder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  return false;
#undef DO_
}

void FCNImageDataCommonParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scale_choose_strategy(), output);
  }

  // repeated float scale_base = 2;
  for (int i = 0, n = this->scale_base_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->scale_base(i), output);
  }

  // optional uint32 input_height = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->input_height(), output);
  }

  // optional uint32 input_width = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->input_width(), output);
  }

  // optional uint32 heat_map_a = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heat_map_a(), output);
  }

  // optional uint32 heat_map_b = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heat_map_b(), output);
  }

  // optional uint32 out_height = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->out_height(), output);
  }

  // optional uint32 out_width = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->out_width(), output);
  }

  // optional uint32 num_anno_points_per_instance = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_anno_points_per_instance(), output);
  }

  // optional bool single_thread = 11 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->single_thread(), output);
  }

  // optional float scale_positive_upper_bounder = 12 [default = 1.2];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->scale_positive_upper_bounder(), output);
  }

  // optional float scale_positive_lower_bounder = 13 [default = 0.8];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->scale_positive_lower_bounder(), output);
  }

  // optional float scale_ignore_upper_bounder = 14 [default = 1.2];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->scale_ignore_upper_bounder(), output);
  }

  // optional float scale_ignore_lower_bounder = 15 [default = 0.8];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->scale_ignore_lower_bounder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataCommonParameter)
}

::google::protobuf::uint8* FCNImageDataCommonParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scale_choose_strategy(), target);
  }

  // repeated float scale_base = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->scale_base_, target);

  // optional uint32 input_height = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->input_height(), target);
  }

  // optional uint32 input_width = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->input_width(), target);
  }

  // optional uint32 heat_map_a = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heat_map_a(), target);
  }

  // optional uint32 heat_map_b = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heat_map_b(), target);
  }

  // optional uint32 out_height = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->out_height(), target);
  }

  // optional uint32 out_width = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->out_width(), target);
  }

  // optional uint32 num_anno_points_per_instance = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_anno_points_per_instance(), target);
  }

  // optional bool single_thread = 11 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->single_thread(), target);
  }

  // optional float scale_positive_upper_bounder = 12 [default = 1.2];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->scale_positive_upper_bounder(), target);
  }

  // optional float scale_positive_lower_bounder = 13 [default = 0.8];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->scale_positive_lower_bounder(), target);
  }

  // optional float scale_ignore_upper_bounder = 14 [default = 1.2];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->scale_ignore_upper_bounder(), target);
  }

  // optional float scale_ignore_lower_bounder = 15 [default = 0.8];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->scale_ignore_lower_bounder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  return target;
}

size_t FCNImageDataCommonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float scale_base = 2;
  {
    unsigned int count = this->scale_base_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scale_base_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 input_height = 3 [default = 0];
    if (has_input_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_height());
    }

    // optional uint32 input_width = 4 [default = 0];
    if (has_input_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_width());
    }

    // optional uint32 heat_map_a = 5 [default = 0];
    if (has_heat_map_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat_map_a());
    }

    // optional uint32 heat_map_b = 6 [default = 0];
    if (has_heat_map_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat_map_b());
    }

    // optional uint32 out_height = 7 [default = 0];
    if (has_out_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_height());
    }

    // optional uint32 out_width = 8 [default = 0];
    if (has_out_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_width());
    }

    // optional uint32 num_anno_points_per_instance = 9;
    if (has_num_anno_points_per_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_anno_points_per_instance());
    }

    // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
    if (has_scale_choose_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scale_choose_strategy());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool single_thread = 11 [default = true];
    if (has_single_thread()) {
      total_size += 1 + 1;
    }

    // optional float scale_positive_upper_bounder = 12 [default = 1.2];
    if (has_scale_positive_upper_bounder()) {
      total_size += 1 + 4;
    }

    // optional float scale_positive_lower_bounder = 13 [default = 0.8];
    if (has_scale_positive_lower_bounder()) {
      total_size += 1 + 4;
    }

    // optional float scale_ignore_upper_bounder = 14 [default = 1.2];
    if (has_scale_ignore_upper_bounder()) {
      total_size += 1 + 4;
    }

    // optional float scale_ignore_lower_bounder = 15 [default = 0.8];
    if (has_scale_ignore_lower_bounder()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataCommonParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataCommonParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataCommonParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataCommonParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataCommonParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataCommonParameter::MergeFrom(const FCNImageDataCommonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scale_base_.MergeFrom(from.scale_base_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      input_height_ = from.input_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      input_width_ = from.input_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      heat_map_a_ = from.heat_map_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      heat_map_b_ = from.heat_map_b_;
    }
    if (cached_has_bits & 0x00000010u) {
      out_height_ = from.out_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      out_width_ = from.out_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_anno_points_per_instance_ = from.num_anno_points_per_instance_;
    }
    if (cached_has_bits & 0x00000080u) {
      scale_choose_strategy_ = from.scale_choose_strategy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      single_thread_ = from.single_thread_;
    }
    if (cached_has_bits & 0x00000200u) {
      scale_positive_upper_bounder_ = from.scale_positive_upper_bounder_;
    }
    if (cached_has_bits & 0x00000400u) {
      scale_positive_lower_bounder_ = from.scale_positive_lower_bounder_;
    }
    if (cached_has_bits & 0x00000800u) {
      scale_ignore_upper_bounder_ = from.scale_ignore_upper_bounder_;
    }
    if (cached_has_bits & 0x00001000u) {
      scale_ignore_lower_bounder_ = from.scale_ignore_lower_bounder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCNImageDataCommonParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataCommonParameter::CopyFrom(const FCNImageDataCommonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataCommonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataCommonParameter::IsInitialized() const {
  return true;
}

void FCNImageDataCommonParameter::Swap(FCNImageDataCommonParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataCommonParameter::InternalSwap(FCNImageDataCommonParameter* other) {
  scale_base_.InternalSwap(&other->scale_base_);
  std::swap(input_height_, other->input_height_);
  std::swap(input_width_, other->input_width_);
  std::swap(heat_map_a_, other->heat_map_a_);
  std::swap(heat_map_b_, other->heat_map_b_);
  std::swap(out_height_, other->out_height_);
  std::swap(out_width_, other->out_width_);
  std::swap(num_anno_points_per_instance_, other->num_anno_points_per_instance_);
  std::swap(scale_choose_strategy_, other->scale_choose_strategy_);
  std::swap(single_thread_, other->single_thread_);
  std::swap(scale_positive_upper_bounder_, other->scale_positive_upper_bounder_);
  std::swap(scale_positive_lower_bounder_, other->scale_positive_lower_bounder_);
  std::swap(scale_ignore_upper_bounder_, other->scale_ignore_upper_bounder_);
  std::swap(scale_ignore_lower_bounder_, other->scale_ignore_lower_bounder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataCommonParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataCommonParameter

// optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
bool FCNImageDataCommonParameter::has_scale_choose_strategy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FCNImageDataCommonParameter::set_has_scale_choose_strategy() {
  _has_bits_[0] |= 0x00000080u;
}
void FCNImageDataCommonParameter::clear_has_scale_choose_strategy() {
  _has_bits_[0] &= ~0x00000080u;
}
void FCNImageDataCommonParameter::clear_scale_choose_strategy() {
  scale_choose_strategy_ = 1;
  clear_has_scale_choose_strategy();
}
::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter::scale_choose_strategy() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_choose_strategy)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy >(scale_choose_strategy_);
}
void FCNImageDataCommonParameter::set_scale_choose_strategy(::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy value) {
  assert(::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy_IsValid(value));
  set_has_scale_choose_strategy();
  scale_choose_strategy_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_choose_strategy)
}

// repeated float scale_base = 2;
int FCNImageDataCommonParameter::scale_base_size() const {
  return scale_base_.size();
}
void FCNImageDataCommonParameter::clear_scale_base() {
  scale_base_.Clear();
}
float FCNImageDataCommonParameter::scale_base(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
  return scale_base_.Get(index);
}
void FCNImageDataCommonParameter::set_scale_base(int index, float value) {
  scale_base_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
}
void FCNImageDataCommonParameter::add_scale_base(float value) {
  scale_base_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
}
const ::google::protobuf::RepeatedField< float >&
FCNImageDataCommonParameter::scale_base() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
  return scale_base_;
}
::google::protobuf::RepeatedField< float >*
FCNImageDataCommonParameter::mutable_scale_base() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
  return &scale_base_;
}

// optional float scale_positive_upper_bounder = 12 [default = 1.2];
bool FCNImageDataCommonParameter::has_scale_positive_upper_bounder() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FCNImageDataCommonParameter::set_has_scale_positive_upper_bounder() {
  _has_bits_[0] |= 0x00000200u;
}
void FCNImageDataCommonParameter::clear_has_scale_positive_upper_bounder() {
  _has_bits_[0] &= ~0x00000200u;
}
void FCNImageDataCommonParameter::clear_scale_positive_upper_bounder() {
  scale_positive_upper_bounder_ = 1.2f;
  clear_has_scale_positive_upper_bounder();
}
float FCNImageDataCommonParameter::scale_positive_upper_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_upper_bounder)
  return scale_positive_upper_bounder_;
}
void FCNImageDataCommonParameter::set_scale_positive_upper_bounder(float value) {
  set_has_scale_positive_upper_bounder();
  scale_positive_upper_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_upper_bounder)
}

// optional float scale_positive_lower_bounder = 13 [default = 0.8];
bool FCNImageDataCommonParameter::has_scale_positive_lower_bounder() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FCNImageDataCommonParameter::set_has_scale_positive_lower_bounder() {
  _has_bits_[0] |= 0x00000400u;
}
void FCNImageDataCommonParameter::clear_has_scale_positive_lower_bounder() {
  _has_bits_[0] &= ~0x00000400u;
}
void FCNImageDataCommonParameter::clear_scale_positive_lower_bounder() {
  scale_positive_lower_bounder_ = 0.8f;
  clear_has_scale_positive_lower_bounder();
}
float FCNImageDataCommonParameter::scale_positive_lower_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_lower_bounder)
  return scale_positive_lower_bounder_;
}
void FCNImageDataCommonParameter::set_scale_positive_lower_bounder(float value) {
  set_has_scale_positive_lower_bounder();
  scale_positive_lower_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_lower_bounder)
}

// optional float scale_ignore_upper_bounder = 14 [default = 1.2];
bool FCNImageDataCommonParameter::has_scale_ignore_upper_bounder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FCNImageDataCommonParameter::set_has_scale_ignore_upper_bounder() {
  _has_bits_[0] |= 0x00000800u;
}
void FCNImageDataCommonParameter::clear_has_scale_ignore_upper_bounder() {
  _has_bits_[0] &= ~0x00000800u;
}
void FCNImageDataCommonParameter::clear_scale_ignore_upper_bounder() {
  scale_ignore_upper_bounder_ = 1.2f;
  clear_has_scale_ignore_upper_bounder();
}
float FCNImageDataCommonParameter::scale_ignore_upper_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_upper_bounder)
  return scale_ignore_upper_bounder_;
}
void FCNImageDataCommonParameter::set_scale_ignore_upper_bounder(float value) {
  set_has_scale_ignore_upper_bounder();
  scale_ignore_upper_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_upper_bounder)
}

// optional float scale_ignore_lower_bounder = 15 [default = 0.8];
bool FCNImageDataCommonParameter::has_scale_ignore_lower_bounder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FCNImageDataCommonParameter::set_has_scale_ignore_lower_bounder() {
  _has_bits_[0] |= 0x00001000u;
}
void FCNImageDataCommonParameter::clear_has_scale_ignore_lower_bounder() {
  _has_bits_[0] &= ~0x00001000u;
}
void FCNImageDataCommonParameter::clear_scale_ignore_lower_bounder() {
  scale_ignore_lower_bounder_ = 0.8f;
  clear_has_scale_ignore_lower_bounder();
}
float FCNImageDataCommonParameter::scale_ignore_lower_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_lower_bounder)
  return scale_ignore_lower_bounder_;
}
void FCNImageDataCommonParameter::set_scale_ignore_lower_bounder(float value) {
  set_has_scale_ignore_lower_bounder();
  scale_ignore_lower_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_lower_bounder)
}

// optional uint32 input_height = 3 [default = 0];
bool FCNImageDataCommonParameter::has_input_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataCommonParameter::set_has_input_height() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataCommonParameter::clear_has_input_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataCommonParameter::clear_input_height() {
  input_height_ = 0u;
  clear_has_input_height();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::input_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_height)
  return input_height_;
}
void FCNImageDataCommonParameter::set_input_height(::google::protobuf::uint32 value) {
  set_has_input_height();
  input_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_height)
}

// optional uint32 input_width = 4 [default = 0];
bool FCNImageDataCommonParameter::has_input_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataCommonParameter::set_has_input_width() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataCommonParameter::clear_has_input_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataCommonParameter::clear_input_width() {
  input_width_ = 0u;
  clear_has_input_width();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::input_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_width)
  return input_width_;
}
void FCNImageDataCommonParameter::set_input_width(::google::protobuf::uint32 value) {
  set_has_input_width();
  input_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_width)
}

// optional uint32 heat_map_a = 5 [default = 0];
bool FCNImageDataCommonParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataCommonParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataCommonParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataCommonParameter::clear_heat_map_a() {
  heat_map_a_ = 0u;
  clear_has_heat_map_a();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_a)
  return heat_map_a_;
}
void FCNImageDataCommonParameter::set_heat_map_a(::google::protobuf::uint32 value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_a)
}

// optional uint32 heat_map_b = 6 [default = 0];
bool FCNImageDataCommonParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNImageDataCommonParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNImageDataCommonParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNImageDataCommonParameter::clear_heat_map_b() {
  heat_map_b_ = 0u;
  clear_has_heat_map_b();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_b)
  return heat_map_b_;
}
void FCNImageDataCommonParameter::set_heat_map_b(::google::protobuf::uint32 value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_b)
}

// optional uint32 out_height = 7 [default = 0];
bool FCNImageDataCommonParameter::has_out_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNImageDataCommonParameter::set_has_out_height() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNImageDataCommonParameter::clear_has_out_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNImageDataCommonParameter::clear_out_height() {
  out_height_ = 0u;
  clear_has_out_height();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::out_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_height)
  return out_height_;
}
void FCNImageDataCommonParameter::set_out_height(::google::protobuf::uint32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_height)
}

// optional uint32 out_width = 8 [default = 0];
bool FCNImageDataCommonParameter::has_out_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNImageDataCommonParameter::set_has_out_width() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNImageDataCommonParameter::clear_has_out_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNImageDataCommonParameter::clear_out_width() {
  out_width_ = 0u;
  clear_has_out_width();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::out_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_width)
  return out_width_;
}
void FCNImageDataCommonParameter::set_out_width(::google::protobuf::uint32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_width)
}

// optional uint32 num_anno_points_per_instance = 9;
bool FCNImageDataCommonParameter::has_num_anno_points_per_instance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FCNImageDataCommonParameter::set_has_num_anno_points_per_instance() {
  _has_bits_[0] |= 0x00000040u;
}
void FCNImageDataCommonParameter::clear_has_num_anno_points_per_instance() {
  _has_bits_[0] &= ~0x00000040u;
}
void FCNImageDataCommonParameter::clear_num_anno_points_per_instance() {
  num_anno_points_per_instance_ = 0u;
  clear_has_num_anno_points_per_instance();
}
::google::protobuf::uint32 FCNImageDataCommonParameter::num_anno_points_per_instance() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.num_anno_points_per_instance)
  return num_anno_points_per_instance_;
}
void FCNImageDataCommonParameter::set_num_anno_points_per_instance(::google::protobuf::uint32 value) {
  set_has_num_anno_points_per_instance();
  num_anno_points_per_instance_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.num_anno_points_per_instance)
}

// optional bool single_thread = 11 [default = true];
bool FCNImageDataCommonParameter::has_single_thread() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FCNImageDataCommonParameter::set_has_single_thread() {
  _has_bits_[0] |= 0x00000100u;
}
void FCNImageDataCommonParameter::clear_has_single_thread() {
  _has_bits_[0] &= ~0x00000100u;
}
void FCNImageDataCommonParameter::clear_single_thread() {
  single_thread_ = true;
  clear_has_single_thread();
}
bool FCNImageDataCommonParameter::single_thread() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.single_thread)
  return single_thread_;
}
void FCNImageDataCommonParameter::set_single_thread(bool value) {
  set_has_single_thread();
  single_thread_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.single_thread)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataKeyPointParameter::kValidDistanceFieldNumber;
const int FCNImageDataKeyPointParameter::kMinOutValidLenFieldNumber;
const int FCNImageDataKeyPointParameter::kKeyPointCountsFieldNumber;
const int FCNImageDataKeyPointParameter::kUsedKeyPointsFileFieldNumber;
const int FCNImageDataKeyPointParameter::kIgnoreFlagRadiusFieldNumber;
const int FCNImageDataKeyPointParameter::kIgnoreFlagListFileFieldNumber;
const int FCNImageDataKeyPointParameter::kNeedPointLocDiffFieldNumber;
const int FCNImageDataKeyPointParameter::kValidPointLocDiffDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataKeyPointParameter::FCNImageDataKeyPointParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
}
FCNImageDataKeyPointParameter::FCNImageDataKeyPointParameter(const FCNImageDataKeyPointParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignore_flag_list_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ignore_flag_list_file()) {
    ignore_flag_list_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_flag_list_file_);
  }
  used_key_points_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_used_key_points_file()) {
    used_key_points_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.used_key_points_file_);
  }
  ::memcpy(&need_point_loc_diff_, &from.need_point_loc_diff_,
    reinterpret_cast<char*>(&valid_point_loc_diff_dist_) -
    reinterpret_cast<char*>(&need_point_loc_diff_) + sizeof(valid_point_loc_diff_dist_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
}

void FCNImageDataKeyPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_flag_list_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  used_key_points_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&need_point_loc_diff_, 0, reinterpret_cast<char*>(&key_point_counts_) -
    reinterpret_cast<char*>(&need_point_loc_diff_) + sizeof(key_point_counts_));
  valid_distance_ = 6u;
  ignore_flag_radius_ = 20u;
  min_out_valid_len_ = 1u;
  valid_point_loc_diff_dist_ = 6u;
}

FCNImageDataKeyPointParameter::~FCNImageDataKeyPointParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  SharedDtor();
}

void FCNImageDataKeyPointParameter::SharedDtor() {
  ignore_flag_list_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  used_key_points_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FCNImageDataKeyPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataKeyPointParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataKeyPointParameter& FCNImageDataKeyPointParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataKeyPointParameter* FCNImageDataKeyPointParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataKeyPointParameter* n = new FCNImageDataKeyPointParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataKeyPointParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ignore_flag_list_file()) {
      GOOGLE_DCHECK(!ignore_flag_list_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ignore_flag_list_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_used_key_points_file()) {
      GOOGLE_DCHECK(!used_key_points_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*used_key_points_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&need_point_loc_diff_, 0, reinterpret_cast<char*>(&key_point_counts_) -
      reinterpret_cast<char*>(&need_point_loc_diff_) + sizeof(key_point_counts_));
    valid_distance_ = 6u;
    ignore_flag_radius_ = 20u;
    min_out_valid_len_ = 1u;
    valid_point_loc_diff_dist_ = 6u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataKeyPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 valid_distance = 1 [default = 6];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_valid_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ignore_flag_radius = 2 [default = 20];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ignore_flag_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_flag_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ignore_flag_list_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ignore_flag_list_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ignore_flag_list_file().data(), this->ignore_flag_list_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_out_valid_len = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_min_out_valid_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_out_valid_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_point_loc_diff = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_need_point_loc_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_point_loc_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_valid_point_loc_diff_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_point_loc_diff_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 key_point_counts = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_key_point_counts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_point_counts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string used_key_points_file = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_used_key_points_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->used_key_points_file().data(), this->used_key_points_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  return false;
#undef DO_
}

void FCNImageDataKeyPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 valid_distance = 1 [default = 6];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->valid_distance(), output);
  }

  // optional uint32 ignore_flag_radius = 2 [default = 20];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ignore_flag_radius(), output);
  }

  // optional string ignore_flag_list_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignore_flag_list_file().data(), this->ignore_flag_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ignore_flag_list_file(), output);
  }

  // optional uint32 min_out_valid_len = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_out_valid_len(), output);
  }

  // optional bool need_point_loc_diff = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->need_point_loc_diff(), output);
  }

  // optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->valid_point_loc_diff_dist(), output);
  }

  // optional uint32 key_point_counts = 8 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->key_point_counts(), output);
  }

  // optional string used_key_points_file = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->used_key_points_file().data(), this->used_key_points_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->used_key_points_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
}

::google::protobuf::uint8* FCNImageDataKeyPointParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 valid_distance = 1 [default = 6];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->valid_distance(), target);
  }

  // optional uint32 ignore_flag_radius = 2 [default = 20];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ignore_flag_radius(), target);
  }

  // optional string ignore_flag_list_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignore_flag_list_file().data(), this->ignore_flag_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ignore_flag_list_file(), target);
  }

  // optional uint32 min_out_valid_len = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_out_valid_len(), target);
  }

  // optional bool need_point_loc_diff = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->need_point_loc_diff(), target);
  }

  // optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->valid_point_loc_diff_dist(), target);
  }

  // optional uint32 key_point_counts = 8 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->key_point_counts(), target);
  }

  // optional string used_key_points_file = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->used_key_points_file().data(), this->used_key_points_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->used_key_points_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  return target;
}

size_t FCNImageDataKeyPointParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ignore_flag_list_file = 3;
    if (has_ignore_flag_list_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ignore_flag_list_file());
    }

    // optional string used_key_points_file = 9;
    if (has_used_key_points_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->used_key_points_file());
    }

    // optional bool need_point_loc_diff = 5 [default = false];
    if (has_need_point_loc_diff()) {
      total_size += 1 + 1;
    }

    // optional uint32 key_point_counts = 8 [default = 0];
    if (has_key_point_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_point_counts());
    }

    // optional uint32 valid_distance = 1 [default = 6];
    if (has_valid_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_distance());
    }

    // optional uint32 ignore_flag_radius = 2 [default = 20];
    if (has_ignore_flag_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_flag_radius());
    }

    // optional uint32 min_out_valid_len = 4 [default = 1];
    if (has_min_out_valid_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_out_valid_len());
    }

    // optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
    if (has_valid_point_loc_diff_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_point_loc_diff_dist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataKeyPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataKeyPointParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataKeyPointParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataKeyPointParameter::MergeFrom(const FCNImageDataKeyPointParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ignore_flag_list_file();
      ignore_flag_list_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_flag_list_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_used_key_points_file();
      used_key_points_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.used_key_points_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      need_point_loc_diff_ = from.need_point_loc_diff_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_point_counts_ = from.key_point_counts_;
    }
    if (cached_has_bits & 0x00000010u) {
      valid_distance_ = from.valid_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignore_flag_radius_ = from.ignore_flag_radius_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_out_valid_len_ = from.min_out_valid_len_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_point_loc_diff_dist_ = from.valid_point_loc_diff_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCNImageDataKeyPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataKeyPointParameter::CopyFrom(const FCNImageDataKeyPointParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataKeyPointParameter::IsInitialized() const {
  return true;
}

void FCNImageDataKeyPointParameter::Swap(FCNImageDataKeyPointParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataKeyPointParameter::InternalSwap(FCNImageDataKeyPointParameter* other) {
  ignore_flag_list_file_.Swap(&other->ignore_flag_list_file_);
  used_key_points_file_.Swap(&other->used_key_points_file_);
  std::swap(need_point_loc_diff_, other->need_point_loc_diff_);
  std::swap(key_point_counts_, other->key_point_counts_);
  std::swap(valid_distance_, other->valid_distance_);
  std::swap(ignore_flag_radius_, other->ignore_flag_radius_);
  std::swap(min_out_valid_len_, other->min_out_valid_len_);
  std::swap(valid_point_loc_diff_dist_, other->valid_point_loc_diff_dist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataKeyPointParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataKeyPointParameter

// optional uint32 valid_distance = 1 [default = 6];
bool FCNImageDataKeyPointParameter::has_valid_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_valid_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNImageDataKeyPointParameter::clear_has_valid_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNImageDataKeyPointParameter::clear_valid_distance() {
  valid_distance_ = 6u;
  clear_has_valid_distance();
}
::google::protobuf::uint32 FCNImageDataKeyPointParameter::valid_distance() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_distance)
  return valid_distance_;
}
void FCNImageDataKeyPointParameter::set_valid_distance(::google::protobuf::uint32 value) {
  set_has_valid_distance();
  valid_distance_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_distance)
}

// optional uint32 min_out_valid_len = 4 [default = 1];
bool FCNImageDataKeyPointParameter::has_min_out_valid_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_min_out_valid_len() {
  _has_bits_[0] |= 0x00000040u;
}
void FCNImageDataKeyPointParameter::clear_has_min_out_valid_len() {
  _has_bits_[0] &= ~0x00000040u;
}
void FCNImageDataKeyPointParameter::clear_min_out_valid_len() {
  min_out_valid_len_ = 1u;
  clear_has_min_out_valid_len();
}
::google::protobuf::uint32 FCNImageDataKeyPointParameter::min_out_valid_len() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.min_out_valid_len)
  return min_out_valid_len_;
}
void FCNImageDataKeyPointParameter::set_min_out_valid_len(::google::protobuf::uint32 value) {
  set_has_min_out_valid_len();
  min_out_valid_len_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.min_out_valid_len)
}

// optional uint32 key_point_counts = 8 [default = 0];
bool FCNImageDataKeyPointParameter::has_key_point_counts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_key_point_counts() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNImageDataKeyPointParameter::clear_has_key_point_counts() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNImageDataKeyPointParameter::clear_key_point_counts() {
  key_point_counts_ = 0u;
  clear_has_key_point_counts();
}
::google::protobuf::uint32 FCNImageDataKeyPointParameter::key_point_counts() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.key_point_counts)
  return key_point_counts_;
}
void FCNImageDataKeyPointParameter::set_key_point_counts(::google::protobuf::uint32 value) {
  set_has_key_point_counts();
  key_point_counts_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.key_point_counts)
}

// optional string used_key_points_file = 9;
bool FCNImageDataKeyPointParameter::has_used_key_points_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_used_key_points_file() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataKeyPointParameter::clear_has_used_key_points_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataKeyPointParameter::clear_used_key_points_file() {
  used_key_points_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_used_key_points_file();
}
const ::std::string& FCNImageDataKeyPointParameter::used_key_points_file() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
  return used_key_points_file_.GetNoArena();
}
void FCNImageDataKeyPointParameter::set_used_key_points_file(const ::std::string& value) {
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
#if LANG_CXX11
void FCNImageDataKeyPointParameter::set_used_key_points_file(::std::string&& value) {
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
#endif
void FCNImageDataKeyPointParameter::set_used_key_points_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
void FCNImageDataKeyPointParameter::set_used_key_points_file(const char* value, size_t size) {
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
::std::string* FCNImageDataKeyPointParameter::mutable_used_key_points_file() {
  set_has_used_key_points_file();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
  return used_key_points_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataKeyPointParameter::release_used_key_points_file() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
  clear_has_used_key_points_file();
  return used_key_points_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataKeyPointParameter::set_allocated_used_key_points_file(::std::string* used_key_points_file) {
  if (used_key_points_file != NULL) {
    set_has_used_key_points_file();
  } else {
    clear_has_used_key_points_file();
  }
  used_key_points_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), used_key_points_file);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}

// optional uint32 ignore_flag_radius = 2 [default = 20];
bool FCNImageDataKeyPointParameter::has_ignore_flag_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_ignore_flag_radius() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNImageDataKeyPointParameter::clear_has_ignore_flag_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNImageDataKeyPointParameter::clear_ignore_flag_radius() {
  ignore_flag_radius_ = 20u;
  clear_has_ignore_flag_radius();
}
::google::protobuf::uint32 FCNImageDataKeyPointParameter::ignore_flag_radius() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_radius)
  return ignore_flag_radius_;
}
void FCNImageDataKeyPointParameter::set_ignore_flag_radius(::google::protobuf::uint32 value) {
  set_has_ignore_flag_radius();
  ignore_flag_radius_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_radius)
}

// optional string ignore_flag_list_file = 3;
bool FCNImageDataKeyPointParameter::has_ignore_flag_list_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_ignore_flag_list_file() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataKeyPointParameter::clear_has_ignore_flag_list_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataKeyPointParameter::clear_ignore_flag_list_file() {
  ignore_flag_list_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ignore_flag_list_file();
}
const ::std::string& FCNImageDataKeyPointParameter::ignore_flag_list_file() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
  return ignore_flag_list_file_.GetNoArena();
}
void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(const ::std::string& value) {
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
#if LANG_CXX11
void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(::std::string&& value) {
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
#endif
void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(const char* value, size_t size) {
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
::std::string* FCNImageDataKeyPointParameter::mutable_ignore_flag_list_file() {
  set_has_ignore_flag_list_file();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
  return ignore_flag_list_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataKeyPointParameter::release_ignore_flag_list_file() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
  clear_has_ignore_flag_list_file();
  return ignore_flag_list_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataKeyPointParameter::set_allocated_ignore_flag_list_file(::std::string* ignore_flag_list_file) {
  if (ignore_flag_list_file != NULL) {
    set_has_ignore_flag_list_file();
  } else {
    clear_has_ignore_flag_list_file();
  }
  ignore_flag_list_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ignore_flag_list_file);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}

// optional bool need_point_loc_diff = 5 [default = false];
bool FCNImageDataKeyPointParameter::has_need_point_loc_diff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_need_point_loc_diff() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataKeyPointParameter::clear_has_need_point_loc_diff() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataKeyPointParameter::clear_need_point_loc_diff() {
  need_point_loc_diff_ = false;
  clear_has_need_point_loc_diff();
}
bool FCNImageDataKeyPointParameter::need_point_loc_diff() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.need_point_loc_diff)
  return need_point_loc_diff_;
}
void FCNImageDataKeyPointParameter::set_need_point_loc_diff(bool value) {
  set_has_need_point_loc_diff();
  need_point_loc_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.need_point_loc_diff)
}

// optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
bool FCNImageDataKeyPointParameter::has_valid_point_loc_diff_dist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FCNImageDataKeyPointParameter::set_has_valid_point_loc_diff_dist() {
  _has_bits_[0] |= 0x00000080u;
}
void FCNImageDataKeyPointParameter::clear_has_valid_point_loc_diff_dist() {
  _has_bits_[0] &= ~0x00000080u;
}
void FCNImageDataKeyPointParameter::clear_valid_point_loc_diff_dist() {
  valid_point_loc_diff_dist_ = 6u;
  clear_has_valid_point_loc_diff_dist();
}
::google::protobuf::uint32 FCNImageDataKeyPointParameter::valid_point_loc_diff_dist() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_point_loc_diff_dist)
  return valid_point_loc_diff_dist_;
}
void FCNImageDataKeyPointParameter::set_valid_point_loc_diff_dist(::google::protobuf::uint32 value) {
  set_has_valid_point_loc_diff_dist();
  valid_point_loc_diff_dist_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_point_loc_diff_dist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataBoxNormParameter::kBboxHeightFieldNumber;
const int FCNImageDataBoxNormParameter::kBboxWidthFieldNumber;
const int FCNImageDataBoxNormParameter::kBboxSizeNormTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataBoxNormParameter::FCNImageDataBoxNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
}
FCNImageDataBoxNormParameter::FCNImageDataBoxNormParameter(const FCNImageDataBoxNormParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bbox_size_norm_type_, &from.bbox_size_norm_type_,
    reinterpret_cast<char*>(&bbox_width_) -
    reinterpret_cast<char*>(&bbox_size_norm_type_) + sizeof(bbox_width_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
}

void FCNImageDataBoxNormParameter::SharedCtor() {
  _cached_size_ = 0;
  bbox_size_norm_type_ = 0;
  bbox_height_ = 50u;
  bbox_width_ = 50u;
}

FCNImageDataBoxNormParameter::~FCNImageDataBoxNormParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  SharedDtor();
}

void FCNImageDataBoxNormParameter::SharedDtor() {
}

void FCNImageDataBoxNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataBoxNormParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataBoxNormParameter& FCNImageDataBoxNormParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataBoxNormParameter* FCNImageDataBoxNormParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataBoxNormParameter* n = new FCNImageDataBoxNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataBoxNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  if (_has_bits_[0 / 32] & 7u) {
    bbox_size_norm_type_ = 0;
    bbox_height_ = 50u;
    bbox_width_ = 50u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataBoxNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType_IsValid(value)) {
            set_bbox_size_norm_type(static_cast< ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bbox_height = 10 [default = 50];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_bbox_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bbox_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bbox_width = 11 [default = 50];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_bbox_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bbox_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  return false;
#undef DO_
}

void FCNImageDataBoxNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bbox_size_norm_type(), output);
  }

  // optional uint32 bbox_height = 10 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bbox_height(), output);
  }

  // optional uint32 bbox_width = 11 [default = 50];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bbox_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
}

::google::protobuf::uint8* FCNImageDataBoxNormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bbox_size_norm_type(), target);
  }

  // optional uint32 bbox_height = 10 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bbox_height(), target);
  }

  // optional uint32 bbox_width = 11 [default = 50];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bbox_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  return target;
}

size_t FCNImageDataBoxNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
    if (has_bbox_size_norm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bbox_size_norm_type());
    }

    // optional uint32 bbox_height = 10 [default = 50];
    if (has_bbox_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bbox_height());
    }

    // optional uint32 bbox_width = 11 [default = 50];
    if (has_bbox_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bbox_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataBoxNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataBoxNormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataBoxNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataBoxNormParameter::MergeFrom(const FCNImageDataBoxNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bbox_size_norm_type_ = from.bbox_size_norm_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      bbox_height_ = from.bbox_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      bbox_width_ = from.bbox_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCNImageDataBoxNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataBoxNormParameter::CopyFrom(const FCNImageDataBoxNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataBoxNormParameter::IsInitialized() const {
  return true;
}

void FCNImageDataBoxNormParameter::Swap(FCNImageDataBoxNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataBoxNormParameter::InternalSwap(FCNImageDataBoxNormParameter* other) {
  std::swap(bbox_size_norm_type_, other->bbox_size_norm_type_);
  std::swap(bbox_height_, other->bbox_height_);
  std::swap(bbox_width_, other->bbox_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataBoxNormParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataBoxNormParameter

// optional uint32 bbox_height = 10 [default = 50];
bool FCNImageDataBoxNormParameter::has_bbox_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataBoxNormParameter::set_has_bbox_height() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataBoxNormParameter::clear_has_bbox_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataBoxNormParameter::clear_bbox_height() {
  bbox_height_ = 50u;
  clear_has_bbox_height();
}
::google::protobuf::uint32 FCNImageDataBoxNormParameter::bbox_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_height)
  return bbox_height_;
}
void FCNImageDataBoxNormParameter::set_bbox_height(::google::protobuf::uint32 value) {
  set_has_bbox_height();
  bbox_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_height)
}

// optional uint32 bbox_width = 11 [default = 50];
bool FCNImageDataBoxNormParameter::has_bbox_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataBoxNormParameter::set_has_bbox_width() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataBoxNormParameter::clear_has_bbox_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataBoxNormParameter::clear_bbox_width() {
  bbox_width_ = 50u;
  clear_has_bbox_width();
}
::google::protobuf::uint32 FCNImageDataBoxNormParameter::bbox_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_width)
  return bbox_width_;
}
void FCNImageDataBoxNormParameter::set_bbox_width(::google::protobuf::uint32 value) {
  set_has_bbox_width();
  bbox_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_width)
}

// optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
bool FCNImageDataBoxNormParameter::has_bbox_size_norm_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataBoxNormParameter::set_has_bbox_size_norm_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataBoxNormParameter::clear_has_bbox_size_norm_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataBoxNormParameter::clear_bbox_size_norm_type() {
  bbox_size_norm_type_ = 0;
  clear_has_bbox_size_norm_type();
}
::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::bbox_size_norm_type() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_size_norm_type)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType >(bbox_size_norm_type_);
}
void FCNImageDataBoxNormParameter::set_bbox_size_norm_type(::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType value) {
  assert(::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType_IsValid(value));
  set_has_bbox_size_norm_type();
  bbox_size_norm_type_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_size_norm_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataDetectionBoxParameter::kMinOutputPosRadiusFieldNumber;
const int FCNImageDataDetectionBoxParameter::kNeedDetectionLocDiffFieldNumber;
const int FCNImageDataDetectionBoxParameter::kBboxHeightFieldNumber;
const int FCNImageDataDetectionBoxParameter::kBboxWidthFieldNumber;
const int FCNImageDataDetectionBoxParameter::kBboxSizeNormTypeFieldNumber;
const int FCNImageDataDetectionBoxParameter::kBboxPointIdFieldNumber;
const int FCNImageDataDetectionBoxParameter::kBboxValidDistRatioFieldNumber;
const int FCNImageDataDetectionBoxParameter::kBboxLocDiffValidDistRatioFieldNumber;
const int FCNImageDataDetectionBoxParameter::kListPointDiffFromCenterFieldNumber;
const int FCNImageDataDetectionBoxParameter::kIgnoreMarginFieldNumber;
const int FCNImageDataDetectionBoxParameter::kLocRegressOnIgnoreFieldNumber;
const int FCNImageDataDetectionBoxParameter::kClassFlagIdFieldNumber;
const int FCNImageDataDetectionBoxParameter::kTotalClassNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataDetectionBoxParameter::FCNImageDataDetectionBoxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
}
FCNImageDataDetectionBoxParameter::FCNImageDataDetectionBoxParameter(const FCNImageDataDetectionBoxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bbox_point_id_(from.bbox_point_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  list_point_diff_from_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_list_point_diff_from_center()) {
    list_point_diff_from_center_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_point_diff_from_center_);
  }
  ::memcpy(&need_detection_loc_diff_, &from.need_detection_loc_diff_,
    reinterpret_cast<char*>(&loc_regress_on_ignore_) -
    reinterpret_cast<char*>(&need_detection_loc_diff_) + sizeof(loc_regress_on_ignore_));
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
}

void FCNImageDataDetectionBoxParameter::SharedCtor() {
  _cached_size_ = 0;
  list_point_diff_from_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&need_detection_loc_diff_, 0, reinterpret_cast<char*>(&class_flag_id_) -
    reinterpret_cast<char*>(&need_detection_loc_diff_) + sizeof(class_flag_id_));
  min_output_pos_radius_ = 1u;
  bbox_valid_dist_ratio_ = 0.6f;
  bbox_loc_diff_valid_dist_ratio_ = 0.5f;
  ignore_margin_ = 3u;
  bbox_height_ = 50u;
  bbox_width_ = 50u;
  total_class_num_ = 1u;
  loc_regress_on_ignore_ = true;
}

FCNImageDataDetectionBoxParameter::~FCNImageDataDetectionBoxParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  SharedDtor();
}

void FCNImageDataDetectionBoxParameter::SharedDtor() {
  list_point_diff_from_center_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FCNImageDataDetectionBoxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataDetectionBoxParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataDetectionBoxParameter& FCNImageDataDetectionBoxParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataDetectionBoxParameter* FCNImageDataDetectionBoxParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataDetectionBoxParameter* n = new FCNImageDataDetectionBoxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataDetectionBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  bbox_point_id_.Clear();
  if (has_list_point_diff_from_center()) {
    GOOGLE_DCHECK(!list_point_diff_from_center_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*list_point_diff_from_center_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&need_detection_loc_diff_, 0, reinterpret_cast<char*>(&class_flag_id_) -
      reinterpret_cast<char*>(&need_detection_loc_diff_) + sizeof(class_flag_id_));
    min_output_pos_radius_ = 1u;
    bbox_valid_dist_ratio_ = 0.6f;
    bbox_loc_diff_valid_dist_ratio_ = 0.5f;
    ignore_margin_ = 3u;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    bbox_height_ = 50u;
    bbox_width_ = 50u;
    total_class_num_ = 1u;
    loc_regress_on_ignore_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataDetectionBoxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_output_pos_radius = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_min_output_pos_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_output_pos_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_detection_loc_diff = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_need_detection_loc_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_detection_loc_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bbox_point_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_bbox_point_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bbox_point_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bbox_valid_dist_ratio = 5 [default = 0.6];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_bbox_valid_dist_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_valid_dist_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_bbox_loc_diff_valid_dist_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_loc_diff_valid_dist_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string list_point_diff_from_center = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_point_diff_from_center()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_point_diff_from_center().data(), this->list_point_diff_from_center().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ignore_margin = 8 [default = 3];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ignore_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType_IsValid(value)) {
            set_bbox_size_norm_type(static_cast< ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bbox_height = 10 [default = 50];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_bbox_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bbox_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bbox_width = 11 [default = 50];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_bbox_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bbox_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 class_flag_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_class_flag_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_flag_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_class_num = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_total_class_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_class_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool loc_regress_on_ignore = 14 [default = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_loc_regress_on_ignore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loc_regress_on_ignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  return false;
#undef DO_
}

void FCNImageDataDetectionBoxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_output_pos_radius = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_output_pos_radius(), output);
  }

  // optional bool need_detection_loc_diff = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->need_detection_loc_diff(), output);
  }

  // repeated uint32 bbox_point_id = 4;
  for (int i = 0, n = this->bbox_point_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->bbox_point_id(i), output);
  }

  // optional float bbox_valid_dist_ratio = 5 [default = 0.6];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bbox_valid_dist_ratio(), output);
  }

  // optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bbox_loc_diff_valid_dist_ratio(), output);
  }

  // optional string list_point_diff_from_center = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_point_diff_from_center().data(), this->list_point_diff_from_center().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->list_point_diff_from_center(), output);
  }

  // optional uint32 ignore_margin = 8 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ignore_margin(), output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bbox_size_norm_type(), output);
  }

  // optional uint32 bbox_height = 10 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bbox_height(), output);
  }

  // optional uint32 bbox_width = 11 [default = 50];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bbox_width(), output);
  }

  // optional uint32 class_flag_id = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->class_flag_id(), output);
  }

  // optional uint32 total_class_num = 13 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_class_num(), output);
  }

  // optional bool loc_regress_on_ignore = 14 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->loc_regress_on_ignore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
}

::google::protobuf::uint8* FCNImageDataDetectionBoxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_output_pos_radius = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_output_pos_radius(), target);
  }

  // optional bool need_detection_loc_diff = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->need_detection_loc_diff(), target);
  }

  // repeated uint32 bbox_point_id = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->bbox_point_id_, target);

  // optional float bbox_valid_dist_ratio = 5 [default = 0.6];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bbox_valid_dist_ratio(), target);
  }

  // optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bbox_loc_diff_valid_dist_ratio(), target);
  }

  // optional string list_point_diff_from_center = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_point_diff_from_center().data(), this->list_point_diff_from_center().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->list_point_diff_from_center(), target);
  }

  // optional uint32 ignore_margin = 8 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ignore_margin(), target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bbox_size_norm_type(), target);
  }

  // optional uint32 bbox_height = 10 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bbox_height(), target);
  }

  // optional uint32 bbox_width = 11 [default = 50];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bbox_width(), target);
  }

  // optional uint32 class_flag_id = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->class_flag_id(), target);
  }

  // optional uint32 total_class_num = 13 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_class_num(), target);
  }

  // optional bool loc_regress_on_ignore = 14 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->loc_regress_on_ignore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  return target;
}

size_t FCNImageDataDetectionBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 bbox_point_id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bbox_point_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bbox_point_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string list_point_diff_from_center = 7;
    if (has_list_point_diff_from_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_point_diff_from_center());
    }

    // optional bool need_detection_loc_diff = 2 [default = false];
    if (has_need_detection_loc_diff()) {
      total_size += 1 + 1;
    }

    // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
    if (has_bbox_size_norm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bbox_size_norm_type());
    }

    // optional uint32 class_flag_id = 12;
    if (has_class_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_flag_id());
    }

    // optional uint32 min_output_pos_radius = 1 [default = 1];
    if (has_min_output_pos_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_output_pos_radius());
    }

    // optional float bbox_valid_dist_ratio = 5 [default = 0.6];
    if (has_bbox_valid_dist_ratio()) {
      total_size += 1 + 4;
    }

    // optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
    if (has_bbox_loc_diff_valid_dist_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 ignore_margin = 8 [default = 3];
    if (has_ignore_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_margin());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 bbox_height = 10 [default = 50];
    if (has_bbox_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bbox_height());
    }

    // optional uint32 bbox_width = 11 [default = 50];
    if (has_bbox_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bbox_width());
    }

    // optional uint32 total_class_num = 13 [default = 1];
    if (has_total_class_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_class_num());
    }

    // optional bool loc_regress_on_ignore = 14 [default = true];
    if (has_loc_regress_on_ignore()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataDetectionBoxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataDetectionBoxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataDetectionBoxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataDetectionBoxParameter::MergeFrom(const FCNImageDataDetectionBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bbox_point_id_.MergeFrom(from.bbox_point_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_list_point_diff_from_center();
      list_point_diff_from_center_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_point_diff_from_center_);
    }
    if (cached_has_bits & 0x00000002u) {
      need_detection_loc_diff_ = from.need_detection_loc_diff_;
    }
    if (cached_has_bits & 0x00000004u) {
      bbox_size_norm_type_ = from.bbox_size_norm_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      class_flag_id_ = from.class_flag_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_output_pos_radius_ = from.min_output_pos_radius_;
    }
    if (cached_has_bits & 0x00000020u) {
      bbox_valid_dist_ratio_ = from.bbox_valid_dist_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      bbox_loc_diff_valid_dist_ratio_ = from.bbox_loc_diff_valid_dist_ratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_margin_ = from.ignore_margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      bbox_height_ = from.bbox_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      bbox_width_ = from.bbox_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_class_num_ = from.total_class_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      loc_regress_on_ignore_ = from.loc_regress_on_ignore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCNImageDataDetectionBoxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataDetectionBoxParameter::CopyFrom(const FCNImageDataDetectionBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataDetectionBoxParameter::IsInitialized() const {
  return true;
}

void FCNImageDataDetectionBoxParameter::Swap(FCNImageDataDetectionBoxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataDetectionBoxParameter::InternalSwap(FCNImageDataDetectionBoxParameter* other) {
  bbox_point_id_.InternalSwap(&other->bbox_point_id_);
  list_point_diff_from_center_.Swap(&other->list_point_diff_from_center_);
  std::swap(need_detection_loc_diff_, other->need_detection_loc_diff_);
  std::swap(bbox_size_norm_type_, other->bbox_size_norm_type_);
  std::swap(class_flag_id_, other->class_flag_id_);
  std::swap(min_output_pos_radius_, other->min_output_pos_radius_);
  std::swap(bbox_valid_dist_ratio_, other->bbox_valid_dist_ratio_);
  std::swap(bbox_loc_diff_valid_dist_ratio_, other->bbox_loc_diff_valid_dist_ratio_);
  std::swap(ignore_margin_, other->ignore_margin_);
  std::swap(bbox_height_, other->bbox_height_);
  std::swap(bbox_width_, other->bbox_width_);
  std::swap(total_class_num_, other->total_class_num_);
  std::swap(loc_regress_on_ignore_, other->loc_regress_on_ignore_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataDetectionBoxParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataDetectionBoxParameter

// optional uint32 min_output_pos_radius = 1 [default = 1];
bool FCNImageDataDetectionBoxParameter::has_min_output_pos_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_min_output_pos_radius() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNImageDataDetectionBoxParameter::clear_has_min_output_pos_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNImageDataDetectionBoxParameter::clear_min_output_pos_radius() {
  min_output_pos_radius_ = 1u;
  clear_has_min_output_pos_radius();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::min_output_pos_radius() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.min_output_pos_radius)
  return min_output_pos_radius_;
}
void FCNImageDataDetectionBoxParameter::set_min_output_pos_radius(::google::protobuf::uint32 value) {
  set_has_min_output_pos_radius();
  min_output_pos_radius_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.min_output_pos_radius)
}

// optional bool need_detection_loc_diff = 2 [default = false];
bool FCNImageDataDetectionBoxParameter::has_need_detection_loc_diff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_need_detection_loc_diff() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataDetectionBoxParameter::clear_has_need_detection_loc_diff() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataDetectionBoxParameter::clear_need_detection_loc_diff() {
  need_detection_loc_diff_ = false;
  clear_has_need_detection_loc_diff();
}
bool FCNImageDataDetectionBoxParameter::need_detection_loc_diff() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.need_detection_loc_diff)
  return need_detection_loc_diff_;
}
void FCNImageDataDetectionBoxParameter::set_need_detection_loc_diff(bool value) {
  set_has_need_detection_loc_diff();
  need_detection_loc_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.need_detection_loc_diff)
}

// optional uint32 bbox_height = 10 [default = 50];
bool FCNImageDataDetectionBoxParameter::has_bbox_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_bbox_height() {
  _has_bits_[0] |= 0x00000100u;
}
void FCNImageDataDetectionBoxParameter::clear_has_bbox_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void FCNImageDataDetectionBoxParameter::clear_bbox_height() {
  bbox_height_ = 50u;
  clear_has_bbox_height();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::bbox_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_height)
  return bbox_height_;
}
void FCNImageDataDetectionBoxParameter::set_bbox_height(::google::protobuf::uint32 value) {
  set_has_bbox_height();
  bbox_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_height)
}

// optional uint32 bbox_width = 11 [default = 50];
bool FCNImageDataDetectionBoxParameter::has_bbox_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_bbox_width() {
  _has_bits_[0] |= 0x00000200u;
}
void FCNImageDataDetectionBoxParameter::clear_has_bbox_width() {
  _has_bits_[0] &= ~0x00000200u;
}
void FCNImageDataDetectionBoxParameter::clear_bbox_width() {
  bbox_width_ = 50u;
  clear_has_bbox_width();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::bbox_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_width)
  return bbox_width_;
}
void FCNImageDataDetectionBoxParameter::set_bbox_width(::google::protobuf::uint32 value) {
  set_has_bbox_width();
  bbox_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_width)
}

// optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
bool FCNImageDataDetectionBoxParameter::has_bbox_size_norm_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_bbox_size_norm_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataDetectionBoxParameter::clear_has_bbox_size_norm_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataDetectionBoxParameter::clear_bbox_size_norm_type() {
  bbox_size_norm_type_ = 0;
  clear_has_bbox_size_norm_type();
}
::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::bbox_size_norm_type() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_size_norm_type)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType >(bbox_size_norm_type_);
}
void FCNImageDataDetectionBoxParameter::set_bbox_size_norm_type(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType value) {
  assert(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType_IsValid(value));
  set_has_bbox_size_norm_type();
  bbox_size_norm_type_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_size_norm_type)
}

// repeated uint32 bbox_point_id = 4;
int FCNImageDataDetectionBoxParameter::bbox_point_id_size() const {
  return bbox_point_id_.size();
}
void FCNImageDataDetectionBoxParameter::clear_bbox_point_id() {
  bbox_point_id_.Clear();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::bbox_point_id(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
  return bbox_point_id_.Get(index);
}
void FCNImageDataDetectionBoxParameter::set_bbox_point_id(int index, ::google::protobuf::uint32 value) {
  bbox_point_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
}
void FCNImageDataDetectionBoxParameter::add_bbox_point_id(::google::protobuf::uint32 value) {
  bbox_point_id_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FCNImageDataDetectionBoxParameter::bbox_point_id() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
  return bbox_point_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FCNImageDataDetectionBoxParameter::mutable_bbox_point_id() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
  return &bbox_point_id_;
}

// optional float bbox_valid_dist_ratio = 5 [default = 0.6];
bool FCNImageDataDetectionBoxParameter::has_bbox_valid_dist_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_bbox_valid_dist_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNImageDataDetectionBoxParameter::clear_has_bbox_valid_dist_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNImageDataDetectionBoxParameter::clear_bbox_valid_dist_ratio() {
  bbox_valid_dist_ratio_ = 0.6f;
  clear_has_bbox_valid_dist_ratio();
}
float FCNImageDataDetectionBoxParameter::bbox_valid_dist_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_valid_dist_ratio)
  return bbox_valid_dist_ratio_;
}
void FCNImageDataDetectionBoxParameter::set_bbox_valid_dist_ratio(float value) {
  set_has_bbox_valid_dist_ratio();
  bbox_valid_dist_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_valid_dist_ratio)
}

// optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
bool FCNImageDataDetectionBoxParameter::has_bbox_loc_diff_valid_dist_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_bbox_loc_diff_valid_dist_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void FCNImageDataDetectionBoxParameter::clear_has_bbox_loc_diff_valid_dist_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void FCNImageDataDetectionBoxParameter::clear_bbox_loc_diff_valid_dist_ratio() {
  bbox_loc_diff_valid_dist_ratio_ = 0.5f;
  clear_has_bbox_loc_diff_valid_dist_ratio();
}
float FCNImageDataDetectionBoxParameter::bbox_loc_diff_valid_dist_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_loc_diff_valid_dist_ratio)
  return bbox_loc_diff_valid_dist_ratio_;
}
void FCNImageDataDetectionBoxParameter::set_bbox_loc_diff_valid_dist_ratio(float value) {
  set_has_bbox_loc_diff_valid_dist_ratio();
  bbox_loc_diff_valid_dist_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_loc_diff_valid_dist_ratio)
}

// optional string list_point_diff_from_center = 7;
bool FCNImageDataDetectionBoxParameter::has_list_point_diff_from_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_list_point_diff_from_center() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataDetectionBoxParameter::clear_has_list_point_diff_from_center() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataDetectionBoxParameter::clear_list_point_diff_from_center() {
  list_point_diff_from_center_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_list_point_diff_from_center();
}
const ::std::string& FCNImageDataDetectionBoxParameter::list_point_diff_from_center() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
  return list_point_diff_from_center_.GetNoArena();
}
void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(const ::std::string& value) {
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
#if LANG_CXX11
void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(::std::string&& value) {
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
#endif
void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(const char* value, size_t size) {
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
::std::string* FCNImageDataDetectionBoxParameter::mutable_list_point_diff_from_center() {
  set_has_list_point_diff_from_center();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
  return list_point_diff_from_center_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FCNImageDataDetectionBoxParameter::release_list_point_diff_from_center() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
  clear_has_list_point_diff_from_center();
  return list_point_diff_from_center_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FCNImageDataDetectionBoxParameter::set_allocated_list_point_diff_from_center(::std::string* list_point_diff_from_center) {
  if (list_point_diff_from_center != NULL) {
    set_has_list_point_diff_from_center();
  } else {
    clear_has_list_point_diff_from_center();
  }
  list_point_diff_from_center_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list_point_diff_from_center);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}

// optional uint32 ignore_margin = 8 [default = 3];
bool FCNImageDataDetectionBoxParameter::has_ignore_margin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_ignore_margin() {
  _has_bits_[0] |= 0x00000080u;
}
void FCNImageDataDetectionBoxParameter::clear_has_ignore_margin() {
  _has_bits_[0] &= ~0x00000080u;
}
void FCNImageDataDetectionBoxParameter::clear_ignore_margin() {
  ignore_margin_ = 3u;
  clear_has_ignore_margin();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::ignore_margin() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.ignore_margin)
  return ignore_margin_;
}
void FCNImageDataDetectionBoxParameter::set_ignore_margin(::google::protobuf::uint32 value) {
  set_has_ignore_margin();
  ignore_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.ignore_margin)
}

// optional bool loc_regress_on_ignore = 14 [default = true];
bool FCNImageDataDetectionBoxParameter::has_loc_regress_on_ignore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_loc_regress_on_ignore() {
  _has_bits_[0] |= 0x00000800u;
}
void FCNImageDataDetectionBoxParameter::clear_has_loc_regress_on_ignore() {
  _has_bits_[0] &= ~0x00000800u;
}
void FCNImageDataDetectionBoxParameter::clear_loc_regress_on_ignore() {
  loc_regress_on_ignore_ = true;
  clear_has_loc_regress_on_ignore();
}
bool FCNImageDataDetectionBoxParameter::loc_regress_on_ignore() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.loc_regress_on_ignore)
  return loc_regress_on_ignore_;
}
void FCNImageDataDetectionBoxParameter::set_loc_regress_on_ignore(bool value) {
  set_has_loc_regress_on_ignore();
  loc_regress_on_ignore_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.loc_regress_on_ignore)
}

// optional uint32 class_flag_id = 12;
bool FCNImageDataDetectionBoxParameter::has_class_flag_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_class_flag_id() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNImageDataDetectionBoxParameter::clear_has_class_flag_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNImageDataDetectionBoxParameter::clear_class_flag_id() {
  class_flag_id_ = 0u;
  clear_has_class_flag_id();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::class_flag_id() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.class_flag_id)
  return class_flag_id_;
}
void FCNImageDataDetectionBoxParameter::set_class_flag_id(::google::protobuf::uint32 value) {
  set_has_class_flag_id();
  class_flag_id_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.class_flag_id)
}

// optional uint32 total_class_num = 13 [default = 1];
bool FCNImageDataDetectionBoxParameter::has_total_class_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FCNImageDataDetectionBoxParameter::set_has_total_class_num() {
  _has_bits_[0] |= 0x00000400u;
}
void FCNImageDataDetectionBoxParameter::clear_has_total_class_num() {
  _has_bits_[0] &= ~0x00000400u;
}
void FCNImageDataDetectionBoxParameter::clear_total_class_num() {
  total_class_num_ = 1u;
  clear_has_total_class_num();
}
::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::total_class_num() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.total_class_num)
  return total_class_num_;
}
void FCNImageDataDetectionBoxParameter::set_total_class_num(::google::protobuf::uint32 value) {
  set_has_total_class_num();
  total_class_num_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.total_class_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataIgnoreBoxParameter::kIgnoreBoxFlagIdFieldNumber;
const int FCNImageDataIgnoreBoxParameter::kIgnoreBoxPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataIgnoreBoxParameter::FCNImageDataIgnoreBoxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
}
FCNImageDataIgnoreBoxParameter::FCNImageDataIgnoreBoxParameter(const FCNImageDataIgnoreBoxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ignore_box_point_id_(from.ignore_box_point_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignore_box_flag_id_ = from.ignore_box_flag_id_;
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
}

void FCNImageDataIgnoreBoxParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_box_flag_id_ = 1000u;
}

FCNImageDataIgnoreBoxParameter::~FCNImageDataIgnoreBoxParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  SharedDtor();
}

void FCNImageDataIgnoreBoxParameter::SharedDtor() {
}

void FCNImageDataIgnoreBoxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataIgnoreBoxParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataIgnoreBoxParameter& FCNImageDataIgnoreBoxParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataIgnoreBoxParameter* FCNImageDataIgnoreBoxParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataIgnoreBoxParameter* n = new FCNImageDataIgnoreBoxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataIgnoreBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  ignore_box_point_id_.Clear();
  ignore_box_flag_id_ = 1000u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataIgnoreBoxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ignore_box_flag_id = 1 [default = 1000];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ignore_box_flag_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_box_flag_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ignore_box_point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ignore_box_point_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ignore_box_point_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  return false;
#undef DO_
}

void FCNImageDataIgnoreBoxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignore_box_flag_id = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ignore_box_flag_id(), output);
  }

  // repeated uint32 ignore_box_point_id = 2;
  for (int i = 0, n = this->ignore_box_point_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ignore_box_point_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
}

::google::protobuf::uint8* FCNImageDataIgnoreBoxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignore_box_flag_id = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ignore_box_flag_id(), target);
  }

  // repeated uint32 ignore_box_point_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ignore_box_point_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  return target;
}

size_t FCNImageDataIgnoreBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 ignore_box_point_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ignore_box_point_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ignore_box_point_id_size());
    total_size += data_size;
  }

  // optional uint32 ignore_box_flag_id = 1 [default = 1000];
  if (has_ignore_box_flag_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ignore_box_flag_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataIgnoreBoxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataIgnoreBoxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataIgnoreBoxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataIgnoreBoxParameter::MergeFrom(const FCNImageDataIgnoreBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignore_box_point_id_.MergeFrom(from.ignore_box_point_id_);
  if (from.has_ignore_box_flag_id()) {
    set_ignore_box_flag_id(from.ignore_box_flag_id());
  }
}

void FCNImageDataIgnoreBoxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataIgnoreBoxParameter::CopyFrom(const FCNImageDataIgnoreBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataIgnoreBoxParameter::IsInitialized() const {
  return true;
}

void FCNImageDataIgnoreBoxParameter::Swap(FCNImageDataIgnoreBoxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataIgnoreBoxParameter::InternalSwap(FCNImageDataIgnoreBoxParameter* other) {
  ignore_box_point_id_.InternalSwap(&other->ignore_box_point_id_);
  std::swap(ignore_box_flag_id_, other->ignore_box_flag_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataIgnoreBoxParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataIgnoreBoxParameter

// optional uint32 ignore_box_flag_id = 1 [default = 1000];
bool FCNImageDataIgnoreBoxParameter::has_ignore_box_flag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataIgnoreBoxParameter::set_has_ignore_box_flag_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataIgnoreBoxParameter::clear_has_ignore_box_flag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataIgnoreBoxParameter::clear_ignore_box_flag_id() {
  ignore_box_flag_id_ = 1000u;
  clear_has_ignore_box_flag_id();
}
::google::protobuf::uint32 FCNImageDataIgnoreBoxParameter::ignore_box_flag_id() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_flag_id)
  return ignore_box_flag_id_;
}
void FCNImageDataIgnoreBoxParameter::set_ignore_box_flag_id(::google::protobuf::uint32 value) {
  set_has_ignore_box_flag_id();
  ignore_box_flag_id_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_flag_id)
}

// repeated uint32 ignore_box_point_id = 2;
int FCNImageDataIgnoreBoxParameter::ignore_box_point_id_size() const {
  return ignore_box_point_id_.size();
}
void FCNImageDataIgnoreBoxParameter::clear_ignore_box_point_id() {
  ignore_box_point_id_.Clear();
}
::google::protobuf::uint32 FCNImageDataIgnoreBoxParameter::ignore_box_point_id(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
  return ignore_box_point_id_.Get(index);
}
void FCNImageDataIgnoreBoxParameter::set_ignore_box_point_id(int index, ::google::protobuf::uint32 value) {
  ignore_box_point_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
}
void FCNImageDataIgnoreBoxParameter::add_ignore_box_point_id(::google::protobuf::uint32 value) {
  ignore_box_point_id_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FCNImageDataIgnoreBoxParameter::ignore_box_point_id() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
  return ignore_box_point_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FCNImageDataIgnoreBoxParameter::mutable_ignore_box_point_id() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
  return &ignore_box_point_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCNImageDataParameter::kFcnImageDataCommonParamFieldNumber;
const int FCNImageDataParameter::kFcnImageDataKeyPointParamFieldNumber;
const int FCNImageDataParameter::kFcnImageDataDetectionBoxParamFieldNumber;
const int FCNImageDataParameter::kFcnImageDataIgnoreBoxParamFieldNumber;
const int FCNImageDataParameter::kFcnImageDataSourceParamFieldNumber;
const int FCNImageDataParameter::kFcnImageDataReaderParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCNImageDataParameter::FCNImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_fcn_data_layer.FCNImageDataParameter)
}
FCNImageDataParameter::FCNImageDataParameter(const FCNImageDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fcn_image_data_common_param()) {
    fcn_image_data_common_param_ = new ::caffe_fcn_data_layer::FCNImageDataCommonParameter(*from.fcn_image_data_common_param_);
  } else {
    fcn_image_data_common_param_ = NULL;
  }
  if (from.has_fcn_image_data_key_point_param()) {
    fcn_image_data_key_point_param_ = new ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter(*from.fcn_image_data_key_point_param_);
  } else {
    fcn_image_data_key_point_param_ = NULL;
  }
  if (from.has_fcn_image_data_detection_box_param()) {
    fcn_image_data_detection_box_param_ = new ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter(*from.fcn_image_data_detection_box_param_);
  } else {
    fcn_image_data_detection_box_param_ = NULL;
  }
  if (from.has_fcn_image_data_ignore_box_param()) {
    fcn_image_data_ignore_box_param_ = new ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter(*from.fcn_image_data_ignore_box_param_);
  } else {
    fcn_image_data_ignore_box_param_ = NULL;
  }
  if (from.has_fcn_image_data_source_param()) {
    fcn_image_data_source_param_ = new ::caffe_fcn_data_layer::FCNImageDataSourceParameter(*from.fcn_image_data_source_param_);
  } else {
    fcn_image_data_source_param_ = NULL;
  }
  if (from.has_fcn_image_data_reader_param()) {
    fcn_image_data_reader_param_ = new ::caffe_fcn_data_layer::FCNImageDataReaderParameter(*from.fcn_image_data_reader_param_);
  } else {
    fcn_image_data_reader_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe_fcn_data_layer.FCNImageDataParameter)
}

void FCNImageDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fcn_image_data_common_param_, 0, reinterpret_cast<char*>(&fcn_image_data_reader_param_) -
    reinterpret_cast<char*>(&fcn_image_data_common_param_) + sizeof(fcn_image_data_reader_param_));
}

FCNImageDataParameter::~FCNImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe_fcn_data_layer.FCNImageDataParameter)
  SharedDtor();
}

void FCNImageDataParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fcn_image_data_common_param_;
  }
  if (this != internal_default_instance()) {
    delete fcn_image_data_key_point_param_;
  }
  if (this != internal_default_instance()) {
    delete fcn_image_data_detection_box_param_;
  }
  if (this != internal_default_instance()) {
    delete fcn_image_data_ignore_box_param_;
  }
  if (this != internal_default_instance()) {
    delete fcn_image_data_source_param_;
  }
  if (this != internal_default_instance()) {
    delete fcn_image_data_reader_param_;
  }
}

void FCNImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCNImageDataParameter::descriptor() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FCNImageDataParameter& FCNImageDataParameter::default_instance() {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCNImageDataParameter* FCNImageDataParameter::New(::google::protobuf::Arena* arena) const {
  FCNImageDataParameter* n = new FCNImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCNImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_fcn_data_layer.FCNImageDataParameter)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_fcn_image_data_common_param()) {
      GOOGLE_DCHECK(fcn_image_data_common_param_ != NULL);
      fcn_image_data_common_param_->::caffe_fcn_data_layer::FCNImageDataCommonParameter::Clear();
    }
    if (has_fcn_image_data_key_point_param()) {
      GOOGLE_DCHECK(fcn_image_data_key_point_param_ != NULL);
      fcn_image_data_key_point_param_->::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::Clear();
    }
    if (has_fcn_image_data_detection_box_param()) {
      GOOGLE_DCHECK(fcn_image_data_detection_box_param_ != NULL);
      fcn_image_data_detection_box_param_->::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::Clear();
    }
    if (has_fcn_image_data_ignore_box_param()) {
      GOOGLE_DCHECK(fcn_image_data_ignore_box_param_ != NULL);
      fcn_image_data_ignore_box_param_->::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::Clear();
    }
    if (has_fcn_image_data_source_param()) {
      GOOGLE_DCHECK(fcn_image_data_source_param_ != NULL);
      fcn_image_data_source_param_->::caffe_fcn_data_layer::FCNImageDataSourceParameter::Clear();
    }
    if (has_fcn_image_data_reader_param()) {
      GOOGLE_DCHECK(fcn_image_data_reader_param_ != NULL);
      fcn_image_data_reader_param_->::caffe_fcn_data_layer::FCNImageDataReaderParameter::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCNImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_fcn_data_layer.FCNImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_common_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_key_point_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_detection_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_ignore_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_source_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_reader_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_fcn_data_layer.FCNImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_fcn_data_layer.FCNImageDataParameter)
  return false;
#undef DO_
}

void FCNImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_fcn_data_layer.FCNImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fcn_image_data_common_param_, output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fcn_image_data_key_point_param_, output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fcn_image_data_detection_box_param_, output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fcn_image_data_ignore_box_param_, output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fcn_image_data_source_param_, output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->fcn_image_data_reader_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_fcn_data_layer.FCNImageDataParameter)
}

::google::protobuf::uint8* FCNImageDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe_fcn_data_layer.FCNImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fcn_image_data_common_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fcn_image_data_key_point_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fcn_image_data_detection_box_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->fcn_image_data_ignore_box_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->fcn_image_data_source_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->fcn_image_data_reader_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_fcn_data_layer.FCNImageDataParameter)
  return target;
}

size_t FCNImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_fcn_data_layer.FCNImageDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
    if (has_fcn_image_data_common_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_common_param_);
    }

    // optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
    if (has_fcn_image_data_key_point_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_key_point_param_);
    }

    // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
    if (has_fcn_image_data_detection_box_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_detection_box_param_);
    }

    // optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
    if (has_fcn_image_data_ignore_box_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_ignore_box_param_);
    }

    // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
    if (has_fcn_image_data_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_source_param_);
    }

    // optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
    if (has_fcn_image_data_reader_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_reader_param_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCNImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_fcn_data_layer.FCNImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FCNImageDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FCNImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_fcn_data_layer.FCNImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_fcn_data_layer.FCNImageDataParameter)
    MergeFrom(*source);
  }
}

void FCNImageDataParameter::MergeFrom(const FCNImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_fcn_data_layer.FCNImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fcn_image_data_common_param()->::caffe_fcn_data_layer::FCNImageDataCommonParameter::MergeFrom(from.fcn_image_data_common_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fcn_image_data_key_point_param()->::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::MergeFrom(from.fcn_image_data_key_point_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fcn_image_data_detection_box_param()->::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::MergeFrom(from.fcn_image_data_detection_box_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_fcn_image_data_ignore_box_param()->::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::MergeFrom(from.fcn_image_data_ignore_box_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fcn_image_data_source_param()->::caffe_fcn_data_layer::FCNImageDataSourceParameter::MergeFrom(from.fcn_image_data_source_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_fcn_image_data_reader_param()->::caffe_fcn_data_layer::FCNImageDataReaderParameter::MergeFrom(from.fcn_image_data_reader_param());
    }
  }
}

void FCNImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_fcn_data_layer.FCNImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCNImageDataParameter::CopyFrom(const FCNImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_fcn_data_layer.FCNImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCNImageDataParameter::IsInitialized() const {
  return true;
}

void FCNImageDataParameter::Swap(FCNImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCNImageDataParameter::InternalSwap(FCNImageDataParameter* other) {
  std::swap(fcn_image_data_common_param_, other->fcn_image_data_common_param_);
  std::swap(fcn_image_data_key_point_param_, other->fcn_image_data_key_point_param_);
  std::swap(fcn_image_data_detection_box_param_, other->fcn_image_data_detection_box_param_);
  std::swap(fcn_image_data_ignore_box_param_, other->fcn_image_data_ignore_box_param_);
  std::swap(fcn_image_data_source_param_, other->fcn_image_data_source_param_);
  std::swap(fcn_image_data_reader_param_, other->fcn_image_data_reader_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCNImageDataParameter::GetMetadata() const {
  protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataParameter

// optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
bool FCNImageDataParameter::has_fcn_image_data_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCNImageDataParameter::set_has_fcn_image_data_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void FCNImageDataParameter::clear_has_fcn_image_data_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCNImageDataParameter::clear_fcn_image_data_common_param() {
  if (fcn_image_data_common_param_ != NULL) fcn_image_data_common_param_->::caffe_fcn_data_layer::FCNImageDataCommonParameter::Clear();
  clear_has_fcn_image_data_common_param();
}
const ::caffe_fcn_data_layer::FCNImageDataCommonParameter& FCNImageDataParameter::fcn_image_data_common_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
  return fcn_image_data_common_param_ != NULL ? *fcn_image_data_common_param_
                         : *::caffe_fcn_data_layer::FCNImageDataCommonParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataCommonParameter* FCNImageDataParameter::mutable_fcn_image_data_common_param() {
  set_has_fcn_image_data_common_param();
  if (fcn_image_data_common_param_ == NULL) {
    fcn_image_data_common_param_ = new ::caffe_fcn_data_layer::FCNImageDataCommonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
  return fcn_image_data_common_param_;
}
::caffe_fcn_data_layer::FCNImageDataCommonParameter* FCNImageDataParameter::release_fcn_image_data_common_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
  clear_has_fcn_image_data_common_param();
  ::caffe_fcn_data_layer::FCNImageDataCommonParameter* temp = fcn_image_data_common_param_;
  fcn_image_data_common_param_ = NULL;
  return temp;
}
void FCNImageDataParameter::set_allocated_fcn_image_data_common_param(::caffe_fcn_data_layer::FCNImageDataCommonParameter* fcn_image_data_common_param) {
  delete fcn_image_data_common_param_;
  fcn_image_data_common_param_ = fcn_image_data_common_param;
  if (fcn_image_data_common_param) {
    set_has_fcn_image_data_common_param();
  } else {
    clear_has_fcn_image_data_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
bool FCNImageDataParameter::has_fcn_image_data_key_point_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCNImageDataParameter::set_has_fcn_image_data_key_point_param() {
  _has_bits_[0] |= 0x00000002u;
}
void FCNImageDataParameter::clear_has_fcn_image_data_key_point_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCNImageDataParameter::clear_fcn_image_data_key_point_param() {
  if (fcn_image_data_key_point_param_ != NULL) fcn_image_data_key_point_param_->::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::Clear();
  clear_has_fcn_image_data_key_point_param();
}
const ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter& FCNImageDataParameter::fcn_image_data_key_point_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
  return fcn_image_data_key_point_param_ != NULL ? *fcn_image_data_key_point_param_
                         : *::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* FCNImageDataParameter::mutable_fcn_image_data_key_point_param() {
  set_has_fcn_image_data_key_point_param();
  if (fcn_image_data_key_point_param_ == NULL) {
    fcn_image_data_key_point_param_ = new ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
  return fcn_image_data_key_point_param_;
}
::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* FCNImageDataParameter::release_fcn_image_data_key_point_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
  clear_has_fcn_image_data_key_point_param();
  ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* temp = fcn_image_data_key_point_param_;
  fcn_image_data_key_point_param_ = NULL;
  return temp;
}
void FCNImageDataParameter::set_allocated_fcn_image_data_key_point_param(::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* fcn_image_data_key_point_param) {
  delete fcn_image_data_key_point_param_;
  fcn_image_data_key_point_param_ = fcn_image_data_key_point_param;
  if (fcn_image_data_key_point_param) {
    set_has_fcn_image_data_key_point_param();
  } else {
    clear_has_fcn_image_data_key_point_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
bool FCNImageDataParameter::has_fcn_image_data_detection_box_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCNImageDataParameter::set_has_fcn_image_data_detection_box_param() {
  _has_bits_[0] |= 0x00000004u;
}
void FCNImageDataParameter::clear_has_fcn_image_data_detection_box_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCNImageDataParameter::clear_fcn_image_data_detection_box_param() {
  if (fcn_image_data_detection_box_param_ != NULL) fcn_image_data_detection_box_param_->::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::Clear();
  clear_has_fcn_image_data_detection_box_param();
}
const ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter& FCNImageDataParameter::fcn_image_data_detection_box_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
  return fcn_image_data_detection_box_param_ != NULL ? *fcn_image_data_detection_box_param_
                         : *::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* FCNImageDataParameter::mutable_fcn_image_data_detection_box_param() {
  set_has_fcn_image_data_detection_box_param();
  if (fcn_image_data_detection_box_param_ == NULL) {
    fcn_image_data_detection_box_param_ = new ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
  return fcn_image_data_detection_box_param_;
}
::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* FCNImageDataParameter::release_fcn_image_data_detection_box_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
  clear_has_fcn_image_data_detection_box_param();
  ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* temp = fcn_image_data_detection_box_param_;
  fcn_image_data_detection_box_param_ = NULL;
  return temp;
}
void FCNImageDataParameter::set_allocated_fcn_image_data_detection_box_param(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* fcn_image_data_detection_box_param) {
  delete fcn_image_data_detection_box_param_;
  fcn_image_data_detection_box_param_ = fcn_image_data_detection_box_param;
  if (fcn_image_data_detection_box_param) {
    set_has_fcn_image_data_detection_box_param();
  } else {
    clear_has_fcn_image_data_detection_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
bool FCNImageDataParameter::has_fcn_image_data_ignore_box_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCNImageDataParameter::set_has_fcn_image_data_ignore_box_param() {
  _has_bits_[0] |= 0x00000008u;
}
void FCNImageDataParameter::clear_has_fcn_image_data_ignore_box_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCNImageDataParameter::clear_fcn_image_data_ignore_box_param() {
  if (fcn_image_data_ignore_box_param_ != NULL) fcn_image_data_ignore_box_param_->::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::Clear();
  clear_has_fcn_image_data_ignore_box_param();
}
const ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter& FCNImageDataParameter::fcn_image_data_ignore_box_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
  return fcn_image_data_ignore_box_param_ != NULL ? *fcn_image_data_ignore_box_param_
                         : *::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* FCNImageDataParameter::mutable_fcn_image_data_ignore_box_param() {
  set_has_fcn_image_data_ignore_box_param();
  if (fcn_image_data_ignore_box_param_ == NULL) {
    fcn_image_data_ignore_box_param_ = new ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
  return fcn_image_data_ignore_box_param_;
}
::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* FCNImageDataParameter::release_fcn_image_data_ignore_box_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
  clear_has_fcn_image_data_ignore_box_param();
  ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* temp = fcn_image_data_ignore_box_param_;
  fcn_image_data_ignore_box_param_ = NULL;
  return temp;
}
void FCNImageDataParameter::set_allocated_fcn_image_data_ignore_box_param(::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* fcn_image_data_ignore_box_param) {
  delete fcn_image_data_ignore_box_param_;
  fcn_image_data_ignore_box_param_ = fcn_image_data_ignore_box_param;
  if (fcn_image_data_ignore_box_param) {
    set_has_fcn_image_data_ignore_box_param();
  } else {
    clear_has_fcn_image_data_ignore_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
bool FCNImageDataParameter::has_fcn_image_data_source_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCNImageDataParameter::set_has_fcn_image_data_source_param() {
  _has_bits_[0] |= 0x00000010u;
}
void FCNImageDataParameter::clear_has_fcn_image_data_source_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCNImageDataParameter::clear_fcn_image_data_source_param() {
  if (fcn_image_data_source_param_ != NULL) fcn_image_data_source_param_->::caffe_fcn_data_layer::FCNImageDataSourceParameter::Clear();
  clear_has_fcn_image_data_source_param();
}
const ::caffe_fcn_data_layer::FCNImageDataSourceParameter& FCNImageDataParameter::fcn_image_data_source_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
  return fcn_image_data_source_param_ != NULL ? *fcn_image_data_source_param_
                         : *::caffe_fcn_data_layer::FCNImageDataSourceParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataSourceParameter* FCNImageDataParameter::mutable_fcn_image_data_source_param() {
  set_has_fcn_image_data_source_param();
  if (fcn_image_data_source_param_ == NULL) {
    fcn_image_data_source_param_ = new ::caffe_fcn_data_layer::FCNImageDataSourceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
  return fcn_image_data_source_param_;
}
::caffe_fcn_data_layer::FCNImageDataSourceParameter* FCNImageDataParameter::release_fcn_image_data_source_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
  clear_has_fcn_image_data_source_param();
  ::caffe_fcn_data_layer::FCNImageDataSourceParameter* temp = fcn_image_data_source_param_;
  fcn_image_data_source_param_ = NULL;
  return temp;
}
void FCNImageDataParameter::set_allocated_fcn_image_data_source_param(::caffe_fcn_data_layer::FCNImageDataSourceParameter* fcn_image_data_source_param) {
  delete fcn_image_data_source_param_;
  fcn_image_data_source_param_ = fcn_image_data_source_param;
  if (fcn_image_data_source_param) {
    set_has_fcn_image_data_source_param();
  } else {
    clear_has_fcn_image_data_source_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
bool FCNImageDataParameter::has_fcn_image_data_reader_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCNImageDataParameter::set_has_fcn_image_data_reader_param() {
  _has_bits_[0] |= 0x00000020u;
}
void FCNImageDataParameter::clear_has_fcn_image_data_reader_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCNImageDataParameter::clear_fcn_image_data_reader_param() {
  if (fcn_image_data_reader_param_ != NULL) fcn_image_data_reader_param_->::caffe_fcn_data_layer::FCNImageDataReaderParameter::Clear();
  clear_has_fcn_image_data_reader_param();
}
const ::caffe_fcn_data_layer::FCNImageDataReaderParameter& FCNImageDataParameter::fcn_image_data_reader_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
  return fcn_image_data_reader_param_ != NULL ? *fcn_image_data_reader_param_
                         : *::caffe_fcn_data_layer::FCNImageDataReaderParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataReaderParameter* FCNImageDataParameter::mutable_fcn_image_data_reader_param() {
  set_has_fcn_image_data_reader_param();
  if (fcn_image_data_reader_param_ == NULL) {
    fcn_image_data_reader_param_ = new ::caffe_fcn_data_layer::FCNImageDataReaderParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
  return fcn_image_data_reader_param_;
}
::caffe_fcn_data_layer::FCNImageDataReaderParameter* FCNImageDataParameter::release_fcn_image_data_reader_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
  clear_has_fcn_image_data_reader_param();
  ::caffe_fcn_data_layer::FCNImageDataReaderParameter* temp = fcn_image_data_reader_param_;
  fcn_image_data_reader_param_ = NULL;
  return temp;
}
void FCNImageDataParameter::set_allocated_fcn_image_data_reader_param(::caffe_fcn_data_layer::FCNImageDataReaderParameter* fcn_image_data_reader_param) {
  delete fcn_image_data_reader_param_;
  fcn_image_data_reader_param_ = fcn_image_data_reader_param;
  if (fcn_image_data_reader_param) {
    set_has_fcn_image_data_reader_param();
  } else {
    clear_has_fcn_image_data_reader_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe_fcn_data_layer

// @@protoc_insertion_point(global_scope)
