// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_fcn_data_layer.proto

#ifndef PROTOBUF_caffe_5ffcn_5fdata_5flayer_2eproto__INCLUDED
#define PROTOBUF_caffe_5ffcn_5fdata_5flayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace caffe_fcn_data_layer {
class DistortionParameter;
class DistortionParameterDefaultTypeInternal;
extern DistortionParameterDefaultTypeInternal _DistortionParameter_default_instance_;
class FCNImageDataBoxNormParameter;
class FCNImageDataBoxNormParameterDefaultTypeInternal;
extern FCNImageDataBoxNormParameterDefaultTypeInternal _FCNImageDataBoxNormParameter_default_instance_;
class FCNImageDataCommonParameter;
class FCNImageDataCommonParameterDefaultTypeInternal;
extern FCNImageDataCommonParameterDefaultTypeInternal _FCNImageDataCommonParameter_default_instance_;
class FCNImageDataDetectionBoxParameter;
class FCNImageDataDetectionBoxParameterDefaultTypeInternal;
extern FCNImageDataDetectionBoxParameterDefaultTypeInternal _FCNImageDataDetectionBoxParameter_default_instance_;
class FCNImageDataIgnoreBoxParameter;
class FCNImageDataIgnoreBoxParameterDefaultTypeInternal;
extern FCNImageDataIgnoreBoxParameterDefaultTypeInternal _FCNImageDataIgnoreBoxParameter_default_instance_;
class FCNImageDataKeyPointParameter;
class FCNImageDataKeyPointParameterDefaultTypeInternal;
extern FCNImageDataKeyPointParameterDefaultTypeInternal _FCNImageDataKeyPointParameter_default_instance_;
class FCNImageDataParameter;
class FCNImageDataParameterDefaultTypeInternal;
extern FCNImageDataParameterDefaultTypeInternal _FCNImageDataParameter_default_instance_;
class FCNImageDataReaderParameter;
class FCNImageDataReaderParameterDefaultTypeInternal;
extern FCNImageDataReaderParameterDefaultTypeInternal _FCNImageDataReaderParameter_default_instance_;
class FCNImageDataSourceParameter;
class FCNImageDataSourceParameterDefaultTypeInternal;
extern FCNImageDataSourceParameterDefaultTypeInternal _FCNImageDataSourceParameter_default_instance_;
class NoiseParameter;
class NoiseParameterDefaultTypeInternal;
extern NoiseParameterDefaultTypeInternal _NoiseParameter_default_instance_;
class SaltPepperParameter;
class SaltPepperParameterDefaultTypeInternal;
extern SaltPepperParameterDefaultTypeInternal _SaltPepperParameter_default_instance_;
}  // namespace caffe_fcn_data_layer

namespace caffe_fcn_data_layer {

namespace protobuf_caffe_5ffcn_5fdata_5flayer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_caffe_5ffcn_5fdata_5flayer_2eproto

enum FCNImageDataSourceParameter_STDLengthType {
  FCNImageDataSourceParameter_STDLengthType_HEIGHT = 0,
  FCNImageDataSourceParameter_STDLengthType_WIDTH = 1,
  FCNImageDataSourceParameter_STDLengthType_DIAG = 2
};
bool FCNImageDataSourceParameter_STDLengthType_IsValid(int value);
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter_STDLengthType_STDLengthType_MIN = FCNImageDataSourceParameter_STDLengthType_HEIGHT;
const FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter_STDLengthType_STDLengthType_MAX = FCNImageDataSourceParameter_STDLengthType_DIAG;
const int FCNImageDataSourceParameter_STDLengthType_STDLengthType_ARRAYSIZE = FCNImageDataSourceParameter_STDLengthType_STDLengthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCNImageDataSourceParameter_STDLengthType_descriptor();
inline const ::std::string& FCNImageDataSourceParameter_STDLengthType_Name(FCNImageDataSourceParameter_STDLengthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCNImageDataSourceParameter_STDLengthType_descriptor(), value);
}
inline bool FCNImageDataSourceParameter_STDLengthType_Parse(
    const ::std::string& name, FCNImageDataSourceParameter_STDLengthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCNImageDataSourceParameter_STDLengthType>(
    FCNImageDataSourceParameter_STDLengthType_descriptor(), name, value);
}
enum FCNImageDataCommonParameter_ScaleChooseStrategy {
  FCNImageDataCommonParameter_ScaleChooseStrategy_RANDOM = 0,
  FCNImageDataCommonParameter_ScaleChooseStrategy_WEIGHTED = 1
};
bool FCNImageDataCommonParameter_ScaleChooseStrategy_IsValid(int value);
const FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_MIN = FCNImageDataCommonParameter_ScaleChooseStrategy_RANDOM;
const FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_MAX = FCNImageDataCommonParameter_ScaleChooseStrategy_WEIGHTED;
const int FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_ARRAYSIZE = FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCNImageDataCommonParameter_ScaleChooseStrategy_descriptor();
inline const ::std::string& FCNImageDataCommonParameter_ScaleChooseStrategy_Name(FCNImageDataCommonParameter_ScaleChooseStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCNImageDataCommonParameter_ScaleChooseStrategy_descriptor(), value);
}
inline bool FCNImageDataCommonParameter_ScaleChooseStrategy_Parse(
    const ::std::string& name, FCNImageDataCommonParameter_ScaleChooseStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCNImageDataCommonParameter_ScaleChooseStrategy>(
    FCNImageDataCommonParameter_ScaleChooseStrategy_descriptor(), name, value);
}
enum FCNImageDataBoxNormParameter_BBoxSizeNormType {
  FCNImageDataBoxNormParameter_BBoxSizeNormType_HEIGHT = 0,
  FCNImageDataBoxNormParameter_BBoxSizeNormType_WIDTH = 1,
  FCNImageDataBoxNormParameter_BBoxSizeNormType_DIAG = 2
};
bool FCNImageDataBoxNormParameter_BBoxSizeNormType_IsValid(int value);
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_MIN = FCNImageDataBoxNormParameter_BBoxSizeNormType_HEIGHT;
const FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_MAX = FCNImageDataBoxNormParameter_BBoxSizeNormType_DIAG;
const int FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_ARRAYSIZE = FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCNImageDataBoxNormParameter_BBoxSizeNormType_descriptor();
inline const ::std::string& FCNImageDataBoxNormParameter_BBoxSizeNormType_Name(FCNImageDataBoxNormParameter_BBoxSizeNormType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCNImageDataBoxNormParameter_BBoxSizeNormType_descriptor(), value);
}
inline bool FCNImageDataBoxNormParameter_BBoxSizeNormType_Parse(
    const ::std::string& name, FCNImageDataBoxNormParameter_BBoxSizeNormType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCNImageDataBoxNormParameter_BBoxSizeNormType>(
    FCNImageDataBoxNormParameter_BBoxSizeNormType_descriptor(), name, value);
}
enum FCNImageDataDetectionBoxParameter_BBoxSizeNormType {
  FCNImageDataDetectionBoxParameter_BBoxSizeNormType_HEIGHT = 0,
  FCNImageDataDetectionBoxParameter_BBoxSizeNormType_WIDTH = 1,
  FCNImageDataDetectionBoxParameter_BBoxSizeNormType_DIAG = 2
};
bool FCNImageDataDetectionBoxParameter_BBoxSizeNormType_IsValid(int value);
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_MIN = FCNImageDataDetectionBoxParameter_BBoxSizeNormType_HEIGHT;
const FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_MAX = FCNImageDataDetectionBoxParameter_BBoxSizeNormType_DIAG;
const int FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_ARRAYSIZE = FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCNImageDataDetectionBoxParameter_BBoxSizeNormType_descriptor();
inline const ::std::string& FCNImageDataDetectionBoxParameter_BBoxSizeNormType_Name(FCNImageDataDetectionBoxParameter_BBoxSizeNormType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_descriptor(), value);
}
inline bool FCNImageDataDetectionBoxParameter_BBoxSizeNormType_Parse(
    const ::std::string& name, FCNImageDataDetectionBoxParameter_BBoxSizeNormType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCNImageDataDetectionBoxParameter_BBoxSizeNormType>(
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_descriptor(), name, value);
}
// ===================================================================

class FCNImageDataSourceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataSourceParameter) */ {
 public:
  FCNImageDataSourceParameter();
  virtual ~FCNImageDataSourceParameter();

  FCNImageDataSourceParameter(const FCNImageDataSourceParameter& from);

  inline FCNImageDataSourceParameter& operator=(const FCNImageDataSourceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataSourceParameter& default_instance();

  static inline const FCNImageDataSourceParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataSourceParameter*>(
               &_FCNImageDataSourceParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FCNImageDataSourceParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataSourceParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataSourceParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataSourceParameter& from);
  void MergeFrom(const FCNImageDataSourceParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataSourceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FCNImageDataSourceParameter_STDLengthType STDLengthType;
  static const STDLengthType HEIGHT =
    FCNImageDataSourceParameter_STDLengthType_HEIGHT;
  static const STDLengthType WIDTH =
    FCNImageDataSourceParameter_STDLengthType_WIDTH;
  static const STDLengthType DIAG =
    FCNImageDataSourceParameter_STDLengthType_DIAG;
  static inline bool STDLengthType_IsValid(int value) {
    return FCNImageDataSourceParameter_STDLengthType_IsValid(value);
  }
  static const STDLengthType STDLengthType_MIN =
    FCNImageDataSourceParameter_STDLengthType_STDLengthType_MIN;
  static const STDLengthType STDLengthType_MAX =
    FCNImageDataSourceParameter_STDLengthType_STDLengthType_MAX;
  static const int STDLengthType_ARRAYSIZE =
    FCNImageDataSourceParameter_STDLengthType_STDLengthType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  STDLengthType_descriptor() {
    return FCNImageDataSourceParameter_STDLengthType_descriptor();
  }
  static inline const ::std::string& STDLengthType_Name(STDLengthType value) {
    return FCNImageDataSourceParameter_STDLengthType_Name(value);
  }
  static inline bool STDLengthType_Parse(const ::std::string& name,
      STDLengthType* value) {
    return FCNImageDataSourceParameter_STDLengthType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string pos_samples_source = 1;
  bool has_pos_samples_source() const;
  void clear_pos_samples_source();
  static const int kPosSamplesSourceFieldNumber = 1;
  const ::std::string& pos_samples_source() const;
  void set_pos_samples_source(const ::std::string& value);
  #if LANG_CXX11
  void set_pos_samples_source(::std::string&& value);
  #endif
  void set_pos_samples_source(const char* value);
  void set_pos_samples_source(const char* value, size_t size);
  ::std::string* mutable_pos_samples_source();
  ::std::string* release_pos_samples_source();
  void set_allocated_pos_samples_source(::std::string* pos_samples_source);

  // optional string neg_samples_source = 2;
  bool has_neg_samples_source() const;
  void clear_neg_samples_source();
  static const int kNegSamplesSourceFieldNumber = 2;
  const ::std::string& neg_samples_source() const;
  void set_neg_samples_source(const ::std::string& value);
  #if LANG_CXX11
  void set_neg_samples_source(::std::string&& value);
  #endif
  void set_neg_samples_source(const char* value);
  void set_neg_samples_source(const char* value, size_t size);
  ::std::string* mutable_neg_samples_source();
  ::std::string* release_neg_samples_source();
  void set_allocated_neg_samples_source(::std::string* neg_samples_source);

  // optional string pos_img_folder = 9;
  bool has_pos_img_folder() const;
  void clear_pos_img_folder();
  static const int kPosImgFolderFieldNumber = 9;
  const ::std::string& pos_img_folder() const;
  void set_pos_img_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_pos_img_folder(::std::string&& value);
  #endif
  void set_pos_img_folder(const char* value);
  void set_pos_img_folder(const char* value, size_t size);
  ::std::string* mutable_pos_img_folder();
  ::std::string* release_pos_img_folder();
  void set_allocated_pos_img_folder(::std::string* pos_img_folder);

  // optional string neg_img_folder = 10;
  bool has_neg_img_folder() const;
  void clear_neg_img_folder();
  static const int kNegImgFolderFieldNumber = 10;
  const ::std::string& neg_img_folder() const;
  void set_neg_img_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_neg_img_folder(::std::string&& value);
  #endif
  void set_neg_img_folder(const char* value);
  void set_neg_img_folder(const char* value, size_t size);
  ::std::string* mutable_neg_img_folder();
  ::std::string* release_neg_img_folder();
  void set_allocated_neg_img_folder(::std::string* neg_img_folder);

  // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
  bool has_bootstrap_std_length_type() const;
  void clear_bootstrap_std_length_type();
  static const int kBootstrapStdLengthTypeFieldNumber = 7;
  ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType bootstrap_std_length_type() const;
  void set_bootstrap_std_length_type(::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType value);

  // optional float bootstrap_std_length = 8 [default = 0];
  bool has_bootstrap_std_length() const;
  void clear_bootstrap_std_length();
  static const int kBootstrapStdLengthFieldNumber = 8;
  float bootstrap_std_length() const;
  void set_bootstrap_std_length(float value);

  // optional bool multi_class_sample_balance = 11 [default = false];
  bool has_multi_class_sample_balance() const;
  void clear_multi_class_sample_balance();
  static const int kMultiClassSampleBalanceFieldNumber = 11;
  bool multi_class_sample_balance() const;
  void set_multi_class_sample_balance(bool value);

  // optional float neg_ratio = 3 [default = 0.5];
  bool has_neg_ratio() const;
  void clear_neg_ratio();
  static const int kNegRatioFieldNumber = 3;
  float neg_ratio() const;
  void set_neg_ratio(float value);

  // optional float bootstrap_hard_ratio = 4 [default = 0.5];
  bool has_bootstrap_hard_ratio() const;
  void clear_bootstrap_hard_ratio();
  static const int kBootstrapHardRatioFieldNumber = 4;
  float bootstrap_hard_ratio() const;
  void set_bootstrap_hard_ratio(float value);

  // optional uint32 batch_size = 5 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 6 [default = true];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 6;
  bool shuffle() const;
  void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataSourceParameter)
 private:
  void set_has_pos_samples_source();
  void clear_has_pos_samples_source();
  void set_has_pos_img_folder();
  void clear_has_pos_img_folder();
  void set_has_neg_samples_source();
  void clear_has_neg_samples_source();
  void set_has_neg_img_folder();
  void clear_has_neg_img_folder();
  void set_has_neg_ratio();
  void clear_has_neg_ratio();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_bootstrap_hard_ratio();
  void clear_has_bootstrap_hard_ratio();
  void set_has_bootstrap_std_length_type();
  void clear_has_bootstrap_std_length_type();
  void set_has_bootstrap_std_length();
  void clear_has_bootstrap_std_length();
  void set_has_multi_class_sample_balance();
  void clear_has_multi_class_sample_balance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pos_samples_source_;
  ::google::protobuf::internal::ArenaStringPtr neg_samples_source_;
  ::google::protobuf::internal::ArenaStringPtr pos_img_folder_;
  ::google::protobuf::internal::ArenaStringPtr neg_img_folder_;
  int bootstrap_std_length_type_;
  float bootstrap_std_length_;
  bool multi_class_sample_balance_;
  float neg_ratio_;
  float bootstrap_hard_ratio_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaltPepperParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.SaltPepperParameter) */ {
 public:
  SaltPepperParameter();
  virtual ~SaltPepperParameter();

  SaltPepperParameter(const SaltPepperParameter& from);

  inline SaltPepperParameter& operator=(const SaltPepperParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaltPepperParameter& default_instance();

  static inline const SaltPepperParameter* internal_default_instance() {
    return reinterpret_cast<const SaltPepperParameter*>(
               &_SaltPepperParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SaltPepperParameter* other);

  // implements Message ----------------------------------------------

  inline SaltPepperParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SaltPepperParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SaltPepperParameter& from);
  void MergeFrom(const SaltPepperParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SaltPepperParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // optional float fraction = 1 [default = 0];
  bool has_fraction() const;
  void clear_fraction();
  static const int kFractionFieldNumber = 1;
  float fraction() const;
  void set_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.SaltPepperParameter)
 private:
  void set_has_fraction();
  void clear_has_fraction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > value_;
  float fraction_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.NoiseParameter) */ {
 public:
  NoiseParameter();
  virtual ~NoiseParameter();

  NoiseParameter(const NoiseParameter& from);

  inline NoiseParameter& operator=(const NoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoiseParameter& default_instance();

  static inline const NoiseParameter* internal_default_instance() {
    return reinterpret_cast<const NoiseParameter*>(
               &_NoiseParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NoiseParameter* other);

  // implements Message ----------------------------------------------

  inline NoiseParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NoiseParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoiseParameter& from);
  void MergeFrom(const NoiseParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
  bool has_saltpepper_param() const;
  void clear_saltpepper_param();
  static const int kSaltpepperParamFieldNumber = 10;
  const ::caffe_fcn_data_layer::SaltPepperParameter& saltpepper_param() const;
  ::caffe_fcn_data_layer::SaltPepperParameter* mutable_saltpepper_param();
  ::caffe_fcn_data_layer::SaltPepperParameter* release_saltpepper_param();
  void set_allocated_saltpepper_param(::caffe_fcn_data_layer::SaltPepperParameter* saltpepper_param);

  // optional float prob = 1 [default = 0];
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 1;
  float prob() const;
  void set_prob(float value);

  // optional bool hist_eq = 2 [default = false];
  bool has_hist_eq() const;
  void clear_hist_eq();
  static const int kHistEqFieldNumber = 2;
  bool hist_eq() const;
  void set_hist_eq(bool value);

  // optional bool inverse = 3 [default = false];
  bool has_inverse() const;
  void clear_inverse();
  static const int kInverseFieldNumber = 3;
  bool inverse() const;
  void set_inverse(bool value);

  // optional bool decolorize = 4 [default = false];
  bool has_decolorize() const;
  void clear_decolorize();
  static const int kDecolorizeFieldNumber = 4;
  bool decolorize() const;
  void set_decolorize(bool value);

  // optional bool gauss_blur = 5 [default = false];
  bool has_gauss_blur() const;
  void clear_gauss_blur();
  static const int kGaussBlurFieldNumber = 5;
  bool gauss_blur() const;
  void set_gauss_blur(bool value);

  // optional bool posterize = 7 [default = false];
  bool has_posterize() const;
  void clear_posterize();
  static const int kPosterizeFieldNumber = 7;
  bool posterize() const;
  void set_posterize(bool value);

  // optional bool erode = 8 [default = false];
  bool has_erode() const;
  void clear_erode();
  static const int kErodeFieldNumber = 8;
  bool erode() const;
  void set_erode(bool value);

  // optional bool saltpepper = 9 [default = false];
  bool has_saltpepper() const;
  void clear_saltpepper();
  static const int kSaltpepperFieldNumber = 9;
  bool saltpepper() const;
  void set_saltpepper(bool value);

  // optional bool clahe = 11 [default = false];
  bool has_clahe() const;
  void clear_clahe();
  static const int kClaheFieldNumber = 11;
  bool clahe() const;
  void set_clahe(bool value);

  // optional bool convert_to_hsv = 12 [default = false];
  bool has_convert_to_hsv() const;
  void clear_convert_to_hsv();
  static const int kConvertToHsvFieldNumber = 12;
  bool convert_to_hsv() const;
  void set_convert_to_hsv(bool value);

  // optional bool convert_to_lab = 13 [default = false];
  bool has_convert_to_lab() const;
  void clear_convert_to_lab();
  static const int kConvertToLabFieldNumber = 13;
  bool convert_to_lab() const;
  void set_convert_to_lab(bool value);

  // optional float jpeg = 6 [default = -1];
  bool has_jpeg() const;
  void clear_jpeg();
  static const int kJpegFieldNumber = 6;
  float jpeg() const;
  void set_jpeg(float value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.NoiseParameter)
 private:
  void set_has_prob();
  void clear_has_prob();
  void set_has_hist_eq();
  void clear_has_hist_eq();
  void set_has_inverse();
  void clear_has_inverse();
  void set_has_decolorize();
  void clear_has_decolorize();
  void set_has_gauss_blur();
  void clear_has_gauss_blur();
  void set_has_jpeg();
  void clear_has_jpeg();
  void set_has_posterize();
  void clear_has_posterize();
  void set_has_erode();
  void clear_has_erode();
  void set_has_saltpepper();
  void clear_has_saltpepper();
  void set_has_saltpepper_param();
  void clear_has_saltpepper_param();
  void set_has_clahe();
  void clear_has_clahe();
  void set_has_convert_to_hsv();
  void clear_has_convert_to_hsv();
  void set_has_convert_to_lab();
  void clear_has_convert_to_lab();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe_fcn_data_layer::SaltPepperParameter* saltpepper_param_;
  float prob_;
  bool hist_eq_;
  bool inverse_;
  bool decolorize_;
  bool gauss_blur_;
  bool posterize_;
  bool erode_;
  bool saltpepper_;
  bool clahe_;
  bool convert_to_hsv_;
  bool convert_to_lab_;
  float jpeg_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DistortionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.DistortionParameter) */ {
 public:
  DistortionParameter();
  virtual ~DistortionParameter();

  DistortionParameter(const DistortionParameter& from);

  inline DistortionParameter& operator=(const DistortionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistortionParameter& default_instance();

  static inline const DistortionParameter* internal_default_instance() {
    return reinterpret_cast<const DistortionParameter*>(
               &_DistortionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DistortionParameter* other);

  // implements Message ----------------------------------------------

  inline DistortionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DistortionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DistortionParameter& from);
  void MergeFrom(const DistortionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DistortionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float brightness_prob = 1 [default = 0];
  bool has_brightness_prob() const;
  void clear_brightness_prob();
  static const int kBrightnessProbFieldNumber = 1;
  float brightness_prob() const;
  void set_brightness_prob(float value);

  // optional float brightness_delta = 2 [default = 0];
  bool has_brightness_delta() const;
  void clear_brightness_delta();
  static const int kBrightnessDeltaFieldNumber = 2;
  float brightness_delta() const;
  void set_brightness_delta(float value);

  // optional float contrast_prob = 3 [default = 0];
  bool has_contrast_prob() const;
  void clear_contrast_prob();
  static const int kContrastProbFieldNumber = 3;
  float contrast_prob() const;
  void set_contrast_prob(float value);

  // optional float contrast_lower = 4 [default = 0];
  bool has_contrast_lower() const;
  void clear_contrast_lower();
  static const int kContrastLowerFieldNumber = 4;
  float contrast_lower() const;
  void set_contrast_lower(float value);

  // optional float contrast_upper = 5 [default = 0];
  bool has_contrast_upper() const;
  void clear_contrast_upper();
  static const int kContrastUpperFieldNumber = 5;
  float contrast_upper() const;
  void set_contrast_upper(float value);

  // optional float hue_prob = 6 [default = 0];
  bool has_hue_prob() const;
  void clear_hue_prob();
  static const int kHueProbFieldNumber = 6;
  float hue_prob() const;
  void set_hue_prob(float value);

  // optional float hue_delta = 7 [default = 0];
  bool has_hue_delta() const;
  void clear_hue_delta();
  static const int kHueDeltaFieldNumber = 7;
  float hue_delta() const;
  void set_hue_delta(float value);

  // optional float saturation_prob = 8 [default = 0];
  bool has_saturation_prob() const;
  void clear_saturation_prob();
  static const int kSaturationProbFieldNumber = 8;
  float saturation_prob() const;
  void set_saturation_prob(float value);

  // optional float saturation_lower = 9 [default = 0];
  bool has_saturation_lower() const;
  void clear_saturation_lower();
  static const int kSaturationLowerFieldNumber = 9;
  float saturation_lower() const;
  void set_saturation_lower(float value);

  // optional float saturation_upper = 10 [default = 0];
  bool has_saturation_upper() const;
  void clear_saturation_upper();
  static const int kSaturationUpperFieldNumber = 10;
  float saturation_upper() const;
  void set_saturation_upper(float value);

  // optional float random_order_prob = 11 [default = 0];
  bool has_random_order_prob() const;
  void clear_random_order_prob();
  static const int kRandomOrderProbFieldNumber = 11;
  float random_order_prob() const;
  void set_random_order_prob(float value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.DistortionParameter)
 private:
  void set_has_brightness_prob();
  void clear_has_brightness_prob();
  void set_has_brightness_delta();
  void clear_has_brightness_delta();
  void set_has_contrast_prob();
  void clear_has_contrast_prob();
  void set_has_contrast_lower();
  void clear_has_contrast_lower();
  void set_has_contrast_upper();
  void clear_has_contrast_upper();
  void set_has_hue_prob();
  void clear_has_hue_prob();
  void set_has_hue_delta();
  void clear_has_hue_delta();
  void set_has_saturation_prob();
  void clear_has_saturation_prob();
  void set_has_saturation_lower();
  void clear_has_saturation_lower();
  void set_has_saturation_upper();
  void clear_has_saturation_upper();
  void set_has_random_order_prob();
  void clear_has_random_order_prob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float brightness_prob_;
  float brightness_delta_;
  float contrast_prob_;
  float contrast_lower_;
  float contrast_upper_;
  float hue_prob_;
  float hue_delta_;
  float saturation_prob_;
  float saturation_lower_;
  float saturation_upper_;
  float random_order_prob_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataReaderParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataReaderParameter) */ {
 public:
  FCNImageDataReaderParameter();
  virtual ~FCNImageDataReaderParameter();

  FCNImageDataReaderParameter(const FCNImageDataReaderParameter& from);

  inline FCNImageDataReaderParameter& operator=(const FCNImageDataReaderParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataReaderParameter& default_instance();

  static inline const FCNImageDataReaderParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataReaderParameter*>(
               &_FCNImageDataReaderParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FCNImageDataReaderParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataReaderParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataReaderParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataReaderParameter& from);
  void MergeFrom(const FCNImageDataReaderParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataReaderParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roi_center_point = 3;
  bool has_roi_center_point() const;
  void clear_roi_center_point();
  static const int kRoiCenterPointFieldNumber = 3;
  ::google::protobuf::uint32 roi_center_point() const;
  void set_roi_center_point(::google::protobuf::uint32 value);

  // optional uint32 standard_len_point_1 = 4;
  bool has_standard_len_point_1() const;
  void clear_standard_len_point_1();
  static const int kStandardLenPoint1FieldNumber = 4;
  ::google::protobuf::uint32 standard_len_point_1() const;
  void set_standard_len_point_1(::google::protobuf::uint32 value);

  // optional uint32 standard_len_point_2 = 5;
  bool has_standard_len_point_2() const;
  void clear_standard_len_point_2();
  static const int kStandardLenPoint2FieldNumber = 5;
  ::google::protobuf::uint32 standard_len_point_2() const;
  void set_standard_len_point_2(::google::protobuf::uint32 value);

  // optional uint32 standard_len = 6;
  bool has_standard_len() const;
  void clear_standard_len();
  static const int kStandardLenFieldNumber = 6;
  ::google::protobuf::uint32 standard_len() const;
  void set_standard_len(::google::protobuf::uint32 value);

  // optional float mean_r = 7 [default = 0];
  bool has_mean_r() const;
  void clear_mean_r();
  static const int kMeanRFieldNumber = 7;
  float mean_r() const;
  void set_mean_r(float value);

  // optional float mean_g = 8 [default = 0];
  bool has_mean_g() const;
  void clear_mean_g();
  static const int kMeanGFieldNumber = 8;
  float mean_g() const;
  void set_mean_g(float value);

  // optional float mean_b = 9 [default = 0];
  bool has_mean_b() const;
  void clear_mean_b();
  static const int kMeanBFieldNumber = 9;
  float mean_b() const;
  void set_mean_b(float value);

  // optional float random_rotate_degree = 10 [default = 0];
  bool has_random_rotate_degree() const;
  void clear_random_rotate_degree();
  static const int kRandomRotateDegreeFieldNumber = 10;
  float random_rotate_degree() const;
  void set_random_rotate_degree(float value);

  // optional float coord_jitter = 11 [default = 0];
  bool has_coord_jitter() const;
  void clear_coord_jitter();
  static const int kCoordJitterFieldNumber = 11;
  float coord_jitter() const;
  void set_coord_jitter(float value);

  // optional float random_roi_prob = 12 [default = 0];
  bool has_random_roi_prob() const;
  void clear_random_roi_prob();
  static const int kRandomRoiProbFieldNumber = 12;
  float random_roi_prob() const;
  void set_random_roi_prob(float value);

  // optional float scale_lower_limit = 1 [default = 1];
  bool has_scale_lower_limit() const;
  void clear_scale_lower_limit();
  static const int kScaleLowerLimitFieldNumber = 1;
  float scale_lower_limit() const;
  void set_scale_lower_limit(float value);

  // optional float scale_upper_limit = 2 [default = 1];
  bool has_scale_upper_limit() const;
  void clear_scale_upper_limit();
  static const int kScaleUpperLimitFieldNumber = 2;
  float scale_upper_limit() const;
  void set_scale_upper_limit(float value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataReaderParameter)
 private:
  void set_has_scale_lower_limit();
  void clear_has_scale_lower_limit();
  void set_has_scale_upper_limit();
  void clear_has_scale_upper_limit();
  void set_has_roi_center_point();
  void clear_has_roi_center_point();
  void set_has_standard_len_point_1();
  void clear_has_standard_len_point_1();
  void set_has_standard_len_point_2();
  void clear_has_standard_len_point_2();
  void set_has_standard_len();
  void clear_has_standard_len();
  void set_has_mean_r();
  void clear_has_mean_r();
  void set_has_mean_g();
  void clear_has_mean_g();
  void set_has_mean_b();
  void clear_has_mean_b();
  void set_has_random_rotate_degree();
  void clear_has_random_rotate_degree();
  void set_has_coord_jitter();
  void clear_has_coord_jitter();
  void set_has_random_roi_prob();
  void clear_has_random_roi_prob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 roi_center_point_;
  ::google::protobuf::uint32 standard_len_point_1_;
  ::google::protobuf::uint32 standard_len_point_2_;
  ::google::protobuf::uint32 standard_len_;
  float mean_r_;
  float mean_g_;
  float mean_b_;
  float random_rotate_degree_;
  float coord_jitter_;
  float random_roi_prob_;
  float scale_lower_limit_;
  float scale_upper_limit_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataCommonParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataCommonParameter) */ {
 public:
  FCNImageDataCommonParameter();
  virtual ~FCNImageDataCommonParameter();

  FCNImageDataCommonParameter(const FCNImageDataCommonParameter& from);

  inline FCNImageDataCommonParameter& operator=(const FCNImageDataCommonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataCommonParameter& default_instance();

  static inline const FCNImageDataCommonParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataCommonParameter*>(
               &_FCNImageDataCommonParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FCNImageDataCommonParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataCommonParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataCommonParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataCommonParameter& from);
  void MergeFrom(const FCNImageDataCommonParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataCommonParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FCNImageDataCommonParameter_ScaleChooseStrategy ScaleChooseStrategy;
  static const ScaleChooseStrategy RANDOM =
    FCNImageDataCommonParameter_ScaleChooseStrategy_RANDOM;
  static const ScaleChooseStrategy WEIGHTED =
    FCNImageDataCommonParameter_ScaleChooseStrategy_WEIGHTED;
  static inline bool ScaleChooseStrategy_IsValid(int value) {
    return FCNImageDataCommonParameter_ScaleChooseStrategy_IsValid(value);
  }
  static const ScaleChooseStrategy ScaleChooseStrategy_MIN =
    FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_MIN;
  static const ScaleChooseStrategy ScaleChooseStrategy_MAX =
    FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_MAX;
  static const int ScaleChooseStrategy_ARRAYSIZE =
    FCNImageDataCommonParameter_ScaleChooseStrategy_ScaleChooseStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScaleChooseStrategy_descriptor() {
    return FCNImageDataCommonParameter_ScaleChooseStrategy_descriptor();
  }
  static inline const ::std::string& ScaleChooseStrategy_Name(ScaleChooseStrategy value) {
    return FCNImageDataCommonParameter_ScaleChooseStrategy_Name(value);
  }
  static inline bool ScaleChooseStrategy_Parse(const ::std::string& name,
      ScaleChooseStrategy* value) {
    return FCNImageDataCommonParameter_ScaleChooseStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float scale_base = 2;
  int scale_base_size() const;
  void clear_scale_base();
  static const int kScaleBaseFieldNumber = 2;
  float scale_base(int index) const;
  void set_scale_base(int index, float value);
  void add_scale_base(float value);
  const ::google::protobuf::RepeatedField< float >&
      scale_base() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scale_base();

  // optional uint32 input_height = 3 [default = 0];
  bool has_input_height() const;
  void clear_input_height();
  static const int kInputHeightFieldNumber = 3;
  ::google::protobuf::uint32 input_height() const;
  void set_input_height(::google::protobuf::uint32 value);

  // optional uint32 input_width = 4 [default = 0];
  bool has_input_width() const;
  void clear_input_width();
  static const int kInputWidthFieldNumber = 4;
  ::google::protobuf::uint32 input_width() const;
  void set_input_width(::google::protobuf::uint32 value);

  // optional uint32 heat_map_a = 5 [default = 0];
  bool has_heat_map_a() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 5;
  ::google::protobuf::uint32 heat_map_a() const;
  void set_heat_map_a(::google::protobuf::uint32 value);

  // optional uint32 heat_map_b = 6 [default = 0];
  bool has_heat_map_b() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 6;
  ::google::protobuf::uint32 heat_map_b() const;
  void set_heat_map_b(::google::protobuf::uint32 value);

  // optional uint32 out_height = 7 [default = 0];
  bool has_out_height() const;
  void clear_out_height();
  static const int kOutHeightFieldNumber = 7;
  ::google::protobuf::uint32 out_height() const;
  void set_out_height(::google::protobuf::uint32 value);

  // optional uint32 out_width = 8 [default = 0];
  bool has_out_width() const;
  void clear_out_width();
  static const int kOutWidthFieldNumber = 8;
  ::google::protobuf::uint32 out_width() const;
  void set_out_width(::google::protobuf::uint32 value);

  // optional uint32 num_anno_points_per_instance = 9;
  bool has_num_anno_points_per_instance() const;
  void clear_num_anno_points_per_instance();
  static const int kNumAnnoPointsPerInstanceFieldNumber = 9;
  ::google::protobuf::uint32 num_anno_points_per_instance() const;
  void set_num_anno_points_per_instance(::google::protobuf::uint32 value);

  // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
  bool has_scale_choose_strategy() const;
  void clear_scale_choose_strategy();
  static const int kScaleChooseStrategyFieldNumber = 1;
  ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy scale_choose_strategy() const;
  void set_scale_choose_strategy(::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy value);

  // optional bool single_thread = 11 [default = true];
  bool has_single_thread() const;
  void clear_single_thread();
  static const int kSingleThreadFieldNumber = 11;
  bool single_thread() const;
  void set_single_thread(bool value);

  // optional float scale_positive_upper_bounder = 12 [default = 1.2];
  bool has_scale_positive_upper_bounder() const;
  void clear_scale_positive_upper_bounder();
  static const int kScalePositiveUpperBounderFieldNumber = 12;
  float scale_positive_upper_bounder() const;
  void set_scale_positive_upper_bounder(float value);

  // optional float scale_positive_lower_bounder = 13 [default = 0.8];
  bool has_scale_positive_lower_bounder() const;
  void clear_scale_positive_lower_bounder();
  static const int kScalePositiveLowerBounderFieldNumber = 13;
  float scale_positive_lower_bounder() const;
  void set_scale_positive_lower_bounder(float value);

  // optional float scale_ignore_upper_bounder = 14 [default = 1.2];
  bool has_scale_ignore_upper_bounder() const;
  void clear_scale_ignore_upper_bounder();
  static const int kScaleIgnoreUpperBounderFieldNumber = 14;
  float scale_ignore_upper_bounder() const;
  void set_scale_ignore_upper_bounder(float value);

  // optional float scale_ignore_lower_bounder = 15 [default = 0.8];
  bool has_scale_ignore_lower_bounder() const;
  void clear_scale_ignore_lower_bounder();
  static const int kScaleIgnoreLowerBounderFieldNumber = 15;
  float scale_ignore_lower_bounder() const;
  void set_scale_ignore_lower_bounder(float value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataCommonParameter)
 private:
  void set_has_scale_choose_strategy();
  void clear_has_scale_choose_strategy();
  void set_has_scale_positive_upper_bounder();
  void clear_has_scale_positive_upper_bounder();
  void set_has_scale_positive_lower_bounder();
  void clear_has_scale_positive_lower_bounder();
  void set_has_scale_ignore_upper_bounder();
  void clear_has_scale_ignore_upper_bounder();
  void set_has_scale_ignore_lower_bounder();
  void clear_has_scale_ignore_lower_bounder();
  void set_has_input_height();
  void clear_has_input_height();
  void set_has_input_width();
  void clear_has_input_width();
  void set_has_heat_map_a();
  void clear_has_heat_map_a();
  void set_has_heat_map_b();
  void clear_has_heat_map_b();
  void set_has_out_height();
  void clear_has_out_height();
  void set_has_out_width();
  void clear_has_out_width();
  void set_has_num_anno_points_per_instance();
  void clear_has_num_anno_points_per_instance();
  void set_has_single_thread();
  void clear_has_single_thread();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > scale_base_;
  ::google::protobuf::uint32 input_height_;
  ::google::protobuf::uint32 input_width_;
  ::google::protobuf::uint32 heat_map_a_;
  ::google::protobuf::uint32 heat_map_b_;
  ::google::protobuf::uint32 out_height_;
  ::google::protobuf::uint32 out_width_;
  ::google::protobuf::uint32 num_anno_points_per_instance_;
  int scale_choose_strategy_;
  bool single_thread_;
  float scale_positive_upper_bounder_;
  float scale_positive_lower_bounder_;
  float scale_ignore_upper_bounder_;
  float scale_ignore_lower_bounder_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataKeyPointParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataKeyPointParameter) */ {
 public:
  FCNImageDataKeyPointParameter();
  virtual ~FCNImageDataKeyPointParameter();

  FCNImageDataKeyPointParameter(const FCNImageDataKeyPointParameter& from);

  inline FCNImageDataKeyPointParameter& operator=(const FCNImageDataKeyPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataKeyPointParameter& default_instance();

  static inline const FCNImageDataKeyPointParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataKeyPointParameter*>(
               &_FCNImageDataKeyPointParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FCNImageDataKeyPointParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataKeyPointParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataKeyPointParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataKeyPointParameter& from);
  void MergeFrom(const FCNImageDataKeyPointParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataKeyPointParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ignore_flag_list_file = 3;
  bool has_ignore_flag_list_file() const;
  void clear_ignore_flag_list_file();
  static const int kIgnoreFlagListFileFieldNumber = 3;
  const ::std::string& ignore_flag_list_file() const;
  void set_ignore_flag_list_file(const ::std::string& value);
  #if LANG_CXX11
  void set_ignore_flag_list_file(::std::string&& value);
  #endif
  void set_ignore_flag_list_file(const char* value);
  void set_ignore_flag_list_file(const char* value, size_t size);
  ::std::string* mutable_ignore_flag_list_file();
  ::std::string* release_ignore_flag_list_file();
  void set_allocated_ignore_flag_list_file(::std::string* ignore_flag_list_file);

  // optional string used_key_points_file = 9;
  bool has_used_key_points_file() const;
  void clear_used_key_points_file();
  static const int kUsedKeyPointsFileFieldNumber = 9;
  const ::std::string& used_key_points_file() const;
  void set_used_key_points_file(const ::std::string& value);
  #if LANG_CXX11
  void set_used_key_points_file(::std::string&& value);
  #endif
  void set_used_key_points_file(const char* value);
  void set_used_key_points_file(const char* value, size_t size);
  ::std::string* mutable_used_key_points_file();
  ::std::string* release_used_key_points_file();
  void set_allocated_used_key_points_file(::std::string* used_key_points_file);

  // optional bool need_point_loc_diff = 5 [default = false];
  bool has_need_point_loc_diff() const;
  void clear_need_point_loc_diff();
  static const int kNeedPointLocDiffFieldNumber = 5;
  bool need_point_loc_diff() const;
  void set_need_point_loc_diff(bool value);

  // optional uint32 key_point_counts = 8 [default = 0];
  bool has_key_point_counts() const;
  void clear_key_point_counts();
  static const int kKeyPointCountsFieldNumber = 8;
  ::google::protobuf::uint32 key_point_counts() const;
  void set_key_point_counts(::google::protobuf::uint32 value);

  // optional uint32 valid_distance = 1 [default = 6];
  bool has_valid_distance() const;
  void clear_valid_distance();
  static const int kValidDistanceFieldNumber = 1;
  ::google::protobuf::uint32 valid_distance() const;
  void set_valid_distance(::google::protobuf::uint32 value);

  // optional uint32 ignore_flag_radius = 2 [default = 20];
  bool has_ignore_flag_radius() const;
  void clear_ignore_flag_radius();
  static const int kIgnoreFlagRadiusFieldNumber = 2;
  ::google::protobuf::uint32 ignore_flag_radius() const;
  void set_ignore_flag_radius(::google::protobuf::uint32 value);

  // optional uint32 min_out_valid_len = 4 [default = 1];
  bool has_min_out_valid_len() const;
  void clear_min_out_valid_len();
  static const int kMinOutValidLenFieldNumber = 4;
  ::google::protobuf::uint32 min_out_valid_len() const;
  void set_min_out_valid_len(::google::protobuf::uint32 value);

  // optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
  bool has_valid_point_loc_diff_dist() const;
  void clear_valid_point_loc_diff_dist();
  static const int kValidPointLocDiffDistFieldNumber = 6;
  ::google::protobuf::uint32 valid_point_loc_diff_dist() const;
  void set_valid_point_loc_diff_dist(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataKeyPointParameter)
 private:
  void set_has_valid_distance();
  void clear_has_valid_distance();
  void set_has_min_out_valid_len();
  void clear_has_min_out_valid_len();
  void set_has_key_point_counts();
  void clear_has_key_point_counts();
  void set_has_used_key_points_file();
  void clear_has_used_key_points_file();
  void set_has_ignore_flag_radius();
  void clear_has_ignore_flag_radius();
  void set_has_ignore_flag_list_file();
  void clear_has_ignore_flag_list_file();
  void set_has_need_point_loc_diff();
  void clear_has_need_point_loc_diff();
  void set_has_valid_point_loc_diff_dist();
  void clear_has_valid_point_loc_diff_dist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ignore_flag_list_file_;
  ::google::protobuf::internal::ArenaStringPtr used_key_points_file_;
  bool need_point_loc_diff_;
  ::google::protobuf::uint32 key_point_counts_;
  ::google::protobuf::uint32 valid_distance_;
  ::google::protobuf::uint32 ignore_flag_radius_;
  ::google::protobuf::uint32 min_out_valid_len_;
  ::google::protobuf::uint32 valid_point_loc_diff_dist_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataBoxNormParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataBoxNormParameter) */ {
 public:
  FCNImageDataBoxNormParameter();
  virtual ~FCNImageDataBoxNormParameter();

  FCNImageDataBoxNormParameter(const FCNImageDataBoxNormParameter& from);

  inline FCNImageDataBoxNormParameter& operator=(const FCNImageDataBoxNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataBoxNormParameter& default_instance();

  static inline const FCNImageDataBoxNormParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataBoxNormParameter*>(
               &_FCNImageDataBoxNormParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FCNImageDataBoxNormParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataBoxNormParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataBoxNormParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataBoxNormParameter& from);
  void MergeFrom(const FCNImageDataBoxNormParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataBoxNormParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FCNImageDataBoxNormParameter_BBoxSizeNormType BBoxSizeNormType;
  static const BBoxSizeNormType HEIGHT =
    FCNImageDataBoxNormParameter_BBoxSizeNormType_HEIGHT;
  static const BBoxSizeNormType WIDTH =
    FCNImageDataBoxNormParameter_BBoxSizeNormType_WIDTH;
  static const BBoxSizeNormType DIAG =
    FCNImageDataBoxNormParameter_BBoxSizeNormType_DIAG;
  static inline bool BBoxSizeNormType_IsValid(int value) {
    return FCNImageDataBoxNormParameter_BBoxSizeNormType_IsValid(value);
  }
  static const BBoxSizeNormType BBoxSizeNormType_MIN =
    FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_MIN;
  static const BBoxSizeNormType BBoxSizeNormType_MAX =
    FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_MAX;
  static const int BBoxSizeNormType_ARRAYSIZE =
    FCNImageDataBoxNormParameter_BBoxSizeNormType_BBoxSizeNormType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BBoxSizeNormType_descriptor() {
    return FCNImageDataBoxNormParameter_BBoxSizeNormType_descriptor();
  }
  static inline const ::std::string& BBoxSizeNormType_Name(BBoxSizeNormType value) {
    return FCNImageDataBoxNormParameter_BBoxSizeNormType_Name(value);
  }
  static inline bool BBoxSizeNormType_Parse(const ::std::string& name,
      BBoxSizeNormType* value) {
    return FCNImageDataBoxNormParameter_BBoxSizeNormType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
  bool has_bbox_size_norm_type() const;
  void clear_bbox_size_norm_type();
  static const int kBboxSizeNormTypeFieldNumber = 9;
  ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType bbox_size_norm_type() const;
  void set_bbox_size_norm_type(::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType value);

  // optional uint32 bbox_height = 10 [default = 50];
  bool has_bbox_height() const;
  void clear_bbox_height();
  static const int kBboxHeightFieldNumber = 10;
  ::google::protobuf::uint32 bbox_height() const;
  void set_bbox_height(::google::protobuf::uint32 value);

  // optional uint32 bbox_width = 11 [default = 50];
  bool has_bbox_width() const;
  void clear_bbox_width();
  static const int kBboxWidthFieldNumber = 11;
  ::google::protobuf::uint32 bbox_width() const;
  void set_bbox_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataBoxNormParameter)
 private:
  void set_has_bbox_height();
  void clear_has_bbox_height();
  void set_has_bbox_width();
  void clear_has_bbox_width();
  void set_has_bbox_size_norm_type();
  void clear_has_bbox_size_norm_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int bbox_size_norm_type_;
  ::google::protobuf::uint32 bbox_height_;
  ::google::protobuf::uint32 bbox_width_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataDetectionBoxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter) */ {
 public:
  FCNImageDataDetectionBoxParameter();
  virtual ~FCNImageDataDetectionBoxParameter();

  FCNImageDataDetectionBoxParameter(const FCNImageDataDetectionBoxParameter& from);

  inline FCNImageDataDetectionBoxParameter& operator=(const FCNImageDataDetectionBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataDetectionBoxParameter& default_instance();

  static inline const FCNImageDataDetectionBoxParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataDetectionBoxParameter*>(
               &_FCNImageDataDetectionBoxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FCNImageDataDetectionBoxParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataDetectionBoxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataDetectionBoxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataDetectionBoxParameter& from);
  void MergeFrom(const FCNImageDataDetectionBoxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataDetectionBoxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FCNImageDataDetectionBoxParameter_BBoxSizeNormType BBoxSizeNormType;
  static const BBoxSizeNormType HEIGHT =
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_HEIGHT;
  static const BBoxSizeNormType WIDTH =
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_WIDTH;
  static const BBoxSizeNormType DIAG =
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_DIAG;
  static inline bool BBoxSizeNormType_IsValid(int value) {
    return FCNImageDataDetectionBoxParameter_BBoxSizeNormType_IsValid(value);
  }
  static const BBoxSizeNormType BBoxSizeNormType_MIN =
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_MIN;
  static const BBoxSizeNormType BBoxSizeNormType_MAX =
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_MAX;
  static const int BBoxSizeNormType_ARRAYSIZE =
    FCNImageDataDetectionBoxParameter_BBoxSizeNormType_BBoxSizeNormType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BBoxSizeNormType_descriptor() {
    return FCNImageDataDetectionBoxParameter_BBoxSizeNormType_descriptor();
  }
  static inline const ::std::string& BBoxSizeNormType_Name(BBoxSizeNormType value) {
    return FCNImageDataDetectionBoxParameter_BBoxSizeNormType_Name(value);
  }
  static inline bool BBoxSizeNormType_Parse(const ::std::string& name,
      BBoxSizeNormType* value) {
    return FCNImageDataDetectionBoxParameter_BBoxSizeNormType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 bbox_point_id = 4;
  int bbox_point_id_size() const;
  void clear_bbox_point_id();
  static const int kBboxPointIdFieldNumber = 4;
  ::google::protobuf::uint32 bbox_point_id(int index) const;
  void set_bbox_point_id(int index, ::google::protobuf::uint32 value);
  void add_bbox_point_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bbox_point_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bbox_point_id();

  // optional string list_point_diff_from_center = 7;
  bool has_list_point_diff_from_center() const;
  void clear_list_point_diff_from_center();
  static const int kListPointDiffFromCenterFieldNumber = 7;
  const ::std::string& list_point_diff_from_center() const;
  void set_list_point_diff_from_center(const ::std::string& value);
  #if LANG_CXX11
  void set_list_point_diff_from_center(::std::string&& value);
  #endif
  void set_list_point_diff_from_center(const char* value);
  void set_list_point_diff_from_center(const char* value, size_t size);
  ::std::string* mutable_list_point_diff_from_center();
  ::std::string* release_list_point_diff_from_center();
  void set_allocated_list_point_diff_from_center(::std::string* list_point_diff_from_center);

  // optional bool need_detection_loc_diff = 2 [default = false];
  bool has_need_detection_loc_diff() const;
  void clear_need_detection_loc_diff();
  static const int kNeedDetectionLocDiffFieldNumber = 2;
  bool need_detection_loc_diff() const;
  void set_need_detection_loc_diff(bool value);

  // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
  bool has_bbox_size_norm_type() const;
  void clear_bbox_size_norm_type();
  static const int kBboxSizeNormTypeFieldNumber = 9;
  ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType bbox_size_norm_type() const;
  void set_bbox_size_norm_type(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType value);

  // optional uint32 class_flag_id = 12;
  bool has_class_flag_id() const;
  void clear_class_flag_id();
  static const int kClassFlagIdFieldNumber = 12;
  ::google::protobuf::uint32 class_flag_id() const;
  void set_class_flag_id(::google::protobuf::uint32 value);

  // optional uint32 min_output_pos_radius = 1 [default = 1];
  bool has_min_output_pos_radius() const;
  void clear_min_output_pos_radius();
  static const int kMinOutputPosRadiusFieldNumber = 1;
  ::google::protobuf::uint32 min_output_pos_radius() const;
  void set_min_output_pos_radius(::google::protobuf::uint32 value);

  // optional float bbox_valid_dist_ratio = 5 [default = 0.6];
  bool has_bbox_valid_dist_ratio() const;
  void clear_bbox_valid_dist_ratio();
  static const int kBboxValidDistRatioFieldNumber = 5;
  float bbox_valid_dist_ratio() const;
  void set_bbox_valid_dist_ratio(float value);

  // optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
  bool has_bbox_loc_diff_valid_dist_ratio() const;
  void clear_bbox_loc_diff_valid_dist_ratio();
  static const int kBboxLocDiffValidDistRatioFieldNumber = 6;
  float bbox_loc_diff_valid_dist_ratio() const;
  void set_bbox_loc_diff_valid_dist_ratio(float value);

  // optional uint32 ignore_margin = 8 [default = 3];
  bool has_ignore_margin() const;
  void clear_ignore_margin();
  static const int kIgnoreMarginFieldNumber = 8;
  ::google::protobuf::uint32 ignore_margin() const;
  void set_ignore_margin(::google::protobuf::uint32 value);

  // optional uint32 bbox_height = 10 [default = 50];
  bool has_bbox_height() const;
  void clear_bbox_height();
  static const int kBboxHeightFieldNumber = 10;
  ::google::protobuf::uint32 bbox_height() const;
  void set_bbox_height(::google::protobuf::uint32 value);

  // optional uint32 bbox_width = 11 [default = 50];
  bool has_bbox_width() const;
  void clear_bbox_width();
  static const int kBboxWidthFieldNumber = 11;
  ::google::protobuf::uint32 bbox_width() const;
  void set_bbox_width(::google::protobuf::uint32 value);

  // optional uint32 total_class_num = 13 [default = 1];
  bool has_total_class_num() const;
  void clear_total_class_num();
  static const int kTotalClassNumFieldNumber = 13;
  ::google::protobuf::uint32 total_class_num() const;
  void set_total_class_num(::google::protobuf::uint32 value);

  // optional bool loc_regress_on_ignore = 14 [default = true];
  bool has_loc_regress_on_ignore() const;
  void clear_loc_regress_on_ignore();
  static const int kLocRegressOnIgnoreFieldNumber = 14;
  bool loc_regress_on_ignore() const;
  void set_loc_regress_on_ignore(bool value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter)
 private:
  void set_has_min_output_pos_radius();
  void clear_has_min_output_pos_radius();
  void set_has_need_detection_loc_diff();
  void clear_has_need_detection_loc_diff();
  void set_has_bbox_height();
  void clear_has_bbox_height();
  void set_has_bbox_width();
  void clear_has_bbox_width();
  void set_has_bbox_size_norm_type();
  void clear_has_bbox_size_norm_type();
  void set_has_bbox_valid_dist_ratio();
  void clear_has_bbox_valid_dist_ratio();
  void set_has_bbox_loc_diff_valid_dist_ratio();
  void clear_has_bbox_loc_diff_valid_dist_ratio();
  void set_has_list_point_diff_from_center();
  void clear_has_list_point_diff_from_center();
  void set_has_ignore_margin();
  void clear_has_ignore_margin();
  void set_has_loc_regress_on_ignore();
  void clear_has_loc_regress_on_ignore();
  void set_has_class_flag_id();
  void clear_has_class_flag_id();
  void set_has_total_class_num();
  void clear_has_total_class_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bbox_point_id_;
  ::google::protobuf::internal::ArenaStringPtr list_point_diff_from_center_;
  bool need_detection_loc_diff_;
  int bbox_size_norm_type_;
  ::google::protobuf::uint32 class_flag_id_;
  ::google::protobuf::uint32 min_output_pos_radius_;
  float bbox_valid_dist_ratio_;
  float bbox_loc_diff_valid_dist_ratio_;
  ::google::protobuf::uint32 ignore_margin_;
  ::google::protobuf::uint32 bbox_height_;
  ::google::protobuf::uint32 bbox_width_;
  ::google::protobuf::uint32 total_class_num_;
  bool loc_regress_on_ignore_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataIgnoreBoxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter) */ {
 public:
  FCNImageDataIgnoreBoxParameter();
  virtual ~FCNImageDataIgnoreBoxParameter();

  FCNImageDataIgnoreBoxParameter(const FCNImageDataIgnoreBoxParameter& from);

  inline FCNImageDataIgnoreBoxParameter& operator=(const FCNImageDataIgnoreBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataIgnoreBoxParameter& default_instance();

  static inline const FCNImageDataIgnoreBoxParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataIgnoreBoxParameter*>(
               &_FCNImageDataIgnoreBoxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FCNImageDataIgnoreBoxParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataIgnoreBoxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataIgnoreBoxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataIgnoreBoxParameter& from);
  void MergeFrom(const FCNImageDataIgnoreBoxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataIgnoreBoxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ignore_box_point_id = 2;
  int ignore_box_point_id_size() const;
  void clear_ignore_box_point_id();
  static const int kIgnoreBoxPointIdFieldNumber = 2;
  ::google::protobuf::uint32 ignore_box_point_id(int index) const;
  void set_ignore_box_point_id(int index, ::google::protobuf::uint32 value);
  void add_ignore_box_point_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ignore_box_point_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ignore_box_point_id();

  // optional uint32 ignore_box_flag_id = 1 [default = 1000];
  bool has_ignore_box_flag_id() const;
  void clear_ignore_box_flag_id();
  static const int kIgnoreBoxFlagIdFieldNumber = 1;
  ::google::protobuf::uint32 ignore_box_flag_id() const;
  void set_ignore_box_flag_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter)
 private:
  void set_has_ignore_box_flag_id();
  void clear_has_ignore_box_flag_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ignore_box_point_id_;
  ::google::protobuf::uint32 ignore_box_flag_id_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCNImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_fcn_data_layer.FCNImageDataParameter) */ {
 public:
  FCNImageDataParameter();
  virtual ~FCNImageDataParameter();

  FCNImageDataParameter(const FCNImageDataParameter& from);

  inline FCNImageDataParameter& operator=(const FCNImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNImageDataParameter& default_instance();

  static inline const FCNImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const FCNImageDataParameter*>(
               &_FCNImageDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FCNImageDataParameter* other);

  // implements Message ----------------------------------------------

  inline FCNImageDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNImageDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNImageDataParameter& from);
  void MergeFrom(const FCNImageDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNImageDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
  bool has_fcn_image_data_common_param() const;
  void clear_fcn_image_data_common_param();
  static const int kFcnImageDataCommonParamFieldNumber = 1;
  const ::caffe_fcn_data_layer::FCNImageDataCommonParameter& fcn_image_data_common_param() const;
  ::caffe_fcn_data_layer::FCNImageDataCommonParameter* mutable_fcn_image_data_common_param();
  ::caffe_fcn_data_layer::FCNImageDataCommonParameter* release_fcn_image_data_common_param();
  void set_allocated_fcn_image_data_common_param(::caffe_fcn_data_layer::FCNImageDataCommonParameter* fcn_image_data_common_param);

  // optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
  bool has_fcn_image_data_key_point_param() const;
  void clear_fcn_image_data_key_point_param();
  static const int kFcnImageDataKeyPointParamFieldNumber = 2;
  const ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter& fcn_image_data_key_point_param() const;
  ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* mutable_fcn_image_data_key_point_param();
  ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* release_fcn_image_data_key_point_param();
  void set_allocated_fcn_image_data_key_point_param(::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* fcn_image_data_key_point_param);

  // optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
  bool has_fcn_image_data_detection_box_param() const;
  void clear_fcn_image_data_detection_box_param();
  static const int kFcnImageDataDetectionBoxParamFieldNumber = 3;
  const ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter& fcn_image_data_detection_box_param() const;
  ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* mutable_fcn_image_data_detection_box_param();
  ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* release_fcn_image_data_detection_box_param();
  void set_allocated_fcn_image_data_detection_box_param(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* fcn_image_data_detection_box_param);

  // optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
  bool has_fcn_image_data_ignore_box_param() const;
  void clear_fcn_image_data_ignore_box_param();
  static const int kFcnImageDataIgnoreBoxParamFieldNumber = 4;
  const ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter& fcn_image_data_ignore_box_param() const;
  ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* mutable_fcn_image_data_ignore_box_param();
  ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* release_fcn_image_data_ignore_box_param();
  void set_allocated_fcn_image_data_ignore_box_param(::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* fcn_image_data_ignore_box_param);

  // optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
  bool has_fcn_image_data_source_param() const;
  void clear_fcn_image_data_source_param();
  static const int kFcnImageDataSourceParamFieldNumber = 5;
  const ::caffe_fcn_data_layer::FCNImageDataSourceParameter& fcn_image_data_source_param() const;
  ::caffe_fcn_data_layer::FCNImageDataSourceParameter* mutable_fcn_image_data_source_param();
  ::caffe_fcn_data_layer::FCNImageDataSourceParameter* release_fcn_image_data_source_param();
  void set_allocated_fcn_image_data_source_param(::caffe_fcn_data_layer::FCNImageDataSourceParameter* fcn_image_data_source_param);

  // optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
  bool has_fcn_image_data_reader_param() const;
  void clear_fcn_image_data_reader_param();
  static const int kFcnImageDataReaderParamFieldNumber = 6;
  const ::caffe_fcn_data_layer::FCNImageDataReaderParameter& fcn_image_data_reader_param() const;
  ::caffe_fcn_data_layer::FCNImageDataReaderParameter* mutable_fcn_image_data_reader_param();
  ::caffe_fcn_data_layer::FCNImageDataReaderParameter* release_fcn_image_data_reader_param();
  void set_allocated_fcn_image_data_reader_param(::caffe_fcn_data_layer::FCNImageDataReaderParameter* fcn_image_data_reader_param);

  // @@protoc_insertion_point(class_scope:caffe_fcn_data_layer.FCNImageDataParameter)
 private:
  void set_has_fcn_image_data_common_param();
  void clear_has_fcn_image_data_common_param();
  void set_has_fcn_image_data_key_point_param();
  void clear_has_fcn_image_data_key_point_param();
  void set_has_fcn_image_data_detection_box_param();
  void clear_has_fcn_image_data_detection_box_param();
  void set_has_fcn_image_data_ignore_box_param();
  void clear_has_fcn_image_data_ignore_box_param();
  void set_has_fcn_image_data_source_param();
  void clear_has_fcn_image_data_source_param();
  void set_has_fcn_image_data_reader_param();
  void clear_has_fcn_image_data_reader_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe_fcn_data_layer::FCNImageDataCommonParameter* fcn_image_data_common_param_;
  ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* fcn_image_data_key_point_param_;
  ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* fcn_image_data_detection_box_param_;
  ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* fcn_image_data_ignore_box_param_;
  ::caffe_fcn_data_layer::FCNImageDataSourceParameter* fcn_image_data_source_param_;
  ::caffe_fcn_data_layer::FCNImageDataReaderParameter* fcn_image_data_reader_param_;
  friend struct protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FCNImageDataSourceParameter

// optional string pos_samples_source = 1;
inline bool FCNImageDataSourceParameter::has_pos_samples_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_pos_samples_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataSourceParameter::clear_has_pos_samples_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataSourceParameter::clear_pos_samples_source() {
  pos_samples_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pos_samples_source();
}
inline const ::std::string& FCNImageDataSourceParameter::pos_samples_source() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
  return pos_samples_source_.GetNoArena();
}
inline void FCNImageDataSourceParameter::set_pos_samples_source(const ::std::string& value) {
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
#if LANG_CXX11
inline void FCNImageDataSourceParameter::set_pos_samples_source(::std::string&& value) {
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
#endif
inline void FCNImageDataSourceParameter::set_pos_samples_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
inline void FCNImageDataSourceParameter::set_pos_samples_source(const char* value, size_t size) {
  set_has_pos_samples_source();
  pos_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}
inline ::std::string* FCNImageDataSourceParameter::mutable_pos_samples_source() {
  set_has_pos_samples_source();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
  return pos_samples_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataSourceParameter::release_pos_samples_source() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
  clear_has_pos_samples_source();
  return pos_samples_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataSourceParameter::set_allocated_pos_samples_source(::std::string* pos_samples_source) {
  if (pos_samples_source != NULL) {
    set_has_pos_samples_source();
  } else {
    clear_has_pos_samples_source();
  }
  pos_samples_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos_samples_source);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_samples_source)
}

// optional string pos_img_folder = 9;
inline bool FCNImageDataSourceParameter::has_pos_img_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_pos_img_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataSourceParameter::clear_has_pos_img_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataSourceParameter::clear_pos_img_folder() {
  pos_img_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pos_img_folder();
}
inline const ::std::string& FCNImageDataSourceParameter::pos_img_folder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
  return pos_img_folder_.GetNoArena();
}
inline void FCNImageDataSourceParameter::set_pos_img_folder(const ::std::string& value) {
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
#if LANG_CXX11
inline void FCNImageDataSourceParameter::set_pos_img_folder(::std::string&& value) {
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
#endif
inline void FCNImageDataSourceParameter::set_pos_img_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
inline void FCNImageDataSourceParameter::set_pos_img_folder(const char* value, size_t size) {
  set_has_pos_img_folder();
  pos_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}
inline ::std::string* FCNImageDataSourceParameter::mutable_pos_img_folder() {
  set_has_pos_img_folder();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
  return pos_img_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataSourceParameter::release_pos_img_folder() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
  clear_has_pos_img_folder();
  return pos_img_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataSourceParameter::set_allocated_pos_img_folder(::std::string* pos_img_folder) {
  if (pos_img_folder != NULL) {
    set_has_pos_img_folder();
  } else {
    clear_has_pos_img_folder();
  }
  pos_img_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos_img_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.pos_img_folder)
}

// optional string neg_samples_source = 2;
inline bool FCNImageDataSourceParameter::has_neg_samples_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_neg_samples_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataSourceParameter::clear_has_neg_samples_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataSourceParameter::clear_neg_samples_source() {
  neg_samples_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_neg_samples_source();
}
inline const ::std::string& FCNImageDataSourceParameter::neg_samples_source() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
  return neg_samples_source_.GetNoArena();
}
inline void FCNImageDataSourceParameter::set_neg_samples_source(const ::std::string& value) {
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
#if LANG_CXX11
inline void FCNImageDataSourceParameter::set_neg_samples_source(::std::string&& value) {
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
#endif
inline void FCNImageDataSourceParameter::set_neg_samples_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
inline void FCNImageDataSourceParameter::set_neg_samples_source(const char* value, size_t size) {
  set_has_neg_samples_source();
  neg_samples_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}
inline ::std::string* FCNImageDataSourceParameter::mutable_neg_samples_source() {
  set_has_neg_samples_source();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
  return neg_samples_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataSourceParameter::release_neg_samples_source() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
  clear_has_neg_samples_source();
  return neg_samples_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataSourceParameter::set_allocated_neg_samples_source(::std::string* neg_samples_source) {
  if (neg_samples_source != NULL) {
    set_has_neg_samples_source();
  } else {
    clear_has_neg_samples_source();
  }
  neg_samples_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg_samples_source);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_samples_source)
}

// optional string neg_img_folder = 10;
inline bool FCNImageDataSourceParameter::has_neg_img_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_neg_img_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNImageDataSourceParameter::clear_has_neg_img_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNImageDataSourceParameter::clear_neg_img_folder() {
  neg_img_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_neg_img_folder();
}
inline const ::std::string& FCNImageDataSourceParameter::neg_img_folder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
  return neg_img_folder_.GetNoArena();
}
inline void FCNImageDataSourceParameter::set_neg_img_folder(const ::std::string& value) {
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
#if LANG_CXX11
inline void FCNImageDataSourceParameter::set_neg_img_folder(::std::string&& value) {
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
#endif
inline void FCNImageDataSourceParameter::set_neg_img_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
inline void FCNImageDataSourceParameter::set_neg_img_folder(const char* value, size_t size) {
  set_has_neg_img_folder();
  neg_img_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}
inline ::std::string* FCNImageDataSourceParameter::mutable_neg_img_folder() {
  set_has_neg_img_folder();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
  return neg_img_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataSourceParameter::release_neg_img_folder() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
  clear_has_neg_img_folder();
  return neg_img_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataSourceParameter::set_allocated_neg_img_folder(::std::string* neg_img_folder) {
  if (neg_img_folder != NULL) {
    set_has_neg_img_folder();
  } else {
    clear_has_neg_img_folder();
  }
  neg_img_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg_img_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_img_folder)
}

// optional float neg_ratio = 3 [default = 0.5];
inline bool FCNImageDataSourceParameter::has_neg_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_neg_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FCNImageDataSourceParameter::clear_has_neg_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FCNImageDataSourceParameter::clear_neg_ratio() {
  neg_ratio_ = 0.5f;
  clear_has_neg_ratio();
}
inline float FCNImageDataSourceParameter::neg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_ratio)
  return neg_ratio_;
}
inline void FCNImageDataSourceParameter::set_neg_ratio(float value) {
  set_has_neg_ratio();
  neg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.neg_ratio)
}

// optional uint32 batch_size = 5 [default = 1];
inline bool FCNImageDataSourceParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FCNImageDataSourceParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FCNImageDataSourceParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 FCNImageDataSourceParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.batch_size)
  return batch_size_;
}
inline void FCNImageDataSourceParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.batch_size)
}

// optional bool shuffle = 6 [default = true];
inline bool FCNImageDataSourceParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FCNImageDataSourceParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FCNImageDataSourceParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool FCNImageDataSourceParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.shuffle)
  return shuffle_;
}
inline void FCNImageDataSourceParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.shuffle)
}

// optional float bootstrap_hard_ratio = 4 [default = 0.5];
inline bool FCNImageDataSourceParameter::has_bootstrap_hard_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_bootstrap_hard_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FCNImageDataSourceParameter::clear_has_bootstrap_hard_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FCNImageDataSourceParameter::clear_bootstrap_hard_ratio() {
  bootstrap_hard_ratio_ = 0.5f;
  clear_has_bootstrap_hard_ratio();
}
inline float FCNImageDataSourceParameter::bootstrap_hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_hard_ratio)
  return bootstrap_hard_ratio_;
}
inline void FCNImageDataSourceParameter::set_bootstrap_hard_ratio(float value) {
  set_has_bootstrap_hard_ratio();
  bootstrap_hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_hard_ratio)
}

// optional .caffe_fcn_data_layer.FCNImageDataSourceParameter.STDLengthType bootstrap_std_length_type = 7 [default = HEIGHT];
inline bool FCNImageDataSourceParameter::has_bootstrap_std_length_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_bootstrap_std_length_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNImageDataSourceParameter::clear_has_bootstrap_std_length_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNImageDataSourceParameter::clear_bootstrap_std_length_type() {
  bootstrap_std_length_type_ = 0;
  clear_has_bootstrap_std_length_type();
}
inline ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType FCNImageDataSourceParameter::bootstrap_std_length_type() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length_type)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType >(bootstrap_std_length_type_);
}
inline void FCNImageDataSourceParameter::set_bootstrap_std_length_type(::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType value) {
  assert(::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType_IsValid(value));
  set_has_bootstrap_std_length_type();
  bootstrap_std_length_type_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length_type)
}

// optional float bootstrap_std_length = 8 [default = 0];
inline bool FCNImageDataSourceParameter::has_bootstrap_std_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_bootstrap_std_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNImageDataSourceParameter::clear_has_bootstrap_std_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNImageDataSourceParameter::clear_bootstrap_std_length() {
  bootstrap_std_length_ = 0;
  clear_has_bootstrap_std_length();
}
inline float FCNImageDataSourceParameter::bootstrap_std_length() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length)
  return bootstrap_std_length_;
}
inline void FCNImageDataSourceParameter::set_bootstrap_std_length(float value) {
  set_has_bootstrap_std_length();
  bootstrap_std_length_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.bootstrap_std_length)
}

// optional bool multi_class_sample_balance = 11 [default = false];
inline bool FCNImageDataSourceParameter::has_multi_class_sample_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FCNImageDataSourceParameter::set_has_multi_class_sample_balance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FCNImageDataSourceParameter::clear_has_multi_class_sample_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FCNImageDataSourceParameter::clear_multi_class_sample_balance() {
  multi_class_sample_balance_ = false;
  clear_has_multi_class_sample_balance();
}
inline bool FCNImageDataSourceParameter::multi_class_sample_balance() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataSourceParameter.multi_class_sample_balance)
  return multi_class_sample_balance_;
}
inline void FCNImageDataSourceParameter::set_multi_class_sample_balance(bool value) {
  set_has_multi_class_sample_balance();
  multi_class_sample_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataSourceParameter.multi_class_sample_balance)
}

// -------------------------------------------------------------------

// SaltPepperParameter

// optional float fraction = 1 [default = 0];
inline bool SaltPepperParameter::has_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaltPepperParameter::set_has_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaltPepperParameter::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaltPepperParameter::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
inline float SaltPepperParameter::fraction() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.SaltPepperParameter.fraction)
  return fraction_;
}
inline void SaltPepperParameter::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.SaltPepperParameter.fraction)
}

// repeated float value = 2;
inline int SaltPepperParameter::value_size() const {
  return value_.size();
}
inline void SaltPepperParameter::clear_value() {
  value_.Clear();
}
inline float SaltPepperParameter::value(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.SaltPepperParameter.value)
  return value_.Get(index);
}
inline void SaltPepperParameter::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.SaltPepperParameter.value)
}
inline void SaltPepperParameter::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.SaltPepperParameter.value)
}
inline const ::google::protobuf::RepeatedField< float >&
SaltPepperParameter::value() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.SaltPepperParameter.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
SaltPepperParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.SaltPepperParameter.value)
  return &value_;
}

// -------------------------------------------------------------------

// NoiseParameter

// optional float prob = 1 [default = 0];
inline bool NoiseParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoiseParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoiseParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoiseParameter::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float NoiseParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.prob)
  return prob_;
}
inline void NoiseParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.prob)
}

// optional bool hist_eq = 2 [default = false];
inline bool NoiseParameter::has_hist_eq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoiseParameter::set_has_hist_eq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoiseParameter::clear_has_hist_eq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoiseParameter::clear_hist_eq() {
  hist_eq_ = false;
  clear_has_hist_eq();
}
inline bool NoiseParameter::hist_eq() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.hist_eq)
  return hist_eq_;
}
inline void NoiseParameter::set_hist_eq(bool value) {
  set_has_hist_eq();
  hist_eq_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.hist_eq)
}

// optional bool inverse = 3 [default = false];
inline bool NoiseParameter::has_inverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NoiseParameter::set_has_inverse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NoiseParameter::clear_has_inverse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NoiseParameter::clear_inverse() {
  inverse_ = false;
  clear_has_inverse();
}
inline bool NoiseParameter::inverse() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.inverse)
  return inverse_;
}
inline void NoiseParameter::set_inverse(bool value) {
  set_has_inverse();
  inverse_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.inverse)
}

// optional bool decolorize = 4 [default = false];
inline bool NoiseParameter::has_decolorize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NoiseParameter::set_has_decolorize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NoiseParameter::clear_has_decolorize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NoiseParameter::clear_decolorize() {
  decolorize_ = false;
  clear_has_decolorize();
}
inline bool NoiseParameter::decolorize() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.decolorize)
  return decolorize_;
}
inline void NoiseParameter::set_decolorize(bool value) {
  set_has_decolorize();
  decolorize_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.decolorize)
}

// optional bool gauss_blur = 5 [default = false];
inline bool NoiseParameter::has_gauss_blur() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NoiseParameter::set_has_gauss_blur() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NoiseParameter::clear_has_gauss_blur() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NoiseParameter::clear_gauss_blur() {
  gauss_blur_ = false;
  clear_has_gauss_blur();
}
inline bool NoiseParameter::gauss_blur() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.gauss_blur)
  return gauss_blur_;
}
inline void NoiseParameter::set_gauss_blur(bool value) {
  set_has_gauss_blur();
  gauss_blur_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.gauss_blur)
}

// optional float jpeg = 6 [default = -1];
inline bool NoiseParameter::has_jpeg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NoiseParameter::set_has_jpeg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NoiseParameter::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NoiseParameter::clear_jpeg() {
  jpeg_ = -1;
  clear_has_jpeg();
}
inline float NoiseParameter::jpeg() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.jpeg)
  return jpeg_;
}
inline void NoiseParameter::set_jpeg(float value) {
  set_has_jpeg();
  jpeg_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.jpeg)
}

// optional bool posterize = 7 [default = false];
inline bool NoiseParameter::has_posterize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NoiseParameter::set_has_posterize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NoiseParameter::clear_has_posterize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NoiseParameter::clear_posterize() {
  posterize_ = false;
  clear_has_posterize();
}
inline bool NoiseParameter::posterize() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.posterize)
  return posterize_;
}
inline void NoiseParameter::set_posterize(bool value) {
  set_has_posterize();
  posterize_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.posterize)
}

// optional bool erode = 8 [default = false];
inline bool NoiseParameter::has_erode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NoiseParameter::set_has_erode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NoiseParameter::clear_has_erode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NoiseParameter::clear_erode() {
  erode_ = false;
  clear_has_erode();
}
inline bool NoiseParameter::erode() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.erode)
  return erode_;
}
inline void NoiseParameter::set_erode(bool value) {
  set_has_erode();
  erode_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.erode)
}

// optional bool saltpepper = 9 [default = false];
inline bool NoiseParameter::has_saltpepper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NoiseParameter::set_has_saltpepper() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NoiseParameter::clear_has_saltpepper() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NoiseParameter::clear_saltpepper() {
  saltpepper_ = false;
  clear_has_saltpepper();
}
inline bool NoiseParameter::saltpepper() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.saltpepper)
  return saltpepper_;
}
inline void NoiseParameter::set_saltpepper(bool value) {
  set_has_saltpepper();
  saltpepper_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.saltpepper)
}

// optional .caffe_fcn_data_layer.SaltPepperParameter saltpepper_param = 10;
inline bool NoiseParameter::has_saltpepper_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoiseParameter::set_has_saltpepper_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoiseParameter::clear_has_saltpepper_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoiseParameter::clear_saltpepper_param() {
  if (saltpepper_param_ != NULL) saltpepper_param_->::caffe_fcn_data_layer::SaltPepperParameter::Clear();
  clear_has_saltpepper_param();
}
inline const ::caffe_fcn_data_layer::SaltPepperParameter& NoiseParameter::saltpepper_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
  return saltpepper_param_ != NULL ? *saltpepper_param_
                         : *::caffe_fcn_data_layer::SaltPepperParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::SaltPepperParameter* NoiseParameter::mutable_saltpepper_param() {
  set_has_saltpepper_param();
  if (saltpepper_param_ == NULL) {
    saltpepper_param_ = new ::caffe_fcn_data_layer::SaltPepperParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
  return saltpepper_param_;
}
inline ::caffe_fcn_data_layer::SaltPepperParameter* NoiseParameter::release_saltpepper_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
  clear_has_saltpepper_param();
  ::caffe_fcn_data_layer::SaltPepperParameter* temp = saltpepper_param_;
  saltpepper_param_ = NULL;
  return temp;
}
inline void NoiseParameter::set_allocated_saltpepper_param(::caffe_fcn_data_layer::SaltPepperParameter* saltpepper_param) {
  delete saltpepper_param_;
  saltpepper_param_ = saltpepper_param;
  if (saltpepper_param) {
    set_has_saltpepper_param();
  } else {
    clear_has_saltpepper_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.NoiseParameter.saltpepper_param)
}

// optional bool clahe = 11 [default = false];
inline bool NoiseParameter::has_clahe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NoiseParameter::set_has_clahe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NoiseParameter::clear_has_clahe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NoiseParameter::clear_clahe() {
  clahe_ = false;
  clear_has_clahe();
}
inline bool NoiseParameter::clahe() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.clahe)
  return clahe_;
}
inline void NoiseParameter::set_clahe(bool value) {
  set_has_clahe();
  clahe_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.clahe)
}

// optional bool convert_to_hsv = 12 [default = false];
inline bool NoiseParameter::has_convert_to_hsv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NoiseParameter::set_has_convert_to_hsv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NoiseParameter::clear_has_convert_to_hsv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NoiseParameter::clear_convert_to_hsv() {
  convert_to_hsv_ = false;
  clear_has_convert_to_hsv();
}
inline bool NoiseParameter::convert_to_hsv() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.convert_to_hsv)
  return convert_to_hsv_;
}
inline void NoiseParameter::set_convert_to_hsv(bool value) {
  set_has_convert_to_hsv();
  convert_to_hsv_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.convert_to_hsv)
}

// optional bool convert_to_lab = 13 [default = false];
inline bool NoiseParameter::has_convert_to_lab() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NoiseParameter::set_has_convert_to_lab() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NoiseParameter::clear_has_convert_to_lab() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NoiseParameter::clear_convert_to_lab() {
  convert_to_lab_ = false;
  clear_has_convert_to_lab();
}
inline bool NoiseParameter::convert_to_lab() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.NoiseParameter.convert_to_lab)
  return convert_to_lab_;
}
inline void NoiseParameter::set_convert_to_lab(bool value) {
  set_has_convert_to_lab();
  convert_to_lab_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.NoiseParameter.convert_to_lab)
}

// -------------------------------------------------------------------

// DistortionParameter

// optional float brightness_prob = 1 [default = 0];
inline bool DistortionParameter::has_brightness_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistortionParameter::set_has_brightness_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistortionParameter::clear_has_brightness_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistortionParameter::clear_brightness_prob() {
  brightness_prob_ = 0;
  clear_has_brightness_prob();
}
inline float DistortionParameter::brightness_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.brightness_prob)
  return brightness_prob_;
}
inline void DistortionParameter::set_brightness_prob(float value) {
  set_has_brightness_prob();
  brightness_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.brightness_prob)
}

// optional float brightness_delta = 2 [default = 0];
inline bool DistortionParameter::has_brightness_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistortionParameter::set_has_brightness_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistortionParameter::clear_has_brightness_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistortionParameter::clear_brightness_delta() {
  brightness_delta_ = 0;
  clear_has_brightness_delta();
}
inline float DistortionParameter::brightness_delta() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.brightness_delta)
  return brightness_delta_;
}
inline void DistortionParameter::set_brightness_delta(float value) {
  set_has_brightness_delta();
  brightness_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.brightness_delta)
}

// optional float contrast_prob = 3 [default = 0];
inline bool DistortionParameter::has_contrast_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistortionParameter::set_has_contrast_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistortionParameter::clear_has_contrast_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistortionParameter::clear_contrast_prob() {
  contrast_prob_ = 0;
  clear_has_contrast_prob();
}
inline float DistortionParameter::contrast_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.contrast_prob)
  return contrast_prob_;
}
inline void DistortionParameter::set_contrast_prob(float value) {
  set_has_contrast_prob();
  contrast_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.contrast_prob)
}

// optional float contrast_lower = 4 [default = 0];
inline bool DistortionParameter::has_contrast_lower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistortionParameter::set_has_contrast_lower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistortionParameter::clear_has_contrast_lower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistortionParameter::clear_contrast_lower() {
  contrast_lower_ = 0;
  clear_has_contrast_lower();
}
inline float DistortionParameter::contrast_lower() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.contrast_lower)
  return contrast_lower_;
}
inline void DistortionParameter::set_contrast_lower(float value) {
  set_has_contrast_lower();
  contrast_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.contrast_lower)
}

// optional float contrast_upper = 5 [default = 0];
inline bool DistortionParameter::has_contrast_upper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistortionParameter::set_has_contrast_upper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistortionParameter::clear_has_contrast_upper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistortionParameter::clear_contrast_upper() {
  contrast_upper_ = 0;
  clear_has_contrast_upper();
}
inline float DistortionParameter::contrast_upper() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.contrast_upper)
  return contrast_upper_;
}
inline void DistortionParameter::set_contrast_upper(float value) {
  set_has_contrast_upper();
  contrast_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.contrast_upper)
}

// optional float hue_prob = 6 [default = 0];
inline bool DistortionParameter::has_hue_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistortionParameter::set_has_hue_prob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistortionParameter::clear_has_hue_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistortionParameter::clear_hue_prob() {
  hue_prob_ = 0;
  clear_has_hue_prob();
}
inline float DistortionParameter::hue_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.hue_prob)
  return hue_prob_;
}
inline void DistortionParameter::set_hue_prob(float value) {
  set_has_hue_prob();
  hue_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.hue_prob)
}

// optional float hue_delta = 7 [default = 0];
inline bool DistortionParameter::has_hue_delta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistortionParameter::set_has_hue_delta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistortionParameter::clear_has_hue_delta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistortionParameter::clear_hue_delta() {
  hue_delta_ = 0;
  clear_has_hue_delta();
}
inline float DistortionParameter::hue_delta() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.hue_delta)
  return hue_delta_;
}
inline void DistortionParameter::set_hue_delta(float value) {
  set_has_hue_delta();
  hue_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.hue_delta)
}

// optional float saturation_prob = 8 [default = 0];
inline bool DistortionParameter::has_saturation_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistortionParameter::set_has_saturation_prob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistortionParameter::clear_has_saturation_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistortionParameter::clear_saturation_prob() {
  saturation_prob_ = 0;
  clear_has_saturation_prob();
}
inline float DistortionParameter::saturation_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.saturation_prob)
  return saturation_prob_;
}
inline void DistortionParameter::set_saturation_prob(float value) {
  set_has_saturation_prob();
  saturation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.saturation_prob)
}

// optional float saturation_lower = 9 [default = 0];
inline bool DistortionParameter::has_saturation_lower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistortionParameter::set_has_saturation_lower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistortionParameter::clear_has_saturation_lower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistortionParameter::clear_saturation_lower() {
  saturation_lower_ = 0;
  clear_has_saturation_lower();
}
inline float DistortionParameter::saturation_lower() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.saturation_lower)
  return saturation_lower_;
}
inline void DistortionParameter::set_saturation_lower(float value) {
  set_has_saturation_lower();
  saturation_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.saturation_lower)
}

// optional float saturation_upper = 10 [default = 0];
inline bool DistortionParameter::has_saturation_upper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistortionParameter::set_has_saturation_upper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistortionParameter::clear_has_saturation_upper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistortionParameter::clear_saturation_upper() {
  saturation_upper_ = 0;
  clear_has_saturation_upper();
}
inline float DistortionParameter::saturation_upper() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.saturation_upper)
  return saturation_upper_;
}
inline void DistortionParameter::set_saturation_upper(float value) {
  set_has_saturation_upper();
  saturation_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.saturation_upper)
}

// optional float random_order_prob = 11 [default = 0];
inline bool DistortionParameter::has_random_order_prob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistortionParameter::set_has_random_order_prob() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistortionParameter::clear_has_random_order_prob() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistortionParameter::clear_random_order_prob() {
  random_order_prob_ = 0;
  clear_has_random_order_prob();
}
inline float DistortionParameter::random_order_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.DistortionParameter.random_order_prob)
  return random_order_prob_;
}
inline void DistortionParameter::set_random_order_prob(float value) {
  set_has_random_order_prob();
  random_order_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.DistortionParameter.random_order_prob)
}

// -------------------------------------------------------------------

// FCNImageDataReaderParameter

// optional float scale_lower_limit = 1 [default = 1];
inline bool FCNImageDataReaderParameter::has_scale_lower_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_scale_lower_limit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FCNImageDataReaderParameter::clear_has_scale_lower_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FCNImageDataReaderParameter::clear_scale_lower_limit() {
  scale_lower_limit_ = 1;
  clear_has_scale_lower_limit();
}
inline float FCNImageDataReaderParameter::scale_lower_limit() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_lower_limit)
  return scale_lower_limit_;
}
inline void FCNImageDataReaderParameter::set_scale_lower_limit(float value) {
  set_has_scale_lower_limit();
  scale_lower_limit_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_lower_limit)
}

// optional float scale_upper_limit = 2 [default = 1];
inline bool FCNImageDataReaderParameter::has_scale_upper_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_scale_upper_limit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FCNImageDataReaderParameter::clear_has_scale_upper_limit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FCNImageDataReaderParameter::clear_scale_upper_limit() {
  scale_upper_limit_ = 1;
  clear_has_scale_upper_limit();
}
inline float FCNImageDataReaderParameter::scale_upper_limit() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_upper_limit)
  return scale_upper_limit_;
}
inline void FCNImageDataReaderParameter::set_scale_upper_limit(float value) {
  set_has_scale_upper_limit();
  scale_upper_limit_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.scale_upper_limit)
}

// optional uint32 roi_center_point = 3;
inline bool FCNImageDataReaderParameter::has_roi_center_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_roi_center_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataReaderParameter::clear_has_roi_center_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataReaderParameter::clear_roi_center_point() {
  roi_center_point_ = 0u;
  clear_has_roi_center_point();
}
inline ::google::protobuf::uint32 FCNImageDataReaderParameter::roi_center_point() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.roi_center_point)
  return roi_center_point_;
}
inline void FCNImageDataReaderParameter::set_roi_center_point(::google::protobuf::uint32 value) {
  set_has_roi_center_point();
  roi_center_point_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.roi_center_point)
}

// optional uint32 standard_len_point_1 = 4;
inline bool FCNImageDataReaderParameter::has_standard_len_point_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_standard_len_point_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataReaderParameter::clear_has_standard_len_point_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataReaderParameter::clear_standard_len_point_1() {
  standard_len_point_1_ = 0u;
  clear_has_standard_len_point_1();
}
inline ::google::protobuf::uint32 FCNImageDataReaderParameter::standard_len_point_1() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_1)
  return standard_len_point_1_;
}
inline void FCNImageDataReaderParameter::set_standard_len_point_1(::google::protobuf::uint32 value) {
  set_has_standard_len_point_1();
  standard_len_point_1_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_1)
}

// optional uint32 standard_len_point_2 = 5;
inline bool FCNImageDataReaderParameter::has_standard_len_point_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_standard_len_point_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataReaderParameter::clear_has_standard_len_point_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataReaderParameter::clear_standard_len_point_2() {
  standard_len_point_2_ = 0u;
  clear_has_standard_len_point_2();
}
inline ::google::protobuf::uint32 FCNImageDataReaderParameter::standard_len_point_2() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_2)
  return standard_len_point_2_;
}
inline void FCNImageDataReaderParameter::set_standard_len_point_2(::google::protobuf::uint32 value) {
  set_has_standard_len_point_2();
  standard_len_point_2_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len_point_2)
}

// optional uint32 standard_len = 6;
inline bool FCNImageDataReaderParameter::has_standard_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_standard_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNImageDataReaderParameter::clear_has_standard_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNImageDataReaderParameter::clear_standard_len() {
  standard_len_ = 0u;
  clear_has_standard_len();
}
inline ::google::protobuf::uint32 FCNImageDataReaderParameter::standard_len() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len)
  return standard_len_;
}
inline void FCNImageDataReaderParameter::set_standard_len(::google::protobuf::uint32 value) {
  set_has_standard_len();
  standard_len_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.standard_len)
}

// optional float mean_r = 7 [default = 0];
inline bool FCNImageDataReaderParameter::has_mean_r() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_mean_r() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNImageDataReaderParameter::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNImageDataReaderParameter::clear_mean_r() {
  mean_r_ = 0;
  clear_has_mean_r();
}
inline float FCNImageDataReaderParameter::mean_r() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_r)
  return mean_r_;
}
inline void FCNImageDataReaderParameter::set_mean_r(float value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_r)
}

// optional float mean_g = 8 [default = 0];
inline bool FCNImageDataReaderParameter::has_mean_g() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_mean_g() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNImageDataReaderParameter::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNImageDataReaderParameter::clear_mean_g() {
  mean_g_ = 0;
  clear_has_mean_g();
}
inline float FCNImageDataReaderParameter::mean_g() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_g)
  return mean_g_;
}
inline void FCNImageDataReaderParameter::set_mean_g(float value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_g)
}

// optional float mean_b = 9 [default = 0];
inline bool FCNImageDataReaderParameter::has_mean_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_mean_b() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FCNImageDataReaderParameter::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FCNImageDataReaderParameter::clear_mean_b() {
  mean_b_ = 0;
  clear_has_mean_b();
}
inline float FCNImageDataReaderParameter::mean_b() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_b)
  return mean_b_;
}
inline void FCNImageDataReaderParameter::set_mean_b(float value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.mean_b)
}

// optional float random_rotate_degree = 10 [default = 0];
inline bool FCNImageDataReaderParameter::has_random_rotate_degree() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_random_rotate_degree() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FCNImageDataReaderParameter::clear_has_random_rotate_degree() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FCNImageDataReaderParameter::clear_random_rotate_degree() {
  random_rotate_degree_ = 0;
  clear_has_random_rotate_degree();
}
inline float FCNImageDataReaderParameter::random_rotate_degree() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_rotate_degree)
  return random_rotate_degree_;
}
inline void FCNImageDataReaderParameter::set_random_rotate_degree(float value) {
  set_has_random_rotate_degree();
  random_rotate_degree_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_rotate_degree)
}

// optional float coord_jitter = 11 [default = 0];
inline bool FCNImageDataReaderParameter::has_coord_jitter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_coord_jitter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FCNImageDataReaderParameter::clear_has_coord_jitter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FCNImageDataReaderParameter::clear_coord_jitter() {
  coord_jitter_ = 0;
  clear_has_coord_jitter();
}
inline float FCNImageDataReaderParameter::coord_jitter() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.coord_jitter)
  return coord_jitter_;
}
inline void FCNImageDataReaderParameter::set_coord_jitter(float value) {
  set_has_coord_jitter();
  coord_jitter_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.coord_jitter)
}

// optional float random_roi_prob = 12 [default = 0];
inline bool FCNImageDataReaderParameter::has_random_roi_prob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FCNImageDataReaderParameter::set_has_random_roi_prob() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FCNImageDataReaderParameter::clear_has_random_roi_prob() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FCNImageDataReaderParameter::clear_random_roi_prob() {
  random_roi_prob_ = 0;
  clear_has_random_roi_prob();
}
inline float FCNImageDataReaderParameter::random_roi_prob() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_roi_prob)
  return random_roi_prob_;
}
inline void FCNImageDataReaderParameter::set_random_roi_prob(float value) {
  set_has_random_roi_prob();
  random_roi_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataReaderParameter.random_roi_prob)
}

// -------------------------------------------------------------------

// FCNImageDataCommonParameter

// optional .caffe_fcn_data_layer.FCNImageDataCommonParameter.ScaleChooseStrategy scale_choose_strategy = 1 [default = WEIGHTED];
inline bool FCNImageDataCommonParameter::has_scale_choose_strategy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_scale_choose_strategy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FCNImageDataCommonParameter::clear_has_scale_choose_strategy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FCNImageDataCommonParameter::clear_scale_choose_strategy() {
  scale_choose_strategy_ = 1;
  clear_has_scale_choose_strategy();
}
inline ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy FCNImageDataCommonParameter::scale_choose_strategy() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_choose_strategy)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy >(scale_choose_strategy_);
}
inline void FCNImageDataCommonParameter::set_scale_choose_strategy(::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy value) {
  assert(::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy_IsValid(value));
  set_has_scale_choose_strategy();
  scale_choose_strategy_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_choose_strategy)
}

// repeated float scale_base = 2;
inline int FCNImageDataCommonParameter::scale_base_size() const {
  return scale_base_.size();
}
inline void FCNImageDataCommonParameter::clear_scale_base() {
  scale_base_.Clear();
}
inline float FCNImageDataCommonParameter::scale_base(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
  return scale_base_.Get(index);
}
inline void FCNImageDataCommonParameter::set_scale_base(int index, float value) {
  scale_base_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
}
inline void FCNImageDataCommonParameter::add_scale_base(float value) {
  scale_base_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
}
inline const ::google::protobuf::RepeatedField< float >&
FCNImageDataCommonParameter::scale_base() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
  return scale_base_;
}
inline ::google::protobuf::RepeatedField< float >*
FCNImageDataCommonParameter::mutable_scale_base() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_base)
  return &scale_base_;
}

// optional float scale_positive_upper_bounder = 12 [default = 1.2];
inline bool FCNImageDataCommonParameter::has_scale_positive_upper_bounder() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_scale_positive_upper_bounder() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FCNImageDataCommonParameter::clear_has_scale_positive_upper_bounder() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FCNImageDataCommonParameter::clear_scale_positive_upper_bounder() {
  scale_positive_upper_bounder_ = 1.2f;
  clear_has_scale_positive_upper_bounder();
}
inline float FCNImageDataCommonParameter::scale_positive_upper_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_upper_bounder)
  return scale_positive_upper_bounder_;
}
inline void FCNImageDataCommonParameter::set_scale_positive_upper_bounder(float value) {
  set_has_scale_positive_upper_bounder();
  scale_positive_upper_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_upper_bounder)
}

// optional float scale_positive_lower_bounder = 13 [default = 0.8];
inline bool FCNImageDataCommonParameter::has_scale_positive_lower_bounder() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_scale_positive_lower_bounder() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FCNImageDataCommonParameter::clear_has_scale_positive_lower_bounder() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FCNImageDataCommonParameter::clear_scale_positive_lower_bounder() {
  scale_positive_lower_bounder_ = 0.8f;
  clear_has_scale_positive_lower_bounder();
}
inline float FCNImageDataCommonParameter::scale_positive_lower_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_lower_bounder)
  return scale_positive_lower_bounder_;
}
inline void FCNImageDataCommonParameter::set_scale_positive_lower_bounder(float value) {
  set_has_scale_positive_lower_bounder();
  scale_positive_lower_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_positive_lower_bounder)
}

// optional float scale_ignore_upper_bounder = 14 [default = 1.2];
inline bool FCNImageDataCommonParameter::has_scale_ignore_upper_bounder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_scale_ignore_upper_bounder() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FCNImageDataCommonParameter::clear_has_scale_ignore_upper_bounder() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FCNImageDataCommonParameter::clear_scale_ignore_upper_bounder() {
  scale_ignore_upper_bounder_ = 1.2f;
  clear_has_scale_ignore_upper_bounder();
}
inline float FCNImageDataCommonParameter::scale_ignore_upper_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_upper_bounder)
  return scale_ignore_upper_bounder_;
}
inline void FCNImageDataCommonParameter::set_scale_ignore_upper_bounder(float value) {
  set_has_scale_ignore_upper_bounder();
  scale_ignore_upper_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_upper_bounder)
}

// optional float scale_ignore_lower_bounder = 15 [default = 0.8];
inline bool FCNImageDataCommonParameter::has_scale_ignore_lower_bounder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_scale_ignore_lower_bounder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FCNImageDataCommonParameter::clear_has_scale_ignore_lower_bounder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FCNImageDataCommonParameter::clear_scale_ignore_lower_bounder() {
  scale_ignore_lower_bounder_ = 0.8f;
  clear_has_scale_ignore_lower_bounder();
}
inline float FCNImageDataCommonParameter::scale_ignore_lower_bounder() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_lower_bounder)
  return scale_ignore_lower_bounder_;
}
inline void FCNImageDataCommonParameter::set_scale_ignore_lower_bounder(float value) {
  set_has_scale_ignore_lower_bounder();
  scale_ignore_lower_bounder_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.scale_ignore_lower_bounder)
}

// optional uint32 input_height = 3 [default = 0];
inline bool FCNImageDataCommonParameter::has_input_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_input_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataCommonParameter::clear_has_input_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataCommonParameter::clear_input_height() {
  input_height_ = 0u;
  clear_has_input_height();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::input_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_height)
  return input_height_;
}
inline void FCNImageDataCommonParameter::set_input_height(::google::protobuf::uint32 value) {
  set_has_input_height();
  input_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_height)
}

// optional uint32 input_width = 4 [default = 0];
inline bool FCNImageDataCommonParameter::has_input_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_input_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataCommonParameter::clear_has_input_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataCommonParameter::clear_input_width() {
  input_width_ = 0u;
  clear_has_input_width();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::input_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_width)
  return input_width_;
}
inline void FCNImageDataCommonParameter::set_input_width(::google::protobuf::uint32 value) {
  set_has_input_width();
  input_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.input_width)
}

// optional uint32 heat_map_a = 5 [default = 0];
inline bool FCNImageDataCommonParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataCommonParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataCommonParameter::clear_heat_map_a() {
  heat_map_a_ = 0u;
  clear_has_heat_map_a();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_a)
  return heat_map_a_;
}
inline void FCNImageDataCommonParameter::set_heat_map_a(::google::protobuf::uint32 value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_a)
}

// optional uint32 heat_map_b = 6 [default = 0];
inline bool FCNImageDataCommonParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNImageDataCommonParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNImageDataCommonParameter::clear_heat_map_b() {
  heat_map_b_ = 0u;
  clear_has_heat_map_b();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_b)
  return heat_map_b_;
}
inline void FCNImageDataCommonParameter::set_heat_map_b(::google::protobuf::uint32 value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.heat_map_b)
}

// optional uint32 out_height = 7 [default = 0];
inline bool FCNImageDataCommonParameter::has_out_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_out_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNImageDataCommonParameter::clear_has_out_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNImageDataCommonParameter::clear_out_height() {
  out_height_ = 0u;
  clear_has_out_height();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::out_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_height)
  return out_height_;
}
inline void FCNImageDataCommonParameter::set_out_height(::google::protobuf::uint32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_height)
}

// optional uint32 out_width = 8 [default = 0];
inline bool FCNImageDataCommonParameter::has_out_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_out_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNImageDataCommonParameter::clear_has_out_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNImageDataCommonParameter::clear_out_width() {
  out_width_ = 0u;
  clear_has_out_width();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::out_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_width)
  return out_width_;
}
inline void FCNImageDataCommonParameter::set_out_width(::google::protobuf::uint32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.out_width)
}

// optional uint32 num_anno_points_per_instance = 9;
inline bool FCNImageDataCommonParameter::has_num_anno_points_per_instance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_num_anno_points_per_instance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FCNImageDataCommonParameter::clear_has_num_anno_points_per_instance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FCNImageDataCommonParameter::clear_num_anno_points_per_instance() {
  num_anno_points_per_instance_ = 0u;
  clear_has_num_anno_points_per_instance();
}
inline ::google::protobuf::uint32 FCNImageDataCommonParameter::num_anno_points_per_instance() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.num_anno_points_per_instance)
  return num_anno_points_per_instance_;
}
inline void FCNImageDataCommonParameter::set_num_anno_points_per_instance(::google::protobuf::uint32 value) {
  set_has_num_anno_points_per_instance();
  num_anno_points_per_instance_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.num_anno_points_per_instance)
}

// optional bool single_thread = 11 [default = true];
inline bool FCNImageDataCommonParameter::has_single_thread() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FCNImageDataCommonParameter::set_has_single_thread() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FCNImageDataCommonParameter::clear_has_single_thread() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FCNImageDataCommonParameter::clear_single_thread() {
  single_thread_ = true;
  clear_has_single_thread();
}
inline bool FCNImageDataCommonParameter::single_thread() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataCommonParameter.single_thread)
  return single_thread_;
}
inline void FCNImageDataCommonParameter::set_single_thread(bool value) {
  set_has_single_thread();
  single_thread_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataCommonParameter.single_thread)
}

// -------------------------------------------------------------------

// FCNImageDataKeyPointParameter

// optional uint32 valid_distance = 1 [default = 6];
inline bool FCNImageDataKeyPointParameter::has_valid_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_valid_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNImageDataKeyPointParameter::clear_has_valid_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNImageDataKeyPointParameter::clear_valid_distance() {
  valid_distance_ = 6u;
  clear_has_valid_distance();
}
inline ::google::protobuf::uint32 FCNImageDataKeyPointParameter::valid_distance() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_distance)
  return valid_distance_;
}
inline void FCNImageDataKeyPointParameter::set_valid_distance(::google::protobuf::uint32 value) {
  set_has_valid_distance();
  valid_distance_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_distance)
}

// optional uint32 min_out_valid_len = 4 [default = 1];
inline bool FCNImageDataKeyPointParameter::has_min_out_valid_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_min_out_valid_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FCNImageDataKeyPointParameter::clear_has_min_out_valid_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FCNImageDataKeyPointParameter::clear_min_out_valid_len() {
  min_out_valid_len_ = 1u;
  clear_has_min_out_valid_len();
}
inline ::google::protobuf::uint32 FCNImageDataKeyPointParameter::min_out_valid_len() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.min_out_valid_len)
  return min_out_valid_len_;
}
inline void FCNImageDataKeyPointParameter::set_min_out_valid_len(::google::protobuf::uint32 value) {
  set_has_min_out_valid_len();
  min_out_valid_len_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.min_out_valid_len)
}

// optional uint32 key_point_counts = 8 [default = 0];
inline bool FCNImageDataKeyPointParameter::has_key_point_counts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_key_point_counts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNImageDataKeyPointParameter::clear_has_key_point_counts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNImageDataKeyPointParameter::clear_key_point_counts() {
  key_point_counts_ = 0u;
  clear_has_key_point_counts();
}
inline ::google::protobuf::uint32 FCNImageDataKeyPointParameter::key_point_counts() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.key_point_counts)
  return key_point_counts_;
}
inline void FCNImageDataKeyPointParameter::set_key_point_counts(::google::protobuf::uint32 value) {
  set_has_key_point_counts();
  key_point_counts_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.key_point_counts)
}

// optional string used_key_points_file = 9;
inline bool FCNImageDataKeyPointParameter::has_used_key_points_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_used_key_points_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataKeyPointParameter::clear_has_used_key_points_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataKeyPointParameter::clear_used_key_points_file() {
  used_key_points_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_used_key_points_file();
}
inline const ::std::string& FCNImageDataKeyPointParameter::used_key_points_file() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
  return used_key_points_file_.GetNoArena();
}
inline void FCNImageDataKeyPointParameter::set_used_key_points_file(const ::std::string& value) {
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
#if LANG_CXX11
inline void FCNImageDataKeyPointParameter::set_used_key_points_file(::std::string&& value) {
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
#endif
inline void FCNImageDataKeyPointParameter::set_used_key_points_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
inline void FCNImageDataKeyPointParameter::set_used_key_points_file(const char* value, size_t size) {
  set_has_used_key_points_file();
  used_key_points_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}
inline ::std::string* FCNImageDataKeyPointParameter::mutable_used_key_points_file() {
  set_has_used_key_points_file();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
  return used_key_points_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataKeyPointParameter::release_used_key_points_file() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
  clear_has_used_key_points_file();
  return used_key_points_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataKeyPointParameter::set_allocated_used_key_points_file(::std::string* used_key_points_file) {
  if (used_key_points_file != NULL) {
    set_has_used_key_points_file();
  } else {
    clear_has_used_key_points_file();
  }
  used_key_points_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), used_key_points_file);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.used_key_points_file)
}

// optional uint32 ignore_flag_radius = 2 [default = 20];
inline bool FCNImageDataKeyPointParameter::has_ignore_flag_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_ignore_flag_radius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNImageDataKeyPointParameter::clear_has_ignore_flag_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNImageDataKeyPointParameter::clear_ignore_flag_radius() {
  ignore_flag_radius_ = 20u;
  clear_has_ignore_flag_radius();
}
inline ::google::protobuf::uint32 FCNImageDataKeyPointParameter::ignore_flag_radius() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_radius)
  return ignore_flag_radius_;
}
inline void FCNImageDataKeyPointParameter::set_ignore_flag_radius(::google::protobuf::uint32 value) {
  set_has_ignore_flag_radius();
  ignore_flag_radius_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_radius)
}

// optional string ignore_flag_list_file = 3;
inline bool FCNImageDataKeyPointParameter::has_ignore_flag_list_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_ignore_flag_list_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataKeyPointParameter::clear_has_ignore_flag_list_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataKeyPointParameter::clear_ignore_flag_list_file() {
  ignore_flag_list_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ignore_flag_list_file();
}
inline const ::std::string& FCNImageDataKeyPointParameter::ignore_flag_list_file() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
  return ignore_flag_list_file_.GetNoArena();
}
inline void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(const ::std::string& value) {
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
#if LANG_CXX11
inline void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(::std::string&& value) {
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
#endif
inline void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
inline void FCNImageDataKeyPointParameter::set_ignore_flag_list_file(const char* value, size_t size) {
  set_has_ignore_flag_list_file();
  ignore_flag_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}
inline ::std::string* FCNImageDataKeyPointParameter::mutable_ignore_flag_list_file() {
  set_has_ignore_flag_list_file();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
  return ignore_flag_list_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataKeyPointParameter::release_ignore_flag_list_file() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
  clear_has_ignore_flag_list_file();
  return ignore_flag_list_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataKeyPointParameter::set_allocated_ignore_flag_list_file(::std::string* ignore_flag_list_file) {
  if (ignore_flag_list_file != NULL) {
    set_has_ignore_flag_list_file();
  } else {
    clear_has_ignore_flag_list_file();
  }
  ignore_flag_list_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ignore_flag_list_file);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.ignore_flag_list_file)
}

// optional bool need_point_loc_diff = 5 [default = false];
inline bool FCNImageDataKeyPointParameter::has_need_point_loc_diff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_need_point_loc_diff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataKeyPointParameter::clear_has_need_point_loc_diff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataKeyPointParameter::clear_need_point_loc_diff() {
  need_point_loc_diff_ = false;
  clear_has_need_point_loc_diff();
}
inline bool FCNImageDataKeyPointParameter::need_point_loc_diff() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.need_point_loc_diff)
  return need_point_loc_diff_;
}
inline void FCNImageDataKeyPointParameter::set_need_point_loc_diff(bool value) {
  set_has_need_point_loc_diff();
  need_point_loc_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.need_point_loc_diff)
}

// optional uint32 valid_point_loc_diff_dist = 6 [default = 6];
inline bool FCNImageDataKeyPointParameter::has_valid_point_loc_diff_dist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FCNImageDataKeyPointParameter::set_has_valid_point_loc_diff_dist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FCNImageDataKeyPointParameter::clear_has_valid_point_loc_diff_dist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FCNImageDataKeyPointParameter::clear_valid_point_loc_diff_dist() {
  valid_point_loc_diff_dist_ = 6u;
  clear_has_valid_point_loc_diff_dist();
}
inline ::google::protobuf::uint32 FCNImageDataKeyPointParameter::valid_point_loc_diff_dist() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_point_loc_diff_dist)
  return valid_point_loc_diff_dist_;
}
inline void FCNImageDataKeyPointParameter::set_valid_point_loc_diff_dist(::google::protobuf::uint32 value) {
  set_has_valid_point_loc_diff_dist();
  valid_point_loc_diff_dist_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataKeyPointParameter.valid_point_loc_diff_dist)
}

// -------------------------------------------------------------------

// FCNImageDataBoxNormParameter

// optional uint32 bbox_height = 10 [default = 50];
inline bool FCNImageDataBoxNormParameter::has_bbox_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataBoxNormParameter::set_has_bbox_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataBoxNormParameter::clear_has_bbox_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataBoxNormParameter::clear_bbox_height() {
  bbox_height_ = 50u;
  clear_has_bbox_height();
}
inline ::google::protobuf::uint32 FCNImageDataBoxNormParameter::bbox_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_height)
  return bbox_height_;
}
inline void FCNImageDataBoxNormParameter::set_bbox_height(::google::protobuf::uint32 value) {
  set_has_bbox_height();
  bbox_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_height)
}

// optional uint32 bbox_width = 11 [default = 50];
inline bool FCNImageDataBoxNormParameter::has_bbox_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataBoxNormParameter::set_has_bbox_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataBoxNormParameter::clear_has_bbox_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataBoxNormParameter::clear_bbox_width() {
  bbox_width_ = 50u;
  clear_has_bbox_width();
}
inline ::google::protobuf::uint32 FCNImageDataBoxNormParameter::bbox_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_width)
  return bbox_width_;
}
inline void FCNImageDataBoxNormParameter::set_bbox_width(::google::protobuf::uint32 value) {
  set_has_bbox_width();
  bbox_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_width)
}

// optional .caffe_fcn_data_layer.FCNImageDataBoxNormParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
inline bool FCNImageDataBoxNormParameter::has_bbox_size_norm_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataBoxNormParameter::set_has_bbox_size_norm_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataBoxNormParameter::clear_has_bbox_size_norm_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataBoxNormParameter::clear_bbox_size_norm_type() {
  bbox_size_norm_type_ = 0;
  clear_has_bbox_size_norm_type();
}
inline ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType FCNImageDataBoxNormParameter::bbox_size_norm_type() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_size_norm_type)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType >(bbox_size_norm_type_);
}
inline void FCNImageDataBoxNormParameter::set_bbox_size_norm_type(::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType value) {
  assert(::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType_IsValid(value));
  set_has_bbox_size_norm_type();
  bbox_size_norm_type_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataBoxNormParameter.bbox_size_norm_type)
}

// -------------------------------------------------------------------

// FCNImageDataDetectionBoxParameter

// optional uint32 min_output_pos_radius = 1 [default = 1];
inline bool FCNImageDataDetectionBoxParameter::has_min_output_pos_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_min_output_pos_radius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_min_output_pos_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNImageDataDetectionBoxParameter::clear_min_output_pos_radius() {
  min_output_pos_radius_ = 1u;
  clear_has_min_output_pos_radius();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::min_output_pos_radius() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.min_output_pos_radius)
  return min_output_pos_radius_;
}
inline void FCNImageDataDetectionBoxParameter::set_min_output_pos_radius(::google::protobuf::uint32 value) {
  set_has_min_output_pos_radius();
  min_output_pos_radius_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.min_output_pos_radius)
}

// optional bool need_detection_loc_diff = 2 [default = false];
inline bool FCNImageDataDetectionBoxParameter::has_need_detection_loc_diff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_need_detection_loc_diff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_need_detection_loc_diff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataDetectionBoxParameter::clear_need_detection_loc_diff() {
  need_detection_loc_diff_ = false;
  clear_has_need_detection_loc_diff();
}
inline bool FCNImageDataDetectionBoxParameter::need_detection_loc_diff() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.need_detection_loc_diff)
  return need_detection_loc_diff_;
}
inline void FCNImageDataDetectionBoxParameter::set_need_detection_loc_diff(bool value) {
  set_has_need_detection_loc_diff();
  need_detection_loc_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.need_detection_loc_diff)
}

// optional uint32 bbox_height = 10 [default = 50];
inline bool FCNImageDataDetectionBoxParameter::has_bbox_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_bbox_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_bbox_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FCNImageDataDetectionBoxParameter::clear_bbox_height() {
  bbox_height_ = 50u;
  clear_has_bbox_height();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::bbox_height() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_height)
  return bbox_height_;
}
inline void FCNImageDataDetectionBoxParameter::set_bbox_height(::google::protobuf::uint32 value) {
  set_has_bbox_height();
  bbox_height_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_height)
}

// optional uint32 bbox_width = 11 [default = 50];
inline bool FCNImageDataDetectionBoxParameter::has_bbox_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_bbox_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_bbox_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FCNImageDataDetectionBoxParameter::clear_bbox_width() {
  bbox_width_ = 50u;
  clear_has_bbox_width();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::bbox_width() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_width)
  return bbox_width_;
}
inline void FCNImageDataDetectionBoxParameter::set_bbox_width(::google::protobuf::uint32 value) {
  set_has_bbox_width();
  bbox_width_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_width)
}

// optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.BBoxSizeNormType bbox_size_norm_type = 9 [default = HEIGHT];
inline bool FCNImageDataDetectionBoxParameter::has_bbox_size_norm_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_bbox_size_norm_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_bbox_size_norm_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataDetectionBoxParameter::clear_bbox_size_norm_type() {
  bbox_size_norm_type_ = 0;
  clear_has_bbox_size_norm_type();
}
inline ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType FCNImageDataDetectionBoxParameter::bbox_size_norm_type() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_size_norm_type)
  return static_cast< ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType >(bbox_size_norm_type_);
}
inline void FCNImageDataDetectionBoxParameter::set_bbox_size_norm_type(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType value) {
  assert(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType_IsValid(value));
  set_has_bbox_size_norm_type();
  bbox_size_norm_type_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_size_norm_type)
}

// repeated uint32 bbox_point_id = 4;
inline int FCNImageDataDetectionBoxParameter::bbox_point_id_size() const {
  return bbox_point_id_.size();
}
inline void FCNImageDataDetectionBoxParameter::clear_bbox_point_id() {
  bbox_point_id_.Clear();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::bbox_point_id(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
  return bbox_point_id_.Get(index);
}
inline void FCNImageDataDetectionBoxParameter::set_bbox_point_id(int index, ::google::protobuf::uint32 value) {
  bbox_point_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
}
inline void FCNImageDataDetectionBoxParameter::add_bbox_point_id(::google::protobuf::uint32 value) {
  bbox_point_id_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FCNImageDataDetectionBoxParameter::bbox_point_id() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
  return bbox_point_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FCNImageDataDetectionBoxParameter::mutable_bbox_point_id() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_point_id)
  return &bbox_point_id_;
}

// optional float bbox_valid_dist_ratio = 5 [default = 0.6];
inline bool FCNImageDataDetectionBoxParameter::has_bbox_valid_dist_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_bbox_valid_dist_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_bbox_valid_dist_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNImageDataDetectionBoxParameter::clear_bbox_valid_dist_ratio() {
  bbox_valid_dist_ratio_ = 0.6f;
  clear_has_bbox_valid_dist_ratio();
}
inline float FCNImageDataDetectionBoxParameter::bbox_valid_dist_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_valid_dist_ratio)
  return bbox_valid_dist_ratio_;
}
inline void FCNImageDataDetectionBoxParameter::set_bbox_valid_dist_ratio(float value) {
  set_has_bbox_valid_dist_ratio();
  bbox_valid_dist_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_valid_dist_ratio)
}

// optional float bbox_loc_diff_valid_dist_ratio = 6 [default = 0.5];
inline bool FCNImageDataDetectionBoxParameter::has_bbox_loc_diff_valid_dist_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_bbox_loc_diff_valid_dist_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_bbox_loc_diff_valid_dist_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FCNImageDataDetectionBoxParameter::clear_bbox_loc_diff_valid_dist_ratio() {
  bbox_loc_diff_valid_dist_ratio_ = 0.5f;
  clear_has_bbox_loc_diff_valid_dist_ratio();
}
inline float FCNImageDataDetectionBoxParameter::bbox_loc_diff_valid_dist_ratio() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_loc_diff_valid_dist_ratio)
  return bbox_loc_diff_valid_dist_ratio_;
}
inline void FCNImageDataDetectionBoxParameter::set_bbox_loc_diff_valid_dist_ratio(float value) {
  set_has_bbox_loc_diff_valid_dist_ratio();
  bbox_loc_diff_valid_dist_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.bbox_loc_diff_valid_dist_ratio)
}

// optional string list_point_diff_from_center = 7;
inline bool FCNImageDataDetectionBoxParameter::has_list_point_diff_from_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_list_point_diff_from_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_list_point_diff_from_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataDetectionBoxParameter::clear_list_point_diff_from_center() {
  list_point_diff_from_center_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_list_point_diff_from_center();
}
inline const ::std::string& FCNImageDataDetectionBoxParameter::list_point_diff_from_center() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
  return list_point_diff_from_center_.GetNoArena();
}
inline void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(const ::std::string& value) {
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
#if LANG_CXX11
inline void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(::std::string&& value) {
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
#endif
inline void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
inline void FCNImageDataDetectionBoxParameter::set_list_point_diff_from_center(const char* value, size_t size) {
  set_has_list_point_diff_from_center();
  list_point_diff_from_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}
inline ::std::string* FCNImageDataDetectionBoxParameter::mutable_list_point_diff_from_center() {
  set_has_list_point_diff_from_center();
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
  return list_point_diff_from_center_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FCNImageDataDetectionBoxParameter::release_list_point_diff_from_center() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
  clear_has_list_point_diff_from_center();
  return list_point_diff_from_center_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FCNImageDataDetectionBoxParameter::set_allocated_list_point_diff_from_center(::std::string* list_point_diff_from_center) {
  if (list_point_diff_from_center != NULL) {
    set_has_list_point_diff_from_center();
  } else {
    clear_has_list_point_diff_from_center();
  }
  list_point_diff_from_center_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list_point_diff_from_center);
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.list_point_diff_from_center)
}

// optional uint32 ignore_margin = 8 [default = 3];
inline bool FCNImageDataDetectionBoxParameter::has_ignore_margin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_ignore_margin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_ignore_margin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FCNImageDataDetectionBoxParameter::clear_ignore_margin() {
  ignore_margin_ = 3u;
  clear_has_ignore_margin();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::ignore_margin() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.ignore_margin)
  return ignore_margin_;
}
inline void FCNImageDataDetectionBoxParameter::set_ignore_margin(::google::protobuf::uint32 value) {
  set_has_ignore_margin();
  ignore_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.ignore_margin)
}

// optional bool loc_regress_on_ignore = 14 [default = true];
inline bool FCNImageDataDetectionBoxParameter::has_loc_regress_on_ignore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_loc_regress_on_ignore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_loc_regress_on_ignore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FCNImageDataDetectionBoxParameter::clear_loc_regress_on_ignore() {
  loc_regress_on_ignore_ = true;
  clear_has_loc_regress_on_ignore();
}
inline bool FCNImageDataDetectionBoxParameter::loc_regress_on_ignore() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.loc_regress_on_ignore)
  return loc_regress_on_ignore_;
}
inline void FCNImageDataDetectionBoxParameter::set_loc_regress_on_ignore(bool value) {
  set_has_loc_regress_on_ignore();
  loc_regress_on_ignore_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.loc_regress_on_ignore)
}

// optional uint32 class_flag_id = 12;
inline bool FCNImageDataDetectionBoxParameter::has_class_flag_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_class_flag_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_class_flag_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNImageDataDetectionBoxParameter::clear_class_flag_id() {
  class_flag_id_ = 0u;
  clear_has_class_flag_id();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::class_flag_id() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.class_flag_id)
  return class_flag_id_;
}
inline void FCNImageDataDetectionBoxParameter::set_class_flag_id(::google::protobuf::uint32 value) {
  set_has_class_flag_id();
  class_flag_id_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.class_flag_id)
}

// optional uint32 total_class_num = 13 [default = 1];
inline bool FCNImageDataDetectionBoxParameter::has_total_class_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FCNImageDataDetectionBoxParameter::set_has_total_class_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FCNImageDataDetectionBoxParameter::clear_has_total_class_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FCNImageDataDetectionBoxParameter::clear_total_class_num() {
  total_class_num_ = 1u;
  clear_has_total_class_num();
}
inline ::google::protobuf::uint32 FCNImageDataDetectionBoxParameter::total_class_num() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.total_class_num)
  return total_class_num_;
}
inline void FCNImageDataDetectionBoxParameter::set_total_class_num(::google::protobuf::uint32 value) {
  set_has_total_class_num();
  total_class_num_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter.total_class_num)
}

// -------------------------------------------------------------------

// FCNImageDataIgnoreBoxParameter

// optional uint32 ignore_box_flag_id = 1 [default = 1000];
inline bool FCNImageDataIgnoreBoxParameter::has_ignore_box_flag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataIgnoreBoxParameter::set_has_ignore_box_flag_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataIgnoreBoxParameter::clear_has_ignore_box_flag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataIgnoreBoxParameter::clear_ignore_box_flag_id() {
  ignore_box_flag_id_ = 1000u;
  clear_has_ignore_box_flag_id();
}
inline ::google::protobuf::uint32 FCNImageDataIgnoreBoxParameter::ignore_box_flag_id() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_flag_id)
  return ignore_box_flag_id_;
}
inline void FCNImageDataIgnoreBoxParameter::set_ignore_box_flag_id(::google::protobuf::uint32 value) {
  set_has_ignore_box_flag_id();
  ignore_box_flag_id_ = value;
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_flag_id)
}

// repeated uint32 ignore_box_point_id = 2;
inline int FCNImageDataIgnoreBoxParameter::ignore_box_point_id_size() const {
  return ignore_box_point_id_.size();
}
inline void FCNImageDataIgnoreBoxParameter::clear_ignore_box_point_id() {
  ignore_box_point_id_.Clear();
}
inline ::google::protobuf::uint32 FCNImageDataIgnoreBoxParameter::ignore_box_point_id(int index) const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
  return ignore_box_point_id_.Get(index);
}
inline void FCNImageDataIgnoreBoxParameter::set_ignore_box_point_id(int index, ::google::protobuf::uint32 value) {
  ignore_box_point_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
}
inline void FCNImageDataIgnoreBoxParameter::add_ignore_box_point_id(::google::protobuf::uint32 value) {
  ignore_box_point_id_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FCNImageDataIgnoreBoxParameter::ignore_box_point_id() const {
  // @@protoc_insertion_point(field_list:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
  return ignore_box_point_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FCNImageDataIgnoreBoxParameter::mutable_ignore_box_point_id() {
  // @@protoc_insertion_point(field_mutable_list:caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter.ignore_box_point_id)
  return &ignore_box_point_id_;
}

// -------------------------------------------------------------------

// FCNImageDataParameter

// optional .caffe_fcn_data_layer.FCNImageDataCommonParameter fcn_image_data_common_param = 1;
inline bool FCNImageDataParameter::has_fcn_image_data_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNImageDataParameter::set_has_fcn_image_data_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNImageDataParameter::clear_has_fcn_image_data_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNImageDataParameter::clear_fcn_image_data_common_param() {
  if (fcn_image_data_common_param_ != NULL) fcn_image_data_common_param_->::caffe_fcn_data_layer::FCNImageDataCommonParameter::Clear();
  clear_has_fcn_image_data_common_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataCommonParameter& FCNImageDataParameter::fcn_image_data_common_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
  return fcn_image_data_common_param_ != NULL ? *fcn_image_data_common_param_
                         : *::caffe_fcn_data_layer::FCNImageDataCommonParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataCommonParameter* FCNImageDataParameter::mutable_fcn_image_data_common_param() {
  set_has_fcn_image_data_common_param();
  if (fcn_image_data_common_param_ == NULL) {
    fcn_image_data_common_param_ = new ::caffe_fcn_data_layer::FCNImageDataCommonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
  return fcn_image_data_common_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataCommonParameter* FCNImageDataParameter::release_fcn_image_data_common_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
  clear_has_fcn_image_data_common_param();
  ::caffe_fcn_data_layer::FCNImageDataCommonParameter* temp = fcn_image_data_common_param_;
  fcn_image_data_common_param_ = NULL;
  return temp;
}
inline void FCNImageDataParameter::set_allocated_fcn_image_data_common_param(::caffe_fcn_data_layer::FCNImageDataCommonParameter* fcn_image_data_common_param) {
  delete fcn_image_data_common_param_;
  fcn_image_data_common_param_ = fcn_image_data_common_param;
  if (fcn_image_data_common_param) {
    set_has_fcn_image_data_common_param();
  } else {
    clear_has_fcn_image_data_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_common_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataKeyPointParameter fcn_image_data_key_point_param = 2;
inline bool FCNImageDataParameter::has_fcn_image_data_key_point_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNImageDataParameter::set_has_fcn_image_data_key_point_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNImageDataParameter::clear_has_fcn_image_data_key_point_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNImageDataParameter::clear_fcn_image_data_key_point_param() {
  if (fcn_image_data_key_point_param_ != NULL) fcn_image_data_key_point_param_->::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::Clear();
  clear_has_fcn_image_data_key_point_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter& FCNImageDataParameter::fcn_image_data_key_point_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
  return fcn_image_data_key_point_param_ != NULL ? *fcn_image_data_key_point_param_
                         : *::caffe_fcn_data_layer::FCNImageDataKeyPointParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* FCNImageDataParameter::mutable_fcn_image_data_key_point_param() {
  set_has_fcn_image_data_key_point_param();
  if (fcn_image_data_key_point_param_ == NULL) {
    fcn_image_data_key_point_param_ = new ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
  return fcn_image_data_key_point_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* FCNImageDataParameter::release_fcn_image_data_key_point_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
  clear_has_fcn_image_data_key_point_param();
  ::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* temp = fcn_image_data_key_point_param_;
  fcn_image_data_key_point_param_ = NULL;
  return temp;
}
inline void FCNImageDataParameter::set_allocated_fcn_image_data_key_point_param(::caffe_fcn_data_layer::FCNImageDataKeyPointParameter* fcn_image_data_key_point_param) {
  delete fcn_image_data_key_point_param_;
  fcn_image_data_key_point_param_ = fcn_image_data_key_point_param;
  if (fcn_image_data_key_point_param) {
    set_has_fcn_image_data_key_point_param();
  } else {
    clear_has_fcn_image_data_key_point_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_key_point_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataDetectionBoxParameter fcn_image_data_detection_box_param = 3;
inline bool FCNImageDataParameter::has_fcn_image_data_detection_box_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNImageDataParameter::set_has_fcn_image_data_detection_box_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNImageDataParameter::clear_has_fcn_image_data_detection_box_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNImageDataParameter::clear_fcn_image_data_detection_box_param() {
  if (fcn_image_data_detection_box_param_ != NULL) fcn_image_data_detection_box_param_->::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::Clear();
  clear_has_fcn_image_data_detection_box_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter& FCNImageDataParameter::fcn_image_data_detection_box_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
  return fcn_image_data_detection_box_param_ != NULL ? *fcn_image_data_detection_box_param_
                         : *::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* FCNImageDataParameter::mutable_fcn_image_data_detection_box_param() {
  set_has_fcn_image_data_detection_box_param();
  if (fcn_image_data_detection_box_param_ == NULL) {
    fcn_image_data_detection_box_param_ = new ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
  return fcn_image_data_detection_box_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* FCNImageDataParameter::release_fcn_image_data_detection_box_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
  clear_has_fcn_image_data_detection_box_param();
  ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* temp = fcn_image_data_detection_box_param_;
  fcn_image_data_detection_box_param_ = NULL;
  return temp;
}
inline void FCNImageDataParameter::set_allocated_fcn_image_data_detection_box_param(::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter* fcn_image_data_detection_box_param) {
  delete fcn_image_data_detection_box_param_;
  fcn_image_data_detection_box_param_ = fcn_image_data_detection_box_param;
  if (fcn_image_data_detection_box_param) {
    set_has_fcn_image_data_detection_box_param();
  } else {
    clear_has_fcn_image_data_detection_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_detection_box_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataIgnoreBoxParameter fcn_image_data_ignore_box_param = 4;
inline bool FCNImageDataParameter::has_fcn_image_data_ignore_box_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNImageDataParameter::set_has_fcn_image_data_ignore_box_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNImageDataParameter::clear_has_fcn_image_data_ignore_box_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNImageDataParameter::clear_fcn_image_data_ignore_box_param() {
  if (fcn_image_data_ignore_box_param_ != NULL) fcn_image_data_ignore_box_param_->::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::Clear();
  clear_has_fcn_image_data_ignore_box_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter& FCNImageDataParameter::fcn_image_data_ignore_box_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
  return fcn_image_data_ignore_box_param_ != NULL ? *fcn_image_data_ignore_box_param_
                         : *::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* FCNImageDataParameter::mutable_fcn_image_data_ignore_box_param() {
  set_has_fcn_image_data_ignore_box_param();
  if (fcn_image_data_ignore_box_param_ == NULL) {
    fcn_image_data_ignore_box_param_ = new ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
  return fcn_image_data_ignore_box_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* FCNImageDataParameter::release_fcn_image_data_ignore_box_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
  clear_has_fcn_image_data_ignore_box_param();
  ::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* temp = fcn_image_data_ignore_box_param_;
  fcn_image_data_ignore_box_param_ = NULL;
  return temp;
}
inline void FCNImageDataParameter::set_allocated_fcn_image_data_ignore_box_param(::caffe_fcn_data_layer::FCNImageDataIgnoreBoxParameter* fcn_image_data_ignore_box_param) {
  delete fcn_image_data_ignore_box_param_;
  fcn_image_data_ignore_box_param_ = fcn_image_data_ignore_box_param;
  if (fcn_image_data_ignore_box_param) {
    set_has_fcn_image_data_ignore_box_param();
  } else {
    clear_has_fcn_image_data_ignore_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_ignore_box_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataSourceParameter fcn_image_data_source_param = 5;
inline bool FCNImageDataParameter::has_fcn_image_data_source_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNImageDataParameter::set_has_fcn_image_data_source_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNImageDataParameter::clear_has_fcn_image_data_source_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNImageDataParameter::clear_fcn_image_data_source_param() {
  if (fcn_image_data_source_param_ != NULL) fcn_image_data_source_param_->::caffe_fcn_data_layer::FCNImageDataSourceParameter::Clear();
  clear_has_fcn_image_data_source_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataSourceParameter& FCNImageDataParameter::fcn_image_data_source_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
  return fcn_image_data_source_param_ != NULL ? *fcn_image_data_source_param_
                         : *::caffe_fcn_data_layer::FCNImageDataSourceParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataSourceParameter* FCNImageDataParameter::mutable_fcn_image_data_source_param() {
  set_has_fcn_image_data_source_param();
  if (fcn_image_data_source_param_ == NULL) {
    fcn_image_data_source_param_ = new ::caffe_fcn_data_layer::FCNImageDataSourceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
  return fcn_image_data_source_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataSourceParameter* FCNImageDataParameter::release_fcn_image_data_source_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
  clear_has_fcn_image_data_source_param();
  ::caffe_fcn_data_layer::FCNImageDataSourceParameter* temp = fcn_image_data_source_param_;
  fcn_image_data_source_param_ = NULL;
  return temp;
}
inline void FCNImageDataParameter::set_allocated_fcn_image_data_source_param(::caffe_fcn_data_layer::FCNImageDataSourceParameter* fcn_image_data_source_param) {
  delete fcn_image_data_source_param_;
  fcn_image_data_source_param_ = fcn_image_data_source_param;
  if (fcn_image_data_source_param) {
    set_has_fcn_image_data_source_param();
  } else {
    clear_has_fcn_image_data_source_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_source_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataReaderParameter fcn_image_data_reader_param = 6;
inline bool FCNImageDataParameter::has_fcn_image_data_reader_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNImageDataParameter::set_has_fcn_image_data_reader_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNImageDataParameter::clear_has_fcn_image_data_reader_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNImageDataParameter::clear_fcn_image_data_reader_param() {
  if (fcn_image_data_reader_param_ != NULL) fcn_image_data_reader_param_->::caffe_fcn_data_layer::FCNImageDataReaderParameter::Clear();
  clear_has_fcn_image_data_reader_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataReaderParameter& FCNImageDataParameter::fcn_image_data_reader_param() const {
  // @@protoc_insertion_point(field_get:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
  return fcn_image_data_reader_param_ != NULL ? *fcn_image_data_reader_param_
                         : *::caffe_fcn_data_layer::FCNImageDataReaderParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataReaderParameter* FCNImageDataParameter::mutable_fcn_image_data_reader_param() {
  set_has_fcn_image_data_reader_param();
  if (fcn_image_data_reader_param_ == NULL) {
    fcn_image_data_reader_param_ = new ::caffe_fcn_data_layer::FCNImageDataReaderParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
  return fcn_image_data_reader_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataReaderParameter* FCNImageDataParameter::release_fcn_image_data_reader_param() {
  // @@protoc_insertion_point(field_release:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
  clear_has_fcn_image_data_reader_param();
  ::caffe_fcn_data_layer::FCNImageDataReaderParameter* temp = fcn_image_data_reader_param_;
  fcn_image_data_reader_param_ = NULL;
  return temp;
}
inline void FCNImageDataParameter::set_allocated_fcn_image_data_reader_param(::caffe_fcn_data_layer::FCNImageDataReaderParameter* fcn_image_data_reader_param) {
  delete fcn_image_data_reader_param_;
  fcn_image_data_reader_param_ = fcn_image_data_reader_param;
  if (fcn_image_data_reader_param) {
    set_has_fcn_image_data_reader_param();
  } else {
    clear_has_fcn_image_data_reader_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_fcn_data_layer.FCNImageDataParameter.fcn_image_data_reader_param)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace caffe_fcn_data_layer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType>() {
  return ::caffe_fcn_data_layer::FCNImageDataSourceParameter_STDLengthType_descriptor();
}
template <> struct is_proto_enum< ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy>() {
  return ::caffe_fcn_data_layer::FCNImageDataCommonParameter_ScaleChooseStrategy_descriptor();
}
template <> struct is_proto_enum< ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType>() {
  return ::caffe_fcn_data_layer::FCNImageDataBoxNormParameter_BBoxSizeNormType_descriptor();
}
template <> struct is_proto_enum< ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType>() {
  return ::caffe_fcn_data_layer::FCNImageDataDetectionBoxParameter_BBoxSizeNormType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_5ffcn_5fdata_5flayer_2eproto__INCLUDED
