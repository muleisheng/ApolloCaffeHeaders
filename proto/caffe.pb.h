// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "caffe_fcn_data_layer.pb.h"
#include "caffe_smartseg.pb.h"
// @@protoc_insertion_point(includes)
namespace caffe {
class ATRSParameter;
class ATRSParameterDefaultTypeInternal;
extern ATRSParameterDefaultTypeInternal _ATRSParameter_default_instance_;
class AccuracyParameter;
class AccuracyParameterDefaultTypeInternal;
extern AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
class AnchorBox;
class AnchorBoxDefaultTypeInternal;
extern AnchorBoxDefaultTypeInternal _AnchorBox_default_instance_;
class ArgMaxParameter;
class ArgMaxParameterDefaultTypeInternal;
extern ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
class BBoxRegParameter;
class BBoxRegParameterDefaultTypeInternal;
extern BBoxRegParameterDefaultTypeInternal _BBoxRegParameter_default_instance_;
class BatchNormParameter;
class BatchNormParameterDefaultTypeInternal;
extern BatchNormParameterDefaultTypeInternal _BatchNormParameter_default_instance_;
class BiasParameter;
class BiasParameterDefaultTypeInternal;
extern BiasParameterDefaultTypeInternal _BiasParameter_default_instance_;
class BinaryDataParameter;
class BinaryDataParameterDefaultTypeInternal;
extern BinaryDataParameterDefaultTypeInternal _BinaryDataParameter_default_instance_;
class BirdviewParameter;
class BirdviewParameterDefaultTypeInternal;
extern BirdviewParameterDefaultTypeInternal _BirdviewParameter_default_instance_;
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobProtoVector;
class BlobProtoVectorDefaultTypeInternal;
extern BlobProtoVectorDefaultTypeInternal _BlobProtoVector_default_instance_;
class BlobShape;
class BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class BlockPackingParameter;
class BlockPackingParameterDefaultTypeInternal;
extern BlockPackingParameterDefaultTypeInternal _BlockPackingParameter_default_instance_;
class Cam3dParameter;
class Cam3dParameterDefaultTypeInternal;
extern Cam3dParameterDefaultTypeInternal _Cam3dParameter_default_instance_;
class ConcatParameter;
class ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ContrastiveLossParameter;
class ContrastiveLossParameterDefaultTypeInternal;
extern ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
class ConvolutionParameter;
class ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class CropParameter;
class CropParameterDefaultTypeInternal;
extern CropParameterDefaultTypeInternal _CropParameter_default_instance_;
class CylinderViewParameter;
class CylinderViewParameterDefaultTypeInternal;
extern CylinderViewParameterDefaultTypeInternal _CylinderViewParameter_default_instance_;
class DFMBPSROIPoolingParameter;
class DFMBPSROIPoolingParameterDefaultTypeInternal;
extern DFMBPSROIPoolingParameterDefaultTypeInternal _DFMBPSROIPoolingParameter_default_instance_;
class DataParameter;
class DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DeformableConvolutionParameter;
class DeformableConvolutionParameterDefaultTypeInternal;
extern DeformableConvolutionParameterDefaultTypeInternal _DeformableConvolutionParameter_default_instance_;
class DetectionOutputParameter;
class DetectionOutputParameterDefaultTypeInternal;
extern DetectionOutputParameterDefaultTypeInternal _DetectionOutputParameter_default_instance_;
class DetectionOutputSSDParameter;
class DetectionOutputSSDParameterDefaultTypeInternal;
extern DetectionOutputSSDParameterDefaultTypeInternal _DetectionOutputSSDParameter_default_instance_;
class DropoutParameter;
class DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class DummyDataParameter;
class DummyDataParameterDefaultTypeInternal;
extern DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
class ELUParameter;
class ELUParameterDefaultTypeInternal;
extern ELUParameterDefaultTypeInternal _ELUParameter_default_instance_;
class ElementHingeLossParameter;
class ElementHingeLossParameterDefaultTypeInternal;
extern ElementHingeLossParameterDefaultTypeInternal _ElementHingeLossParameter_default_instance_;
class EltwiseParameter;
class EltwiseParameterDefaultTypeInternal;
extern EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
class EmbedParameter;
class EmbedParameterDefaultTypeInternal;
extern EmbedParameterDefaultTypeInternal _EmbedParameter_default_instance_;
class ExpParameter;
class ExpParameterDefaultTypeInternal;
extern ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
class ExpandlabelParameter;
class ExpandlabelParameterDefaultTypeInternal;
extern ExpandlabelParameterDefaultTypeInternal _ExpandlabelParameter_default_instance_;
class FTRSParameter;
class FTRSParameterDefaultTypeInternal;
extern FTRSParameterDefaultTypeInternal _FTRSParameter_default_instance_;
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class FlattenParameter;
class FlattenParameterDefaultTypeInternal;
extern FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
class GenerateAnchorParameter;
class GenerateAnchorParameterDefaultTypeInternal;
extern GenerateAnchorParameterDefaultTypeInternal _GenerateAnchorParameter_default_instance_;
class HDF5DataParameter;
class HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
class HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class HingeLossParameter;
class HingeLossParameterDefaultTypeInternal;
extern HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
class ImageDataArbitraryParameter;
class ImageDataArbitraryParameterDefaultTypeInternal;
extern ImageDataArbitraryParameterDefaultTypeInternal _ImageDataArbitraryParameter_default_instance_;
class ImageDataParameter;
class ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class ImageDistortParameter;
class ImageDistortParameterDefaultTypeInternal;
extern ImageDistortParameterDefaultTypeInternal _ImageDistortParameter_default_instance_;
class ImageLabelDataParameter;
class ImageLabelDataParameterDefaultTypeInternal;
extern ImageLabelDataParameterDefaultTypeInternal _ImageLabelDataParameter_default_instance_;
class InceptionColumnParameter;
class InceptionColumnParameterDefaultTypeInternal;
extern InceptionColumnParameterDefaultTypeInternal _InceptionColumnParameter_default_instance_;
class InceptionParameter;
class InceptionParameterDefaultTypeInternal;
extern InceptionParameterDefaultTypeInternal _InceptionParameter_default_instance_;
class InfogainLossParameter;
class InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerProductParameter;
class InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class InputParameter;
class InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class KPTSParameter;
class KPTSParameterDefaultTypeInternal;
extern KPTSParameterDefaultTypeInternal _KPTSParameter_default_instance_;
class LRNParameter;
class LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LabelMap;
class LabelMapDefaultTypeInternal;
extern LabelMapDefaultTypeInternal _LabelMap_default_instance_;
class LabelMapItem;
class LabelMapItemDefaultTypeInternal;
extern LabelMapItemDefaultTypeInternal _LabelMapItem_default_instance_;
class LabelRelatedDropoutParam;
class LabelRelatedDropoutParamDefaultTypeInternal;
extern LabelRelatedDropoutParamDefaultTypeInternal _LabelRelatedDropoutParam_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class LogParameter;
class LogParameterDefaultTypeInternal;
extern LogParameterDefaultTypeInternal _LogParameter_default_instance_;
class LossParameter;
class LossParameterDefaultTypeInternal;
extern LossParameterDefaultTypeInternal _LossParameter_default_instance_;
class MVNParameter;
class MVNParameterDefaultTypeInternal;
extern MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
class ManipulateLossParameter;
class ManipulateLossParameterDefaultTypeInternal;
extern ManipulateLossParameterDefaultTypeInternal _ManipulateLossParameter_default_instance_;
class MemoryDataParameter;
class MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NMSParameter;
class NMSParameterDefaultTypeInternal;
extern NMSParameterDefaultTypeInternal _NMSParameter_default_instance_;
class NMSSSDParameter;
class NMSSSDParameterDefaultTypeInternal;
extern NMSSSDParameterDefaultTypeInternal _NMSSSDParameter_default_instance_;
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetState;
class NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NetStateRule;
class NetStateRuleDefaultTypeInternal;
extern NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
class NonMaximumSuppressionParameter;
class NonMaximumSuppressionParameterDefaultTypeInternal;
extern NonMaximumSuppressionParameterDefaultTypeInternal _NonMaximumSuppressionParameter_default_instance_;
class NormalizedBBox;
class NormalizedBBoxDefaultTypeInternal;
extern NormalizedBBoxDefaultTypeInternal _NormalizedBBox_default_instance_;
class PReLUParameter;
class PReLUParameterDefaultTypeInternal;
extern PReLUParameterDefaultTypeInternal _PReLUParameter_default_instance_;
class PSROIPoolingParameter;
class PSROIPoolingParameterDefaultTypeInternal;
extern PSROIPoolingParameterDefaultTypeInternal _PSROIPoolingParameter_default_instance_;
class ParamSpec;
class ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class PermuteParameter;
class PermuteParameterDefaultTypeInternal;
extern PermuteParameterDefaultTypeInternal _PermuteParameter_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
class PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class PreviousStageParameter;
class PreviousStageParameterDefaultTypeInternal;
extern PreviousStageParameterDefaultTypeInternal _PreviousStageParameter_default_instance_;
class ProposalImgScaleToCamCoordsParameter;
class ProposalImgScaleToCamCoordsParameterDefaultTypeInternal;
extern ProposalImgScaleToCamCoordsParameterDefaultTypeInternal _ProposalImgScaleToCamCoordsParameter_default_instance_;
class PyramidDataParameter;
class PyramidDataParameterDefaultTypeInternal;
extern PyramidDataParameterDefaultTypeInternal _PyramidDataParameter_default_instance_;
class PythonParameter;
class PythonParameterDefaultTypeInternal;
extern PythonParameterDefaultTypeInternal _PythonParameter_default_instance_;
class ROI2HeatMapParam;
class ROI2HeatMapParamDefaultTypeInternal;
extern ROI2HeatMapParamDefaultTypeInternal _ROI2HeatMapParam_default_instance_;
class ROIDataParam;
class ROIDataParamDefaultTypeInternal;
extern ROIDataParamDefaultTypeInternal _ROIDataParam_default_instance_;
class ROIPoolingParameter;
class ROIPoolingParameterDefaultTypeInternal;
extern ROIPoolingParameterDefaultTypeInternal _ROIPoolingParameter_default_instance_;
class ROIRefineParam;
class ROIRefineParamDefaultTypeInternal;
extern ROIRefineParamDefaultTypeInternal _ROIRefineParam_default_instance_;
class ROIShowParam;
class ROIShowParamDefaultTypeInternal;
extern ROIShowParamDefaultTypeInternal _ROIShowParam_default_instance_;
class ReLUParameter;
class ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class ReductionParameter;
class ReductionParameterDefaultTypeInternal;
extern ReductionParameterDefaultTypeInternal _ReductionParameter_default_instance_;
class RegParameter;
class RegParameterDefaultTypeInternal;
extern RegParameterDefaultTypeInternal _RegParameter_default_instance_;
class RegionOutputParameter;
class RegionOutputParameterDefaultTypeInternal;
extern RegionOutputParameterDefaultTypeInternal _RegionOutputParameter_default_instance_;
class RegionParameter;
class RegionParameterDefaultTypeInternal;
extern RegionParameterDefaultTypeInternal _RegionParameter_default_instance_;
class ReorgParameter;
class ReorgParameterDefaultTypeInternal;
extern ReorgParameterDefaultTypeInternal _ReorgParameter_default_instance_;
class RepeatChannelParameter;
class RepeatChannelParameterDefaultTypeInternal;
extern RepeatChannelParameterDefaultTypeInternal _RepeatChannelParameter_default_instance_;
class ResampleParameter;
class ResampleParameterDefaultTypeInternal;
extern ResampleParameterDefaultTypeInternal _ResampleParameter_default_instance_;
class ReshapeParameter;
class ReshapeParameterDefaultTypeInternal;
extern ReshapeParameterDefaultTypeInternal _ReshapeParameter_default_instance_;
class ResizeParameter;
class ResizeParameterDefaultTypeInternal;
extern ResizeParameterDefaultTypeInternal _ResizeParameter_default_instance_;
class SPMPParameter;
class SPMPParameterDefaultTypeInternal;
extern SPMPParameterDefaultTypeInternal _SPMPParameter_default_instance_;
class SPPParameter;
class SPPParameterDefaultTypeInternal;
extern SPPParameterDefaultTypeInternal _SPPParameter_default_instance_;
class ScaleParameter;
class ScaleParameterDefaultTypeInternal;
extern ScaleParameterDefaultTypeInternal _ScaleParameter_default_instance_;
class SigmoidParameter;
class SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class Slice;
class SliceDefaultTypeInternal;
extern SliceDefaultTypeInternal _Slice_default_instance_;
class SliceParameter;
class SliceParameterDefaultTypeInternal;
extern SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
class SoftmaxParameter;
class SoftmaxParameterDefaultTypeInternal;
extern SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
class SolverParameter;
class SolverParameterDefaultTypeInternal;
extern SolverParameterDefaultTypeInternal _SolverParameter_default_instance_;
class SolverState;
class SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class TanHParameter;
class TanHParameterDefaultTypeInternal;
extern TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
class ThresholdParameter;
class ThresholdParameterDefaultTypeInternal;
extern ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
class TileParameter;
class TileParameterDefaultTypeInternal;
extern TileParameterDefaultTypeInternal _TileParameter_default_instance_;
class TransformationParameter;
class TransformationParameterDefaultTypeInternal;
extern TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
class V0LayerParameter;
class V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class V1LayerParameter;
class V1LayerParameterDefaultTypeInternal;
extern V1LayerParameterDefaultTypeInternal _V1LayerParameter_default_instance_;
class WindowDataParameter;
class WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
}  // namespace caffe
namespace caffe_fcn_data_layer {
class DistortionParameter;
class DistortionParameterDefaultTypeInternal;
extern DistortionParameterDefaultTypeInternal _DistortionParameter_default_instance_;
class FCNImageDataBoxNormParameter;
class FCNImageDataBoxNormParameterDefaultTypeInternal;
extern FCNImageDataBoxNormParameterDefaultTypeInternal _FCNImageDataBoxNormParameter_default_instance_;
class FCNImageDataCommonParameter;
class FCNImageDataCommonParameterDefaultTypeInternal;
extern FCNImageDataCommonParameterDefaultTypeInternal _FCNImageDataCommonParameter_default_instance_;
class FCNImageDataDetectionBoxParameter;
class FCNImageDataDetectionBoxParameterDefaultTypeInternal;
extern FCNImageDataDetectionBoxParameterDefaultTypeInternal _FCNImageDataDetectionBoxParameter_default_instance_;
class FCNImageDataIgnoreBoxParameter;
class FCNImageDataIgnoreBoxParameterDefaultTypeInternal;
extern FCNImageDataIgnoreBoxParameterDefaultTypeInternal _FCNImageDataIgnoreBoxParameter_default_instance_;
class FCNImageDataKeyPointParameter;
class FCNImageDataKeyPointParameterDefaultTypeInternal;
extern FCNImageDataKeyPointParameterDefaultTypeInternal _FCNImageDataKeyPointParameter_default_instance_;
class FCNImageDataParameter;
class FCNImageDataParameterDefaultTypeInternal;
extern FCNImageDataParameterDefaultTypeInternal _FCNImageDataParameter_default_instance_;
class FCNImageDataReaderParameter;
class FCNImageDataReaderParameterDefaultTypeInternal;
extern FCNImageDataReaderParameterDefaultTypeInternal _FCNImageDataReaderParameter_default_instance_;
class FCNImageDataSourceParameter;
class FCNImageDataSourceParameterDefaultTypeInternal;
extern FCNImageDataSourceParameterDefaultTypeInternal _FCNImageDataSourceParameter_default_instance_;
class NoiseParameter;
class NoiseParameterDefaultTypeInternal;
extern NoiseParameterDefaultTypeInternal _NoiseParameter_default_instance_;
class SaltPepperParameter;
class SaltPepperParameterDefaultTypeInternal;
extern SaltPepperParameterDefaultTypeInternal _SaltPepperParameter_default_instance_;
}  // namespace caffe_fcn_data_layer
namespace smartseg {
class BlobVisualizeParameter;
class BlobVisualizeParameterDefaultTypeInternal;
extern BlobVisualizeParameterDefaultTypeInternal _BlobVisualizeParameter_default_instance_;
class ConfigParameter;
class ConfigParameterDefaultTypeInternal;
extern ConfigParameterDefaultTypeInternal _ConfigParameter_default_instance_;
class DilationParameter;
class DilationParameterDefaultTypeInternal;
extern DilationParameterDefaultTypeInternal _DilationParameter_default_instance_;
class FrameDataParameter;
class FrameDataParameterDefaultTypeInternal;
extern FrameDataParameterDefaultTypeInternal _FrameDataParameter_default_instance_;
class FrameSequenceDataParameter;
class FrameSequenceDataParameterDefaultTypeInternal;
extern FrameSequenceDataParameterDefaultTypeInternal _FrameSequenceDataParameter_default_instance_;
class FrameTargetParameter;
class FrameTargetParameterDefaultTypeInternal;
extern FrameTargetParameterDefaultTypeInternal _FrameTargetParameter_default_instance_;
class HorizontalViewExtractorParameter;
class HorizontalViewExtractorParameterDefaultTypeInternal;
extern HorizontalViewExtractorParameterDefaultTypeInternal _HorizontalViewExtractorParameter_default_instance_;
class HorizontalViewParameter;
class HorizontalViewParameterDefaultTypeInternal;
extern HorizontalViewParameterDefaultTypeInternal _HorizontalViewParameter_default_instance_;
class OnlineNormParameter;
class OnlineNormParameterDefaultTypeInternal;
extern OnlineNormParameterDefaultTypeInternal _OnlineNormParameter_default_instance_;
class PlanViewExtractorParameter;
class PlanViewExtractorParameterDefaultTypeInternal;
extern PlanViewExtractorParameterDefaultTypeInternal _PlanViewExtractorParameter_default_instance_;
class PlanViewParameter;
class PlanViewParameterDefaultTypeInternal;
extern PlanViewParameterDefaultTypeInternal _PlanViewParameter_default_instance_;
class PointInterpolationParameter;
class PointInterpolationParameterDefaultTypeInternal;
extern PointInterpolationParameterDefaultTypeInternal _PointInterpolationParameter_default_instance_;
class SegmentorParameter;
class SegmentorParameterDefaultTypeInternal;
extern SegmentorParameterDefaultTypeInternal _SegmentorParameter_default_instance_;
class SideViewExtractorParameter;
class SideViewExtractorParameterDefaultTypeInternal;
extern SideViewExtractorParameterDefaultTypeInternal _SideViewExtractorParameter_default_instance_;
class SideViewParameter;
class SideViewParameterDefaultTypeInternal;
extern SideViewParameterDefaultTypeInternal _SideViewParameter_default_instance_;
class ViewPoolingParameter;
class ViewPoolingParameterDefaultTypeInternal;
extern ViewPoolingParameterDefaultTypeInternal _ViewPoolingParameter_default_instance_;
class ViewUnpoolingParameter;
class ViewUnpoolingParameterDefaultTypeInternal;
extern ViewUnpoolingParameterDefaultTypeInternal _ViewUnpoolingParameter_default_instance_;
}  // namespace smartseg

namespace caffe {

namespace protobuf_caffe_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_caffe_2eproto

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
const int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum BinaryDataParameter_ViewType {
  BinaryDataParameter_ViewType_None = 0,
  BinaryDataParameter_ViewType_Cylinder = 1,
  BinaryDataParameter_ViewType_Birdview = 2
};
bool BinaryDataParameter_ViewType_IsValid(int value);
const BinaryDataParameter_ViewType BinaryDataParameter_ViewType_ViewType_MIN = BinaryDataParameter_ViewType_None;
const BinaryDataParameter_ViewType BinaryDataParameter_ViewType_ViewType_MAX = BinaryDataParameter_ViewType_Birdview;
const int BinaryDataParameter_ViewType_ViewType_ARRAYSIZE = BinaryDataParameter_ViewType_ViewType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BinaryDataParameter_ViewType_descriptor();
inline const ::std::string& BinaryDataParameter_ViewType_Name(BinaryDataParameter_ViewType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BinaryDataParameter_ViewType_descriptor(), value);
}
inline bool BinaryDataParameter_ViewType_Parse(
    const ::std::string& name, BinaryDataParameter_ViewType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BinaryDataParameter_ViewType>(
    BinaryDataParameter_ViewType_descriptor(), name, value);
}
enum ImageLabelDataParameter_Padding {
  ImageLabelDataParameter_Padding_ZERO = 0,
  ImageLabelDataParameter_Padding_REFLECT = 1
};
bool ImageLabelDataParameter_Padding_IsValid(int value);
const ImageLabelDataParameter_Padding ImageLabelDataParameter_Padding_Padding_MIN = ImageLabelDataParameter_Padding_ZERO;
const ImageLabelDataParameter_Padding ImageLabelDataParameter_Padding_Padding_MAX = ImageLabelDataParameter_Padding_REFLECT;
const int ImageLabelDataParameter_Padding_Padding_ARRAYSIZE = ImageLabelDataParameter_Padding_Padding_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageLabelDataParameter_Padding_descriptor();
inline const ::std::string& ImageLabelDataParameter_Padding_Name(ImageLabelDataParameter_Padding value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageLabelDataParameter_Padding_descriptor(), value);
}
inline bool ImageLabelDataParameter_Padding_Parse(
    const ::std::string& name, ImageLabelDataParameter_Padding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageLabelDataParameter_Padding>(
    ImageLabelDataParameter_Padding_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum ROIPoolingParameter_PoolMethod {
  ROIPoolingParameter_PoolMethod_MAX = 0,
  ROIPoolingParameter_PoolMethod_AVE = 1
};
bool ROIPoolingParameter_PoolMethod_IsValid(int value);
const ROIPoolingParameter_PoolMethod ROIPoolingParameter_PoolMethod_PoolMethod_MIN = ROIPoolingParameter_PoolMethod_MAX;
const ROIPoolingParameter_PoolMethod ROIPoolingParameter_PoolMethod_PoolMethod_MAX = ROIPoolingParameter_PoolMethod_AVE;
const int ROIPoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = ROIPoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROIPoolingParameter_PoolMethod_descriptor();
inline const ::std::string& ROIPoolingParameter_PoolMethod_Name(ROIPoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROIPoolingParameter_PoolMethod_descriptor(), value);
}
inline bool ROIPoolingParameter_PoolMethod_Parse(
    const ::std::string& name, ROIPoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROIPoolingParameter_PoolMethod>(
    ROIPoolingParameter_PoolMethod_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31,
  V1LayerParameter_LayerType_IMAGE_DATA_ARBITRARY = 5001,
  V1LayerParameter_LayerType_EXPANDLABEL = 5002,
  V1LayerParameter_LayerType_DEFORMABLECONVOLUTION = 55
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_EXPANDLABEL;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum ElementHingeLossParameter_Norm {
  ElementHingeLossParameter_Norm_L1 = 1,
  ElementHingeLossParameter_Norm_L2 = 2
};
bool ElementHingeLossParameter_Norm_IsValid(int value);
const ElementHingeLossParameter_Norm ElementHingeLossParameter_Norm_Norm_MIN = ElementHingeLossParameter_Norm_L1;
const ElementHingeLossParameter_Norm ElementHingeLossParameter_Norm_Norm_MAX = ElementHingeLossParameter_Norm_L2;
const int ElementHingeLossParameter_Norm_Norm_ARRAYSIZE = ElementHingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElementHingeLossParameter_Norm_descriptor();
inline const ::std::string& ElementHingeLossParameter_Norm_Name(ElementHingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElementHingeLossParameter_Norm_descriptor(), value);
}
inline bool ElementHingeLossParameter_Norm_Parse(
    const ::std::string& name, ElementHingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElementHingeLossParameter_Norm>(
    ElementHingeLossParameter_Norm_descriptor(), name, value);
}
enum ROI2HeatMapParam_LabelType {
  ROI2HeatMapParam_LabelType_OneDim = 0,
  ROI2HeatMapParam_LabelType_NPlus1 = 1,
  ROI2HeatMapParam_LabelType_NDim = 2
};
bool ROI2HeatMapParam_LabelType_IsValid(int value);
const ROI2HeatMapParam_LabelType ROI2HeatMapParam_LabelType_LabelType_MIN = ROI2HeatMapParam_LabelType_OneDim;
const ROI2HeatMapParam_LabelType ROI2HeatMapParam_LabelType_LabelType_MAX = ROI2HeatMapParam_LabelType_NDim;
const int ROI2HeatMapParam_LabelType_LabelType_ARRAYSIZE = ROI2HeatMapParam_LabelType_LabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROI2HeatMapParam_LabelType_descriptor();
inline const ::std::string& ROI2HeatMapParam_LabelType_Name(ROI2HeatMapParam_LabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROI2HeatMapParam_LabelType_descriptor(), value);
}
inline bool ROI2HeatMapParam_LabelType_Parse(
    const ::std::string& name, ROI2HeatMapParam_LabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROI2HeatMapParam_LabelType>(
    ROI2HeatMapParam_LabelType_descriptor(), name, value);
}
enum ROIRefineParam_LabelType {
  ROIRefineParam_LabelType_OneDim = 0,
  ROIRefineParam_LabelType_NPlus1 = 1,
  ROIRefineParam_LabelType_NDim = 2
};
bool ROIRefineParam_LabelType_IsValid(int value);
const ROIRefineParam_LabelType ROIRefineParam_LabelType_LabelType_MIN = ROIRefineParam_LabelType_OneDim;
const ROIRefineParam_LabelType ROIRefineParam_LabelType_LabelType_MAX = ROIRefineParam_LabelType_NDim;
const int ROIRefineParam_LabelType_LabelType_ARRAYSIZE = ROIRefineParam_LabelType_LabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROIRefineParam_LabelType_descriptor();
inline const ::std::string& ROIRefineParam_LabelType_Name(ROIRefineParam_LabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROIRefineParam_LabelType_descriptor(), value);
}
inline bool ROIRefineParam_LabelType_Parse(
    const ::std::string& name, ROIRefineParam_LabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROIRefineParam_LabelType>(
    ROIRefineParam_LabelType_descriptor(), name, value);
}
enum CropParameter_Type {
  CropParameter_Type_CENTER = 1,
  CropParameter_Type_RANDOM = 2
};
bool CropParameter_Type_IsValid(int value);
const CropParameter_Type CropParameter_Type_Type_MIN = CropParameter_Type_CENTER;
const CropParameter_Type CropParameter_Type_Type_MAX = CropParameter_Type_RANDOM;
const int CropParameter_Type_Type_ARRAYSIZE = CropParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CropParameter_Type_descriptor();
inline const ::std::string& CropParameter_Type_Name(CropParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CropParameter_Type_descriptor(), value);
}
inline bool CropParameter_Type_Parse(
    const ::std::string& name, CropParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CropParameter_Type>(
    CropParameter_Type_descriptor(), name, value);
}
enum ResampleParameter_ResampleType {
  ResampleParameter_ResampleType_NEAREST = 1,
  ResampleParameter_ResampleType_LINEAR = 2,
  ResampleParameter_ResampleType_CUBIC = 3,
  ResampleParameter_ResampleType_AREA = 4
};
bool ResampleParameter_ResampleType_IsValid(int value);
const ResampleParameter_ResampleType ResampleParameter_ResampleType_ResampleType_MIN = ResampleParameter_ResampleType_NEAREST;
const ResampleParameter_ResampleType ResampleParameter_ResampleType_ResampleType_MAX = ResampleParameter_ResampleType_AREA;
const int ResampleParameter_ResampleType_ResampleType_ARRAYSIZE = ResampleParameter_ResampleType_ResampleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResampleParameter_ResampleType_descriptor();
inline const ::std::string& ResampleParameter_ResampleType_Name(ResampleParameter_ResampleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResampleParameter_ResampleType_descriptor(), value);
}
inline bool ResampleParameter_ResampleType_Parse(
    const ::std::string& name, ResampleParameter_ResampleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResampleParameter_ResampleType>(
    ResampleParameter_ResampleType_descriptor(), name, value);
}
enum ATRSParameter_NormType {
  ATRSParameter_NormType_NONE = 0,
  ATRSParameter_NormType_WIDTH = 1,
  ATRSParameter_NormType_HEIGHT = 2,
  ATRSParameter_NormType_WIDTH_LOG = 3,
  ATRSParameter_NormType_HEIGHT_LOG = 4
};
bool ATRSParameter_NormType_IsValid(int value);
const ATRSParameter_NormType ATRSParameter_NormType_NormType_MIN = ATRSParameter_NormType_NONE;
const ATRSParameter_NormType ATRSParameter_NormType_NormType_MAX = ATRSParameter_NormType_HEIGHT_LOG;
const int ATRSParameter_NormType_NormType_ARRAYSIZE = ATRSParameter_NormType_NormType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ATRSParameter_NormType_descriptor();
inline const ::std::string& ATRSParameter_NormType_Name(ATRSParameter_NormType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ATRSParameter_NormType_descriptor(), value);
}
inline bool ATRSParameter_NormType_Parse(
    const ::std::string& name, ATRSParameter_NormType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ATRSParameter_NormType>(
    ATRSParameter_NormType_descriptor(), name, value);
}
enum DetectionOutputSSDParameter_MIN_SIZE_MODE {
  DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_AND_WIDTH = 0,
  DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_OR_WIDTH = 1
};
bool DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(int value);
const DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MIN = DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_AND_WIDTH;
const DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MAX = DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_OR_WIDTH;
const int DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_ARRAYSIZE = DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor();
inline const ::std::string& DetectionOutputSSDParameter_MIN_SIZE_MODE_Name(DetectionOutputSSDParameter_MIN_SIZE_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor(), value);
}
inline bool DetectionOutputSSDParameter_MIN_SIZE_MODE_Parse(
    const ::std::string& name, DetectionOutputSSDParameter_MIN_SIZE_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectionOutputSSDParameter_MIN_SIZE_MODE>(
    DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor(), name, value);
}
enum ProposalImgScaleToCamCoordsParameter_NormType {
  ProposalImgScaleToCamCoordsParameter_NormType_HEIGHT = 0,
  ProposalImgScaleToCamCoordsParameter_NormType_HEIGHT_LOG = 1
};
bool ProposalImgScaleToCamCoordsParameter_NormType_IsValid(int value);
const ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter_NormType_NormType_MIN = ProposalImgScaleToCamCoordsParameter_NormType_HEIGHT;
const ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter_NormType_NormType_MAX = ProposalImgScaleToCamCoordsParameter_NormType_HEIGHT_LOG;
const int ProposalImgScaleToCamCoordsParameter_NormType_NormType_ARRAYSIZE = ProposalImgScaleToCamCoordsParameter_NormType_NormType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProposalImgScaleToCamCoordsParameter_NormType_descriptor();
inline const ::std::string& ProposalImgScaleToCamCoordsParameter_NormType_Name(ProposalImgScaleToCamCoordsParameter_NormType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProposalImgScaleToCamCoordsParameter_NormType_descriptor(), value);
}
inline bool ProposalImgScaleToCamCoordsParameter_NormType_Parse(
    const ::std::string& name, ProposalImgScaleToCamCoordsParameter_NormType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposalImgScaleToCamCoordsParameter_NormType>(
    ProposalImgScaleToCamCoordsParameter_NormType_descriptor(), name, value);
}
enum ProposalImgScaleToCamCoordsParameter_OrienType {
  ProposalImgScaleToCamCoordsParameter_OrienType_PI = 0,
  ProposalImgScaleToCamCoordsParameter_OrienType_PI2 = 1
};
bool ProposalImgScaleToCamCoordsParameter_OrienType_IsValid(int value);
const ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_MIN = ProposalImgScaleToCamCoordsParameter_OrienType_PI;
const ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_MAX = ProposalImgScaleToCamCoordsParameter_OrienType_PI2;
const int ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_ARRAYSIZE = ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProposalImgScaleToCamCoordsParameter_OrienType_descriptor();
inline const ::std::string& ProposalImgScaleToCamCoordsParameter_OrienType_Name(ProposalImgScaleToCamCoordsParameter_OrienType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProposalImgScaleToCamCoordsParameter_OrienType_descriptor(), value);
}
inline bool ProposalImgScaleToCamCoordsParameter_OrienType_Parse(
    const ::std::string& name, ProposalImgScaleToCamCoordsParameter_OrienType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposalImgScaleToCamCoordsParameter_OrienType>(
    ProposalImgScaleToCamCoordsParameter_OrienType_descriptor(), name, value);
}
enum DeformableConvolutionParameter_Engine {
  DeformableConvolutionParameter_Engine_DEFAULT = 0,
  DeformableConvolutionParameter_Engine_CAFFE = 1,
  DeformableConvolutionParameter_Engine_CUDNN = 2
};
bool DeformableConvolutionParameter_Engine_IsValid(int value);
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter_Engine_Engine_MIN = DeformableConvolutionParameter_Engine_DEFAULT;
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter_Engine_Engine_MAX = DeformableConvolutionParameter_Engine_CUDNN;
const int DeformableConvolutionParameter_Engine_Engine_ARRAYSIZE = DeformableConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeformableConvolutionParameter_Engine_descriptor();
inline const ::std::string& DeformableConvolutionParameter_Engine_Name(DeformableConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeformableConvolutionParameter_Engine_descriptor(), value);
}
inline bool DeformableConvolutionParameter_Engine_Parse(
    const ::std::string& name, DeformableConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeformableConvolutionParameter_Engine>(
    DeformableConvolutionParameter_Engine_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
enum LabelType {
  OneDim = 0,
  NPlus1 = 1,
  NDim = 2
};
bool LabelType_IsValid(int value);
const LabelType LabelType_MIN = OneDim;
const LabelType LabelType_MAX = NDim;
const int LabelType_ARRAYSIZE = LabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LabelType_descriptor();
inline const ::std::string& LabelType_Name(LabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LabelType_descriptor(), value);
}
inline bool LabelType_Parse(
    const ::std::string& name, LabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelType>(
    LabelType_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  inline BlobShape* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  inline BlobProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional .caffe.BlobShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_num();
  void clear_has_num();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProtoVector) */ {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BlobProtoVector* other);

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobProtoVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobProtoVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  inline Datum* New() const PROTOBUF_FINAL { return New(NULL); }

  Datum* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Datum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 6;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  bool encoded() const;
  void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_data();
  void clear_has_data();
  void set_has_label();
  void clear_has_label();
  void set_has_encoded();
  void clear_has_encoded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  bool encoded_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // optional int32 num_groups = 9;
  bool has_num_groups() const;
  void clear_num_groups();
  static const int kNumGroupsFieldNumber = 9;
  ::google::protobuf::int32 num_groups() const;
  void set_num_groups(::google::protobuf::int32 value);

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_mean();
  void clear_has_mean();
  void set_has_std();
  void clear_has_std();
  void set_has_sparse();
  void clear_has_sparse();
  void set_has_variance_norm();
  void clear_has_variance_norm();
  void set_has_num_groups();
  void clear_has_num_groups();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  int variance_norm_;
  ::google::protobuf::int32 num_groups_;
  ::google::protobuf::int32 sparse_;
  float max_;
  float std_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  inline NetParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.V1LayerParameter layers = 2;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 2;
  const ::caffe::V1LayerParameter& layers(int index) const;
  ::caffe::V1LayerParameter* mutable_layers(int index);
  ::caffe::V1LayerParameter* add_layers();
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;

  // repeated string input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input(int index, ::std::string&& value);
  #endif
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  #if LANG_CXX11
  void add_input(::std::string&& value);
  #endif
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated .caffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  const ::caffe::BlobShape& input_shape(int index) const;
  ::caffe::BlobShape* mutable_input_shape(int index);
  ::caffe::BlobShape* add_input_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;

  // repeated .caffe.LayerParameter layer = 100;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 100;
  const ::caffe::LayerParameter& layer(int index) const;
  ::caffe::LayerParameter* mutable_layer(int index);
  ::caffe::LayerParameter* add_layer();
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.NetState state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::caffe::NetState& state() const;
  ::caffe::NetState* mutable_state();
  ::caffe::NetState* release_state();
  void set_allocated_state(::caffe::NetState* state);

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  bool force_backward() const;
  void set_force_backward(bool value);

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  bool debug_info() const;
  void set_debug_info(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_force_backward();
  void clear_has_force_backward();
  void set_has_state();
  void clear_has_state();
  void set_has_debug_info();
  void clear_has_debug_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::NetState* state_;
  bool force_backward_;
  bool debug_info_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverParameter) */ {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static const SnapshotFormat HDF5 =
    SolverParameter_SnapshotFormat_HDF5;
  static const SnapshotFormat BINARYPROTO =
    SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static const SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static const SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static const int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  static inline const ::std::string& SnapshotFormat_Name(SnapshotFormat value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(const ::std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static const SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD =
    SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV =
    SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD =
    SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP =
    SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA =
    SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM =
    SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string test_net = 2;
  int test_net_size() const;
  void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  const ::std::string& test_net(int index) const;
  ::std::string* mutable_test_net(int index);
  void set_test_net(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_net(int index, ::std::string&& value);
  #endif
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  ::std::string* add_test_net();
  void add_test_net(const ::std::string& value);
  #if LANG_CXX11
  void add_test_net(::std::string&& value);
  #endif
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  ::google::protobuf::int32 test_iter(int index) const;
  void set_test_iter(int index, ::google::protobuf::int32 value);
  void add_test_iter(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // repeated .caffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  const ::caffe::NetParameter& test_net_param(int index) const;
  ::caffe::NetParameter* mutable_test_net_param(int index);
  ::caffe::NetParameter* add_test_net_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;

  // repeated .caffe.NetState test_state = 27;
  int test_state_size() const;
  void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  const ::caffe::NetState& test_state(int index) const;
  ::caffe::NetState* mutable_test_state(int index);
  ::caffe::NetState* add_test_state();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;

  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  ::google::protobuf::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::google::protobuf::int32 value);
  void add_stepvalue(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional string train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::std::string& train_net() const;
  void set_train_net(const ::std::string& value);
  #if LANG_CXX11
  void set_train_net(::std::string&& value);
  #endif
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  ::std::string* mutable_train_net();
  ::std::string* release_train_net();
  void set_allocated_train_net(::std::string* train_net);

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  const ::std::string& lr_policy() const;
  void set_lr_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_lr_policy(::std::string&& value);
  #endif
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  ::std::string* mutable_lr_policy();
  ::std::string* release_lr_policy();
  void set_allocated_lr_policy(::std::string* lr_policy);

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  const ::std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot_prefix(::std::string&& value);
  #endif
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  ::std::string* mutable_snapshot_prefix();
  ::std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional string net = 24;
  bool has_net() const;
  void clear_net();
  static const int kNetFieldNumber = 24;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  #if LANG_CXX11
  void set_regularization_type(::std::string&& value);
  #endif
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional string type = 40 [default = "SGD"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  const ::caffe::NetParameter& train_net_param() const;
  ::caffe::NetParameter* mutable_train_net_param();
  ::caffe::NetParameter* release_train_net_param();
  void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // optional .caffe.NetParameter net_param = 25;
  bool has_net_param() const;
  void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  const ::caffe::NetParameter& net_param() const;
  ::caffe::NetParameter* mutable_net_param();
  ::caffe::NetParameter* release_net_param();
  void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional .caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  const ::caffe::NetState& train_state() const;
  ::caffe::NetState* mutable_train_state();
  ::caffe::NetState* release_train_state();
  void set_allocated_train_state(::caffe::NetState* train_state);

  // optional .caffe.PreviousStageParameter previous_stage_param = 3001;
  bool has_previous_stage_param() const;
  void clear_previous_stage_param();
  static const int kPreviousStageParamFieldNumber = 3001;
  const ::caffe::PreviousStageParameter& previous_stage_param() const;
  ::caffe::PreviousStageParameter* mutable_previous_stage_param();
  ::caffe::PreviousStageParameter* release_previous_stage_param();
  void set_allocated_previous_stage_param(::caffe::PreviousStageParameter* previous_stage_param);

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  ::google::protobuf::int32 test_interval() const;
  void set_test_interval(::google::protobuf::int32 value);

  // optional float base_lr = 5;
  bool has_base_lr() const;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  ::google::protobuf::int32 display() const;
  void set_display(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional float gamma = 9;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 9;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 10;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 10;
  float power() const;
  void set_power(float value);

  // optional float momentum = 11;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  float momentum() const;
  void set_momentum(float value);

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  ::google::protobuf::int32 stepsize() const;
  void set_stepsize(::google::protobuf::int32 value);

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  ::google::protobuf::int32 snapshot() const;
  void set_snapshot(::google::protobuf::int32 value);

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  ::caffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional float rms_decay = 38;
  bool has_rms_decay() const;
  void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  float rms_decay() const;
  void set_rms_decay(float value);

  // optional int32 print_param = 555 [default = 0];
  bool has_print_param() const;
  void clear_print_param();
  static const int kPrintParamFieldNumber = 555;
  ::google::protobuf::int32 print_param() const;
  void set_print_param(::google::protobuf::int32 value);

  // optional uint32 param_update_interval = 3002 [default = 1];
  bool has_param_update_interval() const;
  void clear_param_update_interval();
  static const int kParamUpdateIntervalFieldNumber = 3002;
  ::google::protobuf::uint32 param_update_interval() const;
  void set_param_update_interval(::google::protobuf::uint32 value);

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  ::google::protobuf::int64 random_seed() const;
  void set_random_seed(::google::protobuf::int64 value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  ::caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  // optional float delta = 31 [default = 1e-08];
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 31;
  float delta() const;
  void set_delta(float value);

  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  ::google::protobuf::int32 average_loss() const;
  void set_average_loss(::google::protobuf::int32 value);

  // optional float clip_gradients = 35 [default = -1];
  bool has_clip_gradients() const;
  void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  float clip_gradients() const;
  void set_clip_gradients(float value);

  // optional int32 iter_size = 36 [default = 1];
  bool has_iter_size() const;
  void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  ::google::protobuf::int32 iter_size() const;
  void set_iter_size(::google::protobuf::int32 value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  bool has_snapshot_format() const;
  void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  ::caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  void set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value);

  // optional float momentum2 = 39 [default = 0.999];
  bool has_momentum2() const;
  void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  float momentum2() const;
  void set_momentum2(float value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  void set_has_net();
  void clear_has_net();
  void set_has_net_param();
  void clear_has_net_param();
  void set_has_train_net();
  void clear_has_train_net();
  void set_has_train_net_param();
  void clear_has_train_net_param();
  void set_has_train_state();
  void clear_has_train_state();
  void set_has_test_interval();
  void clear_has_test_interval();
  void set_has_test_compute_loss();
  void clear_has_test_compute_loss();
  void set_has_test_initialization();
  void clear_has_test_initialization();
  void set_has_base_lr();
  void clear_has_base_lr();
  void set_has_display();
  void clear_has_display();
  void set_has_average_loss();
  void clear_has_average_loss();
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_iter_size();
  void clear_has_iter_size();
  void set_has_lr_policy();
  void clear_has_lr_policy();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_momentum();
  void clear_has_momentum();
  void set_has_weight_decay();
  void clear_has_weight_decay();
  void set_has_regularization_type();
  void clear_has_regularization_type();
  void set_has_stepsize();
  void clear_has_stepsize();
  void set_has_clip_gradients();
  void clear_has_clip_gradients();
  void set_has_print_param();
  void clear_has_print_param();
  void set_has_snapshot();
  void clear_has_snapshot();
  void set_has_snapshot_prefix();
  void clear_has_snapshot_prefix();
  void set_has_snapshot_diff();
  void clear_has_snapshot_diff();
  void set_has_snapshot_format();
  void clear_has_snapshot_format();
  void set_has_solver_mode();
  void clear_has_solver_mode();
  void set_has_device_id();
  void clear_has_device_id();
  void set_has_random_seed();
  void clear_has_random_seed();
  void set_has_type();
  void clear_has_type();
  void set_has_delta();
  void clear_has_delta();
  void set_has_momentum2();
  void clear_has_momentum2();
  void set_has_rms_decay();
  void clear_has_rms_decay();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_snapshot_after_train();
  void clear_has_snapshot_after_train();
  void set_has_solver_type();
  void clear_has_solver_type();
  void set_has_previous_stage_param();
  void clear_has_previous_stage_param();
  void set_has_param_update_interval();
  void clear_has_param_update_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::internal::ArenaStringPtr train_net_;
  ::google::protobuf::internal::ArenaStringPtr lr_policy_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::NetParameter* train_net_param_;
  ::caffe::NetParameter* net_param_;
  ::caffe::NetState* train_state_;
  ::caffe::PreviousStageParameter* previous_stage_param_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  ::google::protobuf::int32 snapshot_;
  ::google::protobuf::int32 device_id_;
  bool test_compute_loss_;
  bool snapshot_diff_;
  bool debug_info_;
  int solver_type_;
  float rms_decay_;
  ::google::protobuf::int32 print_param_;
  ::google::protobuf::uint32 param_update_interval_;
  ::google::protobuf::int64 random_seed_;
  int solver_mode_;
  bool test_initialization_;
  bool snapshot_after_train_;
  float delta_;
  ::google::protobuf::int32 average_loss_;
  float clip_gradients_;
  ::google::protobuf::int32 iter_size_;
  int snapshot_format_;
  float momentum2_;
  mutable int _cached_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  inline SolverState* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto history = 3;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 3;
  const ::caffe::BlobProto& history(int index) const;
  ::caffe::BlobProto* mutable_history(int index);
  ::caffe::BlobProto* add_history();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;

  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  const ::std::string& learned_net() const;
  void set_learned_net(const ::std::string& value);
  #if LANG_CXX11
  void set_learned_net(::std::string&& value);
  #endif
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  ::std::string* mutable_learned_net();
  ::std::string* release_learned_net();
  void set_allocated_learned_net(::std::string* learned_net);

  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::google::protobuf::int32 iter() const;
  void set_iter(::google::protobuf::int32 value);

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  ::google::protobuf::int32 current_step() const;
  void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  void set_has_iter();
  void clear_has_iter();
  void set_has_learned_net();
  void clear_has_learned_net();
  void set_has_current_step();
  void clear_has_current_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  ::google::protobuf::internal::ArenaStringPtr learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  inline NetState* New() const PROTOBUF_FINAL { return New(NULL); }

  NetState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stage(int index, ::std::string&& value);
  #endif
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_stage(::std::string&& value);
  #endif
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional .caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_level();
  void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::int32 level_;
  int phase_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetStateRule) */ {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  inline NetStateRule* New() const PROTOBUF_FINAL { return New(NULL); }

  NetStateRule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetStateRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 4;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 4;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stage(int index, ::std::string&& value);
  #endif
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_stage(::std::string&& value);
  #endif
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  int not_stage_size() const;
  void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  const ::std::string& not_stage(int index) const;
  ::std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_not_stage(int index, ::std::string&& value);
  #endif
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  ::std::string* add_not_stage();
  void add_not_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_not_stage(::std::string&& value);
  #endif
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // optional .caffe.Phase phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  bool has_min_level() const;
  void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  ::google::protobuf::int32 min_level() const;
  void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  ::google::protobuf::int32 max_level() const;
  void set_max_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_min_level();
  void clear_has_min_level();
  void set_has_max_level();
  void clear_has_max_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 max_level_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParamSpec) */ {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  ::caffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  float lr_mult() const;
  void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  float decay_mult() const;
  void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_share_mode();
  void clear_has_share_mode();
  void set_has_lr_mult();
  void clear_has_lr_mult();
  void set_has_decay_mult();
  void clear_has_decay_mult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bottom = 3;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bottom(int index, ::std::string&& value);
  #endif
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  #if LANG_CXX11
  void add_bottom(::std::string&& value);
  #endif
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_top(int index, ::std::string&& value);
  #endif
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  #if LANG_CXX11
  void add_top(::std::string&& value);
  #endif
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 6;
  const ::caffe::ParamSpec& param(int index) const;
  ::caffe::ParamSpec* mutable_param(int index);
  ::caffe::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;

  // repeated .caffe.BlobProto blobs = 7;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated .caffe.NetStateRule include = 8;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 8;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 9;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* mutable_transform_param();
  ::caffe::TransformationParameter* release_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* mutable_loss_param();
  ::caffe::LossParameter* release_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  ::caffe::AccuracyParameter* release_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  ::caffe::ArgMaxParameter* release_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* mutable_concat_param();
  ::caffe::ConcatParameter* release_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  ::caffe::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 107;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* mutable_data_param();
  ::caffe::DataParameter* release_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* mutable_dropout_param();
  ::caffe::DropoutParameter* release_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  ::caffe::DummyDataParameter* release_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  ::caffe::EltwiseParameter* release_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* mutable_exp_param();
  ::caffe::ExpParameter* release_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* mutable_image_data_param();
  ::caffe::ImageDataParameter* release_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  ::caffe::InnerProductParameter* release_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* mutable_lrn_param();
  ::caffe::LRNParameter* release_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  ::caffe::MemoryDataParameter* release_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* mutable_mvn_param();
  ::caffe::MVNParameter* release_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* mutable_power_param();
  ::caffe::PowerParameter* release_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  ::caffe::SigmoidParameter* release_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  ::caffe::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* mutable_slice_param();
  ::caffe::SliceParameter* release_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* mutable_tanh_param();
  ::caffe::TanHParameter* release_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* mutable_threshold_param();
  ::caffe::ThresholdParameter* release_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* mutable_window_data_param();
  ::caffe::WindowDataParameter* release_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.PythonParameter python_param = 130;
  bool has_python_param() const;
  void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  const ::caffe::PythonParameter& python_param() const;
  ::caffe::PythonParameter* mutable_python_param();
  ::caffe::PythonParameter* release_python_param();
  void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  const ::caffe::PReLUParameter& prelu_param() const;
  ::caffe::PReLUParameter* mutable_prelu_param();
  ::caffe::PReLUParameter* release_prelu_param();
  void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  const ::caffe::SPPParameter& spp_param() const;
  ::caffe::SPPParameter* mutable_spp_param();
  ::caffe::SPPParameter* release_spp_param();
  void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  const ::caffe::ReshapeParameter& reshape_param() const;
  ::caffe::ReshapeParameter* mutable_reshape_param();
  ::caffe::ReshapeParameter* release_reshape_param();
  void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.LogParameter log_param = 134;
  bool has_log_param() const;
  void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  const ::caffe::LogParameter& log_param() const;
  ::caffe::LogParameter* mutable_log_param();
  ::caffe::LogParameter* release_log_param();
  void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  const ::caffe::FlattenParameter& flatten_param() const;
  ::caffe::FlattenParameter* mutable_flatten_param();
  ::caffe::FlattenParameter* release_flatten_param();
  void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  const ::caffe::ReductionParameter& reduction_param() const;
  ::caffe::ReductionParameter* mutable_reduction_param();
  ::caffe::ReductionParameter* release_reduction_param();
  void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  const ::caffe::EmbedParameter& embed_param() const;
  ::caffe::EmbedParameter* mutable_embed_param();
  ::caffe::EmbedParameter* release_embed_param();
  void set_allocated_embed_param(::caffe::EmbedParameter* embed_param);

  // optional .caffe.TileParameter tile_param = 138;
  bool has_tile_param() const;
  void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  const ::caffe::TileParameter& tile_param() const;
  ::caffe::TileParameter* mutable_tile_param();
  ::caffe::TileParameter* release_tile_param();
  void set_allocated_tile_param(::caffe::TileParameter* tile_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  const ::caffe::BatchNormParameter& batch_norm_param() const;
  ::caffe::BatchNormParameter* mutable_batch_norm_param();
  ::caffe::BatchNormParameter* release_batch_norm_param();
  void set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param);

  // optional .caffe.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  const ::caffe::ELUParameter& elu_param() const;
  ::caffe::ELUParameter* mutable_elu_param();
  ::caffe::ELUParameter* release_elu_param();
  void set_allocated_elu_param(::caffe::ELUParameter* elu_param);

  // optional .caffe.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  const ::caffe::BiasParameter& bias_param() const;
  ::caffe::BiasParameter* mutable_bias_param();
  ::caffe::BiasParameter* release_bias_param();
  void set_allocated_bias_param(::caffe::BiasParameter* bias_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  const ::caffe::ScaleParameter& scale_param() const;
  ::caffe::ScaleParameter* mutable_scale_param();
  ::caffe::ScaleParameter* release_scale_param();
  void set_allocated_scale_param(::caffe::ScaleParameter* scale_param);

  // optional .caffe.InputParameter input_param = 143;
  bool has_input_param() const;
  void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  const ::caffe::InputParameter& input_param() const;
  ::caffe::InputParameter* mutable_input_param();
  ::caffe::InputParameter* release_input_param();
  void set_allocated_input_param(::caffe::InputParameter* input_param);

  // optional .caffe.PermuteParameter permute_param = 202;
  bool has_permute_param() const;
  void clear_permute_param();
  static const int kPermuteParamFieldNumber = 202;
  const ::caffe::PermuteParameter& permute_param() const;
  ::caffe::PermuteParameter* mutable_permute_param();
  ::caffe::PermuteParameter* release_permute_param();
  void set_allocated_permute_param(::caffe::PermuteParameter* permute_param);

  // optional .caffe.RegionParameter region_param = 300;
  bool has_region_param() const;
  void clear_region_param();
  static const int kRegionParamFieldNumber = 300;
  const ::caffe::RegionParameter& region_param() const;
  ::caffe::RegionParameter* mutable_region_param();
  ::caffe::RegionParameter* release_region_param();
  void set_allocated_region_param(::caffe::RegionParameter* region_param);

  // optional .caffe.ReorgParameter reorg_param = 301;
  bool has_reorg_param() const;
  void clear_reorg_param();
  static const int kReorgParamFieldNumber = 301;
  const ::caffe::ReorgParameter& reorg_param() const;
  ::caffe::ReorgParameter* mutable_reorg_param();
  ::caffe::ReorgParameter* release_reorg_param();
  void set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param);

  // optional .caffe.RegionOutputParameter region_output_param = 310;
  bool has_region_output_param() const;
  void clear_region_output_param();
  static const int kRegionOutputParamFieldNumber = 310;
  const ::caffe::RegionOutputParameter& region_output_param() const;
  ::caffe::RegionOutputParameter* mutable_region_output_param();
  ::caffe::RegionOutputParameter* release_region_output_param();
  void set_allocated_region_output_param(::caffe::RegionOutputParameter* region_output_param);

  // optional .caffe.ResampleParameter resample_param = 1000;
  bool has_resample_param() const;
  void clear_resample_param();
  static const int kResampleParamFieldNumber = 1000;
  const ::caffe::ResampleParameter& resample_param() const;
  ::caffe::ResampleParameter* mutable_resample_param();
  ::caffe::ResampleParameter* release_resample_param();
  void set_allocated_resample_param(::caffe::ResampleParameter* resample_param);

  // optional .smartseg.ConfigParameter smartseg_config_param = 2000;
  bool has_smartseg_config_param() const;
  void clear_smartseg_config_param();
  static const int kSmartsegConfigParamFieldNumber = 2000;
  const ::smartseg::ConfigParameter& smartseg_config_param() const;
  ::smartseg::ConfigParameter* mutable_smartseg_config_param();
  ::smartseg::ConfigParameter* release_smartseg_config_param();
  void set_allocated_smartseg_config_param(::smartseg::ConfigParameter* smartseg_config_param);

  // optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
  bool has_smartseg_frame_data_param() const;
  void clear_smartseg_frame_data_param();
  static const int kSmartsegFrameDataParamFieldNumber = 2001;
  const ::smartseg::FrameDataParameter& smartseg_frame_data_param() const;
  ::smartseg::FrameDataParameter* mutable_smartseg_frame_data_param();
  ::smartseg::FrameDataParameter* release_smartseg_frame_data_param();
  void set_allocated_smartseg_frame_data_param(::smartseg::FrameDataParameter* smartseg_frame_data_param);

  // optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
  bool has_smartseg_blob_visualize_param() const;
  void clear_smartseg_blob_visualize_param();
  static const int kSmartsegBlobVisualizeParamFieldNumber = 2002;
  const ::smartseg::BlobVisualizeParameter& smartseg_blob_visualize_param() const;
  ::smartseg::BlobVisualizeParameter* mutable_smartseg_blob_visualize_param();
  ::smartseg::BlobVisualizeParameter* release_smartseg_blob_visualize_param();
  void set_allocated_smartseg_blob_visualize_param(::smartseg::BlobVisualizeParameter* smartseg_blob_visualize_param);

  // optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
  bool has_smartseg_plan_view_param() const;
  void clear_smartseg_plan_view_param();
  static const int kSmartsegPlanViewParamFieldNumber = 2003;
  const ::smartseg::PlanViewParameter& smartseg_plan_view_param() const;
  ::smartseg::PlanViewParameter* mutable_smartseg_plan_view_param();
  ::smartseg::PlanViewParameter* release_smartseg_plan_view_param();
  void set_allocated_smartseg_plan_view_param(::smartseg::PlanViewParameter* smartseg_plan_view_param);

  // optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
  bool has_smartseg_horizontal_view_param() const;
  void clear_smartseg_horizontal_view_param();
  static const int kSmartsegHorizontalViewParamFieldNumber = 2004;
  const ::smartseg::HorizontalViewParameter& smartseg_horizontal_view_param() const;
  ::smartseg::HorizontalViewParameter* mutable_smartseg_horizontal_view_param();
  ::smartseg::HorizontalViewParameter* release_smartseg_horizontal_view_param();
  void set_allocated_smartseg_horizontal_view_param(::smartseg::HorizontalViewParameter* smartseg_horizontal_view_param);

  // optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
  bool has_smartseg_plan_view_extractor_param() const;
  void clear_smartseg_plan_view_extractor_param();
  static const int kSmartsegPlanViewExtractorParamFieldNumber = 2005;
  const ::smartseg::PlanViewExtractorParameter& smartseg_plan_view_extractor_param() const;
  ::smartseg::PlanViewExtractorParameter* mutable_smartseg_plan_view_extractor_param();
  ::smartseg::PlanViewExtractorParameter* release_smartseg_plan_view_extractor_param();
  void set_allocated_smartseg_plan_view_extractor_param(::smartseg::PlanViewExtractorParameter* smartseg_plan_view_extractor_param);

  // optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
  bool has_smartseg_horizontal_view_extractor_param() const;
  void clear_smartseg_horizontal_view_extractor_param();
  static const int kSmartsegHorizontalViewExtractorParamFieldNumber = 2006;
  const ::smartseg::HorizontalViewExtractorParameter& smartseg_horizontal_view_extractor_param() const;
  ::smartseg::HorizontalViewExtractorParameter* mutable_smartseg_horizontal_view_extractor_param();
  ::smartseg::HorizontalViewExtractorParameter* release_smartseg_horizontal_view_extractor_param();
  void set_allocated_smartseg_horizontal_view_extractor_param(::smartseg::HorizontalViewExtractorParameter* smartseg_horizontal_view_extractor_param);

  // optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
  bool has_smartseg_segmentor_param() const;
  void clear_smartseg_segmentor_param();
  static const int kSmartsegSegmentorParamFieldNumber = 2007;
  const ::smartseg::SegmentorParameter& smartseg_segmentor_param() const;
  ::smartseg::SegmentorParameter* mutable_smartseg_segmentor_param();
  ::smartseg::SegmentorParameter* release_smartseg_segmentor_param();
  void set_allocated_smartseg_segmentor_param(::smartseg::SegmentorParameter* smartseg_segmentor_param);

  // optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
  bool has_smartseg_frame_target_param() const;
  void clear_smartseg_frame_target_param();
  static const int kSmartsegFrameTargetParamFieldNumber = 2008;
  const ::smartseg::FrameTargetParameter& smartseg_frame_target_param() const;
  ::smartseg::FrameTargetParameter* mutable_smartseg_frame_target_param();
  ::smartseg::FrameTargetParameter* release_smartseg_frame_target_param();
  void set_allocated_smartseg_frame_target_param(::smartseg::FrameTargetParameter* smartseg_frame_target_param);

  // optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
  bool has_smartseg_frame_sequence_data_param() const;
  void clear_smartseg_frame_sequence_data_param();
  static const int kSmartsegFrameSequenceDataParamFieldNumber = 2009;
  const ::smartseg::FrameSequenceDataParameter& smartseg_frame_sequence_data_param() const;
  ::smartseg::FrameSequenceDataParameter* mutable_smartseg_frame_sequence_data_param();
  ::smartseg::FrameSequenceDataParameter* release_smartseg_frame_sequence_data_param();
  void set_allocated_smartseg_frame_sequence_data_param(::smartseg::FrameSequenceDataParameter* smartseg_frame_sequence_data_param);

  // optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
  bool has_smartseg_online_norm_param() const;
  void clear_smartseg_online_norm_param();
  static const int kSmartsegOnlineNormParamFieldNumber = 2010;
  const ::smartseg::OnlineNormParameter& smartseg_online_norm_param() const;
  ::smartseg::OnlineNormParameter* mutable_smartseg_online_norm_param();
  ::smartseg::OnlineNormParameter* release_smartseg_online_norm_param();
  void set_allocated_smartseg_online_norm_param(::smartseg::OnlineNormParameter* smartseg_online_norm_param);

  // optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
  bool has_smartseg_view_pooling_param() const;
  void clear_smartseg_view_pooling_param();
  static const int kSmartsegViewPoolingParamFieldNumber = 2011;
  const ::smartseg::ViewPoolingParameter& smartseg_view_pooling_param() const;
  ::smartseg::ViewPoolingParameter* mutable_smartseg_view_pooling_param();
  ::smartseg::ViewPoolingParameter* release_smartseg_view_pooling_param();
  void set_allocated_smartseg_view_pooling_param(::smartseg::ViewPoolingParameter* smartseg_view_pooling_param);

  // optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
  bool has_smartseg_view_unpooling_param() const;
  void clear_smartseg_view_unpooling_param();
  static const int kSmartsegViewUnpoolingParamFieldNumber = 2012;
  const ::smartseg::ViewUnpoolingParameter& smartseg_view_unpooling_param() const;
  ::smartseg::ViewUnpoolingParameter* mutable_smartseg_view_unpooling_param();
  ::smartseg::ViewUnpoolingParameter* release_smartseg_view_unpooling_param();
  void set_allocated_smartseg_view_unpooling_param(::smartseg::ViewUnpoolingParameter* smartseg_view_unpooling_param);

  // optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
  bool has_smartseg_point_interpolation_param() const;
  void clear_smartseg_point_interpolation_param();
  static const int kSmartsegPointInterpolationParamFieldNumber = 2013;
  const ::smartseg::PointInterpolationParameter& smartseg_point_interpolation_param() const;
  ::smartseg::PointInterpolationParameter* mutable_smartseg_point_interpolation_param();
  ::smartseg::PointInterpolationParameter* release_smartseg_point_interpolation_param();
  void set_allocated_smartseg_point_interpolation_param(::smartseg::PointInterpolationParameter* smartseg_point_interpolation_param);

  // optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
  bool has_smartseg_dilation_param() const;
  void clear_smartseg_dilation_param();
  static const int kSmartsegDilationParamFieldNumber = 2014;
  const ::smartseg::DilationParameter& smartseg_dilation_param() const;
  ::smartseg::DilationParameter* mutable_smartseg_dilation_param();
  ::smartseg::DilationParameter* release_smartseg_dilation_param();
  void set_allocated_smartseg_dilation_param(::smartseg::DilationParameter* smartseg_dilation_param);

  // optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
  bool has_smartseg_side_view_param() const;
  void clear_smartseg_side_view_param();
  static const int kSmartsegSideViewParamFieldNumber = 2015;
  const ::smartseg::SideViewParameter& smartseg_side_view_param() const;
  ::smartseg::SideViewParameter* mutable_smartseg_side_view_param();
  ::smartseg::SideViewParameter* release_smartseg_side_view_param();
  void set_allocated_smartseg_side_view_param(::smartseg::SideViewParameter* smartseg_side_view_param);

  // optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
  bool has_smartseg_side_view_extractor_param() const;
  void clear_smartseg_side_view_extractor_param();
  static const int kSmartsegSideViewExtractorParamFieldNumber = 2016;
  const ::smartseg::SideViewExtractorParameter& smartseg_side_view_extractor_param() const;
  ::smartseg::SideViewExtractorParameter* mutable_smartseg_side_view_extractor_param();
  ::smartseg::SideViewExtractorParameter* release_smartseg_side_view_extractor_param();
  void set_allocated_smartseg_side_view_extractor_param(::smartseg::SideViewExtractorParameter* smartseg_side_view_extractor_param);

  // optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
  bool has_fcn_image_data_param() const;
  void clear_fcn_image_data_param();
  static const int kFcnImageDataParamFieldNumber = 3000;
  const ::caffe_fcn_data_layer::FCNImageDataParameter& fcn_image_data_param() const;
  ::caffe_fcn_data_layer::FCNImageDataParameter* mutable_fcn_image_data_param();
  ::caffe_fcn_data_layer::FCNImageDataParameter* release_fcn_image_data_param();
  void set_allocated_fcn_image_data_param(::caffe_fcn_data_layer::FCNImageDataParameter* fcn_image_data_param);

  // optional .caffe.ResizeParameter resize_param = 3001;
  bool has_resize_param() const;
  void clear_resize_param();
  static const int kResizeParamFieldNumber = 3001;
  const ::caffe::ResizeParameter& resize_param() const;
  ::caffe::ResizeParameter* mutable_resize_param();
  ::caffe::ResizeParameter* release_resize_param();
  void set_allocated_resize_param(::caffe::ResizeParameter* resize_param);

  // optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
  bool has_label_related_dropout_param() const;
  void clear_label_related_dropout_param();
  static const int kLabelRelatedDropoutParamFieldNumber = 3002;
  const ::caffe::LabelRelatedDropoutParam& label_related_dropout_param() const;
  ::caffe::LabelRelatedDropoutParam* mutable_label_related_dropout_param();
  ::caffe::LabelRelatedDropoutParam* release_label_related_dropout_param();
  void set_allocated_label_related_dropout_param(::caffe::LabelRelatedDropoutParam* label_related_dropout_param);

  // optional .caffe.InceptionParameter inception_param = 3003;
  bool has_inception_param() const;
  void clear_inception_param();
  static const int kInceptionParamFieldNumber = 3003;
  const ::caffe::InceptionParameter& inception_param() const;
  ::caffe::InceptionParameter* mutable_inception_param();
  ::caffe::InceptionParameter* release_inception_param();
  void set_allocated_inception_param(::caffe::InceptionParameter* inception_param);

  // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
  bool has_element_hinge_loss_param() const;
  void clear_element_hinge_loss_param();
  static const int kElementHingeLossParamFieldNumber = 3004;
  const ::caffe::ElementHingeLossParameter& element_hinge_loss_param() const;
  ::caffe::ElementHingeLossParameter* mutable_element_hinge_loss_param();
  ::caffe::ElementHingeLossParameter* release_element_hinge_loss_param();
  void set_allocated_element_hinge_loss_param(::caffe::ElementHingeLossParameter* element_hinge_loss_param);

  // optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
  bool has_pyramid_data_param() const;
  void clear_pyramid_data_param();
  static const int kPyramidDataParamFieldNumber = 3005;
  const ::caffe::PyramidDataParameter& pyramid_data_param() const;
  ::caffe::PyramidDataParameter* mutable_pyramid_data_param();
  ::caffe::PyramidDataParameter* release_pyramid_data_param();
  void set_allocated_pyramid_data_param(::caffe::PyramidDataParameter* pyramid_data_param);

  // optional .caffe.DetectionOutputParameter detection_output_param = 3006;
  bool has_detection_output_param() const;
  void clear_detection_output_param();
  static const int kDetectionOutputParamFieldNumber = 3006;
  const ::caffe::DetectionOutputParameter& detection_output_param() const;
  ::caffe::DetectionOutputParameter* mutable_detection_output_param();
  ::caffe::DetectionOutputParameter* release_detection_output_param();
  void set_allocated_detection_output_param(::caffe::DetectionOutputParameter* detection_output_param);

  // optional .caffe.ROIDataParam roi_data_param = 3007;
  bool has_roi_data_param() const;
  void clear_roi_data_param();
  static const int kRoiDataParamFieldNumber = 3007;
  const ::caffe::ROIDataParam& roi_data_param() const;
  ::caffe::ROIDataParam* mutable_roi_data_param();
  ::caffe::ROIDataParam* release_roi_data_param();
  void set_allocated_roi_data_param(::caffe::ROIDataParam* roi_data_param);

  // optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
  bool has_roi_2_heatmap_param() const;
  void clear_roi_2_heatmap_param();
  static const int kRoi2HeatmapParamFieldNumber = 3008;
  const ::caffe::ROI2HeatMapParam& roi_2_heatmap_param() const;
  ::caffe::ROI2HeatMapParam* mutable_roi_2_heatmap_param();
  ::caffe::ROI2HeatMapParam* release_roi_2_heatmap_param();
  void set_allocated_roi_2_heatmap_param(::caffe::ROI2HeatMapParam* roi_2_heatmap_param);

  // optional .caffe.ROIShowParam roi_show_param = 3009;
  bool has_roi_show_param() const;
  void clear_roi_show_param();
  static const int kRoiShowParamFieldNumber = 3009;
  const ::caffe::ROIShowParam& roi_show_param() const;
  ::caffe::ROIShowParam* mutable_roi_show_param();
  ::caffe::ROIShowParam* release_roi_show_param();
  void set_allocated_roi_show_param(::caffe::ROIShowParam* roi_show_param);

  // optional .caffe.ROIRefineParam roi_refine_param = 3010;
  bool has_roi_refine_param() const;
  void clear_roi_refine_param();
  static const int kRoiRefineParamFieldNumber = 3010;
  const ::caffe::ROIRefineParam& roi_refine_param() const;
  ::caffe::ROIRefineParam* mutable_roi_refine_param();
  ::caffe::ROIRefineParam* release_roi_refine_param();
  void set_allocated_roi_refine_param(::caffe::ROIRefineParam* roi_refine_param);

  // optional .caffe.CropParameter crop_param = 3011;
  bool has_crop_param() const;
  void clear_crop_param();
  static const int kCropParamFieldNumber = 3011;
  const ::caffe::CropParameter& crop_param() const;
  ::caffe::CropParameter* mutable_crop_param();
  ::caffe::CropParameter* release_crop_param();
  void set_allocated_crop_param(::caffe::CropParameter* crop_param);

  // optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
  bool has_detection_output_ssd_param() const;
  void clear_detection_output_ssd_param();
  static const int kDetectionOutputSsdParamFieldNumber = 4001;
  const ::caffe::DetectionOutputSSDParameter& detection_output_ssd_param() const;
  ::caffe::DetectionOutputSSDParameter* mutable_detection_output_ssd_param();
  ::caffe::DetectionOutputSSDParameter* release_detection_output_ssd_param();
  void set_allocated_detection_output_ssd_param(::caffe::DetectionOutputSSDParameter* detection_output_ssd_param);

  // optional .caffe.ImageDistortParameter image_distort_param = 4008;
  bool has_image_distort_param() const;
  void clear_image_distort_param();
  static const int kImageDistortParamFieldNumber = 4008;
  const ::caffe::ImageDistortParameter& image_distort_param() const;
  ::caffe::ImageDistortParameter* mutable_image_distort_param();
  ::caffe::ImageDistortParameter* release_image_distort_param();
  void set_allocated_image_distort_param(::caffe::ImageDistortParameter* image_distort_param);

  // optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
  bool has_bbox_reg_param() const;
  void clear_bbox_reg_param();
  static const int kBboxRegParamFieldNumber = 4018;
  const ::caffe::BBoxRegParameter& bbox_reg_param() const;
  ::caffe::BBoxRegParameter* mutable_bbox_reg_param();
  ::caffe::BBoxRegParameter* release_bbox_reg_param();
  void set_allocated_bbox_reg_param(::caffe::BBoxRegParameter* bbox_reg_param);

  // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
  bool has_psroi_pooling_param() const;
  void clear_psroi_pooling_param();
  static const int kPsroiPoolingParamFieldNumber = 4019;
  const ::caffe::PSROIPoolingParameter& psroi_pooling_param() const;
  ::caffe::PSROIPoolingParameter* mutable_psroi_pooling_param();
  ::caffe::PSROIPoolingParameter* release_psroi_pooling_param();
  void set_allocated_psroi_pooling_param(::caffe::PSROIPoolingParameter* psroi_pooling_param);

  // optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
  bool has_dfmb_psroi_pooling_param() const;
  void clear_dfmb_psroi_pooling_param();
  static const int kDfmbPsroiPoolingParamFieldNumber = 4020;
  const ::caffe::DFMBPSROIPoolingParameter& dfmb_psroi_pooling_param() const;
  ::caffe::DFMBPSROIPoolingParameter* mutable_dfmb_psroi_pooling_param();
  ::caffe::DFMBPSROIPoolingParameter* release_dfmb_psroi_pooling_param();
  void set_allocated_dfmb_psroi_pooling_param(::caffe::DFMBPSROIPoolingParameter* dfmb_psroi_pooling_param);

  // optional .caffe.RegParameter reg_param = 4023;
  bool has_reg_param() const;
  void clear_reg_param();
  static const int kRegParamFieldNumber = 4023;
  const ::caffe::RegParameter& reg_param() const;
  ::caffe::RegParameter* mutable_reg_param();
  ::caffe::RegParameter* release_reg_param();
  void set_allocated_reg_param(::caffe::RegParameter* reg_param);

  // optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
  bool has_proposal_img_scale_to_cam_coords_param() const;
  void clear_proposal_img_scale_to_cam_coords_param();
  static const int kProposalImgScaleToCamCoordsParamFieldNumber = 4031;
  const ::caffe::ProposalImgScaleToCamCoordsParameter& proposal_img_scale_to_cam_coords_param() const;
  ::caffe::ProposalImgScaleToCamCoordsParameter* mutable_proposal_img_scale_to_cam_coords_param();
  ::caffe::ProposalImgScaleToCamCoordsParameter* release_proposal_img_scale_to_cam_coords_param();
  void set_allocated_proposal_img_scale_to_cam_coords_param(::caffe::ProposalImgScaleToCamCoordsParameter* proposal_img_scale_to_cam_coords_param);

  // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
  bool has_deformable_convolution_param() const;
  void clear_deformable_convolution_param();
  static const int kDeformableConvolutionParamFieldNumber = 5000;
  const ::caffe::DeformableConvolutionParameter& deformable_convolution_param() const;
  ::caffe::DeformableConvolutionParameter* mutable_deformable_convolution_param();
  ::caffe::DeformableConvolutionParameter* release_deformable_convolution_param();
  void set_allocated_deformable_convolution_param(::caffe::DeformableConvolutionParameter* deformable_convolution_param);

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
  bool has_image_data_arbitrary_param() const;
  void clear_image_data_arbitrary_param();
  static const int kImageDataArbitraryParamFieldNumber = 5001;
  const ::caffe::ImageDataArbitraryParameter& image_data_arbitrary_param() const;
  ::caffe::ImageDataArbitraryParameter* mutable_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* release_image_data_arbitrary_param();
  void set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param);

  // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
  bool has_expandlabel_param() const;
  void clear_expandlabel_param();
  static const int kExpandlabelParamFieldNumber = 5002;
  const ::caffe::ExpandlabelParameter& expandlabel_param() const;
  ::caffe::ExpandlabelParameter* mutable_expandlabel_param();
  ::caffe::ExpandlabelParameter* release_expandlabel_param();
  void set_allocated_expandlabel_param(::caffe::ExpandlabelParameter* expandlabel_param);

  // optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
  bool has_manipulate_loss_param() const;
  void clear_manipulate_loss_param();
  static const int kManipulateLossParamFieldNumber = 5004;
  const ::caffe::ManipulateLossParameter& manipulate_loss_param() const;
  ::caffe::ManipulateLossParameter* mutable_manipulate_loss_param();
  ::caffe::ManipulateLossParameter* release_manipulate_loss_param();
  void set_allocated_manipulate_loss_param(::caffe::ManipulateLossParameter* manipulate_loss_param);

  // optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
  bool has_image_label_data_param() const;
  void clear_image_label_data_param();
  static const int kImageLabelDataParamFieldNumber = 5005;
  const ::caffe::ImageLabelDataParameter& image_label_data_param() const;
  ::caffe::ImageLabelDataParameter* mutable_image_label_data_param();
  ::caffe::ImageLabelDataParameter* release_image_label_data_param();
  void set_allocated_image_label_data_param(::caffe::ImageLabelDataParameter* image_label_data_param);

  // optional .caffe.BinaryDataParameter binary_data_param = 5006;
  bool has_binary_data_param() const;
  void clear_binary_data_param();
  static const int kBinaryDataParamFieldNumber = 5006;
  const ::caffe::BinaryDataParameter& binary_data_param() const;
  ::caffe::BinaryDataParameter* mutable_binary_data_param();
  ::caffe::BinaryDataParameter* release_binary_data_param();
  void set_allocated_binary_data_param(::caffe::BinaryDataParameter* binary_data_param);

  // optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
  bool has_cylinder_view_param() const;
  void clear_cylinder_view_param();
  static const int kCylinderViewParamFieldNumber = 5007;
  const ::caffe::CylinderViewParameter& cylinder_view_param() const;
  ::caffe::CylinderViewParameter* mutable_cylinder_view_param();
  ::caffe::CylinderViewParameter* release_cylinder_view_param();
  void set_allocated_cylinder_view_param(::caffe::CylinderViewParameter* cylinder_view_param);

  // optional .caffe.BirdviewParameter bird_view_param = 5008;
  bool has_bird_view_param() const;
  void clear_bird_view_param();
  static const int kBirdViewParamFieldNumber = 5008;
  const ::caffe::BirdviewParameter& bird_view_param() const;
  ::caffe::BirdviewParameter* mutable_bird_view_param();
  ::caffe::BirdviewParameter* release_bird_view_param();
  void set_allocated_bird_view_param(::caffe::BirdviewParameter* bird_view_param);

  // optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
  bool has_repeat_channel_param() const;
  void clear_repeat_channel_param();
  static const int kRepeatChannelParamFieldNumber = 5009;
  const ::caffe::RepeatChannelParameter& repeat_channel_param() const;
  ::caffe::RepeatChannelParameter* mutable_repeat_channel_param();
  ::caffe::RepeatChannelParameter* release_repeat_channel_param();
  void set_allocated_repeat_channel_param(::caffe::RepeatChannelParameter* repeat_channel_param);

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
  bool has_roi_pooling_param() const;
  void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 8266711;
  const ::caffe::ROIPoolingParameter& roi_pooling_param() const;
  ::caffe::ROIPoolingParameter* mutable_roi_pooling_param();
  ::caffe::ROIPoolingParameter* release_roi_pooling_param();
  void set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param);

  // optional .caffe.Phase phase = 10;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 10;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional bool reshape_every_iter = 1001 [default = true];
  bool has_reshape_every_iter() const;
  void clear_reshape_every_iter();
  static const int kReshapeEveryIterFieldNumber = 1001;
  bool reshape_every_iter() const;
  void set_reshape_every_iter(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_phase();
  void clear_has_phase();
  void set_has_transform_param();
  void clear_has_transform_param();
  void set_has_loss_param();
  void clear_has_loss_param();
  void set_has_accuracy_param();
  void clear_has_accuracy_param();
  void set_has_argmax_param();
  void clear_has_argmax_param();
  void set_has_batch_norm_param();
  void clear_has_batch_norm_param();
  void set_has_bias_param();
  void clear_has_bias_param();
  void set_has_concat_param();
  void clear_has_concat_param();
  void set_has_contrastive_loss_param();
  void clear_has_contrastive_loss_param();
  void set_has_convolution_param();
  void clear_has_convolution_param();
  void set_has_data_param();
  void clear_has_data_param();
  void set_has_dropout_param();
  void clear_has_dropout_param();
  void set_has_dummy_data_param();
  void clear_has_dummy_data_param();
  void set_has_eltwise_param();
  void clear_has_eltwise_param();
  void set_has_elu_param();
  void clear_has_elu_param();
  void set_has_embed_param();
  void clear_has_embed_param();
  void set_has_exp_param();
  void clear_has_exp_param();
  void set_has_flatten_param();
  void clear_has_flatten_param();
  void set_has_hdf5_data_param();
  void clear_has_hdf5_data_param();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();
  void set_has_hinge_loss_param();
  void clear_has_hinge_loss_param();
  void set_has_image_data_param();
  void clear_has_image_data_param();
  void set_has_infogain_loss_param();
  void clear_has_infogain_loss_param();
  void set_has_inner_product_param();
  void clear_has_inner_product_param();
  void set_has_input_param();
  void clear_has_input_param();
  void set_has_log_param();
  void clear_has_log_param();
  void set_has_lrn_param();
  void clear_has_lrn_param();
  void set_has_memory_data_param();
  void clear_has_memory_data_param();
  void set_has_mvn_param();
  void clear_has_mvn_param();
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_power_param();
  void clear_has_power_param();
  void set_has_prelu_param();
  void clear_has_prelu_param();
  void set_has_python_param();
  void clear_has_python_param();
  void set_has_reduction_param();
  void clear_has_reduction_param();
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_reshape_param();
  void clear_has_reshape_param();
  void set_has_roi_pooling_param();
  void clear_has_roi_pooling_param();
  void set_has_scale_param();
  void clear_has_scale_param();
  void set_has_sigmoid_param();
  void clear_has_sigmoid_param();
  void set_has_softmax_param();
  void clear_has_softmax_param();
  void set_has_spp_param();
  void clear_has_spp_param();
  void set_has_slice_param();
  void clear_has_slice_param();
  void set_has_tanh_param();
  void clear_has_tanh_param();
  void set_has_threshold_param();
  void clear_has_threshold_param();
  void set_has_tile_param();
  void clear_has_tile_param();
  void set_has_window_data_param();
  void clear_has_window_data_param();
  void set_has_smartseg_config_param();
  void clear_has_smartseg_config_param();
  void set_has_smartseg_frame_data_param();
  void clear_has_smartseg_frame_data_param();
  void set_has_smartseg_frame_sequence_data_param();
  void clear_has_smartseg_frame_sequence_data_param();
  void set_has_smartseg_blob_visualize_param();
  void clear_has_smartseg_blob_visualize_param();
  void set_has_smartseg_plan_view_param();
  void clear_has_smartseg_plan_view_param();
  void set_has_smartseg_plan_view_extractor_param();
  void clear_has_smartseg_plan_view_extractor_param();
  void set_has_smartseg_horizontal_view_param();
  void clear_has_smartseg_horizontal_view_param();
  void set_has_smartseg_horizontal_view_extractor_param();
  void clear_has_smartseg_horizontal_view_extractor_param();
  void set_has_smartseg_side_view_param();
  void clear_has_smartseg_side_view_param();
  void set_has_smartseg_side_view_extractor_param();
  void clear_has_smartseg_side_view_extractor_param();
  void set_has_smartseg_segmentor_param();
  void clear_has_smartseg_segmentor_param();
  void set_has_smartseg_frame_target_param();
  void clear_has_smartseg_frame_target_param();
  void set_has_smartseg_online_norm_param();
  void clear_has_smartseg_online_norm_param();
  void set_has_smartseg_view_pooling_param();
  void clear_has_smartseg_view_pooling_param();
  void set_has_smartseg_view_unpooling_param();
  void clear_has_smartseg_view_unpooling_param();
  void set_has_smartseg_point_interpolation_param();
  void clear_has_smartseg_point_interpolation_param();
  void set_has_smartseg_dilation_param();
  void clear_has_smartseg_dilation_param();
  void set_has_fcn_image_data_param();
  void clear_has_fcn_image_data_param();
  void set_has_resize_param();
  void clear_has_resize_param();
  void set_has_label_related_dropout_param();
  void clear_has_label_related_dropout_param();
  void set_has_inception_param();
  void clear_has_inception_param();
  void set_has_element_hinge_loss_param();
  void clear_has_element_hinge_loss_param();
  void set_has_pyramid_data_param();
  void clear_has_pyramid_data_param();
  void set_has_detection_output_param();
  void clear_has_detection_output_param();
  void set_has_roi_data_param();
  void clear_has_roi_data_param();
  void set_has_roi_2_heatmap_param();
  void clear_has_roi_2_heatmap_param();
  void set_has_roi_show_param();
  void clear_has_roi_show_param();
  void set_has_roi_refine_param();
  void clear_has_roi_refine_param();
  void set_has_crop_param();
  void clear_has_crop_param();
  void set_has_deformable_convolution_param();
  void clear_has_deformable_convolution_param();
  void set_has_image_data_arbitrary_param();
  void clear_has_image_data_arbitrary_param();
  void set_has_expandlabel_param();
  void clear_has_expandlabel_param();
  void set_has_manipulate_loss_param();
  void clear_has_manipulate_loss_param();
  void set_has_image_label_data_param();
  void clear_has_image_label_data_param();
  void set_has_binary_data_param();
  void clear_has_binary_data_param();
  void set_has_cylinder_view_param();
  void clear_has_cylinder_view_param();
  void set_has_bird_view_param();
  void clear_has_bird_view_param();
  void set_has_repeat_channel_param();
  void clear_has_repeat_channel_param();
  void set_has_region_param();
  void clear_has_region_param();
  void set_has_reorg_param();
  void clear_has_reorg_param();
  void set_has_region_output_param();
  void clear_has_region_output_param();
  void set_has_permute_param();
  void clear_has_permute_param();
  void set_has_resample_param();
  void clear_has_resample_param();
  void set_has_reshape_every_iter();
  void clear_has_reshape_every_iter();
  void set_has_detection_output_ssd_param();
  void clear_has_detection_output_ssd_param();
  void set_has_image_distort_param();
  void clear_has_image_distort_param();
  void set_has_bbox_reg_param();
  void clear_has_bbox_reg_param();
  void set_has_psroi_pooling_param();
  void clear_has_psroi_pooling_param();
  void set_has_dfmb_psroi_pooling_param();
  void clear_has_dfmb_psroi_pooling_param();
  void set_has_reg_param();
  void clear_has_reg_param();
  void set_has_proposal_img_scale_to_cam_coords_param();
  void clear_has_proposal_img_scale_to_cam_coords_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<4> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::EmbedParameter* embed_param_;
  ::caffe::TileParameter* tile_param_;
  ::caffe::BatchNormParameter* batch_norm_param_;
  ::caffe::ELUParameter* elu_param_;
  ::caffe::BiasParameter* bias_param_;
  ::caffe::ScaleParameter* scale_param_;
  ::caffe::InputParameter* input_param_;
  ::caffe::PermuteParameter* permute_param_;
  ::caffe::RegionParameter* region_param_;
  ::caffe::ReorgParameter* reorg_param_;
  ::caffe::RegionOutputParameter* region_output_param_;
  ::caffe::ResampleParameter* resample_param_;
  ::smartseg::ConfigParameter* smartseg_config_param_;
  ::smartseg::FrameDataParameter* smartseg_frame_data_param_;
  ::smartseg::BlobVisualizeParameter* smartseg_blob_visualize_param_;
  ::smartseg::PlanViewParameter* smartseg_plan_view_param_;
  ::smartseg::HorizontalViewParameter* smartseg_horizontal_view_param_;
  ::smartseg::PlanViewExtractorParameter* smartseg_plan_view_extractor_param_;
  ::smartseg::HorizontalViewExtractorParameter* smartseg_horizontal_view_extractor_param_;
  ::smartseg::SegmentorParameter* smartseg_segmentor_param_;
  ::smartseg::FrameTargetParameter* smartseg_frame_target_param_;
  ::smartseg::FrameSequenceDataParameter* smartseg_frame_sequence_data_param_;
  ::smartseg::OnlineNormParameter* smartseg_online_norm_param_;
  ::smartseg::ViewPoolingParameter* smartseg_view_pooling_param_;
  ::smartseg::ViewUnpoolingParameter* smartseg_view_unpooling_param_;
  ::smartseg::PointInterpolationParameter* smartseg_point_interpolation_param_;
  ::smartseg::DilationParameter* smartseg_dilation_param_;
  ::smartseg::SideViewParameter* smartseg_side_view_param_;
  ::smartseg::SideViewExtractorParameter* smartseg_side_view_extractor_param_;
  ::caffe_fcn_data_layer::FCNImageDataParameter* fcn_image_data_param_;
  ::caffe::ResizeParameter* resize_param_;
  ::caffe::LabelRelatedDropoutParam* label_related_dropout_param_;
  ::caffe::InceptionParameter* inception_param_;
  ::caffe::ElementHingeLossParameter* element_hinge_loss_param_;
  ::caffe::PyramidDataParameter* pyramid_data_param_;
  ::caffe::DetectionOutputParameter* detection_output_param_;
  ::caffe::ROIDataParam* roi_data_param_;
  ::caffe::ROI2HeatMapParam* roi_2_heatmap_param_;
  ::caffe::ROIShowParam* roi_show_param_;
  ::caffe::ROIRefineParam* roi_refine_param_;
  ::caffe::CropParameter* crop_param_;
  ::caffe::DetectionOutputSSDParameter* detection_output_ssd_param_;
  ::caffe::ImageDistortParameter* image_distort_param_;
  ::caffe::BBoxRegParameter* bbox_reg_param_;
  ::caffe::PSROIPoolingParameter* psroi_pooling_param_;
  ::caffe::DFMBPSROIPoolingParameter* dfmb_psroi_pooling_param_;
  ::caffe::RegParameter* reg_param_;
  ::caffe::ProposalImgScaleToCamCoordsParameter* proposal_img_scale_to_cam_coords_param_;
  ::caffe::DeformableConvolutionParameter* deformable_convolution_param_;
  ::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param_;
  ::caffe::ExpandlabelParameter* expandlabel_param_;
  ::caffe::ManipulateLossParameter* manipulate_loss_param_;
  ::caffe::ImageLabelDataParameter* image_label_data_param_;
  ::caffe::BinaryDataParameter* binary_data_param_;
  ::caffe::CylinderViewParameter* cylinder_view_param_;
  ::caffe::BirdviewParameter* bird_view_param_;
  ::caffe::RepeatChannelParameter* repeat_channel_param_;
  ::caffe::ROIPoolingParameter* roi_pooling_param_;
  int phase_;
  bool reshape_every_iter_;
  mutable int _cached_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExpandlabelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpandlabelParameter) */ {
 public:
  ExpandlabelParameter();
  virtual ~ExpandlabelParameter();

  ExpandlabelParameter(const ExpandlabelParameter& from);

  inline ExpandlabelParameter& operator=(const ExpandlabelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpandlabelParameter& default_instance();

  static inline const ExpandlabelParameter* internal_default_instance() {
    return reinterpret_cast<const ExpandlabelParameter*>(
               &_ExpandlabelParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ExpandlabelParameter* other);

  // implements Message ----------------------------------------------

  inline ExpandlabelParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ExpandlabelParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExpandlabelParameter& from);
  void MergeFrom(const ExpandlabelParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExpandlabelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 maxlabel = 1 [default = 0];
  bool has_maxlabel() const;
  void clear_maxlabel();
  static const int kMaxlabelFieldNumber = 1;
  ::google::protobuf::uint32 maxlabel() const;
  void set_maxlabel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ExpandlabelParameter)
 private:
  void set_has_maxlabel();
  void clear_has_maxlabel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxlabel_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RepeatChannelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RepeatChannelParameter) */ {
 public:
  RepeatChannelParameter();
  virtual ~RepeatChannelParameter();

  RepeatChannelParameter(const RepeatChannelParameter& from);

  inline RepeatChannelParameter& operator=(const RepeatChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepeatChannelParameter& default_instance();

  static inline const RepeatChannelParameter* internal_default_instance() {
    return reinterpret_cast<const RepeatChannelParameter*>(
               &_RepeatChannelParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RepeatChannelParameter* other);

  // implements Message ----------------------------------------------

  inline RepeatChannelParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  RepeatChannelParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RepeatChannelParameter& from);
  void MergeFrom(const RepeatChannelParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RepeatChannelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_repeat = 1 [default = 1];
  bool has_num_repeat() const;
  void clear_num_repeat();
  static const int kNumRepeatFieldNumber = 1;
  ::google::protobuf::uint32 num_repeat() const;
  void set_num_repeat(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.RepeatChannelParameter)
 private:
  void set_has_num_repeat();
  void clear_has_num_repeat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_repeat_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PermuteParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PermuteParameter) */ {
 public:
  PermuteParameter();
  virtual ~PermuteParameter();

  PermuteParameter(const PermuteParameter& from);

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermuteParameter& default_instance();

  static inline const PermuteParameter* internal_default_instance() {
    return reinterpret_cast<const PermuteParameter*>(
               &_PermuteParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(PermuteParameter* other);

  // implements Message ----------------------------------------------

  inline PermuteParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PermuteParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PermuteParameter& from);
  void MergeFrom(const PermuteParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PermuteParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 order = 1;
  int order_size() const;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  ::google::protobuf::uint32 order(int index) const;
  void set_order(int index, ::google::protobuf::uint32 value);
  void add_order(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:caffe.PermuteParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NormalizedBBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NormalizedBBox) */ {
 public:
  NormalizedBBox();
  virtual ~NormalizedBBox();

  NormalizedBBox(const NormalizedBBox& from);

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizedBBox& default_instance();

  static inline const NormalizedBBox* internal_default_instance() {
    return reinterpret_cast<const NormalizedBBox*>(
               &_NormalizedBBox_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(NormalizedBBox* other);

  // implements Message ----------------------------------------------

  inline NormalizedBBox* New() const PROTOBUF_FINAL { return New(NULL); }

  NormalizedBBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NormalizedBBox& from);
  void MergeFrom(const NormalizedBBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NormalizedBBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float xmin = 1;
  bool has_xmin() const;
  void clear_xmin();
  static const int kXminFieldNumber = 1;
  float xmin() const;
  void set_xmin(float value);

  // optional float ymin = 2;
  bool has_ymin() const;
  void clear_ymin();
  static const int kYminFieldNumber = 2;
  float ymin() const;
  void set_ymin(float value);

  // optional float xmax = 3;
  bool has_xmax() const;
  void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  float xmax() const;
  void set_xmax(float value);

  // optional float ymax = 4;
  bool has_ymax() const;
  void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  float ymax() const;
  void set_ymax(float value);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional bool difficult = 6;
  bool has_difficult() const;
  void clear_difficult();
  static const int kDifficultFieldNumber = 6;
  bool difficult() const;
  void set_difficult(bool value);

  // optional float score = 7;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 7;
  float score() const;
  void set_score(float value);

  // optional float size = 8;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  float size() const;
  void set_size(float value);

  // @@protoc_insertion_point(class_scope:caffe.NormalizedBBox)
 private:
  void set_has_xmin();
  void clear_has_xmin();
  void set_has_ymin();
  void clear_has_ymin();
  void set_has_xmax();
  void clear_has_xmax();
  void set_has_ymax();
  void clear_has_ymax();
  void set_has_label();
  void clear_has_label();
  void set_has_difficult();
  void clear_has_difficult();
  void set_has_score();
  void clear_has_score();
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float xmin_;
  float ymin_;
  float xmax_;
  float ymax_;
  ::google::protobuf::int32 label_;
  bool difficult_;
  float score_;
  float size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RegionOutputParameter) */ {
 public:
  RegionOutputParameter();
  virtual ~RegionOutputParameter();

  RegionOutputParameter(const RegionOutputParameter& from);

  inline RegionOutputParameter& operator=(const RegionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionOutputParameter& default_instance();

  static inline const RegionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const RegionOutputParameter*>(
               &_RegionOutputParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(RegionOutputParameter* other);

  // implements Message ----------------------------------------------

  inline RegionOutputParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionOutputParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionOutputParameter& from);
  void MergeFrom(const RegionOutputParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.AnchorBox anchorbox = 5;
  int anchorbox_size() const;
  void clear_anchorbox();
  static const int kAnchorboxFieldNumber = 5;
  const ::caffe::AnchorBox& anchorbox(int index) const;
  ::caffe::AnchorBox* mutable_anchorbox(int index);
  ::caffe::AnchorBox* add_anchorbox();
  ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >*
      mutable_anchorbox();
  const ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >&
      anchorbox() const;

  // optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 2;
  const ::caffe::NonMaximumSuppressionParameter& nms_param() const;
  ::caffe::NonMaximumSuppressionParameter* mutable_nms_param();
  ::caffe::NonMaximumSuppressionParameter* release_nms_param();
  void set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param);

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional float confidence_threshold = 4;
  bool has_confidence_threshold() const;
  void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 4;
  float confidence_threshold() const;
  void set_confidence_threshold(float value);

  // optional int32 keep_top_k = 3 [default = -1];
  bool has_keep_top_k() const;
  void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 3;
  ::google::protobuf::int32 keep_top_k() const;
  void set_keep_top_k(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.RegionOutputParameter)
 private:
  void set_has_num_classes();
  void clear_has_num_classes();
  void set_has_nms_param();
  void clear_has_nms_param();
  void set_has_keep_top_k();
  void clear_has_keep_top_k();
  void set_has_confidence_threshold();
  void clear_has_confidence_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox > anchorbox_;
  ::caffe::NonMaximumSuppressionParameter* nms_param_;
  ::google::protobuf::uint32 num_classes_;
  float confidence_threshold_;
  ::google::protobuf::int32 keep_top_k_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NonMaximumSuppressionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NonMaximumSuppressionParameter) */ {
 public:
  NonMaximumSuppressionParameter();
  virtual ~NonMaximumSuppressionParameter();

  NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from);

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonMaximumSuppressionParameter& default_instance();

  static inline const NonMaximumSuppressionParameter* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppressionParameter*>(
               &_NonMaximumSuppressionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(NonMaximumSuppressionParameter* other);

  // implements Message ----------------------------------------------

  inline NonMaximumSuppressionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NonMaximumSuppressionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  void MergeFrom(const NonMaximumSuppressionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NonMaximumSuppressionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 top_k = 2;
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // optional float nms_threshold = 1 [default = 0.3];
  bool has_nms_threshold() const;
  void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 1;
  float nms_threshold() const;
  void set_nms_threshold(float value);

  // optional float eta = 3 [default = 1];
  bool has_eta() const;
  void clear_eta();
  static const int kEtaFieldNumber = 3;
  float eta() const;
  void set_eta(float value);

  // @@protoc_insertion_point(class_scope:caffe.NonMaximumSuppressionParameter)
 private:
  void set_has_nms_threshold();
  void clear_has_nms_threshold();
  void set_has_top_k();
  void clear_has_top_k();
  void set_has_eta();
  void clear_has_eta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 top_k_;
  float nms_threshold_;
  float eta_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RegionParameter) */ {
 public:
  RegionParameter();
  virtual ~RegionParameter();

  RegionParameter(const RegionParameter& from);

  inline RegionParameter& operator=(const RegionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionParameter& default_instance();

  static inline const RegionParameter* internal_default_instance() {
    return reinterpret_cast<const RegionParameter*>(
               &_RegionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(RegionParameter* other);

  // implements Message ----------------------------------------------

  inline RegionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionParameter& from);
  void MergeFrom(const RegionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.AnchorBox anchorbox = 1;
  int anchorbox_size() const;
  void clear_anchorbox();
  static const int kAnchorboxFieldNumber = 1;
  const ::caffe::AnchorBox& anchorbox(int index) const;
  ::caffe::AnchorBox* mutable_anchorbox(int index);
  ::caffe::AnchorBox* add_anchorbox();
  ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >*
      mutable_anchorbox();
  const ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >&
      anchorbox() const;

  // repeated float thresholds = 2;
  int thresholds_size() const;
  void clear_thresholds();
  static const int kThresholdsFieldNumber = 2;
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::google::protobuf::RepeatedField< float >&
      thresholds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_thresholds();

  // optional uint32 object_scale = 3;
  bool has_object_scale() const;
  void clear_object_scale();
  static const int kObjectScaleFieldNumber = 3;
  ::google::protobuf::uint32 object_scale() const;
  void set_object_scale(::google::protobuf::uint32 value);

  // optional uint32 noobject_scale = 4;
  bool has_noobject_scale() const;
  void clear_noobject_scale();
  static const int kNoobjectScaleFieldNumber = 4;
  ::google::protobuf::uint32 noobject_scale() const;
  void set_noobject_scale(::google::protobuf::uint32 value);

  // optional uint32 class_scale = 5;
  bool has_class_scale() const;
  void clear_class_scale();
  static const int kClassScaleFieldNumber = 5;
  ::google::protobuf::uint32 class_scale() const;
  void set_class_scale(::google::protobuf::uint32 value);

  // optional uint32 coord_scale = 6;
  bool has_coord_scale() const;
  void clear_coord_scale();
  static const int kCoordScaleFieldNumber = 6;
  ::google::protobuf::uint32 coord_scale() const;
  void set_coord_scale(::google::protobuf::uint32 value);

  // optional float jitter = 7;
  bool has_jitter() const;
  void clear_jitter();
  static const int kJitterFieldNumber = 7;
  float jitter() const;
  void set_jitter(float value);

  // optional float bias = 8;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 8;
  float bias() const;
  void set_bias(float value);

  // optional uint32 num_classes = 10;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 10;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional bool rescore = 9;
  bool has_rescore() const;
  void clear_rescore();
  static const int kRescoreFieldNumber = 9;
  bool rescore() const;
  void set_rescore(bool value);

  // optional bool bias_match = 11;
  bool has_bias_match() const;
  void clear_bias_match();
  static const int kBiasMatchFieldNumber = 11;
  bool bias_match() const;
  void set_bias_match(bool value);

  // optional float threshold = 12;
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 12;
  float threshold() const;
  void set_threshold(float value);

  // optional bool adjust_anchor = 13 [default = true];
  bool has_adjust_anchor() const;
  void clear_adjust_anchor();
  static const int kAdjustAnchorFieldNumber = 13;
  bool adjust_anchor() const;
  void set_adjust_anchor(bool value);

  // @@protoc_insertion_point(class_scope:caffe.RegionParameter)
 private:
  void set_has_object_scale();
  void clear_has_object_scale();
  void set_has_noobject_scale();
  void clear_has_noobject_scale();
  void set_has_class_scale();
  void clear_has_class_scale();
  void set_has_coord_scale();
  void clear_has_coord_scale();
  void set_has_jitter();
  void clear_has_jitter();
  void set_has_bias();
  void clear_has_bias();
  void set_has_rescore();
  void clear_has_rescore();
  void set_has_num_classes();
  void clear_has_num_classes();
  void set_has_bias_match();
  void clear_has_bias_match();
  void set_has_threshold();
  void clear_has_threshold();
  void set_has_adjust_anchor();
  void clear_has_adjust_anchor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox > anchorbox_;
  ::google::protobuf::RepeatedField< float > thresholds_;
  ::google::protobuf::uint32 object_scale_;
  ::google::protobuf::uint32 noobject_scale_;
  ::google::protobuf::uint32 class_scale_;
  ::google::protobuf::uint32 coord_scale_;
  float jitter_;
  float bias_;
  ::google::protobuf::uint32 num_classes_;
  bool rescore_;
  bool bias_match_;
  float threshold_;
  bool adjust_anchor_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnchorBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnchorBox) */ {
 public:
  AnchorBox();
  virtual ~AnchorBox();

  AnchorBox(const AnchorBox& from);

  inline AnchorBox& operator=(const AnchorBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnchorBox& default_instance();

  static inline const AnchorBox* internal_default_instance() {
    return reinterpret_cast<const AnchorBox*>(
               &_AnchorBox_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AnchorBox* other);

  // implements Message ----------------------------------------------

  inline AnchorBox* New() const PROTOBUF_FINAL { return New(NULL); }

  AnchorBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnchorBox& from);
  void MergeFrom(const AnchorBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnchorBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float w = 1;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 1;
  float w() const;
  void set_w(float value);

  // optional float h = 2;
  bool has_h() const;
  void clear_h();
  static const int kHFieldNumber = 2;
  float h() const;
  void set_h(float value);

  // @@protoc_insertion_point(class_scope:caffe.AnchorBox)
 private:
  void set_has_w();
  void clear_has_w();
  void set_has_h();
  void clear_has_h();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float w_;
  float h_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReorgParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReorgParameter) */ {
 public:
  ReorgParameter();
  virtual ~ReorgParameter();

  ReorgParameter(const ReorgParameter& from);

  inline ReorgParameter& operator=(const ReorgParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorgParameter& default_instance();

  static inline const ReorgParameter* internal_default_instance() {
    return reinterpret_cast<const ReorgParameter*>(
               &_ReorgParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ReorgParameter* other);

  // implements Message ----------------------------------------------

  inline ReorgParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReorgParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReorgParameter& from);
  void MergeFrom(const ReorgParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReorgParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stride = 1;
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 1;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReorgParameter)
 private:
  void set_has_stride();
  void clear_has_stride();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 stride_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BirdviewParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BirdviewParameter) */ {
 public:
  BirdviewParameter();
  virtual ~BirdviewParameter();

  BirdviewParameter(const BirdviewParameter& from);

  inline BirdviewParameter& operator=(const BirdviewParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BirdviewParameter& default_instance();

  static inline const BirdviewParameter* internal_default_instance() {
    return reinterpret_cast<const BirdviewParameter*>(
               &_BirdviewParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(BirdviewParameter* other);

  // implements Message ----------------------------------------------

  inline BirdviewParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BirdviewParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BirdviewParameter& from);
  void MergeFrom(const BirdviewParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BirdviewParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_max_height = 1 [default = false];
  bool has_use_max_height() const;
  void clear_use_max_height();
  static const int kUseMaxHeightFieldNumber = 1;
  bool use_max_height() const;
  void set_use_max_height(bool value);

  // optional bool use_mean_height = 2 [default = false];
  bool has_use_mean_height() const;
  void clear_use_mean_height();
  static const int kUseMeanHeightFieldNumber = 2;
  bool use_mean_height() const;
  void set_use_mean_height(bool value);

  // optional bool use_log_count = 3 [default = false];
  bool has_use_log_count() const;
  void clear_use_log_count();
  static const int kUseLogCountFieldNumber = 3;
  bool use_log_count() const;
  void set_use_log_count(bool value);

  // optional bool use_direction = 4 [default = false];
  bool has_use_direction() const;
  void clear_use_direction();
  static const int kUseDirectionFieldNumber = 4;
  bool use_direction() const;
  void set_use_direction(bool value);

  // optional bool use_top_intensity = 5 [default = false];
  bool has_use_top_intensity() const;
  void clear_use_top_intensity();
  static const int kUseTopIntensityFieldNumber = 5;
  bool use_top_intensity() const;
  void set_use_top_intensity(bool value);

  // optional bool use_mean_intensity = 6 [default = false];
  bool has_use_mean_intensity() const;
  void clear_use_mean_intensity();
  static const int kUseMeanIntensityFieldNumber = 6;
  bool use_mean_intensity() const;
  void set_use_mean_intensity(bool value);

  // optional bool use_distance = 7 [default = false];
  bool has_use_distance() const;
  void clear_use_distance();
  static const int kUseDistanceFieldNumber = 7;
  bool use_distance() const;
  void set_use_distance(bool value);

  // optional bool use_nonempty = 8 [default = false];
  bool has_use_nonempty() const;
  void clear_use_nonempty();
  static const int kUseNonemptyFieldNumber = 8;
  bool use_nonempty() const;
  void set_use_nonempty(bool value);

  // optional bool use_first_order = 9 [default = false];
  bool has_use_first_order() const;
  void clear_use_first_order();
  static const int kUseFirstOrderFieldNumber = 9;
  bool use_first_order() const;
  void set_use_first_order(bool value);

  // optional bool use_second_order = 10 [default = false];
  bool has_use_second_order() const;
  void clear_use_second_order();
  static const int kUseSecondOrderFieldNumber = 10;
  bool use_second_order() const;
  void set_use_second_order(bool value);

  // optional bool use_height_filter = 14 [default = false];
  bool has_use_height_filter() const;
  void clear_use_height_filter();
  static const int kUseHeightFilterFieldNumber = 14;
  bool use_height_filter() const;
  void set_use_height_filter(bool value);

  // optional bool use_dense_feat = 15 [default = false];
  bool has_use_dense_feat() const;
  void clear_use_dense_feat();
  static const int kUseDenseFeatFieldNumber = 15;
  bool use_dense_feat() const;
  void set_use_dense_feat(bool value);

  // optional uint32 point_cloud_range = 16;
  bool has_point_cloud_range() const;
  void clear_point_cloud_range();
  static const int kPointCloudRangeFieldNumber = 16;
  ::google::protobuf::uint32 point_cloud_range() const;
  void set_point_cloud_range(::google::protobuf::uint32 value);

  // optional uint32 width = 17;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 17;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 18;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 18;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.BirdviewParameter)
 private:
  void set_has_use_max_height();
  void clear_has_use_max_height();
  void set_has_use_mean_height();
  void clear_has_use_mean_height();
  void set_has_use_log_count();
  void clear_has_use_log_count();
  void set_has_use_direction();
  void clear_has_use_direction();
  void set_has_use_top_intensity();
  void clear_has_use_top_intensity();
  void set_has_use_mean_intensity();
  void clear_has_use_mean_intensity();
  void set_has_use_distance();
  void clear_has_use_distance();
  void set_has_use_nonempty();
  void clear_has_use_nonempty();
  void set_has_use_first_order();
  void clear_has_use_first_order();
  void set_has_use_second_order();
  void clear_has_use_second_order();
  void set_has_use_height_filter();
  void clear_has_use_height_filter();
  void set_has_use_dense_feat();
  void clear_has_use_dense_feat();
  void set_has_point_cloud_range();
  void clear_has_point_cloud_range();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool use_max_height_;
  bool use_mean_height_;
  bool use_log_count_;
  bool use_direction_;
  bool use_top_intensity_;
  bool use_mean_intensity_;
  bool use_distance_;
  bool use_nonempty_;
  bool use_first_order_;
  bool use_second_order_;
  bool use_height_filter_;
  bool use_dense_feat_;
  ::google::protobuf::uint32 point_cloud_range_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CylinderViewParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CylinderViewParameter) */ {
 public:
  CylinderViewParameter();
  virtual ~CylinderViewParameter();

  CylinderViewParameter(const CylinderViewParameter& from);

  inline CylinderViewParameter& operator=(const CylinderViewParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CylinderViewParameter& default_instance();

  static inline const CylinderViewParameter* internal_default_instance() {
    return reinterpret_cast<const CylinderViewParameter*>(
               &_CylinderViewParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CylinderViewParameter* other);

  // implements Message ----------------------------------------------

  inline CylinderViewParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  CylinderViewParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CylinderViewParameter& from);
  void MergeFrom(const CylinderViewParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CylinderViewParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ntheta = 1;
  bool has_ntheta() const;
  void clear_ntheta();
  static const int kNthetaFieldNumber = 1;
  ::google::protobuf::uint32 ntheta() const;
  void set_ntheta(::google::protobuf::uint32 value);

  // optional uint32 nphi = 2;
  bool has_nphi() const;
  void clear_nphi();
  static const int kNphiFieldNumber = 2;
  ::google::protobuf::uint32 nphi() const;
  void set_nphi(::google::protobuf::uint32 value);

  // optional float otheta = 3;
  bool has_otheta() const;
  void clear_otheta();
  static const int kOthetaFieldNumber = 3;
  float otheta() const;
  void set_otheta(float value);

  // optional float ophi = 4;
  bool has_ophi() const;
  void clear_ophi();
  static const int kOphiFieldNumber = 4;
  float ophi() const;
  void set_ophi(float value);

  // optional float dtheta = 5;
  bool has_dtheta() const;
  void clear_dtheta();
  static const int kDthetaFieldNumber = 5;
  float dtheta() const;
  void set_dtheta(float value);

  // optional float dphi = 6;
  bool has_dphi() const;
  void clear_dphi();
  static const int kDphiFieldNumber = 6;
  float dphi() const;
  void set_dphi(float value);

  // @@protoc_insertion_point(class_scope:caffe.CylinderViewParameter)
 private:
  void set_has_ntheta();
  void clear_has_ntheta();
  void set_has_nphi();
  void clear_has_nphi();
  void set_has_otheta();
  void clear_has_otheta();
  void set_has_ophi();
  void clear_has_ophi();
  void set_has_dtheta();
  void clear_has_dtheta();
  void set_has_dphi();
  void clear_has_dphi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 ntheta_;
  ::google::protobuf::uint32 nphi_;
  float otheta_;
  float ophi_;
  float dtheta_;
  float dphi_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinaryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BinaryDataParameter) */ {
 public:
  BinaryDataParameter();
  virtual ~BinaryDataParameter();

  BinaryDataParameter(const BinaryDataParameter& from);

  inline BinaryDataParameter& operator=(const BinaryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryDataParameter& default_instance();

  static inline const BinaryDataParameter* internal_default_instance() {
    return reinterpret_cast<const BinaryDataParameter*>(
               &_BinaryDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(BinaryDataParameter* other);

  // implements Message ----------------------------------------------

  inline BinaryDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BinaryDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BinaryDataParameter& from);
  void MergeFrom(const BinaryDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BinaryDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BinaryDataParameter_ViewType ViewType;
  static const ViewType None =
    BinaryDataParameter_ViewType_None;
  static const ViewType Cylinder =
    BinaryDataParameter_ViewType_Cylinder;
  static const ViewType Birdview =
    BinaryDataParameter_ViewType_Birdview;
  static inline bool ViewType_IsValid(int value) {
    return BinaryDataParameter_ViewType_IsValid(value);
  }
  static const ViewType ViewType_MIN =
    BinaryDataParameter_ViewType_ViewType_MIN;
  static const ViewType ViewType_MAX =
    BinaryDataParameter_ViewType_ViewType_MAX;
  static const int ViewType_ARRAYSIZE =
    BinaryDataParameter_ViewType_ViewType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ViewType_descriptor() {
    return BinaryDataParameter_ViewType_descriptor();
  }
  static inline const ::std::string& ViewType_Name(ViewType value) {
    return BinaryDataParameter_ViewType_Name(value);
  }
  static inline bool ViewType_Parse(const ::std::string& name,
      ViewType* value) {
    return BinaryDataParameter_ViewType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional string label_map_file = 22;
  bool has_label_map_file() const;
  void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 22;
  const ::std::string& label_map_file() const;
  void set_label_map_file(const ::std::string& value);
  #if LANG_CXX11
  void set_label_map_file(::std::string&& value);
  #endif
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  ::std::string* mutable_label_map_file();
  ::std::string* release_label_map_file();
  void set_allocated_label_map_file(::std::string* label_map_file);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 ignore_label = 5 [default = 0];
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 5;
  ::google::protobuf::uint32 ignore_label() const;
  void set_ignore_label(::google::protobuf::uint32 value);

  // optional uint32 pad_size = 6 [default = 0];
  bool has_pad_size() const;
  void clear_pad_size();
  static const int kPadSizeFieldNumber = 6;
  ::google::protobuf::uint32 pad_size() const;
  void set_pad_size(::google::protobuf::uint32 value);

  // optional uint32 num_instance_feat = 8 [default = 0];
  bool has_num_instance_feat() const;
  void clear_num_instance_feat();
  static const int kNumInstanceFeatFieldNumber = 8;
  ::google::protobuf::uint32 num_instance_feat() const;
  void set_num_instance_feat(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional bool use_disturb = 4 [default = false];
  bool has_use_disturb() const;
  void clear_use_disturb();
  static const int kUseDisturbFieldNumber = 4;
  bool use_disturb() const;
  void set_use_disturb(bool value);

  // optional bool use_instance_level = 7 [default = false];
  bool has_use_instance_level() const;
  void clear_use_instance_level();
  static const int kUseInstanceLevelFieldNumber = 7;
  bool use_instance_level() const;
  void set_use_instance_level(bool value);

  // optional bool pre_load = 20 [default = false];
  bool has_pre_load() const;
  void clear_pre_load();
  static const int kPreLoadFieldNumber = 20;
  bool pre_load() const;
  void set_pre_load(bool value);

  // optional bool do_classify = 23 [default = false];
  bool has_do_classify() const;
  void clear_do_classify();
  static const int kDoClassifyFieldNumber = 23;
  bool do_classify() const;
  void set_do_classify(bool value);

  // optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
  bool has_view_type() const;
  void clear_view_type();
  static const int kViewTypeFieldNumber = 21;
  ::caffe::BinaryDataParameter_ViewType view_type() const;
  void set_view_type(::caffe::BinaryDataParameter_ViewType value);

  // @@protoc_insertion_point(class_scope:caffe.BinaryDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_use_disturb();
  void clear_has_use_disturb();
  void set_has_ignore_label();
  void clear_has_ignore_label();
  void set_has_pad_size();
  void clear_has_pad_size();
  void set_has_use_instance_level();
  void clear_has_use_instance_level();
  void set_has_num_instance_feat();
  void clear_has_num_instance_feat();
  void set_has_root_folder();
  void clear_has_root_folder();
  void set_has_pre_load();
  void clear_has_pre_load();
  void set_has_view_type();
  void clear_has_view_type();
  void set_has_label_map_file();
  void clear_has_label_map_file();
  void set_has_do_classify();
  void clear_has_do_classify();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::internal::ArenaStringPtr label_map_file_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 ignore_label_;
  ::google::protobuf::uint32 pad_size_;
  ::google::protobuf::uint32 num_instance_feat_;
  bool shuffle_;
  bool use_disturb_;
  bool use_instance_level_;
  bool pre_load_;
  bool do_classify_;
  int view_type_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelMapItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelMapItem) */ {
 public:
  LabelMapItem();
  virtual ~LabelMapItem();

  LabelMapItem(const LabelMapItem& from);

  inline LabelMapItem& operator=(const LabelMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMapItem& default_instance();

  static inline const LabelMapItem* internal_default_instance() {
    return reinterpret_cast<const LabelMapItem*>(
               &_LabelMapItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(LabelMapItem* other);

  // implements Message ----------------------------------------------

  inline LabelMapItem* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelMapItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelMapItem& from);
  void MergeFrom(const LabelMapItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelMapItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string display_name = 3;
  bool has_display_name() const;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // optional int32 label = 2;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.LabelMapItem)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_label();
  void clear_has_label();
  void set_has_display_name();
  void clear_has_display_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::int32 label_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelMap) */ {
 public:
  LabelMap();
  virtual ~LabelMap();

  LabelMap(const LabelMap& from);

  inline LabelMap& operator=(const LabelMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMap& default_instance();

  static inline const LabelMap* internal_default_instance() {
    return reinterpret_cast<const LabelMap*>(
               &_LabelMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(LabelMap* other);

  // implements Message ----------------------------------------------

  inline LabelMap* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelMap& from);
  void MergeFrom(const LabelMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.LabelMapItem item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::caffe::LabelMapItem& item(int index) const;
  ::caffe::LabelMapItem* mutable_item(int index);
  ::caffe::LabelMapItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:caffe.LabelMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem > item_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Slice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Slice) */ {
 public:
  Slice();
  virtual ~Slice();

  Slice(const Slice& from);

  inline Slice& operator=(const Slice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Slice& default_instance();

  static inline const Slice* internal_default_instance() {
    return reinterpret_cast<const Slice*>(
               &_Slice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(Slice* other);

  // implements Message ----------------------------------------------

  inline Slice* New() const PROTOBUF_FINAL { return New(NULL); }

  Slice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Slice& from);
  void MergeFrom(const Slice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Slice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 dim = 1;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::uint32 dim(int index) const;
  void set_dim(int index, ::google::protobuf::uint32 value);
  void add_dim(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dim();

  // repeated uint32 stride = 2;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 2;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 offset = 3;
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint32 offset(int index) const;
  void set_offset(int index, ::google::protobuf::uint32 value);
  void add_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:caffe.Slice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageLabelDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageLabelDataParameter) */ {
 public:
  ImageLabelDataParameter();
  virtual ~ImageLabelDataParameter();

  ImageLabelDataParameter(const ImageLabelDataParameter& from);

  inline ImageLabelDataParameter& operator=(const ImageLabelDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageLabelDataParameter& default_instance();

  static inline const ImageLabelDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageLabelDataParameter*>(
               &_ImageLabelDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ImageLabelDataParameter* other);

  // implements Message ----------------------------------------------

  inline ImageLabelDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageLabelDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageLabelDataParameter& from);
  void MergeFrom(const ImageLabelDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageLabelDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ImageLabelDataParameter_Padding Padding;
  static const Padding ZERO =
    ImageLabelDataParameter_Padding_ZERO;
  static const Padding REFLECT =
    ImageLabelDataParameter_Padding_REFLECT;
  static inline bool Padding_IsValid(int value) {
    return ImageLabelDataParameter_Padding_IsValid(value);
  }
  static const Padding Padding_MIN =
    ImageLabelDataParameter_Padding_Padding_MIN;
  static const Padding Padding_MAX =
    ImageLabelDataParameter_Padding_Padding_MAX;
  static const int Padding_ARRAYSIZE =
    ImageLabelDataParameter_Padding_Padding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Padding_descriptor() {
    return ImageLabelDataParameter_Padding_descriptor();
  }
  static inline const ::std::string& Padding_Name(Padding value) {
    return ImageLabelDataParameter_Padding_Name(value);
  }
  static inline bool Padding_Parse(const ::std::string& name,
      Padding* value) {
    return ImageLabelDataParameter_Padding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional .caffe.Slice label_slice = 10;
  bool has_label_slice() const;
  void clear_label_slice();
  static const int kLabelSliceFieldNumber = 10;
  const ::caffe::Slice& label_slice() const;
  ::caffe::Slice* mutable_label_slice();
  ::caffe::Slice* release_label_slice();
  void set_allocated_label_slice(::caffe::Slice* label_slice);

  // optional uint32 rand_skip = 4 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 4;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 5 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 5;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional bool rand_scale = 6 [default = false];
  bool has_rand_scale() const;
  void clear_rand_scale();
  static const int kRandScaleFieldNumber = 6;
  bool rand_scale() const;
  void set_rand_scale(bool value);

  // optional uint32 batch_size = 3 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional float min_scale = 7 [default = 1];
  bool has_min_scale() const;
  void clear_min_scale();
  static const int kMinScaleFieldNumber = 7;
  float min_scale() const;
  void set_min_scale(float value);

  // optional float max_scale = 8 [default = 1];
  bool has_max_scale() const;
  void clear_max_scale();
  static const int kMaxScaleFieldNumber = 8;
  float max_scale() const;
  void set_max_scale(float value);

  // optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
  bool has_padding() const;
  void clear_padding();
  static const int kPaddingFieldNumber = 13;
  ::caffe::ImageLabelDataParameter_Padding padding() const;
  void set_padding(::caffe::ImageLabelDataParameter_Padding value);

  // @@protoc_insertion_point(class_scope:caffe.ImageLabelDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_rand_scale();
  void clear_has_rand_scale();
  void set_has_min_scale();
  void clear_has_min_scale();
  void set_has_max_scale();
  void clear_has_max_scale();
  void set_has_label_slice();
  void clear_has_label_slice();
  void set_has_padding();
  void clear_has_padding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::caffe::Slice* label_slice_;
  ::google::protobuf::uint32 rand_skip_;
  bool shuffle_;
  bool rand_scale_;
  ::google::protobuf::uint32 batch_size_;
  float min_scale_;
  float max_scale_;
  int padding_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageDataArbitraryParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataArbitraryParameter) */ {
 public:
  ImageDataArbitraryParameter();
  virtual ~ImageDataArbitraryParameter();

  ImageDataArbitraryParameter(const ImageDataArbitraryParameter& from);

  inline ImageDataArbitraryParameter& operator=(const ImageDataArbitraryParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataArbitraryParameter& default_instance();

  static inline const ImageDataArbitraryParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataArbitraryParameter*>(
               &_ImageDataArbitraryParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ImageDataArbitraryParameter* other);

  // implements Message ----------------------------------------------

  inline ImageDataArbitraryParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageDataArbitraryParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageDataArbitraryParameter& from);
  void MergeFrom(const ImageDataArbitraryParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageDataArbitraryParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string meanfile = 13;
  bool has_meanfile() const;
  void clear_meanfile();
  static const int kMeanfileFieldNumber = 13;
  const ::std::string& meanfile() const;
  void set_meanfile(const ::std::string& value);
  #if LANG_CXX11
  void set_meanfile(::std::string&& value);
  #endif
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  ::std::string* mutable_meanfile();
  ::std::string* release_meanfile();
  void set_allocated_meanfile(::std::string* meanfile);

  // optional string left_roi = 19;
  bool has_left_roi() const;
  void clear_left_roi();
  static const int kLeftRoiFieldNumber = 19;
  const ::std::string& left_roi() const;
  void set_left_roi(const ::std::string& value);
  #if LANG_CXX11
  void set_left_roi(::std::string&& value);
  #endif
  void set_left_roi(const char* value);
  void set_left_roi(const char* value, size_t size);
  ::std::string* mutable_left_roi();
  ::std::string* release_left_roi();
  void set_allocated_left_roi(::std::string* left_roi);

  // optional string right_roi = 20;
  bool has_right_roi() const;
  void clear_right_roi();
  static const int kRightRoiFieldNumber = 20;
  const ::std::string& right_roi() const;
  void set_right_roi(const ::std::string& value);
  #if LANG_CXX11
  void set_right_roi(::std::string&& value);
  #endif
  void set_right_roi(const char* value);
  void set_right_roi(const char* value, size_t size);
  ::std::string* mutable_right_roi();
  ::std::string* release_right_roi();
  void set_allocated_right_roi(::std::string* right_roi);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional uint32 data_height = 9 [default = 0];
  bool has_data_height() const;
  void clear_data_height();
  static const int kDataHeightFieldNumber = 9;
  ::google::protobuf::uint32 data_height() const;
  void set_data_height(::google::protobuf::uint32 value);

  // optional uint32 data_width = 10 [default = 0];
  bool has_data_width() const;
  void clear_data_width();
  static const int kDataWidthFieldNumber = 10;
  ::google::protobuf::uint32 data_width() const;
  void set_data_width(::google::protobuf::uint32 value);

  // optional uint32 label_height = 11 [default = 0];
  bool has_label_height() const;
  void clear_label_height();
  static const int kLabelHeightFieldNumber = 11;
  ::google::protobuf::uint32 label_height() const;
  void set_label_height(::google::protobuf::uint32 value);

  // optional uint32 label_width = 12 [default = 0];
  bool has_label_width() const;
  void clear_label_width();
  static const int kLabelWidthFieldNumber = 12;
  ::google::protobuf::uint32 label_width() const;
  void set_label_width(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool need_split = 18 [default = false];
  bool has_need_split() const;
  void clear_need_split();
  static const int kNeedSplitFieldNumber = 18;
  bool need_split() const;
  void set_need_split(bool value);

  // optional bool use_disturb = 14 [default = false];
  bool has_use_disturb() const;
  void clear_use_disturb();
  static const int kUseDisturbFieldNumber = 14;
  bool use_disturb() const;
  void set_use_disturb(bool value);

  // optional bool useflip = 15 [default = false];
  bool has_useflip() const;
  void clear_useflip();
  static const int kUseflipFieldNumber = 15;
  bool useflip() const;
  void set_useflip(bool value);

  // optional bool usemovedisturb = 16 [default = false];
  bool has_usemovedisturb() const;
  void clear_usemovedisturb();
  static const int kUsemovedisturbFieldNumber = 16;
  bool usemovedisturb() const;
  void set_usemovedisturb(bool value);

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional float data_scale = 2 [default = 1];
  bool has_data_scale() const;
  void clear_data_scale();
  static const int kDataScaleFieldNumber = 2;
  float data_scale() const;
  void set_data_scale(float value);

  // optional uint32 data_channels = 17 [default = 3];
  bool has_data_channels() const;
  void clear_data_channels();
  static const int kDataChannelsFieldNumber = 17;
  ::google::protobuf::uint32 data_channels() const;
  void set_data_channels(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataArbitraryParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_meanfile();
  void clear_has_meanfile();
  void set_has_use_disturb();
  void clear_has_use_disturb();
  void set_has_useflip();
  void clear_has_useflip();
  void set_has_usemovedisturb();
  void clear_has_usemovedisturb();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_data_height();
  void clear_has_data_height();
  void set_has_data_width();
  void clear_has_data_width();
  void set_has_data_scale();
  void clear_has_data_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_label_height();
  void clear_has_label_height();
  void set_has_label_width();
  void clear_has_label_width();
  void set_has_data_channels();
  void clear_has_data_channels();
  void set_has_need_split();
  void clear_has_need_split();
  void set_has_left_roi();
  void clear_has_left_roi();
  void set_has_right_roi();
  void clear_has_right_roi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr meanfile_;
  ::google::protobuf::internal::ArenaStringPtr left_roi_;
  ::google::protobuf::internal::ArenaStringPtr right_roi_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 data_height_;
  ::google::protobuf::uint32 data_width_;
  ::google::protobuf::uint32 label_height_;
  ::google::protobuf::uint32 label_width_;
  bool mirror_;
  bool need_split_;
  bool use_disturb_;
  bool useflip_;
  bool usemovedisturb_;
  bool shuffle_;
  float data_scale_;
  ::google::protobuf::uint32 data_channels_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManipulateLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ManipulateLossParameter) */ {
 public:
  ManipulateLossParameter();
  virtual ~ManipulateLossParameter();

  ManipulateLossParameter(const ManipulateLossParameter& from);

  inline ManipulateLossParameter& operator=(const ManipulateLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManipulateLossParameter& default_instance();

  static inline const ManipulateLossParameter* internal_default_instance() {
    return reinterpret_cast<const ManipulateLossParameter*>(
               &_ManipulateLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(ManipulateLossParameter* other);

  // implements Message ----------------------------------------------

  inline ManipulateLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ManipulateLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManipulateLossParameter& from);
  void MergeFrom(const ManipulateLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManipulateLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ignore_value = 2 [default = ""];
  bool has_ignore_value() const;
  void clear_ignore_value();
  static const int kIgnoreValueFieldNumber = 2;
  const ::std::string& ignore_value() const;
  void set_ignore_value(const ::std::string& value);
  #if LANG_CXX11
  void set_ignore_value(::std::string&& value);
  #endif
  void set_ignore_value(const char* value);
  void set_ignore_value(const char* value, size_t size);
  ::std::string* mutable_ignore_value();
  ::std::string* release_ignore_value();
  void set_allocated_ignore_value(::std::string* ignore_value);

  // optional bool use_balancesample = 1 [default = false];
  bool has_use_balancesample() const;
  void clear_use_balancesample();
  static const int kUseBalancesampleFieldNumber = 1;
  bool use_balancesample() const;
  void set_use_balancesample(bool value);

  // optional bool use_fullzeroignore = 3 [default = false];
  bool has_use_fullzeroignore() const;
  void clear_use_fullzeroignore();
  static const int kUseFullzeroignoreFieldNumber = 3;
  bool use_fullzeroignore() const;
  void set_use_fullzeroignore(bool value);

  // optional bool use_perchannel_balance = 6 [default = false];
  bool has_use_perchannel_balance() const;
  void clear_use_perchannel_balance();
  static const int kUsePerchannelBalanceFieldNumber = 6;
  bool use_perchannel_balance() const;
  void set_use_perchannel_balance(bool value);

  // optional bool drop_singleclasschannel = 7 [default = false];
  bool has_drop_singleclasschannel() const;
  void clear_drop_singleclasschannel();
  static const int kDropSingleclasschannelFieldNumber = 7;
  bool drop_singleclasschannel() const;
  void set_drop_singleclasschannel(bool value);

  // optional bool print_info = 8 [default = false];
  bool has_print_info() const;
  void clear_print_info();
  static const int kPrintInfoFieldNumber = 8;
  bool print_info() const;
  void set_print_info(bool value);

  // optional bool use_unionchannel_balance = 9 [default = false];
  bool has_use_unionchannel_balance() const;
  void clear_use_unionchannel_balance();
  static const int kUseUnionchannelBalanceFieldNumber = 9;
  bool use_unionchannel_balance() const;
  void set_use_unionchannel_balance(bool value);

  // optional float bg_ratio = 4 [default = 1];
  bool has_bg_ratio() const;
  void clear_bg_ratio();
  static const int kBgRatioFieldNumber = 4;
  float bg_ratio() const;
  void set_bg_ratio(float value);

  // optional float uniform_droprate = 5 [default = 1];
  bool has_uniform_droprate() const;
  void clear_uniform_droprate();
  static const int kUniformDroprateFieldNumber = 5;
  float uniform_droprate() const;
  void set_uniform_droprate(float value);

  // @@protoc_insertion_point(class_scope:caffe.ManipulateLossParameter)
 private:
  void set_has_use_balancesample();
  void clear_has_use_balancesample();
  void set_has_ignore_value();
  void clear_has_ignore_value();
  void set_has_use_fullzeroignore();
  void clear_has_use_fullzeroignore();
  void set_has_bg_ratio();
  void clear_has_bg_ratio();
  void set_has_uniform_droprate();
  void clear_has_uniform_droprate();
  void set_has_use_perchannel_balance();
  void clear_has_use_perchannel_balance();
  void set_has_drop_singleclasschannel();
  void clear_has_drop_singleclasschannel();
  void set_has_print_info();
  void clear_has_print_info();
  void set_has_use_unionchannel_balance();
  void clear_has_use_unionchannel_balance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ignore_value_;
  bool use_balancesample_;
  bool use_fullzeroignore_;
  bool use_perchannel_balance_;
  bool drop_singleclasschannel_;
  bool print_info_;
  bool use_unionchannel_balance_;
  float bg_ratio_;
  float uniform_droprate_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TransformationParameter) */ {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  inline TransformationParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TransformationParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean_value = 5;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  bool force_color() const;
  void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  bool force_gray() const;
  void set_force_gray(bool value);

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  void set_has_scale();
  void clear_has_scale();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_force_color();
  void clear_has_force_color();
  void set_has_force_gray();
  void clear_has_force_gray();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  float scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LossParameter) */ {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  inline LossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL =
    LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID =
    LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE =
    LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE =
    LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional bool normalize = 2;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  bool normalize() const;
  void set_normalize(bool value);

  // optional bool smooth = 103 [default = false];
  bool has_smooth() const;
  void clear_smooth();
  static const int kSmoothFieldNumber = 103;
  bool smooth() const;
  void set_smooth(bool value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  ::caffe::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::caffe::LossParameter_NormalizationMode value);

  // optional bool normalize_per_positive = 100 [default = true];
  bool has_normalize_per_positive() const;
  void clear_normalize_per_positive();
  static const int kNormalizePerPositiveFieldNumber = 100;
  bool normalize_per_positive() const;
  void set_normalize_per_positive(bool value);

  // optional uint32 label_bottom_id = 101 [default = 1];
  bool has_label_bottom_id() const;
  void clear_label_bottom_id();
  static const int kLabelBottomIdFieldNumber = 101;
  ::google::protobuf::uint32 label_bottom_id() const;
  void set_label_bottom_id(::google::protobuf::uint32 value);

  // optional float scale = 102 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 102;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  void set_has_ignore_label();
  void clear_has_ignore_label();
  void set_has_normalization();
  void clear_has_normalization();
  void set_has_normalize();
  void clear_has_normalize();
  void set_has_normalize_per_positive();
  void clear_has_normalize_per_positive();
  void set_has_label_bottom_id();
  void clear_has_label_bottom_id();
  void set_has_scale();
  void clear_has_scale();
  void set_has_smooth();
  void clear_has_smooth();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool normalize_;
  bool smooth_;
  int normalization_;
  bool normalize_per_positive_;
  ::google::protobuf::uint32 label_bottom_id_;
  float scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AccuracyParameter) */ {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  inline AccuracyParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  AccuracyParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccuracyParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 1;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  void set_has_top_k();
  void clear_has_top_k();
  void set_has_axis();
  void clear_has_axis();
  void set_has_ignore_label();
  void clear_has_ignore_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ArgMaxParameter) */ {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  inline ArgMaxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ArgMaxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArgMaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  bool out_max_val() const;
  void set_out_max_val(bool value);

  // optional int32 axis = 3;
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  void set_has_out_max_val();
  void clear_has_out_max_val();
  void set_has_top_k();
  void clear_has_top_k();
  void set_has_axis();
  void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 top_k_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatParameter) */ {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ConcatParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConcatParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_concat_dim();
  void clear_has_concat_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 concat_dim_;
  ::google::protobuf::int32 axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchNormParameter) */ {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  static inline const BatchNormParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormParameter*>(
               &_BatchNormParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  inline BatchNormParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchNormParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchNormParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  bool use_global_stats() const;
  void set_use_global_stats(bool value);

  // optional bool use_instance_norm = 4 [default = false];
  bool has_use_instance_norm() const;
  void clear_use_instance_norm();
  static const int kUseInstanceNormFieldNumber = 4;
  bool use_instance_norm() const;
  void set_use_instance_norm(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-05];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
 private:
  void set_has_use_global_stats();
  void clear_has_use_global_stats();
  void set_has_moving_average_fraction();
  void clear_has_moving_average_fraction();
  void set_has_eps();
  void clear_has_eps();
  void set_has_use_instance_norm();
  void clear_has_use_instance_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool use_global_stats_;
  bool use_instance_norm_;
  float moving_average_fraction_;
  float eps_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BiasParameter) */ {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  static inline const BiasParameter* internal_default_instance() {
    return reinterpret_cast<const BiasParameter*>(
               &_BiasParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(BiasParameter* other);

  // implements Message ----------------------------------------------

  inline BiasParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BiasParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BiasParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_num_axes();
  void clear_has_num_axes();
  void set_has_filler();
  void clear_has_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ContrastiveLossParameter) */ {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  inline ContrastiveLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ContrastiveLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContrastiveLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  bool legacy_version() const;
  void set_legacy_version(bool value);

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  void set_has_margin();
  void clear_has_margin();
  void set_has_legacy_version();
  void clear_has_legacy_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool legacy_version_;
  float margin_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 pad = 3;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size(int index) const;
  void set_kernel_size(int index, ::google::protobuf::uint32 value);
  void add_kernel_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 18;
  ::google::protobuf::uint32 dilation(int index) const;
  void set_dilation(int index, ::google::protobuf::uint32 value);
  void add_dilation(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // repeated uint32 kernel_h_offset = 1004;
  int kernel_h_offset_size() const;
  void clear_kernel_h_offset();
  static const int kKernelHOffsetFieldNumber = 1004;
  ::google::protobuf::uint32 kernel_h_offset(int index) const;
  void set_kernel_h_offset(int index, ::google::protobuf::uint32 value);
  void add_kernel_h_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_h_offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_h_offset();

  // repeated uint32 kernel_w_offset = 1005;
  int kernel_w_offset_size() const;
  void clear_kernel_w_offset();
  static const int kKernelWOffsetFieldNumber = 1005;
  ::google::protobuf::uint32 kernel_w_offset(int index) const;
  void set_kernel_w_offset(int index, ::google::protobuf::uint32 value);
  void add_kernel_w_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_w_offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_w_offset();

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);

  // optional bool print_weight_bias_statistics = 1006;
  bool has_print_weight_bias_statistics() const;
  void clear_print_weight_bias_statistics();
  static const int kPrintWeightBiasStatisticsFieldNumber = 1006;
  bool print_weight_bias_statistics() const;
  void set_print_weight_bias_statistics(bool value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 16;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 dfmb_bottom_idx = 1001 [default = -1];
  bool has_dfmb_bottom_idx() const;
  void clear_dfmb_bottom_idx();
  static const int kDfmbBottomIdxFieldNumber = 1001;
  ::google::protobuf::int32 dfmb_bottom_idx() const;
  void set_dfmb_bottom_idx(::google::protobuf::int32 value);

  // optional int32 mask_bottom_idx = 1002 [default = -1];
  bool has_mask_bottom_idx() const;
  void clear_mask_bottom_idx();
  static const int kMaskBottomIdxFieldNumber = 1002;
  ::google::protobuf::int32 mask_bottom_idx() const;
  void set_mask_bottom_idx(::google::protobuf::int32 value);

  // optional uint32 analysis_num_group = 1003 [default = 1];
  bool has_analysis_num_group() const;
  void clear_analysis_num_group();
  static const int kAnalysisNumGroupFieldNumber = 1003;
  ::google::protobuf::uint32 analysis_num_group() const;
  void set_analysis_num_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_group();
  void clear_has_group();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_engine();
  void clear_has_engine();
  void set_has_axis();
  void clear_has_axis();
  void set_has_force_nd_im2col();
  void clear_has_force_nd_im2col();
  void set_has_dfmb_bottom_idx();
  void clear_has_dfmb_bottom_idx();
  void set_has_mask_bottom_idx();
  void clear_has_mask_bottom_idx();
  void set_has_analysis_num_group();
  void clear_has_analysis_num_group();
  void set_has_print_weight_bias_statistics();
  void clear_has_print_weight_bias_statistics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_h_offset_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_w_offset_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool force_nd_im2col_;
  bool print_weight_bias_statistics_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 dfmb_bottom_idx_;
  ::google::protobuf::int32 mask_bottom_idx_;
  ::google::protobuf::uint32 analysis_num_group_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DataParameter) */ {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  inline DataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static const DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 8;
  ::caffe::DataParameter_DB backend() const;
  void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional uint32 prefetch = 10 [default = 4];
  bool has_prefetch() const;
  void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  ::google::protobuf::uint32 prefetch() const;
  void set_prefetch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_backend();
  void clear_has_backend();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_force_encoded_color();
  void clear_has_force_encoded_color();
  void set_has_prefetch();
  void clear_has_prefetch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 rand_skip_;
  bool mirror_;
  bool force_encoded_color_;
  int backend_;
  float scale_;
  ::google::protobuf::uint32 prefetch_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DropoutParameter) */ {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DropoutParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DropoutParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  void set_has_dropout_ratio();
  void clear_has_dropout_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float dropout_ratio_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DummyDataParameter) */ {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  inline DummyDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DummyDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DummyDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  const ::caffe::FillerParameter& data_filler(int index) const;
  ::caffe::FillerParameter* mutable_data_filler(int index);
  ::caffe::FillerParameter* add_data_filler();
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;

  // repeated uint32 num = 2;
  int num_size() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num(int index) const;
  void set_num(int index, ::google::protobuf::uint32 value);
  void add_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::uint32 value);
  void add_channels(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height(int index) const;
  void set_height(int index, ::google::protobuf::uint32 value);
  void add_height(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width(int index) const;
  void set_width(int index, ::google::protobuf::uint32 value);
  void add_width(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // repeated .caffe.BlobShape shape = 6;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 6;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EltwiseParameter) */ {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  inline EltwiseParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  EltwiseParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EltwiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float coeff = 2;
  int coeff_size() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  void set_has_operation();
  void clear_has_operation();
  void set_has_stable_prod_grad();
  void clear_has_stable_prod_grad();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ELUParameter) */ {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  static inline const ELUParameter* internal_default_instance() {
    return reinterpret_cast<const ELUParameter*>(
               &_ELUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(ELUParameter* other);

  // implements Message ----------------------------------------------

  inline ELUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ELUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ELUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
 private:
  void set_has_alpha();
  void clear_has_alpha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float alpha_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EmbedParameter) */ {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  static inline const EmbedParameter* internal_default_instance() {
    return reinterpret_cast<const EmbedParameter*>(
               &_EmbedParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(EmbedParameter* other);

  // implements Message ----------------------------------------------

  inline EmbedParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  EmbedParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmbedParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  bool bias_term() const;
  void set_bias_term(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_input_dim();
  void clear_has_input_dim();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  bool bias_term_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpParameter) */ {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  inline ExpParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ExpParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExpParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FlattenParameter) */ {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  inline FlattenParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FlattenParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlattenParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  ::google::protobuf::int32 end_axis() const;
  void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_end_axis();
  void clear_has_end_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5DataParameter) */ {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HDF5DataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDF5DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_shuffle();
  void clear_has_shuffle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5OutputParameter) */ {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HDF5OutputParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDF5OutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  void set_has_file_name();
  void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HingeLossParameter) */ {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  inline HingeLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HingeLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HingeLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 =
    HingeLossParameter_Norm_L1;
  static const Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  ::caffe::HingeLossParameter_Norm norm() const;
  void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  void set_has_norm();
  void clear_has_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int norm_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataParameter) */ {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  ::google::protobuf::uint32 new_height() const;
  void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  ::google::protobuf::uint32 new_width() const;
  void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  bool is_color() const;
  void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_new_height();
  void clear_has_new_height();
  void set_has_new_width();
  void clear_has_new_width();
  void set_has_is_color();
  void clear_has_is_color();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_root_folder();
  void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 rand_skip_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool is_color_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InfogainLossParameter) */ {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InfogainLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfogainLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductParameter) */ {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InnerProductParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_axis();
  void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  inline InputParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InputParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:caffe.InputParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LogParameter) */ {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  static inline const LogParameter* internal_default_instance() {
    return reinterpret_cast<const LogParameter*>(
               &_LogParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(LogParameter* other);

  // implements Message ----------------------------------------------

  inline LogParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LogParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.LogParameter)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LRNParameter) */ {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LRNParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LRNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT =
    LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    LRNParameter_Engine_CAFFE;
  static const Engine CUDNN =
    LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  ::caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::LRNParameter_Engine engine() const;
  void set_engine(::caffe::LRNParameter_Engine value);

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 3;
  float beta() const;
  void set_beta(float value);

  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 5;
  float k() const;
  void set_k(float value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_norm_region();
  void clear_has_norm_region();
  void set_has_k();
  void clear_has_k();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int norm_region_;
  int engine_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MemoryDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MVNParameter) */ {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(MVNParameter* other);

  // implements Message ----------------------------------------------

  inline MVNParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MVNParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MVNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  bool across_channels() const;
  void set_across_channels(bool value);

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  bool normalize_variance() const;
  void set_normalize_variance(bool value);

  // optional float eps = 3 [default = 1e-09];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  void set_has_normalize_variance();
  void clear_has_normalize_variance();
  void set_has_across_channels();
  void clear_has_across_channels();
  void set_has_eps();
  void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool across_channels_;
  bool normalize_variance_;
  float eps_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingParameter_Engine engine() const;
  void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
  bool has_cmp_out_shape_floor_as_conv() const;
  void clear_cmp_out_shape_floor_as_conv();
  static const int kCmpOutShapeFloorAsConvFieldNumber = 13;
  bool cmp_out_shape_floor_as_conv() const;
  void set_cmp_out_shape_floor_as_conv(bool value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  void set_has_pool();
  void clear_has_pool();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_engine();
  void clear_has_engine();
  void set_has_global_pooling();
  void clear_has_global_pooling();
  void set_has_cmp_out_shape_floor_as_conv();
  void clear_has_cmp_out_shape_floor_as_conv();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  int engine_;
  bool global_pooling_;
  bool cmp_out_shape_floor_as_conv_;
  ::google::protobuf::uint32 stride_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PowerParameter) */ {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PowerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PowerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float power = 1 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power() const;
  void set_power(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  void set_has_power();
  void clear_has_power();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float power_;
  float scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PythonParameter) */ {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  static inline const PythonParameter* internal_default_instance() {
    return reinterpret_cast<const PythonParameter*>(
               &_PythonParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  inline PythonParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PythonParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PythonParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_layer(::std::string&& value);
  #endif
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  const ::std::string& param_str() const;
  void set_param_str(const ::std::string& value);
  #if LANG_CXX11
  void set_param_str(::std::string&& value);
  #endif
  void set_param_str(const char* value);
  void set_param_str(const char* value, size_t size);
  ::std::string* mutable_param_str();
  ::std::string* release_param_str();
  void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
 private:
  void set_has_module();
  void clear_has_module();
  void set_has_layer();
  void clear_has_layer();
  void set_has_param_str();
  void clear_has_param_str();
  void set_has_share_in_parallel();
  void clear_has_share_in_parallel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::internal::ArenaStringPtr param_str_;
  bool share_in_parallel_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReductionParameter) */ {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  static inline const ReductionParameter* internal_default_instance() {
    return reinterpret_cast<const ReductionParameter*>(
               &_ReductionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(ReductionParameter* other);

  // implements Message ----------------------------------------------

  inline ReductionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReductionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReductionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM =
    ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM =
    ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ =
    ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN =
    ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::ReductionParameter_ReductionOp operation() const;
  void set_operation(::caffe::ReductionParameter_ReductionOp value);

  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  float coeff() const;
  void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
 private:
  void set_has_operation();
  void clear_has_operation();
  void set_has_axis();
  void clear_has_axis();
  void set_has_coeff();
  void clear_has_coeff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  int operation_;
  float coeff_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUParameter) */ {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReLUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUParameter_Engine engine() const;
  void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  void set_has_negative_slope();
  void clear_has_negative_slope();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReshapeParameter) */ {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  static inline const ReshapeParameter* internal_default_instance() {
    return reinterpret_cast<const ReshapeParameter*>(
               &_ReshapeParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  inline ReshapeParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReshapeParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReshapeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_axis();
  void clear_has_axis();
  void set_has_num_axes();
  void clear_has_num_axes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROIPoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROIPoolingParameter) */ {
 public:
  ROIPoolingParameter();
  virtual ~ROIPoolingParameter();

  ROIPoolingParameter(const ROIPoolingParameter& from);

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIPoolingParameter& default_instance();

  static inline const ROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParameter*>(
               &_ROIPoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(ROIPoolingParameter* other);

  // implements Message ----------------------------------------------

  inline ROIPoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ROIPoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROIPoolingParameter& from);
  void MergeFrom(const ROIPoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROIPoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ROIPoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    ROIPoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    ROIPoolingParameter_PoolMethod_AVE;
  static inline bool PoolMethod_IsValid(int value) {
    return ROIPoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    ROIPoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    ROIPoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    ROIPoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return ROIPoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return ROIPoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return ROIPoolingParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pooled_h = 1 [default = 0];
  bool has_pooled_h() const;
  void clear_pooled_h();
  static const int kPooledHFieldNumber = 1;
  ::google::protobuf::uint32 pooled_h() const;
  void set_pooled_h(::google::protobuf::uint32 value);

  // optional uint32 pooled_w = 2 [default = 0];
  bool has_pooled_w() const;
  void clear_pooled_w();
  static const int kPooledWFieldNumber = 2;
  ::google::protobuf::uint32 pooled_w() const;
  void set_pooled_w(::google::protobuf::uint32 value);

  // optional float heat_map_a = 4;
  bool has_heat_map_a() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 4;
  float heat_map_a() const;
  void set_heat_map_a(float value);

  // optional float heat_map_b = 5 [default = 0];
  bool has_heat_map_b() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 5;
  float heat_map_b() const;
  void set_heat_map_b(float value);

  // optional float pad_ratio = 6 [default = 0];
  bool has_pad_ratio() const;
  void clear_pad_ratio();
  static const int kPadRatioFieldNumber = 6;
  float pad_ratio() const;
  void set_pad_ratio(float value);

  // optional bool use_floor = 7 [default = false];
  bool has_use_floor() const;
  void clear_use_floor();
  static const int kUseFloorFieldNumber = 7;
  bool use_floor() const;
  void set_use_floor(bool value);

  // optional bool position_sensitive = 10 [default = false];
  bool has_position_sensitive() const;
  void clear_position_sensitive();
  static const int kPositionSensitiveFieldNumber = 10;
  bool position_sensitive() const;
  void set_position_sensitive(bool value);

  // optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 9;
  ::caffe::ROIPoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::ROIPoolingParameter_PoolMethod value);

  // optional float spatial_scale = 3 [default = 1];
  bool has_spatial_scale() const;
  void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 3;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  // optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
  bool has_sqrt_sample_loc_num_per_bin() const;
  void clear_sqrt_sample_loc_num_per_bin();
  static const int kSqrtSampleLocNumPerBinFieldNumber = 8;
  ::google::protobuf::uint32 sqrt_sample_loc_num_per_bin() const;
  void set_sqrt_sample_loc_num_per_bin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ROIPoolingParameter)
 private:
  void set_has_pooled_h();
  void clear_has_pooled_h();
  void set_has_pooled_w();
  void clear_has_pooled_w();
  void set_has_spatial_scale();
  void clear_has_spatial_scale();
  void set_has_heat_map_a();
  void clear_has_heat_map_a();
  void set_has_heat_map_b();
  void clear_has_heat_map_b();
  void set_has_pad_ratio();
  void clear_has_pad_ratio();
  void set_has_use_floor();
  void clear_has_use_floor();
  void set_has_sqrt_sample_loc_num_per_bin();
  void clear_has_sqrt_sample_loc_num_per_bin();
  void set_has_pool();
  void clear_has_pool();
  void set_has_position_sensitive();
  void clear_has_position_sensitive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 pooled_h_;
  ::google::protobuf::uint32 pooled_w_;
  float heat_map_a_;
  float heat_map_b_;
  float pad_ratio_;
  bool use_floor_;
  bool position_sensitive_;
  int pool_;
  float spatial_scale_;
  ::google::protobuf::uint32 sqrt_sample_loc_num_per_bin_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ScaleParameter) */ {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  static inline const ScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ScaleParameter*>(
               &_ScaleParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(ScaleParameter* other);

  // implements Message ----------------------------------------------

  inline ScaleParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ScaleParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScaleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_num_axes();
  void clear_has_num_axes();
  void set_has_filler();
  void clear_has_filler();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_bias_filler();
  void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidParameter) */ {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SigmoidParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SigmoidParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SliceParameter) */ {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(SliceParameter* other);

  // implements Message ----------------------------------------------

  inline SliceParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SliceParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SliceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  ::google::protobuf::uint32 slice_point(int index) const;
  void set_slice_point(int index, ::google::protobuf::uint32 value);
  void add_slice_point(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  ::google::protobuf::uint32 slice_dim() const;
  void set_slice_dim(::google::protobuf::uint32 value);

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_slice_dim();
  void clear_has_slice_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::uint32 slice_dim_;
  ::google::protobuf::int32 axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxParameter) */ {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftmaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::caffe::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  void set_has_engine();
  void clear_has_engine();
  void set_has_axis();
  void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TanHParameter) */ {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(TanHParameter* other);

  // implements Message ----------------------------------------------

  inline TanHParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TanHParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TanHParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static const Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::TanHParameter_Engine engine() const;
  void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TileParameter) */ {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  static inline const TileParameter* internal_default_instance() {
    return reinterpret_cast<const TileParameter*>(
               &_TileParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(TileParameter* other);

  // implements Message ----------------------------------------------

  inline TileParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TileParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TileParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tiles = 2;
  bool has_tiles() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::google::protobuf::int32 tiles() const;
  void set_tiles(::google::protobuf::int32 value);

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TileParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_tiles();
  void clear_has_tiles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tiles_;
  ::google::protobuf::int32 axis_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ThresholdParameter) */ {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(ThresholdParameter* other);

  // implements Message ----------------------------------------------

  inline ThresholdParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ThresholdParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ThresholdParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  void set_has_threshold();
  void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float threshold_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.WindowDataParameter) */ {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(WindowDataParameter* other);

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  WindowDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WindowDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  const ::std::string& crop_mode() const;
  void set_crop_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_crop_mode(::std::string&& value);
  #endif
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  ::std::string* mutable_crop_mode();
  ::std::string* release_crop_mode();
  void set_allocated_crop_mode(::std::string* crop_mode);

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  bool cache_images() const;
  void set_cache_images(bool value);

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  ::google::protobuf::uint32 context_pad() const;
  void set_context_pad(::google::protobuf::uint32 value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  float fg_threshold() const;
  void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  float bg_threshold() const;
  void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  float fg_fraction() const;
  void set_fg_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_fg_threshold();
  void clear_has_fg_threshold();
  void set_has_bg_threshold();
  void clear_has_bg_threshold();
  void set_has_fg_fraction();
  void clear_has_fg_fraction();
  void set_has_context_pad();
  void clear_has_context_pad();
  void set_has_crop_mode();
  void clear_has_crop_mode();
  void set_has_cache_images();
  void clear_has_cache_images();
  void set_has_root_folder();
  void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  float scale_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SPPParameter) */ {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  static inline const SPPParameter* internal_default_instance() {
    return reinterpret_cast<const SPPParameter*>(
               &_SPPParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(SPPParameter* other);

  // implements Message ----------------------------------------------

  inline SPPParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SPPParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SPPParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT =
    SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SPPParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  ::google::protobuf::uint32 pyramid_height() const;
  void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 2;
  ::caffe::SPPParameter_PoolMethod pool() const;
  void set_pool(::caffe::SPPParameter_PoolMethod value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::SPPParameter_Engine engine() const;
  void set_engine(::caffe::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
 private:
  void set_has_pyramid_height();
  void clear_has_pyramid_height();
  void set_has_pool();
  void clear_has_pool();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V1LayerParameter) */ {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  static inline const V1LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V1LayerParameter*>(
               &_V1LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(V1LayerParameter* other);

  // implements Message ----------------------------------------------

  inline V1LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  V1LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(V1LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE =
    V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL =
    V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY =
    V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX =
    V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL =
    V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT =
    V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS =
    V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION =
    V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA =
    V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION =
    V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT =
    V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA =
    V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS =
    V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE =
    V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP =
    V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN =
    V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA =
    V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT =
    V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS =
    V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL =
    V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA =
    V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS =
    V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT =
    V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN =
    V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA =
    V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS =
    V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN =
    V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING =
    V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER =
    V1LayerParameter_LayerType_POWER;
  static const LayerType RELU =
    V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID =
    V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE =
    V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX =
    V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS =
    V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT =
    V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE =
    V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH =
    V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA =
    V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD =
    V1LayerParameter_LayerType_THRESHOLD;
  static const LayerType IMAGE_DATA_ARBITRARY =
    V1LayerParameter_LayerType_IMAGE_DATA_ARBITRARY;
  static const LayerType EXPANDLABEL =
    V1LayerParameter_LayerType_EXPANDLABEL;
  static const LayerType DEFORMABLECONVOLUTION =
    V1LayerParameter_LayerType_DEFORMABLECONVOLUTION;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 2;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bottom(int index, ::std::string&& value);
  #endif
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  #if LANG_CXX11
  void add_bottom(::std::string&& value);
  #endif
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 3;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_top(int index, ::std::string&& value);
  #endif
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  #if LANG_CXX11
  void add_top(::std::string&& value);
  #endif
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated .caffe.BlobProto blobs = 6;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated .caffe.NetStateRule include = 32;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 32;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 33;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated string param = 1001;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1001;
  const ::std::string& param(int index) const;
  ::std::string* mutable_param(int index);
  void set_param(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_param(int index, ::std::string&& value);
  #endif
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  ::std::string* add_param();
  void add_param(const ::std::string& value);
  #if LANG_CXX11
  void add_param(::std::string&& value);
  #endif
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  ::caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value);
  const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  const ::caffe::V0LayerParameter& layer() const;
  ::caffe::V0LayerParameter* mutable_layer();
  ::caffe::V0LayerParameter* release_layer();
  void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // optional .caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* mutable_concat_param();
  ::caffe::ConcatParameter* release_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  ::caffe::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* mutable_data_param();
  ::caffe::DataParameter* release_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* mutable_dropout_param();
  ::caffe::DropoutParameter* release_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* mutable_image_data_param();
  ::caffe::ImageDataParameter* release_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  ::caffe::InnerProductParameter* release_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* mutable_lrn_param();
  ::caffe::LRNParameter* release_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* mutable_window_data_param();
  ::caffe::WindowDataParameter* release_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* mutable_power_param();
  ::caffe::PowerParameter* release_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  ::caffe::MemoryDataParameter* release_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  ::caffe::ArgMaxParameter* release_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  ::caffe::EltwiseParameter* release_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* mutable_threshold_param();
  ::caffe::ThresholdParameter* release_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  ::caffe::DummyDataParameter* release_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  ::caffe::AccuracyParameter* release_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* mutable_slice_param();
  ::caffe::SliceParameter* release_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* mutable_mvn_param();
  ::caffe::MVNParameter* release_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* mutable_transform_param();
  ::caffe::TransformationParameter* release_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* mutable_tanh_param();
  ::caffe::TanHParameter* release_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  ::caffe::SigmoidParameter* release_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  ::caffe::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* mutable_exp_param();
  ::caffe::ExpParameter* release_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.LossParameter loss_param = 42;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* mutable_loss_param();
  ::caffe::LossParameter* release_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.CropParameter crop_parameter = 50;
  bool has_crop_parameter() const;
  void clear_crop_parameter();
  static const int kCropParameterFieldNumber = 50;
  const ::caffe::CropParameter& crop_parameter() const;
  ::caffe::CropParameter* mutable_crop_parameter();
  ::caffe::CropParameter* release_crop_parameter();
  void set_allocated_crop_parameter(::caffe::CropParameter* crop_parameter);

  // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
  bool has_deformable_convolution_param() const;
  void clear_deformable_convolution_param();
  static const int kDeformableConvolutionParamFieldNumber = 56;
  const ::caffe::DeformableConvolutionParameter& deformable_convolution_param() const;
  ::caffe::DeformableConvolutionParameter* mutable_deformable_convolution_param();
  ::caffe::DeformableConvolutionParameter* release_deformable_convolution_param();
  void set_allocated_deformable_convolution_param(::caffe::DeformableConvolutionParameter* deformable_convolution_param);

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
  bool has_image_data_arbitrary_param() const;
  void clear_image_data_arbitrary_param();
  static const int kImageDataArbitraryParamFieldNumber = 5001;
  const ::caffe::ImageDataArbitraryParameter& image_data_arbitrary_param() const;
  ::caffe::ImageDataArbitraryParameter* mutable_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* release_image_data_arbitrary_param();
  void set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param);

  // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
  bool has_expandlabel_param() const;
  void clear_expandlabel_param();
  static const int kExpandlabelParamFieldNumber = 5002;
  const ::caffe::ExpandlabelParameter& expandlabel_param() const;
  ::caffe::ExpandlabelParameter* mutable_expandlabel_param();
  ::caffe::ExpandlabelParameter* release_expandlabel_param();
  void set_allocated_expandlabel_param(::caffe::ExpandlabelParameter* expandlabel_param);

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::caffe::V1LayerParameter_LayerType type() const;
  void set_type(::caffe::V1LayerParameter_LayerType value);

  // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_accuracy_param();
  void clear_has_accuracy_param();
  void set_has_argmax_param();
  void clear_has_argmax_param();
  void set_has_concat_param();
  void clear_has_concat_param();
  void set_has_contrastive_loss_param();
  void clear_has_contrastive_loss_param();
  void set_has_convolution_param();
  void clear_has_convolution_param();
  void set_has_data_param();
  void clear_has_data_param();
  void set_has_dropout_param();
  void clear_has_dropout_param();
  void set_has_dummy_data_param();
  void clear_has_dummy_data_param();
  void set_has_eltwise_param();
  void clear_has_eltwise_param();
  void set_has_exp_param();
  void clear_has_exp_param();
  void set_has_hdf5_data_param();
  void clear_has_hdf5_data_param();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();
  void set_has_hinge_loss_param();
  void clear_has_hinge_loss_param();
  void set_has_image_data_param();
  void clear_has_image_data_param();
  void set_has_infogain_loss_param();
  void clear_has_infogain_loss_param();
  void set_has_inner_product_param();
  void clear_has_inner_product_param();
  void set_has_lrn_param();
  void clear_has_lrn_param();
  void set_has_memory_data_param();
  void clear_has_memory_data_param();
  void set_has_mvn_param();
  void clear_has_mvn_param();
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_power_param();
  void clear_has_power_param();
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_sigmoid_param();
  void clear_has_sigmoid_param();
  void set_has_softmax_param();
  void clear_has_softmax_param();
  void set_has_slice_param();
  void clear_has_slice_param();
  void set_has_tanh_param();
  void clear_has_tanh_param();
  void set_has_threshold_param();
  void clear_has_threshold_param();
  void set_has_window_data_param();
  void clear_has_window_data_param();
  void set_has_transform_param();
  void clear_has_transform_param();
  void set_has_loss_param();
  void clear_has_loss_param();
  void set_has_layer();
  void clear_has_layer();
  void set_has_crop_parameter();
  void clear_has_crop_parameter();
  void set_has_image_data_arbitrary_param();
  void clear_has_image_data_arbitrary_param();
  void set_has_expandlabel_param();
  void clear_has_expandlabel_param();
  void set_has_deformable_convolution_param();
  void clear_has_deformable_convolution_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::V0LayerParameter* layer_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::CropParameter* crop_parameter_;
  ::caffe::DeformableConvolutionParameter* deformable_convolution_param_;
  ::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param_;
  ::caffe::ExpandlabelParameter* expandlabel_param_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V0LayerParameter) */ {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(V0LayerParameter* other);

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  V0LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(V0LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 50;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string source = 16;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 16;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string meanfile = 18;
  bool has_meanfile() const;
  void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  const ::std::string& meanfile() const;
  void set_meanfile(const ::std::string& value);
  #if LANG_CXX11
  void set_meanfile(::std::string&& value);
  #endif
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  ::std::string* mutable_meanfile();
  ::std::string* release_meanfile();
  void set_allocated_meanfile(::std::string* meanfile);

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  const ::std::string& det_crop_mode() const;
  void set_det_crop_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_det_crop_mode(::std::string&& value);
  #endif
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  ::std::string* mutable_det_crop_mode();
  ::std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional .caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 7;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  ::google::protobuf::uint32 kernelsize() const;
  void set_kernelsize(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 11;
  ::caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  ::google::protobuf::uint32 batchsize() const;
  void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  ::google::protobuf::uint32 cropsize() const;
  void set_cropsize(::google::protobuf::uint32 value);

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  ::google::protobuf::int32 new_width() const;
  void set_new_width(::google::protobuf::int32 value);

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  bool shuffle_images() const;
  void set_shuffle_images(bool value);

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  ::google::protobuf::uint32 det_context_pad() const;
  void set_det_context_pad(::google::protobuf::uint32 value);

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  ::google::protobuf::int32 new_num() const;
  void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  ::google::protobuf::int32 new_channels() const;
  void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  ::google::protobuf::int32 new_height() const;
  void set_new_height(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  bool biasterm() const;
  void set_biasterm(bool value);

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 9;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 10;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 15;
  float beta() const;
  void set_beta(float value);

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 17;
  float scale() const;
  void set_scale(float value);

  // optional float k = 22 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 22;
  float k() const;
  void set_k(float value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_biasterm();
  void clear_has_biasterm();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_pad();
  void clear_has_pad();
  void set_has_kernelsize();
  void clear_has_kernelsize();
  void set_has_group();
  void clear_has_group();
  void set_has_stride();
  void clear_has_stride();
  void set_has_pool();
  void clear_has_pool();
  void set_has_dropout_ratio();
  void clear_has_dropout_ratio();
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_k();
  void clear_has_k();
  void set_has_source();
  void clear_has_source();
  void set_has_scale();
  void clear_has_scale();
  void set_has_meanfile();
  void clear_has_meanfile();
  void set_has_batchsize();
  void clear_has_batchsize();
  void set_has_cropsize();
  void clear_has_cropsize();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_det_fg_threshold();
  void clear_has_det_fg_threshold();
  void set_has_det_bg_threshold();
  void clear_has_det_bg_threshold();
  void set_has_det_fg_fraction();
  void clear_has_det_fg_fraction();
  void set_has_det_context_pad();
  void clear_has_det_context_pad();
  void set_has_det_crop_mode();
  void clear_has_det_crop_mode();
  void set_has_new_num();
  void clear_has_new_num();
  void set_has_new_channels();
  void clear_has_new_channels();
  void set_has_new_height();
  void clear_has_new_height();
  void set_has_new_width();
  void clear_has_new_width();
  void set_has_shuffle_images();
  void clear_has_shuffle_images();
  void set_has_concat_dim();
  void clear_has_concat_dim();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr meanfile_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_det_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr det_crop_mode_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernelsize_;
  int pool_;
  ::google::protobuf::uint32 batchsize_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::int32 new_width_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 det_context_pad_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::uint32 concat_dim_;
  bool biasterm_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float scale_;
  float k_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  mutable int _cached_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PReLUParameter) */ {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  static inline const PReLUParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUParameter*>(
               &_PReLUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(PReLUParameter* other);

  // implements Message ----------------------------------------------

  inline PReLUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PReLUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 1;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
 private:
  void set_has_filler();
  void clear_has_filler();
  void set_has_channel_shared();
  void clear_has_channel_shared();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  bool channel_shared_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ResizeParameter) */ {
 public:
  ResizeParameter();
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeParameter& default_instance();

  static inline const ResizeParameter* internal_default_instance() {
    return reinterpret_cast<const ResizeParameter*>(
               &_ResizeParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(ResizeParameter* other);

  // implements Message ----------------------------------------------

  inline ResizeParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ResizeParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 height = 1;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional bool is_pyramid_test = 3 [default = false];
  bool has_is_pyramid_test() const;
  void clear_is_pyramid_test();
  static const int kIsPyramidTestFieldNumber = 3;
  bool is_pyramid_test() const;
  void set_is_pyramid_test(bool value);

  // optional float out_height_scale = 4;
  bool has_out_height_scale() const;
  void clear_out_height_scale();
  static const int kOutHeightScaleFieldNumber = 4;
  float out_height_scale() const;
  void set_out_height_scale(float value);

  // optional float out_width_scale = 5;
  bool has_out_width_scale() const;
  void clear_out_width_scale();
  static const int kOutWidthScaleFieldNumber = 5;
  float out_width_scale() const;
  void set_out_width_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ResizeParameter)
 private:
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_is_pyramid_test();
  void clear_has_is_pyramid_test();
  void set_has_out_height_scale();
  void clear_has_out_height_scale();
  void set_has_out_width_scale();
  void clear_has_out_width_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  bool is_pyramid_test_;
  float out_height_scale_;
  float out_width_scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelRelatedDropoutParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelRelatedDropoutParam) */ {
 public:
  LabelRelatedDropoutParam();
  virtual ~LabelRelatedDropoutParam();

  LabelRelatedDropoutParam(const LabelRelatedDropoutParam& from);

  inline LabelRelatedDropoutParam& operator=(const LabelRelatedDropoutParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelRelatedDropoutParam& default_instance();

  static inline const LabelRelatedDropoutParam* internal_default_instance() {
    return reinterpret_cast<const LabelRelatedDropoutParam*>(
               &_LabelRelatedDropoutParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(LabelRelatedDropoutParam* other);

  // implements Message ----------------------------------------------

  inline LabelRelatedDropoutParam* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelRelatedDropoutParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelRelatedDropoutParam& from);
  void MergeFrom(const LabelRelatedDropoutParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelRelatedDropoutParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value_masked = 3 [default = 0];
  bool has_value_masked() const;
  void clear_value_masked();
  static const int kValueMaskedFieldNumber = 3;
  float value_masked() const;
  void set_value_masked(float value);

  // optional uint32 ignore_largest_n = 6 [default = 0];
  bool has_ignore_largest_n() const;
  void clear_ignore_largest_n();
  static const int kIgnoreLargestNFieldNumber = 6;
  ::google::protobuf::uint32 ignore_largest_n() const;
  void set_ignore_largest_n(::google::protobuf::uint32 value);

  // optional uint32 min_neg_nums = 7 [default = 0];
  bool has_min_neg_nums() const;
  void clear_min_neg_nums();
  static const int kMinNegNumsFieldNumber = 7;
  ::google::protobuf::uint32 min_neg_nums() const;
  void set_min_neg_nums(::google::protobuf::uint32 value);

  // optional bool per_image = 8 [default = false];
  bool has_per_image() const;
  void clear_per_image();
  static const int kPerImageFieldNumber = 8;
  bool per_image() const;
  void set_per_image(bool value);

  // optional uint32 margin = 5 [default = 3];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 5;
  ::google::protobuf::uint32 margin() const;
  void set_margin(::google::protobuf::uint32 value);

  // optional float negative_ratio = 1 [default = 0.5];
  bool has_negative_ratio() const;
  void clear_negative_ratio();
  static const int kNegativeRatioFieldNumber = 1;
  float negative_ratio() const;
  void set_negative_ratio(float value);

  // optional float hard_ratio = 4 [default = 0.5];
  bool has_hard_ratio() const;
  void clear_hard_ratio();
  static const int kHardRatioFieldNumber = 4;
  float hard_ratio() const;
  void set_hard_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelRelatedDropoutParam)
 private:
  void set_has_negative_ratio();
  void clear_has_negative_ratio();
  void set_has_value_masked();
  void clear_has_value_masked();
  void set_has_hard_ratio();
  void clear_has_hard_ratio();
  void set_has_margin();
  void clear_has_margin();
  void set_has_ignore_largest_n();
  void clear_has_ignore_largest_n();
  void set_has_min_neg_nums();
  void clear_has_min_neg_nums();
  void set_has_per_image();
  void clear_has_per_image();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float value_masked_;
  ::google::protobuf::uint32 ignore_largest_n_;
  ::google::protobuf::uint32 min_neg_nums_;
  bool per_image_;
  ::google::protobuf::uint32 margin_;
  float negative_ratio_;
  float hard_ratio_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InceptionColumnParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InceptionColumnParameter) */ {
 public:
  InceptionColumnParameter();
  virtual ~InceptionColumnParameter();

  InceptionColumnParameter(const InceptionColumnParameter& from);

  inline InceptionColumnParameter& operator=(const InceptionColumnParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InceptionColumnParameter& default_instance();

  static inline const InceptionColumnParameter* internal_default_instance() {
    return reinterpret_cast<const InceptionColumnParameter*>(
               &_InceptionColumnParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(InceptionColumnParameter* other);

  // implements Message ----------------------------------------------

  inline InceptionColumnParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InceptionColumnParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InceptionColumnParameter& from);
  void MergeFrom(const InceptionColumnParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InceptionColumnParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.ConvolutionParameter convolution_param = 1;
  int convolution_param_size() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 1;
  const ::caffe::ConvolutionParameter& convolution_param(int index) const;
  ::caffe::ConvolutionParameter* mutable_convolution_param(int index);
  ::caffe::ConvolutionParameter* add_convolution_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter >*
      mutable_convolution_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter >&
      convolution_param() const;

  // optional string column_name = 3;
  bool has_column_name() const;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 3;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // optional .caffe.PoolingParameter pooling_param = 2;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 2;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // @@protoc_insertion_point(class_scope:caffe.InceptionColumnParameter)
 private:
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_column_name();
  void clear_has_column_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter > convolution_param_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  ::caffe::PoolingParameter* pooling_param_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InceptionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InceptionParameter) */ {
 public:
  InceptionParameter();
  virtual ~InceptionParameter();

  InceptionParameter(const InceptionParameter& from);

  inline InceptionParameter& operator=(const InceptionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InceptionParameter& default_instance();

  static inline const InceptionParameter* internal_default_instance() {
    return reinterpret_cast<const InceptionParameter*>(
               &_InceptionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(InceptionParameter* other);

  // implements Message ----------------------------------------------

  inline InceptionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InceptionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InceptionParameter& from);
  void MergeFrom(const InceptionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InceptionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.InceptionColumnParameter inception_column = 7;
  int inception_column_size() const;
  void clear_inception_column();
  static const int kInceptionColumnFieldNumber = 7;
  const ::caffe::InceptionColumnParameter& inception_column(int index) const;
  ::caffe::InceptionColumnParameter* mutable_inception_column(int index);
  ::caffe::InceptionColumnParameter* add_inception_column();
  ::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter >*
      mutable_inception_column();
  const ::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter >&
      inception_column() const;

  // optional .caffe.ReLUParameter relu_param = 1;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 1;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.FillerParameter weight_filler = 2;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 2;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 3;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 3;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool need_relu = 5 [default = true];
  bool has_need_relu() const;
  void clear_need_relu();
  static const int kNeedReluFieldNumber = 5;
  bool need_relu() const;
  void set_need_relu(bool value);

  // optional bool relu_at_top = 6 [default = true];
  bool has_relu_at_top() const;
  void clear_relu_at_top();
  static const int kReluAtTopFieldNumber = 6;
  bool relu_at_top() const;
  void set_relu_at_top(bool value);

  // @@protoc_insertion_point(class_scope:caffe.InceptionParameter)
 private:
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_need_relu();
  void clear_has_need_relu();
  void set_has_relu_at_top();
  void clear_has_relu_at_top();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter > inception_column_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool need_relu_;
  bool relu_at_top_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementHingeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ElementHingeLossParameter) */ {
 public:
  ElementHingeLossParameter();
  virtual ~ElementHingeLossParameter();

  ElementHingeLossParameter(const ElementHingeLossParameter& from);

  inline ElementHingeLossParameter& operator=(const ElementHingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementHingeLossParameter& default_instance();

  static inline const ElementHingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const ElementHingeLossParameter*>(
               &_ElementHingeLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(ElementHingeLossParameter* other);

  // implements Message ----------------------------------------------

  inline ElementHingeLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ElementHingeLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ElementHingeLossParameter& from);
  void MergeFrom(const ElementHingeLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ElementHingeLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ElementHingeLossParameter_Norm Norm;
  static const Norm L1 =
    ElementHingeLossParameter_Norm_L1;
  static const Norm L2 =
    ElementHingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return ElementHingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    ElementHingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    ElementHingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    ElementHingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return ElementHingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return ElementHingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return ElementHingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool scale_loss = 2 [default = false];
  bool has_scale_loss() const;
  void clear_scale_loss();
  static const int kScaleLossFieldNumber = 2;
  bool scale_loss() const;
  void set_scale_loss(bool value);

  // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  ::caffe::ElementHingeLossParameter_Norm norm() const;
  void set_norm(::caffe::ElementHingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.ElementHingeLossParameter)
 private:
  void set_has_norm();
  void clear_has_norm();
  void set_has_scale_loss();
  void clear_has_scale_loss();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool scale_loss_;
  int norm_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockPackingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlockPackingParameter) */ {
 public:
  BlockPackingParameter();
  virtual ~BlockPackingParameter();

  BlockPackingParameter(const BlockPackingParameter& from);

  inline BlockPackingParameter& operator=(const BlockPackingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPackingParameter& default_instance();

  static inline const BlockPackingParameter* internal_default_instance() {
    return reinterpret_cast<const BlockPackingParameter*>(
               &_BlockPackingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(BlockPackingParameter* other);

  // implements Message ----------------------------------------------

  inline BlockPackingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockPackingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockPackingParameter& from);
  void MergeFrom(const BlockPackingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockPackingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float roi_star_percent = 10 [default = 0];
  bool has_roi_star_percent() const;
  void clear_roi_star_percent();
  static const int kRoiStarPercentFieldNumber = 10;
  float roi_star_percent() const;
  void set_roi_star_percent(float value);

  // optional uint32 pad_h = 7 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 7;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 8 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 8;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional float roi_height_percent = 11 [default = 1];
  bool has_roi_height_percent() const;
  void clear_roi_height_percent();
  static const int kRoiHeightPercentFieldNumber = 11;
  float roi_height_percent() const;
  void set_roi_height_percent(float value);

  // optional uint32 max_stride = 6 [default = 8];
  bool has_max_stride() const;
  void clear_max_stride();
  static const int kMaxStrideFieldNumber = 6;
  ::google::protobuf::uint32 max_stride() const;
  void set_max_stride(::google::protobuf::uint32 value);

  // optional uint32 max_block_size = 9 [default = 500];
  bool has_max_block_size() const;
  void clear_max_block_size();
  static const int kMaxBlockSizeFieldNumber = 9;
  ::google::protobuf::uint32 max_block_size() const;
  void set_max_block_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlockPackingParameter)
 private:
  void set_has_max_stride();
  void clear_has_max_stride();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_max_block_size();
  void clear_has_max_block_size();
  void set_has_roi_star_percent();
  void clear_has_roi_star_percent();
  void set_has_roi_height_percent();
  void clear_has_roi_height_percent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float roi_star_percent_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  float roi_height_percent_;
  ::google::protobuf::uint32 max_stride_;
  ::google::protobuf::uint32 max_block_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PyramidDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PyramidDataParameter) */ {
 public:
  PyramidDataParameter();
  virtual ~PyramidDataParameter();

  PyramidDataParameter(const PyramidDataParameter& from);

  inline PyramidDataParameter& operator=(const PyramidDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PyramidDataParameter& default_instance();

  static inline const PyramidDataParameter* internal_default_instance() {
    return reinterpret_cast<const PyramidDataParameter*>(
               &_PyramidDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(PyramidDataParameter* other);

  // implements Message ----------------------------------------------

  inline PyramidDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PyramidDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PyramidDataParameter& from);
  void MergeFrom(const PyramidDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PyramidDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float scales = 28;
  int scales_size() const;
  void clear_scales();
  static const int kScalesFieldNumber = 28;
  float scales(int index) const;
  void set_scales(int index, float value);
  void add_scales(float value);
  const ::google::protobuf::RepeatedField< float >&
      scales() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scales();

  // optional string image_list_file = 1;
  bool has_image_list_file() const;
  void clear_image_list_file();
  static const int kImageListFileFieldNumber = 1;
  const ::std::string& image_list_file() const;
  void set_image_list_file(const ::std::string& value);
  #if LANG_CXX11
  void set_image_list_file(::std::string&& value);
  #endif
  void set_image_list_file(const char* value);
  void set_image_list_file(const char* value, size_t size);
  ::std::string* mutable_image_list_file();
  ::std::string* release_image_list_file();
  void set_allocated_image_list_file(::std::string* image_list_file);

  // optional string image_folder = 2;
  bool has_image_folder() const;
  void clear_image_folder();
  static const int kImageFolderFieldNumber = 2;
  const ::std::string& image_folder() const;
  void set_image_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_image_folder(::std::string&& value);
  #endif
  void set_image_folder(const char* value);
  void set_image_folder(const char* value, size_t size);
  ::std::string* mutable_image_folder();
  ::std::string* release_image_folder();
  void set_allocated_image_folder(::std::string* image_folder);

  // optional string video_file = 116;
  bool has_video_file() const;
  void clear_video_file();
  static const int kVideoFileFieldNumber = 116;
  const ::std::string& video_file() const;
  void set_video_file(const ::std::string& value);
  #if LANG_CXX11
  void set_video_file(::std::string&& value);
  #endif
  void set_video_file(const char* value);
  void set_video_file(const char* value, size_t size);
  ::std::string* mutable_video_file();
  ::std::string* release_video_file();
  void set_allocated_video_file(::std::string* video_file);

  // optional string list_file = 117;
  bool has_list_file() const;
  void clear_list_file();
  static const int kListFileFieldNumber = 117;
  const ::std::string& list_file() const;
  void set_list_file(const ::std::string& value);
  #if LANG_CXX11
  void set_list_file(::std::string&& value);
  #endif
  void set_list_file(const char* value);
  void set_list_file(const char* value, size_t size);
  ::std::string* mutable_list_file();
  ::std::string* release_list_file();
  void set_allocated_list_file(::std::string* list_file);

  // optional .caffe.BlockPackingParameter block_packing_param = 6;
  bool has_block_packing_param() const;
  void clear_block_packing_param();
  static const int kBlockPackingParamFieldNumber = 6;
  const ::caffe::BlockPackingParameter& block_packing_param() const;
  ::caffe::BlockPackingParameter* mutable_block_packing_param();
  ::caffe::BlockPackingParameter* release_block_packing_param();
  void set_allocated_block_packing_param(::caffe::BlockPackingParameter* block_packing_param);

  // optional float mean_r = 7 [default = 0];
  bool has_mean_r() const;
  void clear_mean_r();
  static const int kMeanRFieldNumber = 7;
  float mean_r() const;
  void set_mean_r(float value);

  // optional float mean_g = 8 [default = 0];
  bool has_mean_g() const;
  void clear_mean_g();
  static const int kMeanGFieldNumber = 8;
  float mean_g() const;
  void set_mean_g(float value);

  // optional float mean_b = 9 [default = 0];
  bool has_mean_b() const;
  void clear_mean_b();
  static const int kMeanBFieldNumber = 9;
  float mean_b() const;
  void set_mean_b(float value);

  // optional uint32 heat_map_a = 10 [default = 0];
  bool has_heat_map_a() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 10;
  ::google::protobuf::uint32 heat_map_a() const;
  void set_heat_map_a(::google::protobuf::uint32 value);

  // optional uint32 heat_map_b = 11 [default = 0];
  bool has_heat_map_b() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 11;
  ::google::protobuf::uint32 heat_map_b() const;
  void set_heat_map_b(::google::protobuf::uint32 value);

  // optional float mean2_r = 21 [default = 0];
  bool has_mean2_r() const;
  void clear_mean2_r();
  static const int kMean2RFieldNumber = 21;
  float mean2_r() const;
  void set_mean2_r(float value);

  // optional float mean2_g = 22 [default = 0];
  bool has_mean2_g() const;
  void clear_mean2_g();
  static const int kMean2GFieldNumber = 22;
  float mean2_g() const;
  void set_mean2_g(float value);

  // optional float mean2_b = 23 [default = 0];
  bool has_mean2_b() const;
  void clear_mean2_b();
  static const int kMean2BFieldNumber = 23;
  float mean2_b() const;
  void set_mean2_b(float value);

  // optional bool pic_print = 120 [default = false];
  bool has_pic_print() const;
  void clear_pic_print();
  static const int kPicPrintFieldNumber = 120;
  bool pic_print() const;
  void set_pic_print(bool value);

  // optional bool show_time = 121 [default = false];
  bool has_show_time() const;
  void clear_show_time();
  static const int kShowTimeFieldNumber = 121;
  bool show_time() const;
  void set_show_time(bool value);

  // optional bool scale_from_annotation = 14 [default = false];
  bool has_scale_from_annotation() const;
  void clear_scale_from_annotation();
  static const int kScaleFromAnnotationFieldNumber = 14;
  bool scale_from_annotation() const;
  void set_scale_from_annotation(bool value);

  // optional bool shuffle = 13 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 13;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional bool is_img_pair = 24 [default = false];
  bool has_is_img_pair() const;
  void clear_is_img_pair();
  static const int kIsImgPairFieldNumber = 24;
  bool is_img_pair() const;
  void set_is_img_pair(bool value);

  // optional bool use_video = 115 [default = false];
  bool has_use_video() const;
  void clear_use_video();
  static const int kUseVideoFieldNumber = 115;
  bool use_video() const;
  void set_use_video(bool value);

  // optional uint32 device = 118 [default = 0];
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 118;
  ::google::protobuf::uint32 device() const;
  void set_device(::google::protobuf::uint32 value);

  // optional float scale_start = 3 [default = -2];
  bool has_scale_start() const;
  void clear_scale_start();
  static const int kScaleStartFieldNumber = 3;
  float scale_start() const;
  void set_scale_start(float value);

  // optional float scale_end = 4 [default = 1];
  bool has_scale_end() const;
  void clear_scale_end();
  static const int kScaleEndFieldNumber = 4;
  float scale_end() const;
  void set_scale_end(float value);

  // optional float scale_step = 5 [default = 0.3];
  bool has_scale_step() const;
  void clear_scale_step();
  static const int kScaleStepFieldNumber = 5;
  float scale_step() const;
  void set_scale_step(float value);

  // optional uint32 max_block_num = 12 [default = 4];
  bool has_max_block_num() const;
  void clear_max_block_num();
  static const int kMaxBlockNumFieldNumber = 12;
  ::google::protobuf::uint32 max_block_num() const;
  void set_max_block_num(::google::protobuf::uint32 value);

  // optional bool rgb = 119 [default = true];
  bool has_rgb() const;
  void clear_rgb();
  static const int kRgbFieldNumber = 119;
  bool rgb() const;
  void set_rgb(bool value);

  // optional float resize_scale = 122 [default = 1];
  bool has_resize_scale() const;
  void clear_resize_scale();
  static const int kResizeScaleFieldNumber = 122;
  float resize_scale() const;
  void set_resize_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.PyramidDataParameter)
 private:
  void set_has_image_list_file();
  void clear_has_image_list_file();
  void set_has_image_folder();
  void clear_has_image_folder();
  void set_has_scale_start();
  void clear_has_scale_start();
  void set_has_scale_end();
  void clear_has_scale_end();
  void set_has_scale_step();
  void clear_has_scale_step();
  void set_has_scale_from_annotation();
  void clear_has_scale_from_annotation();
  void set_has_block_packing_param();
  void clear_has_block_packing_param();
  void set_has_heat_map_a();
  void clear_has_heat_map_a();
  void set_has_heat_map_b();
  void clear_has_heat_map_b();
  void set_has_mean_r();
  void clear_has_mean_r();
  void set_has_mean_g();
  void clear_has_mean_g();
  void set_has_mean_b();
  void clear_has_mean_b();
  void set_has_max_block_num();
  void clear_has_max_block_num();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_mean2_r();
  void clear_has_mean2_r();
  void set_has_mean2_g();
  void clear_has_mean2_g();
  void set_has_mean2_b();
  void clear_has_mean2_b();
  void set_has_is_img_pair();
  void clear_has_is_img_pair();
  void set_has_use_video();
  void clear_has_use_video();
  void set_has_video_file();
  void clear_has_video_file();
  void set_has_list_file();
  void clear_has_list_file();
  void set_has_device();
  void clear_has_device();
  void set_has_rgb();
  void clear_has_rgb();
  void set_has_pic_print();
  void clear_has_pic_print();
  void set_has_show_time();
  void clear_has_show_time();
  void set_has_resize_scale();
  void clear_has_resize_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > scales_;
  ::google::protobuf::internal::ArenaStringPtr image_list_file_;
  ::google::protobuf::internal::ArenaStringPtr image_folder_;
  ::google::protobuf::internal::ArenaStringPtr video_file_;
  ::google::protobuf::internal::ArenaStringPtr list_file_;
  ::caffe::BlockPackingParameter* block_packing_param_;
  float mean_r_;
  float mean_g_;
  float mean_b_;
  ::google::protobuf::uint32 heat_map_a_;
  ::google::protobuf::uint32 heat_map_b_;
  float mean2_r_;
  float mean2_g_;
  float mean2_b_;
  bool pic_print_;
  bool show_time_;
  bool scale_from_annotation_;
  bool shuffle_;
  bool is_img_pair_;
  bool use_video_;
  ::google::protobuf::uint32 device_;
  float scale_start_;
  float scale_end_;
  float scale_step_;
  ::google::protobuf::uint32 max_block_num_;
  bool rgb_;
  float resize_scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NMSParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NMSParameter) */ {
 public:
  NMSParameter();
  virtual ~NMSParameter();

  NMSParameter(const NMSParameter& from);

  inline NMSParameter& operator=(const NMSParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NMSParameter& default_instance();

  static inline const NMSParameter* internal_default_instance() {
    return reinterpret_cast<const NMSParameter*>(
               &_NMSParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(NMSParameter* other);

  // implements Message ----------------------------------------------

  inline NMSParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NMSParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NMSParameter& from);
  void MergeFrom(const NMSParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NMSParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool add_score = 4 [default = false];
  bool has_add_score() const;
  void clear_add_score();
  static const int kAddScoreFieldNumber = 4;
  bool add_score() const;
  void set_add_score(bool value);

  // optional uint32 top_n = 3 [default = 100];
  bool has_top_n() const;
  void clear_top_n();
  static const int kTopNFieldNumber = 3;
  ::google::protobuf::uint32 top_n() const;
  void set_top_n(::google::protobuf::uint32 value);

  // optional bool need_nms = 1 [default = true];
  bool has_need_nms() const;
  void clear_need_nms();
  static const int kNeedNmsFieldNumber = 1;
  bool need_nms() const;
  void set_need_nms(bool value);

  // optional float overlap_ratio = 2 [default = 0.5];
  bool has_overlap_ratio() const;
  void clear_overlap_ratio();
  static const int kOverlapRatioFieldNumber = 2;
  float overlap_ratio() const;
  void set_overlap_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.NMSParameter)
 private:
  void set_has_need_nms();
  void clear_has_need_nms();
  void set_has_overlap_ratio();
  void clear_has_overlap_ratio();
  void set_has_top_n();
  void clear_has_top_n();
  void set_has_add_score();
  void clear_has_add_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool add_score_;
  ::google::protobuf::uint32 top_n_;
  bool need_nms_;
  float overlap_ratio_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectionOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionOutputParameter) */ {
 public:
  DetectionOutputParameter();
  virtual ~DetectionOutputParameter();

  DetectionOutputParameter(const DetectionOutputParameter& from);

  inline DetectionOutputParameter& operator=(const DetectionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionOutputParameter& default_instance();

  static inline const DetectionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputParameter*>(
               &_DetectionOutputParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(DetectionOutputParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionOutputParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DetectionOutputParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DetectionOutputParameter& from);
  void MergeFrom(const DetectionOutputParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DetectionOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string class_name_list = 4;
  int class_name_list_size() const;
  void clear_class_name_list();
  static const int kClassNameListFieldNumber = 4;
  const ::std::string& class_name_list(int index) const;
  ::std::string* mutable_class_name_list(int index);
  void set_class_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_class_name_list(int index, ::std::string&& value);
  #endif
  void set_class_name_list(int index, const char* value);
  void set_class_name_list(int index, const char* value, size_t size);
  ::std::string* add_class_name_list();
  void add_class_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_class_name_list(::std::string&& value);
  #endif
  void add_class_name_list(const char* value);
  void add_class_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_name_list();

  // repeated float mean_w = 10;
  int mean_w_size() const;
  void clear_mean_w();
  static const int kMeanWFieldNumber = 10;
  float mean_w(int index) const;
  void set_mean_w(int index, float value);
  void add_mean_w(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_w() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_w();

  // repeated float mean_h = 11;
  int mean_h_size() const;
  void clear_mean_h();
  static const int kMeanHFieldNumber = 11;
  float mean_h(int index) const;
  void set_mean_h(int index, float value);
  void add_mean_h(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_h() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_h();

  // repeated float mean_l = 12;
  int mean_l_size() const;
  void clear_mean_l();
  static const int kMeanLFieldNumber = 12;
  float mean_l(int index) const;
  void set_mean_l(int index, float value);
  void add_mean_l(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_l() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_l();

  // repeated uint32 class_inds = 13;
  int class_inds_size() const;
  void clear_class_inds();
  static const int kClassIndsFieldNumber = 13;
  ::google::protobuf::uint32 class_inds(int index) const;
  void set_class_inds(int index, ::google::protobuf::uint32 value);
  void add_class_inds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      class_inds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_class_inds();

  // repeated uint32 dim_inds = 14;
  int dim_inds_size() const;
  void clear_dim_inds();
  static const int kDimIndsFieldNumber = 14;
  ::google::protobuf::uint32 dim_inds(int index) const;
  void set_dim_inds(int index, ::google::protobuf::uint32 value);
  void add_dim_inds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dim_inds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dim_inds();

  // repeated uint32 pars_inds = 15;
  int pars_inds_size() const;
  void clear_pars_inds();
  static const int kParsIndsFieldNumber = 15;
  ::google::protobuf::uint32 pars_inds(int index) const;
  void set_pars_inds(int index, ::google::protobuf::uint32 value);
  void add_pars_inds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pars_inds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pars_inds();

  // repeated uint32 angle_inds = 16;
  int angle_inds_size() const;
  void clear_angle_inds();
  static const int kAngleIndsFieldNumber = 16;
  ::google::protobuf::uint32 angle_inds(int index) const;
  void set_angle_inds(int index, ::google::protobuf::uint32 value);
  void add_angle_inds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      angle_inds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_angle_inds();

  // repeated uint32 pts8_inds = 17;
  int pts8_inds_size() const;
  void clear_pts8_inds();
  static const int kPts8IndsFieldNumber = 17;
  ::google::protobuf::uint32 pts8_inds(int index) const;
  void set_pts8_inds(int index, ::google::protobuf::uint32 value);
  void add_pts8_inds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pts8_inds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pts8_inds();

  // repeated uint32 box2d_inds = 18;
  int box2d_inds_size() const;
  void clear_box2d_inds();
  static const int kBox2DIndsFieldNumber = 18;
  ::google::protobuf::uint32 box2d_inds(int index) const;
  void set_box2d_inds(int index, ::google::protobuf::uint32 value);
  void add_box2d_inds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      box2d_inds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_box2d_inds();

  // repeated float new_class_thr = 20;
  int new_class_thr_size() const;
  void clear_new_class_thr();
  static const int kNewClassThrFieldNumber = 20;
  float new_class_thr(int index) const;
  void set_new_class_thr(int index, float value);
  void add_new_class_thr(float value);
  const ::google::protobuf::RepeatedField< float >&
      new_class_thr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_new_class_thr();

  // repeated float new_class_overlap_ratio = 21;
  int new_class_overlap_ratio_size() const;
  void clear_new_class_overlap_ratio();
  static const int kNewClassOverlapRatioFieldNumber = 21;
  float new_class_overlap_ratio(int index) const;
  void set_new_class_overlap_ratio(int index, float value);
  void add_new_class_overlap_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      new_class_overlap_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_new_class_overlap_ratio();

  // optional .caffe.NMSParameter nms_param = 1;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 1;
  const ::caffe::NMSParameter& nms_param() const;
  ::caffe::NMSParameter* mutable_nms_param();
  ::caffe::NMSParameter* release_nms_param();
  void set_allocated_nms_param(::caffe::NMSParameter* nms_param);

  // optional bool all_pos = 7 [default = false];
  bool has_all_pos() const;
  void clear_all_pos();
  static const int kAllPosFieldNumber = 7;
  bool all_pos() const;
  void set_all_pos(bool value);

  // optional bool group_veh = 19 [default = false];
  bool has_group_veh() const;
  void clear_group_veh();
  static const int kGroupVehFieldNumber = 19;
  bool group_veh() const;
  void set_group_veh(bool value);

  // optional uint32 shallow_track_step = 22 [default = 0];
  bool has_shallow_track_step() const;
  void clear_shallow_track_step();
  static const int kShallowTrackStepFieldNumber = 22;
  ::google::protobuf::uint32 shallow_track_step() const;
  void set_shallow_track_step(::google::protobuf::uint32 value);

  // optional uint32 step = 9 [default = 1];
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 9;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // optional float threshold = 2 [default = 0.5];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  float threshold() const;
  void set_threshold(float value);

  // optional uint32 channel_per_scale = 3 [default = 5];
  bool has_channel_per_scale() const;
  void clear_channel_per_scale();
  static const int kChannelPerScaleFieldNumber = 3;
  ::google::protobuf::uint32 channel_per_scale() const;
  void set_channel_per_scale(::google::protobuf::uint32 value);

  // optional uint32 num_class = 5 [default = 1];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 5;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional bool refine_out_of_map_bbox = 6 [default = true];
  bool has_refine_out_of_map_bbox() const;
  void clear_refine_out_of_map_bbox();
  static const int kRefineOutOfMapBboxFieldNumber = 6;
  bool refine_out_of_map_bbox() const;
  void set_refine_out_of_map_bbox(bool value);

  // @@protoc_insertion_point(class_scope:caffe.DetectionOutputParameter)
 private:
  void set_has_nms_param();
  void clear_has_nms_param();
  void set_has_threshold();
  void clear_has_threshold();
  void set_has_channel_per_scale();
  void clear_has_channel_per_scale();
  void set_has_num_class();
  void clear_has_num_class();
  void set_has_refine_out_of_map_bbox();
  void clear_has_refine_out_of_map_bbox();
  void set_has_all_pos();
  void clear_has_all_pos();
  void set_has_step();
  void clear_has_step();
  void set_has_group_veh();
  void clear_has_group_veh();
  void set_has_shallow_track_step();
  void clear_has_shallow_track_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_name_list_;
  ::google::protobuf::RepeatedField< float > mean_w_;
  ::google::protobuf::RepeatedField< float > mean_h_;
  ::google::protobuf::RepeatedField< float > mean_l_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > class_inds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dim_inds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pars_inds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > angle_inds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pts8_inds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > box2d_inds_;
  ::google::protobuf::RepeatedField< float > new_class_thr_;
  ::google::protobuf::RepeatedField< float > new_class_overlap_ratio_;
  ::caffe::NMSParameter* nms_param_;
  bool all_pos_;
  bool group_veh_;
  ::google::protobuf::uint32 shallow_track_step_;
  ::google::protobuf::uint32 step_;
  float threshold_;
  ::google::protobuf::uint32 channel_per_scale_;
  ::google::protobuf::uint32 num_class_;
  bool refine_out_of_map_bbox_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROIDataParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROIDataParam) */ {
 public:
  ROIDataParam();
  virtual ~ROIDataParam();

  ROIDataParam(const ROIDataParam& from);

  inline ROIDataParam& operator=(const ROIDataParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIDataParam& default_instance();

  static inline const ROIDataParam* internal_default_instance() {
    return reinterpret_cast<const ROIDataParam*>(
               &_ROIDataParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(ROIDataParam* other);

  // implements Message ----------------------------------------------

  inline ROIDataParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ROIDataParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROIDataParam& from);
  void MergeFrom(const ROIDataParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROIDataParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool need_balance = 4 [default = false];
  bool has_need_balance() const;
  void clear_need_balance();
  static const int kNeedBalanceFieldNumber = 4;
  bool need_balance() const;
  void set_need_balance(bool value);

  // optional float pos_iou_ratio = 1 [default = 0.7];
  bool has_pos_iou_ratio() const;
  void clear_pos_iou_ratio();
  static const int kPosIouRatioFieldNumber = 1;
  float pos_iou_ratio() const;
  void set_pos_iou_ratio(float value);

  // optional float neg_iou_ratio = 2 [default = 0.5];
  bool has_neg_iou_ratio() const;
  void clear_neg_iou_ratio();
  static const int kNegIouRatioFieldNumber = 2;
  float neg_iou_ratio() const;
  void set_neg_iou_ratio(float value);

  // optional uint32 num_class = 3 [default = 1];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 3;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional float neg_ratio = 5 [default = 0.75];
  bool has_neg_ratio() const;
  void clear_neg_ratio();
  static const int kNegRatioFieldNumber = 5;
  float neg_ratio() const;
  void set_neg_ratio(float value);

  // optional float hard_ratio = 6 [default = 1];
  bool has_hard_ratio() const;
  void clear_hard_ratio();
  static const int kHardRatioFieldNumber = 6;
  float hard_ratio() const;
  void set_hard_ratio(float value);

  // optional float hard_threshold = 7 [default = 0.1];
  bool has_hard_threshold() const;
  void clear_hard_threshold();
  static const int kHardThresholdFieldNumber = 7;
  float hard_threshold() const;
  void set_hard_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ROIDataParam)
 private:
  void set_has_pos_iou_ratio();
  void clear_has_pos_iou_ratio();
  void set_has_neg_iou_ratio();
  void clear_has_neg_iou_ratio();
  void set_has_num_class();
  void clear_has_num_class();
  void set_has_need_balance();
  void clear_has_need_balance();
  void set_has_neg_ratio();
  void clear_has_neg_ratio();
  void set_has_hard_ratio();
  void clear_has_hard_ratio();
  void set_has_hard_threshold();
  void clear_has_hard_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool need_balance_;
  float pos_iou_ratio_;
  float neg_iou_ratio_;
  ::google::protobuf::uint32 num_class_;
  float neg_ratio_;
  float hard_ratio_;
  float hard_threshold_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROI2HeatMapParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROI2HeatMapParam) */ {
 public:
  ROI2HeatMapParam();
  virtual ~ROI2HeatMapParam();

  ROI2HeatMapParam(const ROI2HeatMapParam& from);

  inline ROI2HeatMapParam& operator=(const ROI2HeatMapParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROI2HeatMapParam& default_instance();

  static inline const ROI2HeatMapParam* internal_default_instance() {
    return reinterpret_cast<const ROI2HeatMapParam*>(
               &_ROI2HeatMapParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(ROI2HeatMapParam* other);

  // implements Message ----------------------------------------------

  inline ROI2HeatMapParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ROI2HeatMapParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROI2HeatMapParam& from);
  void MergeFrom(const ROI2HeatMapParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROI2HeatMapParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ROI2HeatMapParam_LabelType LabelType;
  static const LabelType OneDim =
    ROI2HeatMapParam_LabelType_OneDim;
  static const LabelType NPlus1 =
    ROI2HeatMapParam_LabelType_NPlus1;
  static const LabelType NDim =
    ROI2HeatMapParam_LabelType_NDim;
  static inline bool LabelType_IsValid(int value) {
    return ROI2HeatMapParam_LabelType_IsValid(value);
  }
  static const LabelType LabelType_MIN =
    ROI2HeatMapParam_LabelType_LabelType_MIN;
  static const LabelType LabelType_MAX =
    ROI2HeatMapParam_LabelType_LabelType_MAX;
  static const int LabelType_ARRAYSIZE =
    ROI2HeatMapParam_LabelType_LabelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LabelType_descriptor() {
    return ROI2HeatMapParam_LabelType_descriptor();
  }
  static inline const ::std::string& LabelType_Name(LabelType value) {
    return ROI2HeatMapParam_LabelType_Name(value);
  }
  static inline bool LabelType_Parse(const ::std::string& name,
      LabelType* value) {
    return ROI2HeatMapParam_LabelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 map_w = 2;
  bool has_map_w() const;
  void clear_map_w();
  static const int kMapWFieldNumber = 2;
  ::google::protobuf::uint32 map_w() const;
  void set_map_w(::google::protobuf::uint32 value);

  // optional uint32 map_h = 3;
  bool has_map_h() const;
  void clear_map_h();
  static const int kMapHFieldNumber = 3;
  ::google::protobuf::uint32 map_h() const;
  void set_map_h(::google::protobuf::uint32 value);

  // optional uint32 map_num = 4;
  bool has_map_num() const;
  void clear_map_num();
  static const int kMapNumFieldNumber = 4;
  ::google::protobuf::uint32 map_num() const;
  void set_map_num(::google::protobuf::uint32 value);

  // optional uint32 num_class = 1 [default = 1];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 1;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
  bool has_label_type() const;
  void clear_label_type();
  static const int kLabelTypeFieldNumber = 5;
  ::caffe::ROI2HeatMapParam_LabelType label_type() const;
  void set_label_type(::caffe::ROI2HeatMapParam_LabelType value);

  // @@protoc_insertion_point(class_scope:caffe.ROI2HeatMapParam)
 private:
  void set_has_num_class();
  void clear_has_num_class();
  void set_has_map_w();
  void clear_has_map_w();
  void set_has_map_h();
  void clear_has_map_h();
  void set_has_map_num();
  void clear_has_map_num();
  void set_has_label_type();
  void clear_has_label_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 map_w_;
  ::google::protobuf::uint32 map_h_;
  ::google::protobuf::uint32 map_num_;
  ::google::protobuf::uint32 num_class_;
  int label_type_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROIRefineParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROIRefineParam) */ {
 public:
  ROIRefineParam();
  virtual ~ROIRefineParam();

  ROIRefineParam(const ROIRefineParam& from);

  inline ROIRefineParam& operator=(const ROIRefineParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIRefineParam& default_instance();

  static inline const ROIRefineParam* internal_default_instance() {
    return reinterpret_cast<const ROIRefineParam*>(
               &_ROIRefineParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(ROIRefineParam* other);

  // implements Message ----------------------------------------------

  inline ROIRefineParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ROIRefineParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROIRefineParam& from);
  void MergeFrom(const ROIRefineParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROIRefineParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ROIRefineParam_LabelType LabelType;
  static const LabelType OneDim =
    ROIRefineParam_LabelType_OneDim;
  static const LabelType NPlus1 =
    ROIRefineParam_LabelType_NPlus1;
  static const LabelType NDim =
    ROIRefineParam_LabelType_NDim;
  static inline bool LabelType_IsValid(int value) {
    return ROIRefineParam_LabelType_IsValid(value);
  }
  static const LabelType LabelType_MIN =
    ROIRefineParam_LabelType_LabelType_MIN;
  static const LabelType LabelType_MAX =
    ROIRefineParam_LabelType_LabelType_MAX;
  static const int LabelType_ARRAYSIZE =
    ROIRefineParam_LabelType_LabelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LabelType_descriptor() {
    return ROIRefineParam_LabelType_descriptor();
  }
  static inline const ::std::string& LabelType_Name(LabelType value) {
    return ROIRefineParam_LabelType_Name(value);
  }
  static inline bool LabelType_Parse(const ::std::string& name,
      LabelType* value) {
    return ROIRefineParam_LabelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_class = 1 [default = 1];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 1;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
  bool has_label_type() const;
  void clear_label_type();
  static const int kLabelTypeFieldNumber = 5;
  ::caffe::ROIRefineParam_LabelType label_type() const;
  void set_label_type(::caffe::ROIRefineParam_LabelType value);

  // @@protoc_insertion_point(class_scope:caffe.ROIRefineParam)
 private:
  void set_has_num_class();
  void clear_has_num_class();
  void set_has_label_type();
  void clear_has_label_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_class_;
  int label_type_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROIShowParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROIShowParam) */ {
 public:
  ROIShowParam();
  virtual ~ROIShowParam();

  ROIShowParam(const ROIShowParam& from);

  inline ROIShowParam& operator=(const ROIShowParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIShowParam& default_instance();

  static inline const ROIShowParam* internal_default_instance() {
    return reinterpret_cast<const ROIShowParam*>(
               &_ROIShowParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(ROIShowParam* other);

  // implements Message ----------------------------------------------

  inline ROIShowParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ROIShowParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROIShowParam& from);
  void MergeFrom(const ROIShowParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROIShowParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_input_heatmap = 1 [default = false];
  bool has_is_input_heatmap() const;
  void clear_is_input_heatmap();
  static const int kIsInputHeatmapFieldNumber = 1;
  bool is_input_heatmap() const;
  void set_is_input_heatmap(bool value);

  // optional float heatmap_threshold = 2 [default = 0];
  bool has_heatmap_threshold() const;
  void clear_heatmap_threshold();
  static const int kHeatmapThresholdFieldNumber = 2;
  float heatmap_threshold() const;
  void set_heatmap_threshold(float value);

  // optional uint32 heat_map_a = 5;
  bool has_heat_map_a() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 5;
  ::google::protobuf::uint32 heat_map_a() const;
  void set_heat_map_a(::google::protobuf::uint32 value);

  // optional uint32 heat_map_b = 6;
  bool has_heat_map_b() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 6;
  ::google::protobuf::uint32 heat_map_b() const;
  void set_heat_map_b(::google::protobuf::uint32 value);

  // optional float mean_r = 7 [default = 0];
  bool has_mean_r() const;
  void clear_mean_r();
  static const int kMeanRFieldNumber = 7;
  float mean_r() const;
  void set_mean_r(float value);

  // optional float mean_g = 8 [default = 0];
  bool has_mean_g() const;
  void clear_mean_g();
  static const int kMeanGFieldNumber = 8;
  float mean_g() const;
  void set_mean_g(float value);

  // optional float mean_b = 9 [default = 0];
  bool has_mean_b() const;
  void clear_mean_b();
  static const int kMeanBFieldNumber = 9;
  float mean_b() const;
  void set_mean_b(float value);

  // @@protoc_insertion_point(class_scope:caffe.ROIShowParam)
 private:
  void set_has_is_input_heatmap();
  void clear_has_is_input_heatmap();
  void set_has_heatmap_threshold();
  void clear_has_heatmap_threshold();
  void set_has_heat_map_a();
  void clear_has_heat_map_a();
  void set_has_heat_map_b();
  void clear_has_heat_map_b();
  void set_has_mean_r();
  void clear_has_mean_r();
  void set_has_mean_g();
  void clear_has_mean_g();
  void set_has_mean_b();
  void clear_has_mean_b();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool is_input_heatmap_;
  float heatmap_threshold_;
  ::google::protobuf::uint32 heat_map_a_;
  ::google::protobuf::uint32 heat_map_b_;
  float mean_r_;
  float mean_g_;
  float mean_b_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreviousStageParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PreviousStageParameter) */ {
 public:
  PreviousStageParameter();
  virtual ~PreviousStageParameter();

  PreviousStageParameter(const PreviousStageParameter& from);

  inline PreviousStageParameter& operator=(const PreviousStageParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PreviousStageParameter& default_instance();

  static inline const PreviousStageParameter* internal_default_instance() {
    return reinterpret_cast<const PreviousStageParameter*>(
               &_PreviousStageParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(PreviousStageParameter* other);

  // implements Message ----------------------------------------------

  inline PreviousStageParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PreviousStageParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreviousStageParameter& from);
  void MergeFrom(const PreviousStageParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreviousStageParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string net_prototxt = 1;
  bool has_net_prototxt() const;
  void clear_net_prototxt();
  static const int kNetPrototxtFieldNumber = 1;
  const ::std::string& net_prototxt() const;
  void set_net_prototxt(const ::std::string& value);
  #if LANG_CXX11
  void set_net_prototxt(::std::string&& value);
  #endif
  void set_net_prototxt(const char* value);
  void set_net_prototxt(const char* value, size_t size);
  ::std::string* mutable_net_prototxt();
  ::std::string* release_net_prototxt();
  void set_allocated_net_prototxt(::std::string* net_prototxt);

  // optional string net_param_file = 2;
  bool has_net_param_file() const;
  void clear_net_param_file();
  static const int kNetParamFileFieldNumber = 2;
  const ::std::string& net_param_file() const;
  void set_net_param_file(const ::std::string& value);
  #if LANG_CXX11
  void set_net_param_file(::std::string&& value);
  #endif
  void set_net_param_file(const char* value);
  void set_net_param_file(const char* value, size_t size);
  ::std::string* mutable_net_param_file();
  ::std::string* release_net_param_file();
  void set_allocated_net_param_file(::std::string* net_param_file);

  // @@protoc_insertion_point(class_scope:caffe.PreviousStageParameter)
 private:
  void set_has_net_prototxt();
  void clear_has_net_prototxt();
  void set_has_net_param_file();
  void clear_has_net_param_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr net_prototxt_;
  ::google::protobuf::internal::ArenaStringPtr net_param_file_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CropParameter) */ {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  static inline const CropParameter* internal_default_instance() {
    return reinterpret_cast<const CropParameter*>(
               &_CropParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  inline CropParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  CropParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CropParameter_Type Type;
  static const Type CENTER =
    CropParameter_Type_CENTER;
  static const Type RANDOM =
    CropParameter_Type_RANDOM;
  static inline bool Type_IsValid(int value) {
    return CropParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CropParameter_Type_Type_MIN;
  static const Type Type_MAX =
    CropParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CropParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CropParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CropParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CropParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 crop_w = 2 [default = 0];
  bool has_crop_w() const;
  void clear_crop_w();
  static const int kCropWFieldNumber = 2;
  ::google::protobuf::uint32 crop_w() const;
  void set_crop_w(::google::protobuf::uint32 value);

  // optional uint32 crop_h = 3 [default = 0];
  bool has_crop_h() const;
  void clear_crop_h();
  static const int kCropHFieldNumber = 3;
  ::google::protobuf::uint32 crop_h() const;
  void set_crop_h(::google::protobuf::uint32 value);

  // optional bool print_info = 4 [default = false];
  bool has_print_info() const;
  void clear_print_info();
  static const int kPrintInfoFieldNumber = 4;
  bool print_info() const;
  void set_print_info(bool value);

  // optional .caffe.CropParameter.Type type = 1 [default = CENTER];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::caffe::CropParameter_Type type() const;
  void set_type(::caffe::CropParameter_Type value);

  // @@protoc_insertion_point(class_scope:caffe.CropParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_crop_w();
  void clear_has_crop_w();
  void set_has_crop_h();
  void clear_has_crop_h();
  void set_has_print_info();
  void clear_has_print_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 crop_w_;
  ::google::protobuf::uint32 crop_h_;
  bool print_info_;
  int type_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResampleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ResampleParameter) */ {
 public:
  ResampleParameter();
  virtual ~ResampleParameter();

  ResampleParameter(const ResampleParameter& from);

  inline ResampleParameter& operator=(const ResampleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResampleParameter& default_instance();

  static inline const ResampleParameter* internal_default_instance() {
    return reinterpret_cast<const ResampleParameter*>(
               &_ResampleParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(ResampleParameter* other);

  // implements Message ----------------------------------------------

  inline ResampleParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ResampleParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResampleParameter& from);
  void MergeFrom(const ResampleParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResampleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResampleParameter_ResampleType ResampleType;
  static const ResampleType NEAREST =
    ResampleParameter_ResampleType_NEAREST;
  static const ResampleType LINEAR =
    ResampleParameter_ResampleType_LINEAR;
  static const ResampleType CUBIC =
    ResampleParameter_ResampleType_CUBIC;
  static const ResampleType AREA =
    ResampleParameter_ResampleType_AREA;
  static inline bool ResampleType_IsValid(int value) {
    return ResampleParameter_ResampleType_IsValid(value);
  }
  static const ResampleType ResampleType_MIN =
    ResampleParameter_ResampleType_ResampleType_MIN;
  static const ResampleType ResampleType_MAX =
    ResampleParameter_ResampleType_ResampleType_MAX;
  static const int ResampleType_ARRAYSIZE =
    ResampleParameter_ResampleType_ResampleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResampleType_descriptor() {
    return ResampleParameter_ResampleType_descriptor();
  }
  static inline const ::std::string& ResampleType_Name(ResampleType value) {
    return ResampleParameter_ResampleType_Name(value);
  }
  static inline bool ResampleType_Parse(const ::std::string& name,
      ResampleType* value) {
    return ResampleParameter_ResampleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::caffe::ResampleParameter_ResampleType type() const;
  void set_type(::caffe::ResampleParameter_ResampleType value);

  // optional bool antialias = 4 [default = true];
  bool has_antialias() const;
  void clear_antialias();
  static const int kAntialiasFieldNumber = 4;
  bool antialias() const;
  void set_antialias(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ResampleParameter)
 private:
  void set_has_antialias();
  void clear_has_antialias();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  int type_;
  bool antialias_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenerateAnchorParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GenerateAnchorParameter) */ {
 public:
  GenerateAnchorParameter();
  virtual ~GenerateAnchorParameter();

  GenerateAnchorParameter(const GenerateAnchorParameter& from);

  inline GenerateAnchorParameter& operator=(const GenerateAnchorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenerateAnchorParameter& default_instance();

  static inline const GenerateAnchorParameter* internal_default_instance() {
    return reinterpret_cast<const GenerateAnchorParameter*>(
               &_GenerateAnchorParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(GenerateAnchorParameter* other);

  // implements Message ----------------------------------------------

  inline GenerateAnchorParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  GenerateAnchorParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GenerateAnchorParameter& from);
  void MergeFrom(const GenerateAnchorParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GenerateAnchorParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ratios = 2;
  int ratios_size() const;
  void clear_ratios();
  static const int kRatiosFieldNumber = 2;
  float ratios(int index) const;
  void set_ratios(int index, float value);
  void add_ratios(float value);
  const ::google::protobuf::RepeatedField< float >&
      ratios() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ratios();

  // repeated float scales = 3;
  int scales_size() const;
  void clear_scales();
  static const int kScalesFieldNumber = 3;
  float scales(int index) const;
  void set_scales(int index, float value);
  void add_scales(float value);
  const ::google::protobuf::RepeatedField< float >&
      scales() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scales();

  // repeated float anchor_width = 4;
  int anchor_width_size() const;
  void clear_anchor_width();
  static const int kAnchorWidthFieldNumber = 4;
  float anchor_width(int index) const;
  void set_anchor_width(int index, float value);
  void add_anchor_width(float value);
  const ::google::protobuf::RepeatedField< float >&
      anchor_width() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_anchor_width();

  // repeated float anchor_height = 5;
  int anchor_height_size() const;
  void clear_anchor_height();
  static const int kAnchorHeightFieldNumber = 5;
  float anchor_height(int index) const;
  void set_anchor_height(int index, float value);
  void add_anchor_height(float value);
  const ::google::protobuf::RepeatedField< float >&
      anchor_height() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_anchor_height();

  // repeated float anchor_x1 = 6;
  int anchor_x1_size() const;
  void clear_anchor_x1();
  static const int kAnchorX1FieldNumber = 6;
  float anchor_x1(int index) const;
  void set_anchor_x1(int index, float value);
  void add_anchor_x1(float value);
  const ::google::protobuf::RepeatedField< float >&
      anchor_x1() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_anchor_x1();

  // repeated float anchor_y1 = 7;
  int anchor_y1_size() const;
  void clear_anchor_y1();
  static const int kAnchorY1FieldNumber = 7;
  float anchor_y1(int index) const;
  void set_anchor_y1(int index, float value);
  void add_anchor_y1(float value);
  const ::google::protobuf::RepeatedField< float >&
      anchor_y1() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_anchor_y1();

  // repeated float anchor_x2 = 8;
  int anchor_x2_size() const;
  void clear_anchor_x2();
  static const int kAnchorX2FieldNumber = 8;
  float anchor_x2(int index) const;
  void set_anchor_x2(int index, float value);
  void add_anchor_x2(float value);
  const ::google::protobuf::RepeatedField< float >&
      anchor_x2() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_anchor_x2();

  // repeated float anchor_y2 = 9;
  int anchor_y2_size() const;
  void clear_anchor_y2();
  static const int kAnchorY2FieldNumber = 9;
  float anchor_y2(int index) const;
  void set_anchor_y2(int index, float value);
  void add_anchor_y2(float value);
  const ::google::protobuf::RepeatedField< float >&
      anchor_y2() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_anchor_y2();

  // optional float base_size = 1 [default = 16];
  bool has_base_size() const;
  void clear_base_size();
  static const int kBaseSizeFieldNumber = 1;
  float base_size() const;
  void set_base_size(float value);

  // optional bool zero_anchor_center = 10 [default = true];
  bool has_zero_anchor_center() const;
  void clear_zero_anchor_center();
  static const int kZeroAnchorCenterFieldNumber = 10;
  bool zero_anchor_center() const;
  void set_zero_anchor_center(bool value);

  // @@protoc_insertion_point(class_scope:caffe.GenerateAnchorParameter)
 private:
  void set_has_base_size();
  void clear_has_base_size();
  void set_has_zero_anchor_center();
  void clear_has_zero_anchor_center();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > ratios_;
  ::google::protobuf::RepeatedField< float > scales_;
  ::google::protobuf::RepeatedField< float > anchor_width_;
  ::google::protobuf::RepeatedField< float > anchor_height_;
  ::google::protobuf::RepeatedField< float > anchor_x1_;
  ::google::protobuf::RepeatedField< float > anchor_y1_;
  ::google::protobuf::RepeatedField< float > anchor_x2_;
  ::google::protobuf::RepeatedField< float > anchor_y2_;
  float base_size_;
  bool zero_anchor_center_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NMSSSDParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NMSSSDParameter) */ {
 public:
  NMSSSDParameter();
  virtual ~NMSSSDParameter();

  NMSSSDParameter(const NMSSSDParameter& from);

  inline NMSSSDParameter& operator=(const NMSSSDParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NMSSSDParameter& default_instance();

  static inline const NMSSSDParameter* internal_default_instance() {
    return reinterpret_cast<const NMSSSDParameter*>(
               &_NMSSSDParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(NMSSSDParameter* other);

  // implements Message ----------------------------------------------

  inline NMSSSDParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NMSSSDParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NMSSSDParameter& from);
  void MergeFrom(const NMSSSDParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NMSSSDParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float overlap_ratio = 2;
  int overlap_ratio_size() const;
  void clear_overlap_ratio();
  static const int kOverlapRatioFieldNumber = 2;
  float overlap_ratio(int index) const;
  void set_overlap_ratio(int index, float value);
  void add_overlap_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      overlap_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_overlap_ratio();

  // repeated uint32 top_n = 3;
  int top_n_size() const;
  void clear_top_n();
  static const int kTopNFieldNumber = 3;
  ::google::protobuf::uint32 top_n(int index) const;
  void set_top_n(int index, ::google::protobuf::uint32 value);
  void add_top_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      top_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_top_n();

  // repeated int32 max_candidate_n = 5;
  int max_candidate_n_size() const;
  void clear_max_candidate_n();
  static const int kMaxCandidateNFieldNumber = 5;
  ::google::protobuf::int32 max_candidate_n(int index) const;
  void set_max_candidate_n(int index, ::google::protobuf::int32 value);
  void add_max_candidate_n(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      max_candidate_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_max_candidate_n();

  // repeated bool use_soft_nms = 6;
  int use_soft_nms_size() const;
  void clear_use_soft_nms();
  static const int kUseSoftNmsFieldNumber = 6;
  bool use_soft_nms(int index) const;
  void set_use_soft_nms(int index, bool value);
  void add_use_soft_nms(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      use_soft_nms() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_use_soft_nms();

  // repeated bool voting = 8;
  int voting_size() const;
  void clear_voting();
  static const int kVotingFieldNumber = 8;
  bool voting(int index) const;
  void set_voting(int index, bool value);
  void add_voting(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      voting() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_voting();

  // repeated float vote_iou = 9;
  int vote_iou_size() const;
  void clear_vote_iou();
  static const int kVoteIouFieldNumber = 9;
  float vote_iou(int index) const;
  void set_vote_iou(int index, float value);
  void add_vote_iou(float value);
  const ::google::protobuf::RepeatedField< float >&
      vote_iou() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vote_iou();

  // optional bool add_score = 4 [default = false];
  bool has_add_score() const;
  void clear_add_score();
  static const int kAddScoreFieldNumber = 4;
  bool add_score() const;
  void set_add_score(bool value);

  // optional bool nms_among_classes = 7 [default = false];
  bool has_nms_among_classes() const;
  void clear_nms_among_classes();
  static const int kNmsAmongClassesFieldNumber = 7;
  bool nms_among_classes() const;
  void set_nms_among_classes(bool value);

  // optional bool need_nms = 1 [default = true];
  bool has_need_nms() const;
  void clear_need_nms();
  static const int kNeedNmsFieldNumber = 1;
  bool need_nms() const;
  void set_need_nms(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NMSSSDParameter)
 private:
  void set_has_need_nms();
  void clear_has_need_nms();
  void set_has_add_score();
  void clear_has_add_score();
  void set_has_nms_among_classes();
  void clear_has_nms_among_classes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > overlap_ratio_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > top_n_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > max_candidate_n_;
  ::google::protobuf::RepeatedField< bool > use_soft_nms_;
  ::google::protobuf::RepeatedField< bool > voting_;
  ::google::protobuf::RepeatedField< float > vote_iou_;
  bool add_score_;
  bool nms_among_classes_;
  bool need_nms_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KPTSParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.KPTSParameter) */ {
 public:
  KPTSParameter();
  virtual ~KPTSParameter();

  KPTSParameter(const KPTSParameter& from);

  inline KPTSParameter& operator=(const KPTSParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KPTSParameter& default_instance();

  static inline const KPTSParameter* internal_default_instance() {
    return reinterpret_cast<const KPTSParameter*>(
               &_KPTSParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(KPTSParameter* other);

  // implements Message ----------------------------------------------

  inline KPTSParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  KPTSParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KPTSParameter& from);
  void MergeFrom(const KPTSParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KPTSParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 kpts_st_for_each_class = 7;
  int kpts_st_for_each_class_size() const;
  void clear_kpts_st_for_each_class();
  static const int kKptsStForEachClassFieldNumber = 7;
  ::google::protobuf::int32 kpts_st_for_each_class(int index) const;
  void set_kpts_st_for_each_class(int index, ::google::protobuf::int32 value);
  void add_kpts_st_for_each_class(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kpts_st_for_each_class() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kpts_st_for_each_class();

  // repeated int32 kpts_ed_for_each_class = 8;
  int kpts_ed_for_each_class_size() const;
  void clear_kpts_ed_for_each_class();
  static const int kKptsEdForEachClassFieldNumber = 8;
  ::google::protobuf::int32 kpts_ed_for_each_class(int index) const;
  void set_kpts_ed_for_each_class(int index, ::google::protobuf::int32 value);
  void add_kpts_ed_for_each_class(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kpts_ed_for_each_class() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kpts_ed_for_each_class();

  // required uint32 kpts_exist_bottom_idx = 1;
  bool has_kpts_exist_bottom_idx() const;
  void clear_kpts_exist_bottom_idx();
  static const int kKptsExistBottomIdxFieldNumber = 1;
  ::google::protobuf::uint32 kpts_exist_bottom_idx() const;
  void set_kpts_exist_bottom_idx(::google::protobuf::uint32 value);

  // required uint32 kpts_reg_bottom_idx = 2;
  bool has_kpts_reg_bottom_idx() const;
  void clear_kpts_reg_bottom_idx();
  static const int kKptsRegBottomIdxFieldNumber = 2;
  ::google::protobuf::uint32 kpts_reg_bottom_idx() const;
  void set_kpts_reg_bottom_idx(::google::protobuf::uint32 value);

  // optional bool kpts_reg_as_classify = 3 [default = false];
  bool has_kpts_reg_as_classify() const;
  void clear_kpts_reg_as_classify();
  static const int kKptsRegAsClassifyFieldNumber = 3;
  bool kpts_reg_as_classify() const;
  void set_kpts_reg_as_classify(bool value);

  // optional uint32 kpts_classify_width = 4;
  bool has_kpts_classify_width() const;
  void clear_kpts_classify_width();
  static const int kKptsClassifyWidthFieldNumber = 4;
  ::google::protobuf::uint32 kpts_classify_width() const;
  void set_kpts_classify_width(::google::protobuf::uint32 value);

  // optional uint32 kpts_classify_height = 5;
  bool has_kpts_classify_height() const;
  void clear_kpts_classify_height();
  static const int kKptsClassifyHeightFieldNumber = 5;
  ::google::protobuf::uint32 kpts_classify_height() const;
  void set_kpts_classify_height(::google::protobuf::uint32 value);

  // optional int32 kpts_reg_norm_idx_st = 6;
  bool has_kpts_reg_norm_idx_st() const;
  void clear_kpts_reg_norm_idx_st();
  static const int kKptsRegNormIdxStFieldNumber = 6;
  ::google::protobuf::int32 kpts_reg_norm_idx_st() const;
  void set_kpts_reg_norm_idx_st(::google::protobuf::int32 value);

  // optional float kpts_classify_pad_ratio = 9 [default = 0];
  bool has_kpts_classify_pad_ratio() const;
  void clear_kpts_classify_pad_ratio();
  static const int kKptsClassifyPadRatioFieldNumber = 9;
  float kpts_classify_pad_ratio() const;
  void set_kpts_classify_pad_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.KPTSParameter)
 private:
  void set_has_kpts_exist_bottom_idx();
  void clear_has_kpts_exist_bottom_idx();
  void set_has_kpts_reg_bottom_idx();
  void clear_has_kpts_reg_bottom_idx();
  void set_has_kpts_reg_as_classify();
  void clear_has_kpts_reg_as_classify();
  void set_has_kpts_classify_width();
  void clear_has_kpts_classify_width();
  void set_has_kpts_classify_height();
  void clear_has_kpts_classify_height();
  void set_has_kpts_reg_norm_idx_st();
  void clear_has_kpts_reg_norm_idx_st();
  void set_has_kpts_classify_pad_ratio();
  void clear_has_kpts_classify_pad_ratio();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kpts_st_for_each_class_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kpts_ed_for_each_class_;
  ::google::protobuf::uint32 kpts_exist_bottom_idx_;
  ::google::protobuf::uint32 kpts_reg_bottom_idx_;
  bool kpts_reg_as_classify_;
  ::google::protobuf::uint32 kpts_classify_width_;
  ::google::protobuf::uint32 kpts_classify_height_;
  ::google::protobuf::int32 kpts_reg_norm_idx_st_;
  float kpts_classify_pad_ratio_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ATRSParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ATRSParameter) */ {
 public:
  ATRSParameter();
  virtual ~ATRSParameter();

  ATRSParameter(const ATRSParameter& from);

  inline ATRSParameter& operator=(const ATRSParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATRSParameter& default_instance();

  static inline const ATRSParameter* internal_default_instance() {
    return reinterpret_cast<const ATRSParameter*>(
               &_ATRSParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(ATRSParameter* other);

  // implements Message ----------------------------------------------

  inline ATRSParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ATRSParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ATRSParameter& from);
  void MergeFrom(const ATRSParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ATRSParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ATRSParameter_NormType NormType;
  static const NormType NONE =
    ATRSParameter_NormType_NONE;
  static const NormType WIDTH =
    ATRSParameter_NormType_WIDTH;
  static const NormType HEIGHT =
    ATRSParameter_NormType_HEIGHT;
  static const NormType WIDTH_LOG =
    ATRSParameter_NormType_WIDTH_LOG;
  static const NormType HEIGHT_LOG =
    ATRSParameter_NormType_HEIGHT_LOG;
  static inline bool NormType_IsValid(int value) {
    return ATRSParameter_NormType_IsValid(value);
  }
  static const NormType NormType_MIN =
    ATRSParameter_NormType_NormType_MIN;
  static const NormType NormType_MAX =
    ATRSParameter_NormType_NormType_MAX;
  static const int NormType_ARRAYSIZE =
    ATRSParameter_NormType_NormType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormType_descriptor() {
    return ATRSParameter_NormType_descriptor();
  }
  static inline const ::std::string& NormType_Name(NormType value) {
    return ATRSParameter_NormType_Name(value);
  }
  static inline bool NormType_Parse(const ::std::string& name,
      NormType* value) {
    return ATRSParameter_NormType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
  int atrs_norm_type_size() const;
  void clear_atrs_norm_type();
  static const int kAtrsNormTypeFieldNumber = 3;
  ::caffe::ATRSParameter_NormType atrs_norm_type(int index) const;
  void set_atrs_norm_type(int index, ::caffe::ATRSParameter_NormType value);
  void add_atrs_norm_type(::caffe::ATRSParameter_NormType value);
  const ::google::protobuf::RepeatedField<int>& atrs_norm_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_atrs_norm_type();

  // required uint32 atrs_reg_bottom_idx = 1;
  bool has_atrs_reg_bottom_idx() const;
  void clear_atrs_reg_bottom_idx();
  static const int kAtrsRegBottomIdxFieldNumber = 1;
  ::google::protobuf::uint32 atrs_reg_bottom_idx() const;
  void set_atrs_reg_bottom_idx(::google::protobuf::uint32 value);

  // optional int32 atrs_reg_norm_idx_st = 2;
  bool has_atrs_reg_norm_idx_st() const;
  void clear_atrs_reg_norm_idx_st();
  static const int kAtrsRegNormIdxStFieldNumber = 2;
  ::google::protobuf::int32 atrs_reg_norm_idx_st() const;
  void set_atrs_reg_norm_idx_st(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ATRSParameter)
 private:
  void set_has_atrs_reg_bottom_idx();
  void clear_has_atrs_reg_bottom_idx();
  void set_has_atrs_reg_norm_idx_st();
  void clear_has_atrs_reg_norm_idx_st();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> atrs_norm_type_;
  ::google::protobuf::uint32 atrs_reg_bottom_idx_;
  ::google::protobuf::int32 atrs_reg_norm_idx_st_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FTRSParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FTRSParameter) */ {
 public:
  FTRSParameter();
  virtual ~FTRSParameter();

  FTRSParameter(const FTRSParameter& from);

  inline FTRSParameter& operator=(const FTRSParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FTRSParameter& default_instance();

  static inline const FTRSParameter* internal_default_instance() {
    return reinterpret_cast<const FTRSParameter*>(
               &_FTRSParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(FTRSParameter* other);

  // implements Message ----------------------------------------------

  inline FTRSParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FTRSParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FTRSParameter& from);
  void MergeFrom(const FTRSParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FTRSParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ftrs_bottom_idx = 1;
  bool has_ftrs_bottom_idx() const;
  void clear_ftrs_bottom_idx();
  static const int kFtrsBottomIdxFieldNumber = 1;
  ::google::protobuf::uint32 ftrs_bottom_idx() const;
  void set_ftrs_bottom_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.FTRSParameter)
 private:
  void set_has_ftrs_bottom_idx();
  void clear_has_ftrs_bottom_idx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 ftrs_bottom_idx_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SPMPParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SPMPParameter) */ {
 public:
  SPMPParameter();
  virtual ~SPMPParameter();

  SPMPParameter(const SPMPParameter& from);

  inline SPMPParameter& operator=(const SPMPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPMPParameter& default_instance();

  static inline const SPMPParameter* internal_default_instance() {
    return reinterpret_cast<const SPMPParameter*>(
               &_SPMPParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(SPMPParameter* other);

  // implements Message ----------------------------------------------

  inline SPMPParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SPMPParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SPMPParameter& from);
  void MergeFrom(const SPMPParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SPMPParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool spmp_class_aware = 2;
  int spmp_class_aware_size() const;
  void clear_spmp_class_aware();
  static const int kSpmpClassAwareFieldNumber = 2;
  bool spmp_class_aware(int index) const;
  void set_spmp_class_aware(int index, bool value);
  void add_spmp_class_aware(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      spmp_class_aware() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_spmp_class_aware();

  // repeated uint32 spmp_label_width = 3;
  int spmp_label_width_size() const;
  void clear_spmp_label_width();
  static const int kSpmpLabelWidthFieldNumber = 3;
  ::google::protobuf::uint32 spmp_label_width(int index) const;
  void set_spmp_label_width(int index, ::google::protobuf::uint32 value);
  void add_spmp_label_width(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      spmp_label_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_spmp_label_width();

  // repeated uint32 spmp_label_height = 4;
  int spmp_label_height_size() const;
  void clear_spmp_label_height();
  static const int kSpmpLabelHeightFieldNumber = 4;
  ::google::protobuf::uint32 spmp_label_height(int index) const;
  void set_spmp_label_height(int index, ::google::protobuf::uint32 value);
  void add_spmp_label_height(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      spmp_label_height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_spmp_label_height();

  // repeated float spmp_pad_ratio = 5;
  int spmp_pad_ratio_size() const;
  void clear_spmp_pad_ratio();
  static const int kSpmpPadRatioFieldNumber = 5;
  float spmp_pad_ratio(int index) const;
  void set_spmp_pad_ratio(int index, float value);
  void add_spmp_pad_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      spmp_pad_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_spmp_pad_ratio();

  // required uint32 spmp_bottom_idx = 1;
  bool has_spmp_bottom_idx() const;
  void clear_spmp_bottom_idx();
  static const int kSpmpBottomIdxFieldNumber = 1;
  ::google::protobuf::uint32 spmp_bottom_idx() const;
  void set_spmp_bottom_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SPMPParameter)
 private:
  void set_has_spmp_bottom_idx();
  void clear_has_spmp_bottom_idx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > spmp_class_aware_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > spmp_label_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > spmp_label_height_;
  ::google::protobuf::RepeatedField< float > spmp_pad_ratio_;
  ::google::protobuf::uint32 spmp_bottom_idx_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cam3dParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Cam3dParameter) */ {
 public:
  Cam3dParameter();
  virtual ~Cam3dParameter();

  Cam3dParameter(const Cam3dParameter& from);

  inline Cam3dParameter& operator=(const Cam3dParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cam3dParameter& default_instance();

  static inline const Cam3dParameter* internal_default_instance() {
    return reinterpret_cast<const Cam3dParameter*>(
               &_Cam3dParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(Cam3dParameter* other);

  // implements Message ----------------------------------------------

  inline Cam3dParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  Cam3dParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cam3dParameter& from);
  void MergeFrom(const Cam3dParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cam3dParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cam3d_bottom_idx = 1;
  bool has_cam3d_bottom_idx() const;
  void clear_cam3d_bottom_idx();
  static const int kCam3DBottomIdxFieldNumber = 1;
  ::google::protobuf::uint32 cam3d_bottom_idx() const;
  void set_cam3d_bottom_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.Cam3dParameter)
 private:
  void set_has_cam3d_bottom_idx();
  void clear_has_cam3d_bottom_idx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 cam3d_bottom_idx_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectionOutputSSDParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionOutputSSDParameter) */ {
 public:
  DetectionOutputSSDParameter();
  virtual ~DetectionOutputSSDParameter();

  DetectionOutputSSDParameter(const DetectionOutputSSDParameter& from);

  inline DetectionOutputSSDParameter& operator=(const DetectionOutputSSDParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionOutputSSDParameter& default_instance();

  static inline const DetectionOutputSSDParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputSSDParameter*>(
               &_DetectionOutputSSDParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(DetectionOutputSSDParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionOutputSSDParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DetectionOutputSSDParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DetectionOutputSSDParameter& from);
  void MergeFrom(const DetectionOutputSSDParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DetectionOutputSSDParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DetectionOutputSSDParameter_MIN_SIZE_MODE MIN_SIZE_MODE;
  static const MIN_SIZE_MODE HEIGHT_AND_WIDTH =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_AND_WIDTH;
  static const MIN_SIZE_MODE HEIGHT_OR_WIDTH =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_OR_WIDTH;
  static inline bool MIN_SIZE_MODE_IsValid(int value) {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(value);
  }
  static const MIN_SIZE_MODE MIN_SIZE_MODE_MIN =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MIN;
  static const MIN_SIZE_MODE MIN_SIZE_MODE_MAX =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MAX;
  static const int MIN_SIZE_MODE_ARRAYSIZE =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MIN_SIZE_MODE_descriptor() {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor();
  }
  static inline const ::std::string& MIN_SIZE_MODE_Name(MIN_SIZE_MODE value) {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_Name(value);
  }
  static inline bool MIN_SIZE_MODE_Parse(const ::std::string& name,
      MIN_SIZE_MODE* value) {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float threshold = 2;
  int threshold_size() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  float threshold(int index) const;
  void set_threshold(int index, float value);
  void add_threshold(float value);
  const ::google::protobuf::RepeatedField< float >&
      threshold() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_threshold();

  // repeated uint32 class_indexes = 7;
  int class_indexes_size() const;
  void clear_class_indexes();
  static const int kClassIndexesFieldNumber = 7;
  ::google::protobuf::uint32 class_indexes(int index) const;
  void set_class_indexes(int index, ::google::protobuf::uint32 value);
  void add_class_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      class_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_class_indexes();

  // repeated float heat_map_a = 8;
  int heat_map_a_size() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 8;
  float heat_map_a(int index) const;
  void set_heat_map_a(int index, float value);
  void add_heat_map_a(float value);
  const ::google::protobuf::RepeatedField< float >&
      heat_map_a() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_heat_map_a();

  // repeated float proposal_min_sqrt_area = 10;
  int proposal_min_sqrt_area_size() const;
  void clear_proposal_min_sqrt_area();
  static const int kProposalMinSqrtAreaFieldNumber = 10;
  float proposal_min_sqrt_area(int index) const;
  void set_proposal_min_sqrt_area(int index, float value);
  void add_proposal_min_sqrt_area(float value);
  const ::google::protobuf::RepeatedField< float >&
      proposal_min_sqrt_area() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_proposal_min_sqrt_area();

  // repeated float proposal_max_sqrt_area = 11;
  int proposal_max_sqrt_area_size() const;
  void clear_proposal_max_sqrt_area();
  static const int kProposalMaxSqrtAreaFieldNumber = 11;
  float proposal_max_sqrt_area(int index) const;
  void set_proposal_max_sqrt_area(int index, float value);
  void add_proposal_max_sqrt_area(float value);
  const ::google::protobuf::RepeatedField< float >&
      proposal_max_sqrt_area() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_proposal_max_sqrt_area();

  // repeated float heat_map_b = 13;
  int heat_map_b_size() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 13;
  float heat_map_b(int index) const;
  void set_heat_map_b(int index, float value);
  void add_heat_map_b(float value);
  const ::google::protobuf::RepeatedField< float >&
      heat_map_b() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_heat_map_b();

  // optional string class_name_list = 4;
  bool has_class_name_list() const;
  void clear_class_name_list();
  static const int kClassNameListFieldNumber = 4;
  const ::std::string& class_name_list() const;
  void set_class_name_list(const ::std::string& value);
  #if LANG_CXX11
  void set_class_name_list(::std::string&& value);
  #endif
  void set_class_name_list(const char* value);
  void set_class_name_list(const char* value, size_t size);
  ::std::string* mutable_class_name_list();
  ::std::string* release_class_name_list();
  void set_allocated_class_name_list(::std::string* class_name_list);

  // optional .caffe.NMSSSDParameter nms_param = 1;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 1;
  const ::caffe::NMSSSDParameter& nms_param() const;
  ::caffe::NMSSSDParameter* mutable_nms_param();
  ::caffe::NMSSSDParameter* release_nms_param();
  void set_allocated_nms_param(::caffe::NMSSSDParameter* nms_param);

  // optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
  bool has_gen_anchor_param() const;
  void clear_gen_anchor_param();
  static const int kGenAnchorParamFieldNumber = 19;
  const ::caffe::GenerateAnchorParameter& gen_anchor_param() const;
  ::caffe::GenerateAnchorParameter* mutable_gen_anchor_param();
  ::caffe::GenerateAnchorParameter* release_gen_anchor_param();
  void set_allocated_gen_anchor_param(::caffe::GenerateAnchorParameter* gen_anchor_param);

  // optional .caffe.KPTSParameter kpts_param = 35;
  bool has_kpts_param() const;
  void clear_kpts_param();
  static const int kKptsParamFieldNumber = 35;
  const ::caffe::KPTSParameter& kpts_param() const;
  ::caffe::KPTSParameter* mutable_kpts_param();
  ::caffe::KPTSParameter* release_kpts_param();
  void set_allocated_kpts_param(::caffe::KPTSParameter* kpts_param);

  // optional .caffe.ATRSParameter atrs_param = 36;
  bool has_atrs_param() const;
  void clear_atrs_param();
  static const int kAtrsParamFieldNumber = 36;
  const ::caffe::ATRSParameter& atrs_param() const;
  ::caffe::ATRSParameter* mutable_atrs_param();
  ::caffe::ATRSParameter* release_atrs_param();
  void set_allocated_atrs_param(::caffe::ATRSParameter* atrs_param);

  // optional .caffe.FTRSParameter ftrs_param = 37;
  bool has_ftrs_param() const;
  void clear_ftrs_param();
  static const int kFtrsParamFieldNumber = 37;
  const ::caffe::FTRSParameter& ftrs_param() const;
  ::caffe::FTRSParameter* mutable_ftrs_param();
  ::caffe::FTRSParameter* release_ftrs_param();
  void set_allocated_ftrs_param(::caffe::FTRSParameter* ftrs_param);

  // optional .caffe.SPMPParameter spmp_param = 38;
  bool has_spmp_param() const;
  void clear_spmp_param();
  static const int kSpmpParamFieldNumber = 38;
  const ::caffe::SPMPParameter& spmp_param() const;
  ::caffe::SPMPParameter* mutable_spmp_param();
  ::caffe::SPMPParameter* release_spmp_param();
  void set_allocated_spmp_param(::caffe::SPMPParameter* spmp_param);

  // optional .caffe.Cam3dParameter cam3d_param = 39;
  bool has_cam3d_param() const;
  void clear_cam3d_param();
  static const int kCam3DParamFieldNumber = 39;
  const ::caffe::Cam3dParameter& cam3d_param() const;
  ::caffe::Cam3dParameter* mutable_cam3d_param();
  ::caffe::Cam3dParameter* release_cam3d_param();
  void set_allocated_cam3d_param(::caffe::Cam3dParameter* cam3d_param);

  // optional float threshold_objectness = 9 [default = 0];
  bool has_threshold_objectness() const;
  void clear_threshold_objectness();
  static const int kThresholdObjectnessFieldNumber = 9;
  float threshold_objectness() const;
  void set_threshold_objectness(float value);

  // optional bool refine_out_of_map_bbox = 6 [default = false];
  bool has_refine_out_of_map_bbox() const;
  void clear_refine_out_of_map_bbox();
  static const int kRefineOutOfMapBboxFieldNumber = 6;
  bool refine_out_of_map_bbox() const;
  void set_refine_out_of_map_bbox(bool value);

  // optional bool bg_as_one_of_softmax = 12 [default = false];
  bool has_bg_as_one_of_softmax() const;
  void clear_bg_as_one_of_softmax();
  static const int kBgAsOneOfSoftmaxFieldNumber = 12;
  bool bg_as_one_of_softmax() const;
  void set_bg_as_one_of_softmax(bool value);

  // optional bool rpn_proposal_output_score = 17 [default = false];
  bool has_rpn_proposal_output_score() const;
  void clear_rpn_proposal_output_score();
  static const int kRpnProposalOutputScoreFieldNumber = 17;
  bool rpn_proposal_output_score() const;
  void set_rpn_proposal_output_score(bool value);

  // optional float im_width = 15 [default = 0];
  bool has_im_width() const;
  void clear_im_width();
  static const int kImWidthFieldNumber = 15;
  float im_width() const;
  void set_im_width(float value);

  // optional float im_height = 16 [default = 0];
  bool has_im_height() const;
  void clear_im_height();
  static const int kImHeightFieldNumber = 16;
  float im_height() const;
  void set_im_height(float value);

  // optional uint32 read_height_offset = 31 [default = 0];
  bool has_read_height_offset() const;
  void clear_read_height_offset();
  static const int kReadHeightOffsetFieldNumber = 31;
  ::google::protobuf::uint32 read_height_offset() const;
  void set_read_height_offset(::google::protobuf::uint32 value);

  // optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
  bool has_min_size_mode() const;
  void clear_min_size_mode();
  static const int kMinSizeModeFieldNumber = 34;
  ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE min_size_mode() const;
  void set_min_size_mode(::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE value);

  // optional float min_size_w = 33 [default = 2];
  bool has_min_size_w() const;
  void clear_min_size_w();
  static const int kMinSizeWFieldNumber = 33;
  float min_size_w() const;
  void set_min_size_w(float value);

  // optional uint32 channel_per_scale = 3 [default = 5];
  bool has_channel_per_scale() const;
  void clear_channel_per_scale();
  static const int kChannelPerScaleFieldNumber = 3;
  ::google::protobuf::uint32 channel_per_scale() const;
  void set_channel_per_scale(::google::protobuf::uint32 value);

  // optional uint32 num_class = 5 [default = 1];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 5;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional bool use_target_type_rcnn = 14 [default = true];
  bool has_use_target_type_rcnn() const;
  void clear_use_target_type_rcnn();
  static const int kUseTargetTypeRcnnFieldNumber = 14;
  bool use_target_type_rcnn() const;
  void set_use_target_type_rcnn(bool value);

  // optional bool regress_agnostic = 18 [default = true];
  bool has_regress_agnostic() const;
  void clear_regress_agnostic();
  static const int kRegressAgnosticFieldNumber = 18;
  bool regress_agnostic() const;
  void set_regress_agnostic(bool value);

  // optional bool bbox_size_add_one = 22 [default = true];
  bool has_bbox_size_add_one() const;
  void clear_bbox_size_add_one();
  static const int kBboxSizeAddOneFieldNumber = 22;
  bool bbox_size_add_one() const;
  void set_bbox_size_add_one(bool value);

  // optional float allow_border = 20 [default = -1];
  bool has_allow_border() const;
  void clear_allow_border();
  static const int kAllowBorderFieldNumber = 20;
  float allow_border() const;
  void set_allow_border(float value);

  // optional float allow_border_ratio = 21 [default = -1];
  bool has_allow_border_ratio() const;
  void clear_allow_border_ratio();
  static const int kAllowBorderRatioFieldNumber = 21;
  float allow_border_ratio() const;
  void set_allow_border_ratio(float value);

  // optional float read_width_scale = 29 [default = 1];
  bool has_read_width_scale() const;
  void clear_read_width_scale();
  static const int kReadWidthScaleFieldNumber = 29;
  float read_width_scale() const;
  void set_read_width_scale(float value);

  // optional float read_height_scale = 30 [default = 1];
  bool has_read_height_scale() const;
  void clear_read_height_scale();
  static const int kReadHeightScaleFieldNumber = 30;
  float read_height_scale() const;
  void set_read_height_scale(float value);

  // optional float min_size_h = 32 [default = 2];
  bool has_min_size_h() const;
  void clear_min_size_h();
  static const int kMinSizeHFieldNumber = 32;
  float min_size_h() const;
  void set_min_size_h(float value);

  // @@protoc_insertion_point(class_scope:caffe.DetectionOutputSSDParameter)
 private:
  void set_has_nms_param();
  void clear_has_nms_param();
  void set_has_channel_per_scale();
  void clear_has_channel_per_scale();
  void set_has_class_name_list();
  void clear_has_class_name_list();
  void set_has_num_class();
  void clear_has_num_class();
  void set_has_refine_out_of_map_bbox();
  void clear_has_refine_out_of_map_bbox();
  void set_has_threshold_objectness();
  void clear_has_threshold_objectness();
  void set_has_bg_as_one_of_softmax();
  void clear_has_bg_as_one_of_softmax();
  void set_has_use_target_type_rcnn();
  void clear_has_use_target_type_rcnn();
  void set_has_im_width();
  void clear_has_im_width();
  void set_has_im_height();
  void clear_has_im_height();
  void set_has_rpn_proposal_output_score();
  void clear_has_rpn_proposal_output_score();
  void set_has_regress_agnostic();
  void clear_has_regress_agnostic();
  void set_has_gen_anchor_param();
  void clear_has_gen_anchor_param();
  void set_has_allow_border();
  void clear_has_allow_border();
  void set_has_allow_border_ratio();
  void clear_has_allow_border_ratio();
  void set_has_bbox_size_add_one();
  void clear_has_bbox_size_add_one();
  void set_has_read_width_scale();
  void clear_has_read_width_scale();
  void set_has_read_height_scale();
  void clear_has_read_height_scale();
  void set_has_read_height_offset();
  void clear_has_read_height_offset();
  void set_has_min_size_h();
  void clear_has_min_size_h();
  void set_has_min_size_w();
  void clear_has_min_size_w();
  void set_has_min_size_mode();
  void clear_has_min_size_mode();
  void set_has_kpts_param();
  void clear_has_kpts_param();
  void set_has_atrs_param();
  void clear_has_atrs_param();
  void set_has_ftrs_param();
  void clear_has_ftrs_param();
  void set_has_spmp_param();
  void clear_has_spmp_param();
  void set_has_cam3d_param();
  void clear_has_cam3d_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > threshold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > class_indexes_;
  ::google::protobuf::RepeatedField< float > heat_map_a_;
  ::google::protobuf::RepeatedField< float > proposal_min_sqrt_area_;
  ::google::protobuf::RepeatedField< float > proposal_max_sqrt_area_;
  ::google::protobuf::RepeatedField< float > heat_map_b_;
  ::google::protobuf::internal::ArenaStringPtr class_name_list_;
  ::caffe::NMSSSDParameter* nms_param_;
  ::caffe::GenerateAnchorParameter* gen_anchor_param_;
  ::caffe::KPTSParameter* kpts_param_;
  ::caffe::ATRSParameter* atrs_param_;
  ::caffe::FTRSParameter* ftrs_param_;
  ::caffe::SPMPParameter* spmp_param_;
  ::caffe::Cam3dParameter* cam3d_param_;
  float threshold_objectness_;
  bool refine_out_of_map_bbox_;
  bool bg_as_one_of_softmax_;
  bool rpn_proposal_output_score_;
  float im_width_;
  float im_height_;
  ::google::protobuf::uint32 read_height_offset_;
  int min_size_mode_;
  float min_size_w_;
  ::google::protobuf::uint32 channel_per_scale_;
  ::google::protobuf::uint32 num_class_;
  bool use_target_type_rcnn_;
  bool regress_agnostic_;
  bool bbox_size_add_one_;
  float allow_border_;
  float allow_border_ratio_;
  float read_width_scale_;
  float read_height_scale_;
  float min_size_h_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BBoxRegParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BBoxRegParameter) */ {
 public:
  BBoxRegParameter();
  virtual ~BBoxRegParameter();

  BBoxRegParameter(const BBoxRegParameter& from);

  inline BBoxRegParameter& operator=(const BBoxRegParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBoxRegParameter& default_instance();

  static inline const BBoxRegParameter* internal_default_instance() {
    return reinterpret_cast<const BBoxRegParameter*>(
               &_BBoxRegParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(BBoxRegParameter* other);

  // implements Message ----------------------------------------------

  inline BBoxRegParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BBoxRegParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BBoxRegParameter& from);
  void MergeFrom(const BBoxRegParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BBoxRegParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float bbox_mean = 1;
  int bbox_mean_size() const;
  void clear_bbox_mean();
  static const int kBboxMeanFieldNumber = 1;
  float bbox_mean(int index) const;
  void set_bbox_mean(int index, float value);
  void add_bbox_mean(float value);
  const ::google::protobuf::RepeatedField< float >&
      bbox_mean() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_bbox_mean();

  // repeated float bbox_std = 2;
  int bbox_std_size() const;
  void clear_bbox_std();
  static const int kBboxStdFieldNumber = 2;
  float bbox_std(int index) const;
  void set_bbox_std(int index, float value);
  void add_bbox_std(float value);
  const ::google::protobuf::RepeatedField< float >&
      bbox_std() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_bbox_std();

  // @@protoc_insertion_point(class_scope:caffe.BBoxRegParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > bbox_mean_;
  ::google::protobuf::RepeatedField< float > bbox_std_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RegParameter) */ {
 public:
  RegParameter();
  virtual ~RegParameter();

  RegParameter(const RegParameter& from);

  inline RegParameter& operator=(const RegParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegParameter& default_instance();

  static inline const RegParameter* internal_default_instance() {
    return reinterpret_cast<const RegParameter*>(
               &_RegParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(RegParameter* other);

  // implements Message ----------------------------------------------

  inline RegParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  RegParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegParameter& from);
  void MergeFrom(const RegParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean = 1;
  int mean_size() const;
  void clear_mean();
  static const int kMeanFieldNumber = 1;
  float mean(int index) const;
  void set_mean(int index, float value);
  void add_mean(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean();

  // repeated float std = 2;
  int std_size() const;
  void clear_std();
  static const int kStdFieldNumber = 2;
  float std(int index) const;
  void set_std(int index, float value);
  void add_std(float value);
  const ::google::protobuf::RepeatedField< float >&
      std() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_std();

  // @@protoc_insertion_point(class_scope:caffe.RegParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_;
  ::google::protobuf::RepeatedField< float > std_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageDistortParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDistortParameter) */ {
 public:
  ImageDistortParameter();
  virtual ~ImageDistortParameter();

  ImageDistortParameter(const ImageDistortParameter& from);

  inline ImageDistortParameter& operator=(const ImageDistortParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDistortParameter& default_instance();

  static inline const ImageDistortParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDistortParameter*>(
               &_ImageDistortParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(ImageDistortParameter* other);

  // implements Message ----------------------------------------------

  inline ImageDistortParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageDistortParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageDistortParameter& from);
  void MergeFrom(const ImageDistortParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageDistortParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pre_mean_value = 1;
  int pre_mean_value_size() const;
  void clear_pre_mean_value();
  static const int kPreMeanValueFieldNumber = 1;
  float pre_mean_value(int index) const;
  void set_pre_mean_value(int index, float value);
  void add_pre_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      pre_mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pre_mean_value();

  // repeated float new_mean_value = 2;
  int new_mean_value_size() const;
  void clear_new_mean_value();
  static const int kNewMeanValueFieldNumber = 2;
  float new_mean_value(int index) const;
  void set_new_mean_value(int index, float value);
  void add_new_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      new_mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_new_mean_value();

  // optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
  bool has_distort_param() const;
  void clear_distort_param();
  static const int kDistortParamFieldNumber = 5;
  const ::caffe_fcn_data_layer::DistortionParameter& distort_param() const;
  ::caffe_fcn_data_layer::DistortionParameter* mutable_distort_param();
  ::caffe_fcn_data_layer::DistortionParameter* release_distort_param();
  void set_allocated_distort_param(::caffe_fcn_data_layer::DistortionParameter* distort_param);

  // optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
  bool has_noise_param() const;
  void clear_noise_param();
  static const int kNoiseParamFieldNumber = 6;
  const ::caffe_fcn_data_layer::NoiseParameter& noise_param() const;
  ::caffe_fcn_data_layer::NoiseParameter* mutable_noise_param();
  ::caffe_fcn_data_layer::NoiseParameter* release_noise_param();
  void set_allocated_noise_param(::caffe_fcn_data_layer::NoiseParameter* noise_param);

  // optional float new_scale = 4;
  bool has_new_scale() const;
  void clear_new_scale();
  static const int kNewScaleFieldNumber = 4;
  float new_scale() const;
  void set_new_scale(float value);

  // optional float pre_scale = 3 [default = 1];
  bool has_pre_scale() const;
  void clear_pre_scale();
  static const int kPreScaleFieldNumber = 3;
  float pre_scale() const;
  void set_pre_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDistortParameter)
 private:
  void set_has_pre_scale();
  void clear_has_pre_scale();
  void set_has_new_scale();
  void clear_has_new_scale();
  void set_has_distort_param();
  void clear_has_distort_param();
  void set_has_noise_param();
  void clear_has_noise_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > pre_mean_value_;
  ::google::protobuf::RepeatedField< float > new_mean_value_;
  ::caffe_fcn_data_layer::DistortionParameter* distort_param_;
  ::caffe_fcn_data_layer::NoiseParameter* noise_param_;
  float new_scale_;
  float pre_scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSROIPoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PSROIPoolingParameter) */ {
 public:
  PSROIPoolingParameter();
  virtual ~PSROIPoolingParameter();

  PSROIPoolingParameter(const PSROIPoolingParameter& from);

  inline PSROIPoolingParameter& operator=(const PSROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PSROIPoolingParameter& default_instance();

  static inline const PSROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PSROIPoolingParameter*>(
               &_PSROIPoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(PSROIPoolingParameter* other);

  // implements Message ----------------------------------------------

  inline PSROIPoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PSROIPoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSROIPoolingParameter& from);
  void MergeFrom(const PSROIPoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSROIPoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float heat_map_a = 1;
  bool has_heat_map_a() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 1;
  float heat_map_a() const;
  void set_heat_map_a(float value);

  // optional float heat_map_b = 2 [default = 0];
  bool has_heat_map_b() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 2;
  float heat_map_b() const;
  void set_heat_map_b(float value);

  // optional float pad_ratio = 3 [default = 0];
  bool has_pad_ratio() const;
  void clear_pad_ratio();
  static const int kPadRatioFieldNumber = 3;
  float pad_ratio() const;
  void set_pad_ratio(float value);

  // required int32 output_dim = 4;
  bool has_output_dim() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 4;
  ::google::protobuf::int32 output_dim() const;
  void set_output_dim(::google::protobuf::int32 value);

  // required int32 group_size = 5;
  bool has_group_size() const;
  void clear_group_size();
  static const int kGroupSizeFieldNumber = 5;
  ::google::protobuf::int32 group_size() const;
  void set_group_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.PSROIPoolingParameter)
 private:
  void set_has_heat_map_a();
  void clear_has_heat_map_a();
  void set_has_heat_map_b();
  void clear_has_heat_map_b();
  void set_has_pad_ratio();
  void clear_has_pad_ratio();
  void set_has_output_dim();
  void clear_has_output_dim();
  void set_has_group_size();
  void clear_has_group_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float heat_map_a_;
  float heat_map_b_;
  float pad_ratio_;
  ::google::protobuf::int32 output_dim_;
  ::google::protobuf::int32 group_size_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DFMBPSROIPoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DFMBPSROIPoolingParameter) */ {
 public:
  DFMBPSROIPoolingParameter();
  virtual ~DFMBPSROIPoolingParameter();

  DFMBPSROIPoolingParameter(const DFMBPSROIPoolingParameter& from);

  inline DFMBPSROIPoolingParameter& operator=(const DFMBPSROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DFMBPSROIPoolingParameter& default_instance();

  static inline const DFMBPSROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const DFMBPSROIPoolingParameter*>(
               &_DFMBPSROIPoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void Swap(DFMBPSROIPoolingParameter* other);

  // implements Message ----------------------------------------------

  inline DFMBPSROIPoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DFMBPSROIPoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DFMBPSROIPoolingParameter& from);
  void MergeFrom(const DFMBPSROIPoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DFMBPSROIPoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float heat_map_a = 1;
  bool has_heat_map_a() const;
  void clear_heat_map_a();
  static const int kHeatMapAFieldNumber = 1;
  float heat_map_a() const;
  void set_heat_map_a(float value);

  // optional float heat_map_b = 2 [default = 0];
  bool has_heat_map_b() const;
  void clear_heat_map_b();
  static const int kHeatMapBFieldNumber = 2;
  float heat_map_b() const;
  void set_heat_map_b(float value);

  // optional float pad_ratio = 3 [default = 0];
  bool has_pad_ratio() const;
  void clear_pad_ratio();
  static const int kPadRatioFieldNumber = 3;
  float pad_ratio() const;
  void set_pad_ratio(float value);

  // required uint32 output_dim = 4;
  bool has_output_dim() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 4;
  ::google::protobuf::uint32 output_dim() const;
  void set_output_dim(::google::protobuf::uint32 value);

  // optional float trans_std = 5 [default = 0.1];
  bool has_trans_std() const;
  void clear_trans_std();
  static const int kTransStdFieldNumber = 5;
  float trans_std() const;
  void set_trans_std(float value);

  // optional uint32 sample_per_part = 6 [default = 4];
  bool has_sample_per_part() const;
  void clear_sample_per_part();
  static const int kSamplePerPartFieldNumber = 6;
  ::google::protobuf::uint32 sample_per_part() const;
  void set_sample_per_part(::google::protobuf::uint32 value);

  // optional uint32 group_height = 7 [default = 7];
  bool has_group_height() const;
  void clear_group_height();
  static const int kGroupHeightFieldNumber = 7;
  ::google::protobuf::uint32 group_height() const;
  void set_group_height(::google::protobuf::uint32 value);

  // optional uint32 group_width = 8 [default = 7];
  bool has_group_width() const;
  void clear_group_width();
  static const int kGroupWidthFieldNumber = 8;
  ::google::protobuf::uint32 group_width() const;
  void set_group_width(::google::protobuf::uint32 value);

  // optional uint32 pooled_height = 9 [default = 7];
  bool has_pooled_height() const;
  void clear_pooled_height();
  static const int kPooledHeightFieldNumber = 9;
  ::google::protobuf::uint32 pooled_height() const;
  void set_pooled_height(::google::protobuf::uint32 value);

  // optional uint32 pooled_width = 10 [default = 7];
  bool has_pooled_width() const;
  void clear_pooled_width();
  static const int kPooledWidthFieldNumber = 10;
  ::google::protobuf::uint32 pooled_width() const;
  void set_pooled_width(::google::protobuf::uint32 value);

  // optional uint32 part_height = 11 [default = 7];
  bool has_part_height() const;
  void clear_part_height();
  static const int kPartHeightFieldNumber = 11;
  ::google::protobuf::uint32 part_height() const;
  void set_part_height(::google::protobuf::uint32 value);

  // optional uint32 part_width = 12 [default = 7];
  bool has_part_width() const;
  void clear_part_width();
  static const int kPartWidthFieldNumber = 12;
  ::google::protobuf::uint32 part_width() const;
  void set_part_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DFMBPSROIPoolingParameter)
 private:
  void set_has_heat_map_a();
  void clear_has_heat_map_a();
  void set_has_heat_map_b();
  void clear_has_heat_map_b();
  void set_has_pad_ratio();
  void clear_has_pad_ratio();
  void set_has_output_dim();
  void clear_has_output_dim();
  void set_has_trans_std();
  void clear_has_trans_std();
  void set_has_sample_per_part();
  void clear_has_sample_per_part();
  void set_has_group_height();
  void clear_has_group_height();
  void set_has_group_width();
  void clear_has_group_width();
  void set_has_pooled_height();
  void clear_has_pooled_height();
  void set_has_pooled_width();
  void clear_has_pooled_width();
  void set_has_part_height();
  void clear_has_part_height();
  void set_has_part_width();
  void clear_has_part_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float heat_map_a_;
  float heat_map_b_;
  float pad_ratio_;
  ::google::protobuf::uint32 output_dim_;
  float trans_std_;
  ::google::protobuf::uint32 sample_per_part_;
  ::google::protobuf::uint32 group_height_;
  ::google::protobuf::uint32 group_width_;
  ::google::protobuf::uint32 pooled_height_;
  ::google::protobuf::uint32 pooled_width_;
  ::google::protobuf::uint32 part_height_;
  ::google::protobuf::uint32 part_width_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProposalImgScaleToCamCoordsParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ProposalImgScaleToCamCoordsParameter) */ {
 public:
  ProposalImgScaleToCamCoordsParameter();
  virtual ~ProposalImgScaleToCamCoordsParameter();

  ProposalImgScaleToCamCoordsParameter(const ProposalImgScaleToCamCoordsParameter& from);

  inline ProposalImgScaleToCamCoordsParameter& operator=(const ProposalImgScaleToCamCoordsParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProposalImgScaleToCamCoordsParameter& default_instance();

  static inline const ProposalImgScaleToCamCoordsParameter* internal_default_instance() {
    return reinterpret_cast<const ProposalImgScaleToCamCoordsParameter*>(
               &_ProposalImgScaleToCamCoordsParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void Swap(ProposalImgScaleToCamCoordsParameter* other);

  // implements Message ----------------------------------------------

  inline ProposalImgScaleToCamCoordsParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ProposalImgScaleToCamCoordsParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProposalImgScaleToCamCoordsParameter& from);
  void MergeFrom(const ProposalImgScaleToCamCoordsParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProposalImgScaleToCamCoordsParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProposalImgScaleToCamCoordsParameter_NormType NormType;
  static const NormType HEIGHT =
    ProposalImgScaleToCamCoordsParameter_NormType_HEIGHT;
  static const NormType HEIGHT_LOG =
    ProposalImgScaleToCamCoordsParameter_NormType_HEIGHT_LOG;
  static inline bool NormType_IsValid(int value) {
    return ProposalImgScaleToCamCoordsParameter_NormType_IsValid(value);
  }
  static const NormType NormType_MIN =
    ProposalImgScaleToCamCoordsParameter_NormType_NormType_MIN;
  static const NormType NormType_MAX =
    ProposalImgScaleToCamCoordsParameter_NormType_NormType_MAX;
  static const int NormType_ARRAYSIZE =
    ProposalImgScaleToCamCoordsParameter_NormType_NormType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormType_descriptor() {
    return ProposalImgScaleToCamCoordsParameter_NormType_descriptor();
  }
  static inline const ::std::string& NormType_Name(NormType value) {
    return ProposalImgScaleToCamCoordsParameter_NormType_Name(value);
  }
  static inline bool NormType_Parse(const ::std::string& name,
      NormType* value) {
    return ProposalImgScaleToCamCoordsParameter_NormType_Parse(name, value);
  }

  typedef ProposalImgScaleToCamCoordsParameter_OrienType OrienType;
  static const OrienType PI =
    ProposalImgScaleToCamCoordsParameter_OrienType_PI;
  static const OrienType PI2 =
    ProposalImgScaleToCamCoordsParameter_OrienType_PI2;
  static inline bool OrienType_IsValid(int value) {
    return ProposalImgScaleToCamCoordsParameter_OrienType_IsValid(value);
  }
  static const OrienType OrienType_MIN =
    ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_MIN;
  static const OrienType OrienType_MAX =
    ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_MAX;
  static const int OrienType_ARRAYSIZE =
    ProposalImgScaleToCamCoordsParameter_OrienType_OrienType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OrienType_descriptor() {
    return ProposalImgScaleToCamCoordsParameter_OrienType_descriptor();
  }
  static inline const ::std::string& OrienType_Name(OrienType value) {
    return ProposalImgScaleToCamCoordsParameter_OrienType_Name(value);
  }
  static inline bool OrienType_Parse(const ::std::string& name,
      OrienType* value) {
    return ProposalImgScaleToCamCoordsParameter_OrienType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 sub_class_num_class = 2;
  int sub_class_num_class_size() const;
  void clear_sub_class_num_class();
  static const int kSubClassNumClassFieldNumber = 2;
  ::google::protobuf::uint32 sub_class_num_class(int index) const;
  void set_sub_class_num_class(int index, ::google::protobuf::uint32 value);
  void add_sub_class_num_class(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sub_class_num_class() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sub_class_num_class();

  // repeated int32 sub_class_bottom_idx = 3;
  int sub_class_bottom_idx_size() const;
  void clear_sub_class_bottom_idx();
  static const int kSubClassBottomIdxFieldNumber = 3;
  ::google::protobuf::int32 sub_class_bottom_idx(int index) const;
  void set_sub_class_bottom_idx(int index, ::google::protobuf::int32 value);
  void add_sub_class_bottom_idx(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sub_class_bottom_idx() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sub_class_bottom_idx();

  // repeated uint32 cls_ids_zero_size3d_w = 7;
  int cls_ids_zero_size3d_w_size() const;
  void clear_cls_ids_zero_size3d_w();
  static const int kClsIdsZeroSize3DWFieldNumber = 7;
  ::google::protobuf::uint32 cls_ids_zero_size3d_w(int index) const;
  void set_cls_ids_zero_size3d_w(int index, ::google::protobuf::uint32 value);
  void add_cls_ids_zero_size3d_w(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cls_ids_zero_size3d_w() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cls_ids_zero_size3d_w();

  // repeated uint32 cls_ids_zero_size3d_l = 8;
  int cls_ids_zero_size3d_l_size() const;
  void clear_cls_ids_zero_size3d_l();
  static const int kClsIdsZeroSize3DLFieldNumber = 8;
  ::google::protobuf::uint32 cls_ids_zero_size3d_l(int index) const;
  void set_cls_ids_zero_size3d_l(int index, ::google::protobuf::uint32 value);
  void add_cls_ids_zero_size3d_l(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cls_ids_zero_size3d_l() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cls_ids_zero_size3d_l();

  // repeated uint32 cls_ids_zero_orien3d = 9;
  int cls_ids_zero_orien3d_size() const;
  void clear_cls_ids_zero_orien3d();
  static const int kClsIdsZeroOrien3DFieldNumber = 9;
  ::google::protobuf::uint32 cls_ids_zero_orien3d(int index) const;
  void set_cls_ids_zero_orien3d(int index, ::google::protobuf::uint32 value);
  void add_cls_ids_zero_orien3d(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cls_ids_zero_orien3d() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cls_ids_zero_orien3d();

  // repeated float ctr_2d_means = 12;
  int ctr_2d_means_size() const;
  void clear_ctr_2d_means();
  static const int kCtr2DMeansFieldNumber = 12;
  float ctr_2d_means(int index) const;
  void set_ctr_2d_means(int index, float value);
  void add_ctr_2d_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      ctr_2d_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ctr_2d_means();

  // repeated float ctr_2d_stds = 13;
  int ctr_2d_stds_size() const;
  void clear_ctr_2d_stds();
  static const int kCtr2DStdsFieldNumber = 13;
  float ctr_2d_stds(int index) const;
  void set_ctr_2d_stds(int index, float value);
  void add_ctr_2d_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      ctr_2d_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ctr_2d_stds();

  // repeated float prj_h_means = 14;
  int prj_h_means_size() const;
  void clear_prj_h_means();
  static const int kPrjHMeansFieldNumber = 14;
  float prj_h_means(int index) const;
  void set_prj_h_means(int index, float value);
  void add_prj_h_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      prj_h_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_prj_h_means();

  // repeated float prj_h_stds = 15;
  int prj_h_stds_size() const;
  void clear_prj_h_stds();
  static const int kPrjHStdsFieldNumber = 15;
  float prj_h_stds(int index) const;
  void set_prj_h_stds(int index, float value);
  void add_prj_h_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      prj_h_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_prj_h_stds();

  // repeated float real_h_means = 16;
  int real_h_means_size() const;
  void clear_real_h_means();
  static const int kRealHMeansFieldNumber = 16;
  float real_h_means(int index) const;
  void set_real_h_means(int index, float value);
  void add_real_h_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      real_h_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_real_h_means();

  // repeated float real_h_stds = 17;
  int real_h_stds_size() const;
  void clear_real_h_stds();
  static const int kRealHStdsFieldNumber = 17;
  float real_h_stds(int index) const;
  void set_real_h_stds(int index, float value);
  void add_real_h_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      real_h_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_real_h_stds();

  // repeated float real_w_means = 18;
  int real_w_means_size() const;
  void clear_real_w_means();
  static const int kRealWMeansFieldNumber = 18;
  float real_w_means(int index) const;
  void set_real_w_means(int index, float value);
  void add_real_w_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      real_w_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_real_w_means();

  // repeated float real_w_stds = 19;
  int real_w_stds_size() const;
  void clear_real_w_stds();
  static const int kRealWStdsFieldNumber = 19;
  float real_w_stds(int index) const;
  void set_real_w_stds(int index, float value);
  void add_real_w_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      real_w_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_real_w_stds();

  // repeated float real_l_means = 20;
  int real_l_means_size() const;
  void clear_real_l_means();
  static const int kRealLMeansFieldNumber = 20;
  float real_l_means(int index) const;
  void set_real_l_means(int index, float value);
  void add_real_l_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      real_l_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_real_l_means();

  // repeated float real_l_stds = 21;
  int real_l_stds_size() const;
  void clear_real_l_stds();
  static const int kRealLStdsFieldNumber = 21;
  float real_l_stds(int index) const;
  void set_real_l_stds(int index, float value);
  void add_real_l_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      real_l_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_real_l_stds();

  // repeated float sin_means = 22;
  int sin_means_size() const;
  void clear_sin_means();
  static const int kSinMeansFieldNumber = 22;
  float sin_means(int index) const;
  void set_sin_means(int index, float value);
  void add_sin_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      sin_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_sin_means();

  // repeated float sin_stds = 23;
  int sin_stds_size() const;
  void clear_sin_stds();
  static const int kSinStdsFieldNumber = 23;
  float sin_stds(int index) const;
  void set_sin_stds(int index, float value);
  void add_sin_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      sin_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_sin_stds();

  // repeated float cos_means = 24;
  int cos_means_size() const;
  void clear_cos_means();
  static const int kCosMeansFieldNumber = 24;
  float cos_means(int index) const;
  void set_cos_means(int index, float value);
  void add_cos_means(float value);
  const ::google::protobuf::RepeatedField< float >&
      cos_means() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cos_means();

  // repeated float cos_stds = 25;
  int cos_stds_size() const;
  void clear_cos_stds();
  static const int kCosStdsFieldNumber = 25;
  float cos_stds(int index) const;
  void set_cos_stds(int index, float value);
  void add_cos_stds(float value);
  const ::google::protobuf::RepeatedField< float >&
      cos_stds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cos_stds();

  // required uint32 num_class = 1;
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 1;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional bool has_size3d_and_orien3d = 5 [default = false];
  bool has_has_size3d_and_orien3d() const;
  void clear_has_size3d_and_orien3d();
  static const int kHasSize3DAndOrien3DFieldNumber = 5;
  bool has_size3d_and_orien3d() const;
  void set_has_size3d_and_orien3d(bool value);

  // optional bool cmp_pts_corner_3d = 10 [default = false];
  bool has_cmp_pts_corner_3d() const;
  void clear_cmp_pts_corner_3d();
  static const int kCmpPtsCorner3DFieldNumber = 10;
  bool cmp_pts_corner_3d() const;
  void set_cmp_pts_corner_3d(bool value);

  // optional bool cmp_pts_corner_2d = 11 [default = false];
  bool has_cmp_pts_corner_2d() const;
  void clear_cmp_pts_corner_2d();
  static const int kCmpPtsCorner2DFieldNumber = 11;
  bool cmp_pts_corner_2d() const;
  void set_cmp_pts_corner_2d(bool value);

  // optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
  bool has_cam_info_idx_st_in_im_info() const;
  void clear_cam_info_idx_st_in_im_info();
  static const int kCamInfoIdxStInImInfoFieldNumber = 26;
  ::google::protobuf::uint32 cam_info_idx_st_in_im_info() const;
  void set_cam_info_idx_st_in_im_info(::google::protobuf::uint32 value);

  // optional float cords_offset_x = 29 [default = 0];
  bool has_cords_offset_x() const;
  void clear_cords_offset_x();
  static const int kCordsOffsetXFieldNumber = 29;
  float cords_offset_x() const;
  void set_cords_offset_x(float value);

  // optional float cords_offset_y = 30 [default = 0];
  bool has_cords_offset_y() const;
  void clear_cords_offset_y();
  static const int kCordsOffsetYFieldNumber = 30;
  float cords_offset_y() const;
  void set_cords_offset_y(float value);

  // optional bool bbox_size_add_one = 31 [default = true];
  bool has_bbox_size_add_one() const;
  void clear_bbox_size_add_one();
  static const int kBboxSizeAddOneFieldNumber = 31;
  bool bbox_size_add_one() const;
  void set_bbox_size_add_one(bool value);

  // optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
  bool has_prj_h_norm_type() const;
  void clear_prj_h_norm_type();
  static const int kPrjHNormTypeFieldNumber = 4;
  ::caffe::ProposalImgScaleToCamCoordsParameter_NormType prj_h_norm_type() const;
  void set_prj_h_norm_type(::caffe::ProposalImgScaleToCamCoordsParameter_NormType value);

  // optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
  bool has_orien_type() const;
  void clear_orien_type();
  static const int kOrienTypeFieldNumber = 6;
  ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType orien_type() const;
  void set_orien_type(::caffe::ProposalImgScaleToCamCoordsParameter_OrienType value);

  // optional float im_width_scale = 27 [default = 1];
  bool has_im_width_scale() const;
  void clear_im_width_scale();
  static const int kImWidthScaleFieldNumber = 27;
  float im_width_scale() const;
  void set_im_width_scale(float value);

  // optional float im_height_scale = 28 [default = 1];
  bool has_im_height_scale() const;
  void clear_im_height_scale();
  static const int kImHeightScaleFieldNumber = 28;
  float im_height_scale() const;
  void set_im_height_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ProposalImgScaleToCamCoordsParameter)
 private:
  void set_has_num_class();
  void clear_has_num_class();
  void set_has_prj_h_norm_type();
  void clear_has_prj_h_norm_type();
  void set_has_has_size3d_and_orien3d();
  void clear_has_has_size3d_and_orien3d();
  void set_has_orien_type();
  void clear_has_orien_type();
  void set_has_cmp_pts_corner_3d();
  void clear_has_cmp_pts_corner_3d();
  void set_has_cmp_pts_corner_2d();
  void clear_has_cmp_pts_corner_2d();
  void set_has_cam_info_idx_st_in_im_info();
  void clear_has_cam_info_idx_st_in_im_info();
  void set_has_im_width_scale();
  void clear_has_im_width_scale();
  void set_has_im_height_scale();
  void clear_has_im_height_scale();
  void set_has_cords_offset_x();
  void clear_has_cords_offset_x();
  void set_has_cords_offset_y();
  void clear_has_cords_offset_y();
  void set_has_bbox_size_add_one();
  void clear_has_bbox_size_add_one();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sub_class_num_class_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sub_class_bottom_idx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cls_ids_zero_size3d_w_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cls_ids_zero_size3d_l_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cls_ids_zero_orien3d_;
  ::google::protobuf::RepeatedField< float > ctr_2d_means_;
  ::google::protobuf::RepeatedField< float > ctr_2d_stds_;
  ::google::protobuf::RepeatedField< float > prj_h_means_;
  ::google::protobuf::RepeatedField< float > prj_h_stds_;
  ::google::protobuf::RepeatedField< float > real_h_means_;
  ::google::protobuf::RepeatedField< float > real_h_stds_;
  ::google::protobuf::RepeatedField< float > real_w_means_;
  ::google::protobuf::RepeatedField< float > real_w_stds_;
  ::google::protobuf::RepeatedField< float > real_l_means_;
  ::google::protobuf::RepeatedField< float > real_l_stds_;
  ::google::protobuf::RepeatedField< float > sin_means_;
  ::google::protobuf::RepeatedField< float > sin_stds_;
  ::google::protobuf::RepeatedField< float > cos_means_;
  ::google::protobuf::RepeatedField< float > cos_stds_;
  ::google::protobuf::uint32 num_class_;
  bool has_size3d_and_orien3d_;
  bool cmp_pts_corner_3d_;
  bool cmp_pts_corner_2d_;
  ::google::protobuf::uint32 cam_info_idx_st_in_im_info_;
  float cords_offset_x_;
  float cords_offset_y_;
  bool bbox_size_add_one_;
  int prj_h_norm_type_;
  int orien_type_;
  float im_width_scale_;
  float im_height_scale_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeformableConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DeformableConvolutionParameter) */ {
 public:
  DeformableConvolutionParameter();
  virtual ~DeformableConvolutionParameter();

  DeformableConvolutionParameter(const DeformableConvolutionParameter& from);

  inline DeformableConvolutionParameter& operator=(const DeformableConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeformableConvolutionParameter& default_instance();

  static inline const DeformableConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const DeformableConvolutionParameter*>(
               &_DeformableConvolutionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void Swap(DeformableConvolutionParameter* other);

  // implements Message ----------------------------------------------

  inline DeformableConvolutionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DeformableConvolutionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeformableConvolutionParameter& from);
  void MergeFrom(const DeformableConvolutionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeformableConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DeformableConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    DeformableConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    DeformableConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    DeformableConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return DeformableConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    DeformableConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    DeformableConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    DeformableConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return DeformableConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return DeformableConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return DeformableConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 pad = 3;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size(int index) const;
  void set_kernel_size(int index, ::google::protobuf::uint32 value);
  void add_kernel_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 18;
  ::google::protobuf::uint32 dilation(int index) const;
  void set_dilation(int index, ::google::protobuf::uint32 value);
  void add_dilation(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::DeformableConvolutionParameter_Engine engine() const;
  void set_engine(::caffe::DeformableConvolutionParameter_Engine value);

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 16;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DeformableConvolutionParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_group();
  void clear_has_group();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_engine();
  void clear_has_engine();
  void set_has_axis();
  void clear_has_axis();
  void set_has_force_nd_im2col();
  void clear_has_force_nd_im2col();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool force_nd_im2col_;
  ::google::protobuf::int32 axis_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  friend struct protobuf_caffe_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
inline ::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
inline ::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena();
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
#if LANG_CXX11
inline void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
#endif
inline void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&FillerParameter::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
inline void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &FillerParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&FillerParameter::_default_type_.get());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&FillerParameter::_default_type_.get());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

// optional int32 num_groups = 9;
inline bool FillerParameter::has_num_groups() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_num_groups() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_num_groups() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_num_groups() {
  num_groups_ = 0;
  clear_has_num_groups();
}
inline ::google::protobuf::int32 FillerParameter::num_groups() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.num_groups)
  return num_groups_;
}
inline void FillerParameter::set_num_groups(::google::protobuf::int32 value) {
  set_has_num_groups();
  num_groups_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.num_groups)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
inline void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
inline void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetParameter::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#if LANG_CXX11
inline void NetParameter::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#endif
inline void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_
                         : *::caffe::NetState::internal_default_instance();
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline ::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
inline ::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena();
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
#if LANG_CXX11
inline void SolverParameter::set_net(::std::string&& value) {
  set_has_net();
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.net)
}
#endif
inline void SolverParameter::set_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena();
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
#if LANG_CXX11
inline void SolverParameter::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.train_net)
}
#endif
inline void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SolverParameter::set_test_net(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SolverParameter::set_test_net(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline ::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#if LANG_CXX11
inline void SolverParameter::add_test_net(::std::string&& value) {
  test_net_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#endif
inline void SolverParameter::add_test_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_
                         : *::caffe::NetState::internal_default_instance();
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena();
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
#if LANG_CXX11
inline void SolverParameter::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.lr_policy)
}
#endif
inline void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&SolverParameter::_default_regularization_type_.get());
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena();
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
#if LANG_CXX11
inline void SolverParameter::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &SolverParameter::_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.regularization_type)
}
#endif
inline void SolverParameter::set_regularization_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&SolverParameter::_default_regularization_type_.get());
}
inline ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(&SolverParameter::_default_regularization_type_.get());
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&SolverParameter::_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 print_param = 555 [default = 0];
inline bool SolverParameter::has_print_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_print_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_print_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_print_param() {
  print_param_ = 0;
  clear_has_print_param();
}
inline ::google::protobuf::int32 SolverParameter::print_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.print_param)
  return print_param_;
}
inline void SolverParameter::set_print_param(::google::protobuf::int32 value) {
  set_has_print_param();
  print_param_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.print_param)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
#if LANG_CXX11
inline void SolverParameter::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
#endif
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(&SolverParameter::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena();
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
#if LANG_CXX11
inline void SolverParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &SolverParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.type)
}
#endif
inline void SolverParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(&SolverParameter::_default_type_.get());
}
inline ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&SolverParameter::_default_type_.get());
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&SolverParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38;
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional .caffe.PreviousStageParameter previous_stage_param = 3001;
inline bool SolverParameter::has_previous_stage_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_previous_stage_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_previous_stage_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_previous_stage_param() {
  if (previous_stage_param_ != NULL) previous_stage_param_->::caffe::PreviousStageParameter::Clear();
  clear_has_previous_stage_param();
}
inline const ::caffe::PreviousStageParameter& SolverParameter::previous_stage_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.previous_stage_param)
  return previous_stage_param_ != NULL ? *previous_stage_param_
                         : *::caffe::PreviousStageParameter::internal_default_instance();
}
inline ::caffe::PreviousStageParameter* SolverParameter::mutable_previous_stage_param() {
  set_has_previous_stage_param();
  if (previous_stage_param_ == NULL) {
    previous_stage_param_ = new ::caffe::PreviousStageParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.previous_stage_param)
  return previous_stage_param_;
}
inline ::caffe::PreviousStageParameter* SolverParameter::release_previous_stage_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.previous_stage_param)
  clear_has_previous_stage_param();
  ::caffe::PreviousStageParameter* temp = previous_stage_param_;
  previous_stage_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_previous_stage_param(::caffe::PreviousStageParameter* previous_stage_param) {
  delete previous_stage_param_;
  previous_stage_param_ = previous_stage_param;
  if (previous_stage_param) {
    set_has_previous_stage_param();
  } else {
    clear_has_previous_stage_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.previous_stage_param)
}

// optional uint32 param_update_interval = 3002 [default = 1];
inline bool SolverParameter::has_param_update_interval() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_param_update_interval() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_param_update_interval() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_param_update_interval() {
  param_update_interval_ = 1u;
  clear_has_param_update_interval();
}
inline ::google::protobuf::uint32 SolverParameter::param_update_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.param_update_interval)
  return param_update_interval_;
}
inline void SolverParameter::set_param_update_interval(::google::protobuf::uint32 value) {
  set_has_param_update_interval();
  param_update_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.param_update_interval)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
inline void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
inline void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetState::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#if LANG_CXX11
inline void NetState::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#endif
inline void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetStateRule::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#if LANG_CXX11
inline void NetStateRule::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#endif
inline void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetStateRule::set_not_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#if LANG_CXX11
inline void NetStateRule::add_not_stage(::std::string&& value) {
  not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#endif
inline void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena();
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
#if LANG_CXX11
inline void ParamSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ParamSpec.name)
}
#endif
inline void ParamSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
inline void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena();
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
#if LANG_CXX11
inline void LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.type)
}
#endif
inline void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#if LANG_CXX11
inline void LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#endif
inline void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#if LANG_CXX11
inline void LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#endif
inline void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[3] |= 0x00000002u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
inline ::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_
                         : *::caffe::BatchNormParameter::internal_default_instance();
}
inline ::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
inline const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_
                         : *::caffe::BiasParameter::internal_default_instance();
}
inline ::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
inline const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_
                         : *::caffe::ELUParameter::internal_default_instance();
}
inline ::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
inline const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_
                         : *::caffe::EmbedParameter::internal_default_instance();
}
inline ::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
inline const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_
                         : *::caffe::FlattenParameter::internal_default_instance();
}
inline ::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
inline const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_
                         : *::caffe::InputParameter::internal_default_instance();
}
inline ::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
inline ::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
inline const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_
                         : *::caffe::LogParameter::internal_default_instance();
}
inline ::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
inline ::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_
                         : *::caffe::PReLUParameter::internal_default_instance();
}
inline ::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_
                         : *::caffe::PythonParameter::internal_default_instance();
}
inline ::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
inline const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_
                         : *::caffe::ReductionParameter::internal_default_instance();
}
inline ::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_
                         : *::caffe::ReshapeParameter::internal_default_instance();
}
inline ::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
inline bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[3] |= 0x00000001u;
}
inline void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
inline const ::caffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_
                         : *::caffe::ROIPoolingParameter::internal_default_instance();
}
inline ::caffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
inline ::caffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_pooling_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_
                         : *::caffe::ScaleParameter::internal_default_instance();
}
inline ::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
inline const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_
                         : *::caffe::SPPParameter::internal_default_instance();
}
inline ::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
inline const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_
                         : *::caffe::TileParameter::internal_default_instance();
}
inline ::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .smartseg.ConfigParameter smartseg_config_param = 2000;
inline bool LayerParameter::has_smartseg_config_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_smartseg_config_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_smartseg_config_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_smartseg_config_param() {
  if (smartseg_config_param_ != NULL) smartseg_config_param_->::smartseg::ConfigParameter::Clear();
  clear_has_smartseg_config_param();
}
inline const ::smartseg::ConfigParameter& LayerParameter::smartseg_config_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_config_param)
  return smartseg_config_param_ != NULL ? *smartseg_config_param_
                         : *::smartseg::ConfigParameter::internal_default_instance();
}
inline ::smartseg::ConfigParameter* LayerParameter::mutable_smartseg_config_param() {
  set_has_smartseg_config_param();
  if (smartseg_config_param_ == NULL) {
    smartseg_config_param_ = new ::smartseg::ConfigParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_config_param)
  return smartseg_config_param_;
}
inline ::smartseg::ConfigParameter* LayerParameter::release_smartseg_config_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_config_param)
  clear_has_smartseg_config_param();
  ::smartseg::ConfigParameter* temp = smartseg_config_param_;
  smartseg_config_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_config_param(::smartseg::ConfigParameter* smartseg_config_param) {
  delete smartseg_config_param_;
  smartseg_config_param_ = smartseg_config_param;
  if (smartseg_config_param) {
    set_has_smartseg_config_param();
  } else {
    clear_has_smartseg_config_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_config_param)
}

// optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
inline bool LayerParameter::has_smartseg_frame_data_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_smartseg_frame_data_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_smartseg_frame_data_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_smartseg_frame_data_param() {
  if (smartseg_frame_data_param_ != NULL) smartseg_frame_data_param_->::smartseg::FrameDataParameter::Clear();
  clear_has_smartseg_frame_data_param();
}
inline const ::smartseg::FrameDataParameter& LayerParameter::smartseg_frame_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_frame_data_param)
  return smartseg_frame_data_param_ != NULL ? *smartseg_frame_data_param_
                         : *::smartseg::FrameDataParameter::internal_default_instance();
}
inline ::smartseg::FrameDataParameter* LayerParameter::mutable_smartseg_frame_data_param() {
  set_has_smartseg_frame_data_param();
  if (smartseg_frame_data_param_ == NULL) {
    smartseg_frame_data_param_ = new ::smartseg::FrameDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_frame_data_param)
  return smartseg_frame_data_param_;
}
inline ::smartseg::FrameDataParameter* LayerParameter::release_smartseg_frame_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_frame_data_param)
  clear_has_smartseg_frame_data_param();
  ::smartseg::FrameDataParameter* temp = smartseg_frame_data_param_;
  smartseg_frame_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_frame_data_param(::smartseg::FrameDataParameter* smartseg_frame_data_param) {
  delete smartseg_frame_data_param_;
  smartseg_frame_data_param_ = smartseg_frame_data_param;
  if (smartseg_frame_data_param) {
    set_has_smartseg_frame_data_param();
  } else {
    clear_has_smartseg_frame_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_frame_data_param)
}

// optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
inline bool LayerParameter::has_smartseg_frame_sequence_data_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_frame_sequence_data_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_smartseg_frame_sequence_data_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_smartseg_frame_sequence_data_param() {
  if (smartseg_frame_sequence_data_param_ != NULL) smartseg_frame_sequence_data_param_->::smartseg::FrameSequenceDataParameter::Clear();
  clear_has_smartseg_frame_sequence_data_param();
}
inline const ::smartseg::FrameSequenceDataParameter& LayerParameter::smartseg_frame_sequence_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_frame_sequence_data_param)
  return smartseg_frame_sequence_data_param_ != NULL ? *smartseg_frame_sequence_data_param_
                         : *::smartseg::FrameSequenceDataParameter::internal_default_instance();
}
inline ::smartseg::FrameSequenceDataParameter* LayerParameter::mutable_smartseg_frame_sequence_data_param() {
  set_has_smartseg_frame_sequence_data_param();
  if (smartseg_frame_sequence_data_param_ == NULL) {
    smartseg_frame_sequence_data_param_ = new ::smartseg::FrameSequenceDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_frame_sequence_data_param)
  return smartseg_frame_sequence_data_param_;
}
inline ::smartseg::FrameSequenceDataParameter* LayerParameter::release_smartseg_frame_sequence_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_frame_sequence_data_param)
  clear_has_smartseg_frame_sequence_data_param();
  ::smartseg::FrameSequenceDataParameter* temp = smartseg_frame_sequence_data_param_;
  smartseg_frame_sequence_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_frame_sequence_data_param(::smartseg::FrameSequenceDataParameter* smartseg_frame_sequence_data_param) {
  delete smartseg_frame_sequence_data_param_;
  smartseg_frame_sequence_data_param_ = smartseg_frame_sequence_data_param;
  if (smartseg_frame_sequence_data_param) {
    set_has_smartseg_frame_sequence_data_param();
  } else {
    clear_has_smartseg_frame_sequence_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_frame_sequence_data_param)
}

// optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
inline bool LayerParameter::has_smartseg_blob_visualize_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_smartseg_blob_visualize_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_smartseg_blob_visualize_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_smartseg_blob_visualize_param() {
  if (smartseg_blob_visualize_param_ != NULL) smartseg_blob_visualize_param_->::smartseg::BlobVisualizeParameter::Clear();
  clear_has_smartseg_blob_visualize_param();
}
inline const ::smartseg::BlobVisualizeParameter& LayerParameter::smartseg_blob_visualize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_blob_visualize_param)
  return smartseg_blob_visualize_param_ != NULL ? *smartseg_blob_visualize_param_
                         : *::smartseg::BlobVisualizeParameter::internal_default_instance();
}
inline ::smartseg::BlobVisualizeParameter* LayerParameter::mutable_smartseg_blob_visualize_param() {
  set_has_smartseg_blob_visualize_param();
  if (smartseg_blob_visualize_param_ == NULL) {
    smartseg_blob_visualize_param_ = new ::smartseg::BlobVisualizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_blob_visualize_param)
  return smartseg_blob_visualize_param_;
}
inline ::smartseg::BlobVisualizeParameter* LayerParameter::release_smartseg_blob_visualize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_blob_visualize_param)
  clear_has_smartseg_blob_visualize_param();
  ::smartseg::BlobVisualizeParameter* temp = smartseg_blob_visualize_param_;
  smartseg_blob_visualize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_blob_visualize_param(::smartseg::BlobVisualizeParameter* smartseg_blob_visualize_param) {
  delete smartseg_blob_visualize_param_;
  smartseg_blob_visualize_param_ = smartseg_blob_visualize_param;
  if (smartseg_blob_visualize_param) {
    set_has_smartseg_blob_visualize_param();
  } else {
    clear_has_smartseg_blob_visualize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_blob_visualize_param)
}

// optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
inline bool LayerParameter::has_smartseg_plan_view_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_smartseg_plan_view_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_smartseg_plan_view_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_smartseg_plan_view_param() {
  if (smartseg_plan_view_param_ != NULL) smartseg_plan_view_param_->::smartseg::PlanViewParameter::Clear();
  clear_has_smartseg_plan_view_param();
}
inline const ::smartseg::PlanViewParameter& LayerParameter::smartseg_plan_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_plan_view_param)
  return smartseg_plan_view_param_ != NULL ? *smartseg_plan_view_param_
                         : *::smartseg::PlanViewParameter::internal_default_instance();
}
inline ::smartseg::PlanViewParameter* LayerParameter::mutable_smartseg_plan_view_param() {
  set_has_smartseg_plan_view_param();
  if (smartseg_plan_view_param_ == NULL) {
    smartseg_plan_view_param_ = new ::smartseg::PlanViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_plan_view_param)
  return smartseg_plan_view_param_;
}
inline ::smartseg::PlanViewParameter* LayerParameter::release_smartseg_plan_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_plan_view_param)
  clear_has_smartseg_plan_view_param();
  ::smartseg::PlanViewParameter* temp = smartseg_plan_view_param_;
  smartseg_plan_view_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_plan_view_param(::smartseg::PlanViewParameter* smartseg_plan_view_param) {
  delete smartseg_plan_view_param_;
  smartseg_plan_view_param_ = smartseg_plan_view_param;
  if (smartseg_plan_view_param) {
    set_has_smartseg_plan_view_param();
  } else {
    clear_has_smartseg_plan_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_plan_view_param)
}

// optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
inline bool LayerParameter::has_smartseg_plan_view_extractor_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_plan_view_extractor_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_smartseg_plan_view_extractor_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_smartseg_plan_view_extractor_param() {
  if (smartseg_plan_view_extractor_param_ != NULL) smartseg_plan_view_extractor_param_->::smartseg::PlanViewExtractorParameter::Clear();
  clear_has_smartseg_plan_view_extractor_param();
}
inline const ::smartseg::PlanViewExtractorParameter& LayerParameter::smartseg_plan_view_extractor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_plan_view_extractor_param)
  return smartseg_plan_view_extractor_param_ != NULL ? *smartseg_plan_view_extractor_param_
                         : *::smartseg::PlanViewExtractorParameter::internal_default_instance();
}
inline ::smartseg::PlanViewExtractorParameter* LayerParameter::mutable_smartseg_plan_view_extractor_param() {
  set_has_smartseg_plan_view_extractor_param();
  if (smartseg_plan_view_extractor_param_ == NULL) {
    smartseg_plan_view_extractor_param_ = new ::smartseg::PlanViewExtractorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_plan_view_extractor_param)
  return smartseg_plan_view_extractor_param_;
}
inline ::smartseg::PlanViewExtractorParameter* LayerParameter::release_smartseg_plan_view_extractor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_plan_view_extractor_param)
  clear_has_smartseg_plan_view_extractor_param();
  ::smartseg::PlanViewExtractorParameter* temp = smartseg_plan_view_extractor_param_;
  smartseg_plan_view_extractor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_plan_view_extractor_param(::smartseg::PlanViewExtractorParameter* smartseg_plan_view_extractor_param) {
  delete smartseg_plan_view_extractor_param_;
  smartseg_plan_view_extractor_param_ = smartseg_plan_view_extractor_param;
  if (smartseg_plan_view_extractor_param) {
    set_has_smartseg_plan_view_extractor_param();
  } else {
    clear_has_smartseg_plan_view_extractor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_plan_view_extractor_param)
}

// optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
inline bool LayerParameter::has_smartseg_horizontal_view_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_smartseg_horizontal_view_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_smartseg_horizontal_view_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_smartseg_horizontal_view_param() {
  if (smartseg_horizontal_view_param_ != NULL) smartseg_horizontal_view_param_->::smartseg::HorizontalViewParameter::Clear();
  clear_has_smartseg_horizontal_view_param();
}
inline const ::smartseg::HorizontalViewParameter& LayerParameter::smartseg_horizontal_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_horizontal_view_param)
  return smartseg_horizontal_view_param_ != NULL ? *smartseg_horizontal_view_param_
                         : *::smartseg::HorizontalViewParameter::internal_default_instance();
}
inline ::smartseg::HorizontalViewParameter* LayerParameter::mutable_smartseg_horizontal_view_param() {
  set_has_smartseg_horizontal_view_param();
  if (smartseg_horizontal_view_param_ == NULL) {
    smartseg_horizontal_view_param_ = new ::smartseg::HorizontalViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_horizontal_view_param)
  return smartseg_horizontal_view_param_;
}
inline ::smartseg::HorizontalViewParameter* LayerParameter::release_smartseg_horizontal_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_horizontal_view_param)
  clear_has_smartseg_horizontal_view_param();
  ::smartseg::HorizontalViewParameter* temp = smartseg_horizontal_view_param_;
  smartseg_horizontal_view_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_horizontal_view_param(::smartseg::HorizontalViewParameter* smartseg_horizontal_view_param) {
  delete smartseg_horizontal_view_param_;
  smartseg_horizontal_view_param_ = smartseg_horizontal_view_param;
  if (smartseg_horizontal_view_param) {
    set_has_smartseg_horizontal_view_param();
  } else {
    clear_has_smartseg_horizontal_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_horizontal_view_param)
}

// optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
inline bool LayerParameter::has_smartseg_horizontal_view_extractor_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_horizontal_view_extractor_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_smartseg_horizontal_view_extractor_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_smartseg_horizontal_view_extractor_param() {
  if (smartseg_horizontal_view_extractor_param_ != NULL) smartseg_horizontal_view_extractor_param_->::smartseg::HorizontalViewExtractorParameter::Clear();
  clear_has_smartseg_horizontal_view_extractor_param();
}
inline const ::smartseg::HorizontalViewExtractorParameter& LayerParameter::smartseg_horizontal_view_extractor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
  return smartseg_horizontal_view_extractor_param_ != NULL ? *smartseg_horizontal_view_extractor_param_
                         : *::smartseg::HorizontalViewExtractorParameter::internal_default_instance();
}
inline ::smartseg::HorizontalViewExtractorParameter* LayerParameter::mutable_smartseg_horizontal_view_extractor_param() {
  set_has_smartseg_horizontal_view_extractor_param();
  if (smartseg_horizontal_view_extractor_param_ == NULL) {
    smartseg_horizontal_view_extractor_param_ = new ::smartseg::HorizontalViewExtractorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
  return smartseg_horizontal_view_extractor_param_;
}
inline ::smartseg::HorizontalViewExtractorParameter* LayerParameter::release_smartseg_horizontal_view_extractor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
  clear_has_smartseg_horizontal_view_extractor_param();
  ::smartseg::HorizontalViewExtractorParameter* temp = smartseg_horizontal_view_extractor_param_;
  smartseg_horizontal_view_extractor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_horizontal_view_extractor_param(::smartseg::HorizontalViewExtractorParameter* smartseg_horizontal_view_extractor_param) {
  delete smartseg_horizontal_view_extractor_param_;
  smartseg_horizontal_view_extractor_param_ = smartseg_horizontal_view_extractor_param;
  if (smartseg_horizontal_view_extractor_param) {
    set_has_smartseg_horizontal_view_extractor_param();
  } else {
    clear_has_smartseg_horizontal_view_extractor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
}

// optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
inline bool LayerParameter::has_smartseg_side_view_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_smartseg_side_view_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_smartseg_side_view_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_smartseg_side_view_param() {
  if (smartseg_side_view_param_ != NULL) smartseg_side_view_param_->::smartseg::SideViewParameter::Clear();
  clear_has_smartseg_side_view_param();
}
inline const ::smartseg::SideViewParameter& LayerParameter::smartseg_side_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_side_view_param)
  return smartseg_side_view_param_ != NULL ? *smartseg_side_view_param_
                         : *::smartseg::SideViewParameter::internal_default_instance();
}
inline ::smartseg::SideViewParameter* LayerParameter::mutable_smartseg_side_view_param() {
  set_has_smartseg_side_view_param();
  if (smartseg_side_view_param_ == NULL) {
    smartseg_side_view_param_ = new ::smartseg::SideViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_side_view_param)
  return smartseg_side_view_param_;
}
inline ::smartseg::SideViewParameter* LayerParameter::release_smartseg_side_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_side_view_param)
  clear_has_smartseg_side_view_param();
  ::smartseg::SideViewParameter* temp = smartseg_side_view_param_;
  smartseg_side_view_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_side_view_param(::smartseg::SideViewParameter* smartseg_side_view_param) {
  delete smartseg_side_view_param_;
  smartseg_side_view_param_ = smartseg_side_view_param;
  if (smartseg_side_view_param) {
    set_has_smartseg_side_view_param();
  } else {
    clear_has_smartseg_side_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_side_view_param)
}

// optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
inline bool LayerParameter::has_smartseg_side_view_extractor_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_smartseg_side_view_extractor_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_smartseg_side_view_extractor_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_smartseg_side_view_extractor_param() {
  if (smartseg_side_view_extractor_param_ != NULL) smartseg_side_view_extractor_param_->::smartseg::SideViewExtractorParameter::Clear();
  clear_has_smartseg_side_view_extractor_param();
}
inline const ::smartseg::SideViewExtractorParameter& LayerParameter::smartseg_side_view_extractor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_side_view_extractor_param)
  return smartseg_side_view_extractor_param_ != NULL ? *smartseg_side_view_extractor_param_
                         : *::smartseg::SideViewExtractorParameter::internal_default_instance();
}
inline ::smartseg::SideViewExtractorParameter* LayerParameter::mutable_smartseg_side_view_extractor_param() {
  set_has_smartseg_side_view_extractor_param();
  if (smartseg_side_view_extractor_param_ == NULL) {
    smartseg_side_view_extractor_param_ = new ::smartseg::SideViewExtractorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_side_view_extractor_param)
  return smartseg_side_view_extractor_param_;
}
inline ::smartseg::SideViewExtractorParameter* LayerParameter::release_smartseg_side_view_extractor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_side_view_extractor_param)
  clear_has_smartseg_side_view_extractor_param();
  ::smartseg::SideViewExtractorParameter* temp = smartseg_side_view_extractor_param_;
  smartseg_side_view_extractor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_side_view_extractor_param(::smartseg::SideViewExtractorParameter* smartseg_side_view_extractor_param) {
  delete smartseg_side_view_extractor_param_;
  smartseg_side_view_extractor_param_ = smartseg_side_view_extractor_param;
  if (smartseg_side_view_extractor_param) {
    set_has_smartseg_side_view_extractor_param();
  } else {
    clear_has_smartseg_side_view_extractor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_side_view_extractor_param)
}

// optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
inline bool LayerParameter::has_smartseg_segmentor_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_segmentor_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_smartseg_segmentor_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_smartseg_segmentor_param() {
  if (smartseg_segmentor_param_ != NULL) smartseg_segmentor_param_->::smartseg::SegmentorParameter::Clear();
  clear_has_smartseg_segmentor_param();
}
inline const ::smartseg::SegmentorParameter& LayerParameter::smartseg_segmentor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_segmentor_param)
  return smartseg_segmentor_param_ != NULL ? *smartseg_segmentor_param_
                         : *::smartseg::SegmentorParameter::internal_default_instance();
}
inline ::smartseg::SegmentorParameter* LayerParameter::mutable_smartseg_segmentor_param() {
  set_has_smartseg_segmentor_param();
  if (smartseg_segmentor_param_ == NULL) {
    smartseg_segmentor_param_ = new ::smartseg::SegmentorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_segmentor_param)
  return smartseg_segmentor_param_;
}
inline ::smartseg::SegmentorParameter* LayerParameter::release_smartseg_segmentor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_segmentor_param)
  clear_has_smartseg_segmentor_param();
  ::smartseg::SegmentorParameter* temp = smartseg_segmentor_param_;
  smartseg_segmentor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_segmentor_param(::smartseg::SegmentorParameter* smartseg_segmentor_param) {
  delete smartseg_segmentor_param_;
  smartseg_segmentor_param_ = smartseg_segmentor_param;
  if (smartseg_segmentor_param) {
    set_has_smartseg_segmentor_param();
  } else {
    clear_has_smartseg_segmentor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_segmentor_param)
}

// optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
inline bool LayerParameter::has_smartseg_frame_target_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_frame_target_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_smartseg_frame_target_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_smartseg_frame_target_param() {
  if (smartseg_frame_target_param_ != NULL) smartseg_frame_target_param_->::smartseg::FrameTargetParameter::Clear();
  clear_has_smartseg_frame_target_param();
}
inline const ::smartseg::FrameTargetParameter& LayerParameter::smartseg_frame_target_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_frame_target_param)
  return smartseg_frame_target_param_ != NULL ? *smartseg_frame_target_param_
                         : *::smartseg::FrameTargetParameter::internal_default_instance();
}
inline ::smartseg::FrameTargetParameter* LayerParameter::mutable_smartseg_frame_target_param() {
  set_has_smartseg_frame_target_param();
  if (smartseg_frame_target_param_ == NULL) {
    smartseg_frame_target_param_ = new ::smartseg::FrameTargetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_frame_target_param)
  return smartseg_frame_target_param_;
}
inline ::smartseg::FrameTargetParameter* LayerParameter::release_smartseg_frame_target_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_frame_target_param)
  clear_has_smartseg_frame_target_param();
  ::smartseg::FrameTargetParameter* temp = smartseg_frame_target_param_;
  smartseg_frame_target_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_frame_target_param(::smartseg::FrameTargetParameter* smartseg_frame_target_param) {
  delete smartseg_frame_target_param_;
  smartseg_frame_target_param_ = smartseg_frame_target_param;
  if (smartseg_frame_target_param) {
    set_has_smartseg_frame_target_param();
  } else {
    clear_has_smartseg_frame_target_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_frame_target_param)
}

// optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
inline bool LayerParameter::has_smartseg_online_norm_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_online_norm_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_smartseg_online_norm_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_smartseg_online_norm_param() {
  if (smartseg_online_norm_param_ != NULL) smartseg_online_norm_param_->::smartseg::OnlineNormParameter::Clear();
  clear_has_smartseg_online_norm_param();
}
inline const ::smartseg::OnlineNormParameter& LayerParameter::smartseg_online_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_online_norm_param)
  return smartseg_online_norm_param_ != NULL ? *smartseg_online_norm_param_
                         : *::smartseg::OnlineNormParameter::internal_default_instance();
}
inline ::smartseg::OnlineNormParameter* LayerParameter::mutable_smartseg_online_norm_param() {
  set_has_smartseg_online_norm_param();
  if (smartseg_online_norm_param_ == NULL) {
    smartseg_online_norm_param_ = new ::smartseg::OnlineNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_online_norm_param)
  return smartseg_online_norm_param_;
}
inline ::smartseg::OnlineNormParameter* LayerParameter::release_smartseg_online_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_online_norm_param)
  clear_has_smartseg_online_norm_param();
  ::smartseg::OnlineNormParameter* temp = smartseg_online_norm_param_;
  smartseg_online_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_online_norm_param(::smartseg::OnlineNormParameter* smartseg_online_norm_param) {
  delete smartseg_online_norm_param_;
  smartseg_online_norm_param_ = smartseg_online_norm_param;
  if (smartseg_online_norm_param) {
    set_has_smartseg_online_norm_param();
  } else {
    clear_has_smartseg_online_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_online_norm_param)
}

// optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
inline bool LayerParameter::has_smartseg_view_pooling_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_view_pooling_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_smartseg_view_pooling_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_smartseg_view_pooling_param() {
  if (smartseg_view_pooling_param_ != NULL) smartseg_view_pooling_param_->::smartseg::ViewPoolingParameter::Clear();
  clear_has_smartseg_view_pooling_param();
}
inline const ::smartseg::ViewPoolingParameter& LayerParameter::smartseg_view_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_view_pooling_param)
  return smartseg_view_pooling_param_ != NULL ? *smartseg_view_pooling_param_
                         : *::smartseg::ViewPoolingParameter::internal_default_instance();
}
inline ::smartseg::ViewPoolingParameter* LayerParameter::mutable_smartseg_view_pooling_param() {
  set_has_smartseg_view_pooling_param();
  if (smartseg_view_pooling_param_ == NULL) {
    smartseg_view_pooling_param_ = new ::smartseg::ViewPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_view_pooling_param)
  return smartseg_view_pooling_param_;
}
inline ::smartseg::ViewPoolingParameter* LayerParameter::release_smartseg_view_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_view_pooling_param)
  clear_has_smartseg_view_pooling_param();
  ::smartseg::ViewPoolingParameter* temp = smartseg_view_pooling_param_;
  smartseg_view_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_view_pooling_param(::smartseg::ViewPoolingParameter* smartseg_view_pooling_param) {
  delete smartseg_view_pooling_param_;
  smartseg_view_pooling_param_ = smartseg_view_pooling_param;
  if (smartseg_view_pooling_param) {
    set_has_smartseg_view_pooling_param();
  } else {
    clear_has_smartseg_view_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_view_pooling_param)
}

// optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
inline bool LayerParameter::has_smartseg_view_unpooling_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_smartseg_view_unpooling_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_smartseg_view_unpooling_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_smartseg_view_unpooling_param() {
  if (smartseg_view_unpooling_param_ != NULL) smartseg_view_unpooling_param_->::smartseg::ViewUnpoolingParameter::Clear();
  clear_has_smartseg_view_unpooling_param();
}
inline const ::smartseg::ViewUnpoolingParameter& LayerParameter::smartseg_view_unpooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_view_unpooling_param)
  return smartseg_view_unpooling_param_ != NULL ? *smartseg_view_unpooling_param_
                         : *::smartseg::ViewUnpoolingParameter::internal_default_instance();
}
inline ::smartseg::ViewUnpoolingParameter* LayerParameter::mutable_smartseg_view_unpooling_param() {
  set_has_smartseg_view_unpooling_param();
  if (smartseg_view_unpooling_param_ == NULL) {
    smartseg_view_unpooling_param_ = new ::smartseg::ViewUnpoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_view_unpooling_param)
  return smartseg_view_unpooling_param_;
}
inline ::smartseg::ViewUnpoolingParameter* LayerParameter::release_smartseg_view_unpooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_view_unpooling_param)
  clear_has_smartseg_view_unpooling_param();
  ::smartseg::ViewUnpoolingParameter* temp = smartseg_view_unpooling_param_;
  smartseg_view_unpooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_view_unpooling_param(::smartseg::ViewUnpoolingParameter* smartseg_view_unpooling_param) {
  delete smartseg_view_unpooling_param_;
  smartseg_view_unpooling_param_ = smartseg_view_unpooling_param;
  if (smartseg_view_unpooling_param) {
    set_has_smartseg_view_unpooling_param();
  } else {
    clear_has_smartseg_view_unpooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_view_unpooling_param)
}

// optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
inline bool LayerParameter::has_smartseg_point_interpolation_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_smartseg_point_interpolation_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_smartseg_point_interpolation_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_smartseg_point_interpolation_param() {
  if (smartseg_point_interpolation_param_ != NULL) smartseg_point_interpolation_param_->::smartseg::PointInterpolationParameter::Clear();
  clear_has_smartseg_point_interpolation_param();
}
inline const ::smartseg::PointInterpolationParameter& LayerParameter::smartseg_point_interpolation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_point_interpolation_param)
  return smartseg_point_interpolation_param_ != NULL ? *smartseg_point_interpolation_param_
                         : *::smartseg::PointInterpolationParameter::internal_default_instance();
}
inline ::smartseg::PointInterpolationParameter* LayerParameter::mutable_smartseg_point_interpolation_param() {
  set_has_smartseg_point_interpolation_param();
  if (smartseg_point_interpolation_param_ == NULL) {
    smartseg_point_interpolation_param_ = new ::smartseg::PointInterpolationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_point_interpolation_param)
  return smartseg_point_interpolation_param_;
}
inline ::smartseg::PointInterpolationParameter* LayerParameter::release_smartseg_point_interpolation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_point_interpolation_param)
  clear_has_smartseg_point_interpolation_param();
  ::smartseg::PointInterpolationParameter* temp = smartseg_point_interpolation_param_;
  smartseg_point_interpolation_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_point_interpolation_param(::smartseg::PointInterpolationParameter* smartseg_point_interpolation_param) {
  delete smartseg_point_interpolation_param_;
  smartseg_point_interpolation_param_ = smartseg_point_interpolation_param;
  if (smartseg_point_interpolation_param) {
    set_has_smartseg_point_interpolation_param();
  } else {
    clear_has_smartseg_point_interpolation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_point_interpolation_param)
}

// optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
inline bool LayerParameter::has_smartseg_dilation_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_smartseg_dilation_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_smartseg_dilation_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_smartseg_dilation_param() {
  if (smartseg_dilation_param_ != NULL) smartseg_dilation_param_->::smartseg::DilationParameter::Clear();
  clear_has_smartseg_dilation_param();
}
inline const ::smartseg::DilationParameter& LayerParameter::smartseg_dilation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_dilation_param)
  return smartseg_dilation_param_ != NULL ? *smartseg_dilation_param_
                         : *::smartseg::DilationParameter::internal_default_instance();
}
inline ::smartseg::DilationParameter* LayerParameter::mutable_smartseg_dilation_param() {
  set_has_smartseg_dilation_param();
  if (smartseg_dilation_param_ == NULL) {
    smartseg_dilation_param_ = new ::smartseg::DilationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_dilation_param)
  return smartseg_dilation_param_;
}
inline ::smartseg::DilationParameter* LayerParameter::release_smartseg_dilation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_dilation_param)
  clear_has_smartseg_dilation_param();
  ::smartseg::DilationParameter* temp = smartseg_dilation_param_;
  smartseg_dilation_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smartseg_dilation_param(::smartseg::DilationParameter* smartseg_dilation_param) {
  delete smartseg_dilation_param_;
  smartseg_dilation_param_ = smartseg_dilation_param;
  if (smartseg_dilation_param) {
    set_has_smartseg_dilation_param();
  } else {
    clear_has_smartseg_dilation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_dilation_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
inline bool LayerParameter::has_fcn_image_data_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_fcn_image_data_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_fcn_image_data_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_fcn_image_data_param() {
  if (fcn_image_data_param_ != NULL) fcn_image_data_param_->::caffe_fcn_data_layer::FCNImageDataParameter::Clear();
  clear_has_fcn_image_data_param();
}
inline const ::caffe_fcn_data_layer::FCNImageDataParameter& LayerParameter::fcn_image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.fcn_image_data_param)
  return fcn_image_data_param_ != NULL ? *fcn_image_data_param_
                         : *::caffe_fcn_data_layer::FCNImageDataParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::FCNImageDataParameter* LayerParameter::mutable_fcn_image_data_param() {
  set_has_fcn_image_data_param();
  if (fcn_image_data_param_ == NULL) {
    fcn_image_data_param_ = new ::caffe_fcn_data_layer::FCNImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.fcn_image_data_param)
  return fcn_image_data_param_;
}
inline ::caffe_fcn_data_layer::FCNImageDataParameter* LayerParameter::release_fcn_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.fcn_image_data_param)
  clear_has_fcn_image_data_param();
  ::caffe_fcn_data_layer::FCNImageDataParameter* temp = fcn_image_data_param_;
  fcn_image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_fcn_image_data_param(::caffe_fcn_data_layer::FCNImageDataParameter* fcn_image_data_param) {
  delete fcn_image_data_param_;
  fcn_image_data_param_ = fcn_image_data_param;
  if (fcn_image_data_param) {
    set_has_fcn_image_data_param();
  } else {
    clear_has_fcn_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.fcn_image_data_param)
}

// optional .caffe.ResizeParameter resize_param = 3001;
inline bool LayerParameter::has_resize_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_resize_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_resize_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::caffe::ResizeParameter& LayerParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_
                         : *::caffe::ResizeParameter::internal_default_instance();
}
inline ::caffe::ResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) {
    resize_param_ = new ::caffe::ResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resize_param)
  return resize_param_;
}
inline ::caffe::ResizeParameter* LayerParameter::release_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resize_param)
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resize_param)
}

// optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
inline bool LayerParameter::has_label_related_dropout_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_label_related_dropout_param() {
  _has_bits_[2] |= 0x00000040u;
}
inline void LayerParameter::clear_has_label_related_dropout_param() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void LayerParameter::clear_label_related_dropout_param() {
  if (label_related_dropout_param_ != NULL) label_related_dropout_param_->::caffe::LabelRelatedDropoutParam::Clear();
  clear_has_label_related_dropout_param();
}
inline const ::caffe::LabelRelatedDropoutParam& LayerParameter::label_related_dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_related_dropout_param)
  return label_related_dropout_param_ != NULL ? *label_related_dropout_param_
                         : *::caffe::LabelRelatedDropoutParam::internal_default_instance();
}
inline ::caffe::LabelRelatedDropoutParam* LayerParameter::mutable_label_related_dropout_param() {
  set_has_label_related_dropout_param();
  if (label_related_dropout_param_ == NULL) {
    label_related_dropout_param_ = new ::caffe::LabelRelatedDropoutParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_related_dropout_param)
  return label_related_dropout_param_;
}
inline ::caffe::LabelRelatedDropoutParam* LayerParameter::release_label_related_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_related_dropout_param)
  clear_has_label_related_dropout_param();
  ::caffe::LabelRelatedDropoutParam* temp = label_related_dropout_param_;
  label_related_dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_label_related_dropout_param(::caffe::LabelRelatedDropoutParam* label_related_dropout_param) {
  delete label_related_dropout_param_;
  label_related_dropout_param_ = label_related_dropout_param;
  if (label_related_dropout_param) {
    set_has_label_related_dropout_param();
  } else {
    clear_has_label_related_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_related_dropout_param)
}

// optional .caffe.InceptionParameter inception_param = 3003;
inline bool LayerParameter::has_inception_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_inception_param() {
  _has_bits_[2] |= 0x00000080u;
}
inline void LayerParameter::clear_has_inception_param() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void LayerParameter::clear_inception_param() {
  if (inception_param_ != NULL) inception_param_->::caffe::InceptionParameter::Clear();
  clear_has_inception_param();
}
inline const ::caffe::InceptionParameter& LayerParameter::inception_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inception_param)
  return inception_param_ != NULL ? *inception_param_
                         : *::caffe::InceptionParameter::internal_default_instance();
}
inline ::caffe::InceptionParameter* LayerParameter::mutable_inception_param() {
  set_has_inception_param();
  if (inception_param_ == NULL) {
    inception_param_ = new ::caffe::InceptionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inception_param)
  return inception_param_;
}
inline ::caffe::InceptionParameter* LayerParameter::release_inception_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inception_param)
  clear_has_inception_param();
  ::caffe::InceptionParameter* temp = inception_param_;
  inception_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inception_param(::caffe::InceptionParameter* inception_param) {
  delete inception_param_;
  inception_param_ = inception_param;
  if (inception_param) {
    set_has_inception_param();
  } else {
    clear_has_inception_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inception_param)
}

// optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
inline bool LayerParameter::has_element_hinge_loss_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_element_hinge_loss_param() {
  _has_bits_[2] |= 0x00000100u;
}
inline void LayerParameter::clear_has_element_hinge_loss_param() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void LayerParameter::clear_element_hinge_loss_param() {
  if (element_hinge_loss_param_ != NULL) element_hinge_loss_param_->::caffe::ElementHingeLossParameter::Clear();
  clear_has_element_hinge_loss_param();
}
inline const ::caffe::ElementHingeLossParameter& LayerParameter::element_hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.element_hinge_loss_param)
  return element_hinge_loss_param_ != NULL ? *element_hinge_loss_param_
                         : *::caffe::ElementHingeLossParameter::internal_default_instance();
}
inline ::caffe::ElementHingeLossParameter* LayerParameter::mutable_element_hinge_loss_param() {
  set_has_element_hinge_loss_param();
  if (element_hinge_loss_param_ == NULL) {
    element_hinge_loss_param_ = new ::caffe::ElementHingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.element_hinge_loss_param)
  return element_hinge_loss_param_;
}
inline ::caffe::ElementHingeLossParameter* LayerParameter::release_element_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.element_hinge_loss_param)
  clear_has_element_hinge_loss_param();
  ::caffe::ElementHingeLossParameter* temp = element_hinge_loss_param_;
  element_hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_element_hinge_loss_param(::caffe::ElementHingeLossParameter* element_hinge_loss_param) {
  delete element_hinge_loss_param_;
  element_hinge_loss_param_ = element_hinge_loss_param;
  if (element_hinge_loss_param) {
    set_has_element_hinge_loss_param();
  } else {
    clear_has_element_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.element_hinge_loss_param)
}

// optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
inline bool LayerParameter::has_pyramid_data_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_pyramid_data_param() {
  _has_bits_[2] |= 0x00000200u;
}
inline void LayerParameter::clear_has_pyramid_data_param() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void LayerParameter::clear_pyramid_data_param() {
  if (pyramid_data_param_ != NULL) pyramid_data_param_->::caffe::PyramidDataParameter::Clear();
  clear_has_pyramid_data_param();
}
inline const ::caffe::PyramidDataParameter& LayerParameter::pyramid_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pyramid_data_param)
  return pyramid_data_param_ != NULL ? *pyramid_data_param_
                         : *::caffe::PyramidDataParameter::internal_default_instance();
}
inline ::caffe::PyramidDataParameter* LayerParameter::mutable_pyramid_data_param() {
  set_has_pyramid_data_param();
  if (pyramid_data_param_ == NULL) {
    pyramid_data_param_ = new ::caffe::PyramidDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pyramid_data_param)
  return pyramid_data_param_;
}
inline ::caffe::PyramidDataParameter* LayerParameter::release_pyramid_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pyramid_data_param)
  clear_has_pyramid_data_param();
  ::caffe::PyramidDataParameter* temp = pyramid_data_param_;
  pyramid_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pyramid_data_param(::caffe::PyramidDataParameter* pyramid_data_param) {
  delete pyramid_data_param_;
  pyramid_data_param_ = pyramid_data_param;
  if (pyramid_data_param) {
    set_has_pyramid_data_param();
  } else {
    clear_has_pyramid_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pyramid_data_param)
}

// optional .caffe.DetectionOutputParameter detection_output_param = 3006;
inline bool LayerParameter::has_detection_output_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_detection_output_param() {
  _has_bits_[2] |= 0x00000400u;
}
inline void LayerParameter::clear_has_detection_output_param() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void LayerParameter::clear_detection_output_param() {
  if (detection_output_param_ != NULL) detection_output_param_->::caffe::DetectionOutputParameter::Clear();
  clear_has_detection_output_param();
}
inline const ::caffe::DetectionOutputParameter& LayerParameter::detection_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_output_param)
  return detection_output_param_ != NULL ? *detection_output_param_
                         : *::caffe::DetectionOutputParameter::internal_default_instance();
}
inline ::caffe::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() {
  set_has_detection_output_param();
  if (detection_output_param_ == NULL) {
    detection_output_param_ = new ::caffe::DetectionOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_output_param)
  return detection_output_param_;
}
inline ::caffe::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_output_param)
  clear_has_detection_output_param();
  ::caffe::DetectionOutputParameter* temp = detection_output_param_;
  detection_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_output_param(::caffe::DetectionOutputParameter* detection_output_param) {
  delete detection_output_param_;
  detection_output_param_ = detection_output_param;
  if (detection_output_param) {
    set_has_detection_output_param();
  } else {
    clear_has_detection_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_output_param)
}

// optional .caffe.ROIDataParam roi_data_param = 3007;
inline bool LayerParameter::has_roi_data_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_roi_data_param() {
  _has_bits_[2] |= 0x00000800u;
}
inline void LayerParameter::clear_has_roi_data_param() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void LayerParameter::clear_roi_data_param() {
  if (roi_data_param_ != NULL) roi_data_param_->::caffe::ROIDataParam::Clear();
  clear_has_roi_data_param();
}
inline const ::caffe::ROIDataParam& LayerParameter::roi_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_data_param)
  return roi_data_param_ != NULL ? *roi_data_param_
                         : *::caffe::ROIDataParam::internal_default_instance();
}
inline ::caffe::ROIDataParam* LayerParameter::mutable_roi_data_param() {
  set_has_roi_data_param();
  if (roi_data_param_ == NULL) {
    roi_data_param_ = new ::caffe::ROIDataParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_data_param)
  return roi_data_param_;
}
inline ::caffe::ROIDataParam* LayerParameter::release_roi_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_data_param)
  clear_has_roi_data_param();
  ::caffe::ROIDataParam* temp = roi_data_param_;
  roi_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_data_param(::caffe::ROIDataParam* roi_data_param) {
  delete roi_data_param_;
  roi_data_param_ = roi_data_param;
  if (roi_data_param) {
    set_has_roi_data_param();
  } else {
    clear_has_roi_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_data_param)
}

// optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
inline bool LayerParameter::has_roi_2_heatmap_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_roi_2_heatmap_param() {
  _has_bits_[2] |= 0x00001000u;
}
inline void LayerParameter::clear_has_roi_2_heatmap_param() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void LayerParameter::clear_roi_2_heatmap_param() {
  if (roi_2_heatmap_param_ != NULL) roi_2_heatmap_param_->::caffe::ROI2HeatMapParam::Clear();
  clear_has_roi_2_heatmap_param();
}
inline const ::caffe::ROI2HeatMapParam& LayerParameter::roi_2_heatmap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_2_heatmap_param)
  return roi_2_heatmap_param_ != NULL ? *roi_2_heatmap_param_
                         : *::caffe::ROI2HeatMapParam::internal_default_instance();
}
inline ::caffe::ROI2HeatMapParam* LayerParameter::mutable_roi_2_heatmap_param() {
  set_has_roi_2_heatmap_param();
  if (roi_2_heatmap_param_ == NULL) {
    roi_2_heatmap_param_ = new ::caffe::ROI2HeatMapParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_2_heatmap_param)
  return roi_2_heatmap_param_;
}
inline ::caffe::ROI2HeatMapParam* LayerParameter::release_roi_2_heatmap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_2_heatmap_param)
  clear_has_roi_2_heatmap_param();
  ::caffe::ROI2HeatMapParam* temp = roi_2_heatmap_param_;
  roi_2_heatmap_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_2_heatmap_param(::caffe::ROI2HeatMapParam* roi_2_heatmap_param) {
  delete roi_2_heatmap_param_;
  roi_2_heatmap_param_ = roi_2_heatmap_param;
  if (roi_2_heatmap_param) {
    set_has_roi_2_heatmap_param();
  } else {
    clear_has_roi_2_heatmap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_2_heatmap_param)
}

// optional .caffe.ROIShowParam roi_show_param = 3009;
inline bool LayerParameter::has_roi_show_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_roi_show_param() {
  _has_bits_[2] |= 0x00002000u;
}
inline void LayerParameter::clear_has_roi_show_param() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void LayerParameter::clear_roi_show_param() {
  if (roi_show_param_ != NULL) roi_show_param_->::caffe::ROIShowParam::Clear();
  clear_has_roi_show_param();
}
inline const ::caffe::ROIShowParam& LayerParameter::roi_show_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_show_param)
  return roi_show_param_ != NULL ? *roi_show_param_
                         : *::caffe::ROIShowParam::internal_default_instance();
}
inline ::caffe::ROIShowParam* LayerParameter::mutable_roi_show_param() {
  set_has_roi_show_param();
  if (roi_show_param_ == NULL) {
    roi_show_param_ = new ::caffe::ROIShowParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_show_param)
  return roi_show_param_;
}
inline ::caffe::ROIShowParam* LayerParameter::release_roi_show_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_show_param)
  clear_has_roi_show_param();
  ::caffe::ROIShowParam* temp = roi_show_param_;
  roi_show_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_show_param(::caffe::ROIShowParam* roi_show_param) {
  delete roi_show_param_;
  roi_show_param_ = roi_show_param;
  if (roi_show_param) {
    set_has_roi_show_param();
  } else {
    clear_has_roi_show_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_show_param)
}

// optional .caffe.ROIRefineParam roi_refine_param = 3010;
inline bool LayerParameter::has_roi_refine_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_roi_refine_param() {
  _has_bits_[2] |= 0x00004000u;
}
inline void LayerParameter::clear_has_roi_refine_param() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void LayerParameter::clear_roi_refine_param() {
  if (roi_refine_param_ != NULL) roi_refine_param_->::caffe::ROIRefineParam::Clear();
  clear_has_roi_refine_param();
}
inline const ::caffe::ROIRefineParam& LayerParameter::roi_refine_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_refine_param)
  return roi_refine_param_ != NULL ? *roi_refine_param_
                         : *::caffe::ROIRefineParam::internal_default_instance();
}
inline ::caffe::ROIRefineParam* LayerParameter::mutable_roi_refine_param() {
  set_has_roi_refine_param();
  if (roi_refine_param_ == NULL) {
    roi_refine_param_ = new ::caffe::ROIRefineParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_refine_param)
  return roi_refine_param_;
}
inline ::caffe::ROIRefineParam* LayerParameter::release_roi_refine_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_refine_param)
  clear_has_roi_refine_param();
  ::caffe::ROIRefineParam* temp = roi_refine_param_;
  roi_refine_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_refine_param(::caffe::ROIRefineParam* roi_refine_param) {
  delete roi_refine_param_;
  roi_refine_param_ = roi_refine_param;
  if (roi_refine_param) {
    set_has_roi_refine_param();
  } else {
    clear_has_roi_refine_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_refine_param)
}

// optional .caffe.CropParameter crop_param = 3011;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[2] |= 0x00008000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_
                         : *::caffe::CropParameter::internal_default_instance();
}
inline ::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
inline bool LayerParameter::has_deformable_convolution_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_deformable_convolution_param() {
  _has_bits_[2] |= 0x00800000u;
}
inline void LayerParameter::clear_has_deformable_convolution_param() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void LayerParameter::clear_deformable_convolution_param() {
  if (deformable_convolution_param_ != NULL) deformable_convolution_param_->::caffe::DeformableConvolutionParameter::Clear();
  clear_has_deformable_convolution_param();
}
inline const ::caffe::DeformableConvolutionParameter& LayerParameter::deformable_convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_ != NULL ? *deformable_convolution_param_
                         : *::caffe::DeformableConvolutionParameter::internal_default_instance();
}
inline ::caffe::DeformableConvolutionParameter* LayerParameter::mutable_deformable_convolution_param() {
  set_has_deformable_convolution_param();
  if (deformable_convolution_param_ == NULL) {
    deformable_convolution_param_ = new ::caffe::DeformableConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_;
}
inline ::caffe::DeformableConvolutionParameter* LayerParameter::release_deformable_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.deformable_convolution_param)
  clear_has_deformable_convolution_param();
  ::caffe::DeformableConvolutionParameter* temp = deformable_convolution_param_;
  deformable_convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_deformable_convolution_param(::caffe::DeformableConvolutionParameter* deformable_convolution_param) {
  delete deformable_convolution_param_;
  deformable_convolution_param_ = deformable_convolution_param;
  if (deformable_convolution_param) {
    set_has_deformable_convolution_param();
  } else {
    clear_has_deformable_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.deformable_convolution_param)
}

// optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
inline bool LayerParameter::has_image_data_arbitrary_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_image_data_arbitrary_param() {
  _has_bits_[2] |= 0x01000000u;
}
inline void LayerParameter::clear_has_image_data_arbitrary_param() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void LayerParameter::clear_image_data_arbitrary_param() {
  if (image_data_arbitrary_param_ != NULL) image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
  clear_has_image_data_arbitrary_param();
}
inline const ::caffe::ImageDataArbitraryParameter& LayerParameter::image_data_arbitrary_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_ != NULL ? *image_data_arbitrary_param_
                         : *::caffe::ImageDataArbitraryParameter::internal_default_instance();
}
inline ::caffe::ImageDataArbitraryParameter* LayerParameter::mutable_image_data_arbitrary_param() {
  set_has_image_data_arbitrary_param();
  if (image_data_arbitrary_param_ == NULL) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_;
}
inline ::caffe::ImageDataArbitraryParameter* LayerParameter::release_image_data_arbitrary_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_arbitrary_param)
  clear_has_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* temp = image_data_arbitrary_param_;
  image_data_arbitrary_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param) {
  delete image_data_arbitrary_param_;
  image_data_arbitrary_param_ = image_data_arbitrary_param;
  if (image_data_arbitrary_param) {
    set_has_image_data_arbitrary_param();
  } else {
    clear_has_image_data_arbitrary_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_arbitrary_param)
}

// optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
inline bool LayerParameter::has_expandlabel_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_expandlabel_param() {
  _has_bits_[2] |= 0x02000000u;
}
inline void LayerParameter::clear_has_expandlabel_param() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void LayerParameter::clear_expandlabel_param() {
  if (expandlabel_param_ != NULL) expandlabel_param_->::caffe::ExpandlabelParameter::Clear();
  clear_has_expandlabel_param();
}
inline const ::caffe::ExpandlabelParameter& LayerParameter::expandlabel_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.expandlabel_param)
  return expandlabel_param_ != NULL ? *expandlabel_param_
                         : *::caffe::ExpandlabelParameter::internal_default_instance();
}
inline ::caffe::ExpandlabelParameter* LayerParameter::mutable_expandlabel_param() {
  set_has_expandlabel_param();
  if (expandlabel_param_ == NULL) {
    expandlabel_param_ = new ::caffe::ExpandlabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.expandlabel_param)
  return expandlabel_param_;
}
inline ::caffe::ExpandlabelParameter* LayerParameter::release_expandlabel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.expandlabel_param)
  clear_has_expandlabel_param();
  ::caffe::ExpandlabelParameter* temp = expandlabel_param_;
  expandlabel_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_expandlabel_param(::caffe::ExpandlabelParameter* expandlabel_param) {
  delete expandlabel_param_;
  expandlabel_param_ = expandlabel_param;
  if (expandlabel_param) {
    set_has_expandlabel_param();
  } else {
    clear_has_expandlabel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.expandlabel_param)
}

// optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
inline bool LayerParameter::has_manipulate_loss_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_manipulate_loss_param() {
  _has_bits_[2] |= 0x04000000u;
}
inline void LayerParameter::clear_has_manipulate_loss_param() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void LayerParameter::clear_manipulate_loss_param() {
  if (manipulate_loss_param_ != NULL) manipulate_loss_param_->::caffe::ManipulateLossParameter::Clear();
  clear_has_manipulate_loss_param();
}
inline const ::caffe::ManipulateLossParameter& LayerParameter::manipulate_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.manipulate_loss_param)
  return manipulate_loss_param_ != NULL ? *manipulate_loss_param_
                         : *::caffe::ManipulateLossParameter::internal_default_instance();
}
inline ::caffe::ManipulateLossParameter* LayerParameter::mutable_manipulate_loss_param() {
  set_has_manipulate_loss_param();
  if (manipulate_loss_param_ == NULL) {
    manipulate_loss_param_ = new ::caffe::ManipulateLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.manipulate_loss_param)
  return manipulate_loss_param_;
}
inline ::caffe::ManipulateLossParameter* LayerParameter::release_manipulate_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.manipulate_loss_param)
  clear_has_manipulate_loss_param();
  ::caffe::ManipulateLossParameter* temp = manipulate_loss_param_;
  manipulate_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_manipulate_loss_param(::caffe::ManipulateLossParameter* manipulate_loss_param) {
  delete manipulate_loss_param_;
  manipulate_loss_param_ = manipulate_loss_param;
  if (manipulate_loss_param) {
    set_has_manipulate_loss_param();
  } else {
    clear_has_manipulate_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.manipulate_loss_param)
}

// optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
inline bool LayerParameter::has_image_label_data_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_image_label_data_param() {
  _has_bits_[2] |= 0x08000000u;
}
inline void LayerParameter::clear_has_image_label_data_param() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void LayerParameter::clear_image_label_data_param() {
  if (image_label_data_param_ != NULL) image_label_data_param_->::caffe::ImageLabelDataParameter::Clear();
  clear_has_image_label_data_param();
}
inline const ::caffe::ImageLabelDataParameter& LayerParameter::image_label_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_label_data_param)
  return image_label_data_param_ != NULL ? *image_label_data_param_
                         : *::caffe::ImageLabelDataParameter::internal_default_instance();
}
inline ::caffe::ImageLabelDataParameter* LayerParameter::mutable_image_label_data_param() {
  set_has_image_label_data_param();
  if (image_label_data_param_ == NULL) {
    image_label_data_param_ = new ::caffe::ImageLabelDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_label_data_param)
  return image_label_data_param_;
}
inline ::caffe::ImageLabelDataParameter* LayerParameter::release_image_label_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_label_data_param)
  clear_has_image_label_data_param();
  ::caffe::ImageLabelDataParameter* temp = image_label_data_param_;
  image_label_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_label_data_param(::caffe::ImageLabelDataParameter* image_label_data_param) {
  delete image_label_data_param_;
  image_label_data_param_ = image_label_data_param;
  if (image_label_data_param) {
    set_has_image_label_data_param();
  } else {
    clear_has_image_label_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_label_data_param)
}

// optional .caffe.BinaryDataParameter binary_data_param = 5006;
inline bool LayerParameter::has_binary_data_param() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_binary_data_param() {
  _has_bits_[2] |= 0x10000000u;
}
inline void LayerParameter::clear_has_binary_data_param() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void LayerParameter::clear_binary_data_param() {
  if (binary_data_param_ != NULL) binary_data_param_->::caffe::BinaryDataParameter::Clear();
  clear_has_binary_data_param();
}
inline const ::caffe::BinaryDataParameter& LayerParameter::binary_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.binary_data_param)
  return binary_data_param_ != NULL ? *binary_data_param_
                         : *::caffe::BinaryDataParameter::internal_default_instance();
}
inline ::caffe::BinaryDataParameter* LayerParameter::mutable_binary_data_param() {
  set_has_binary_data_param();
  if (binary_data_param_ == NULL) {
    binary_data_param_ = new ::caffe::BinaryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.binary_data_param)
  return binary_data_param_;
}
inline ::caffe::BinaryDataParameter* LayerParameter::release_binary_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.binary_data_param)
  clear_has_binary_data_param();
  ::caffe::BinaryDataParameter* temp = binary_data_param_;
  binary_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_binary_data_param(::caffe::BinaryDataParameter* binary_data_param) {
  delete binary_data_param_;
  binary_data_param_ = binary_data_param;
  if (binary_data_param) {
    set_has_binary_data_param();
  } else {
    clear_has_binary_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.binary_data_param)
}

// optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
inline bool LayerParameter::has_cylinder_view_param() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_cylinder_view_param() {
  _has_bits_[2] |= 0x20000000u;
}
inline void LayerParameter::clear_has_cylinder_view_param() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void LayerParameter::clear_cylinder_view_param() {
  if (cylinder_view_param_ != NULL) cylinder_view_param_->::caffe::CylinderViewParameter::Clear();
  clear_has_cylinder_view_param();
}
inline const ::caffe::CylinderViewParameter& LayerParameter::cylinder_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.cylinder_view_param)
  return cylinder_view_param_ != NULL ? *cylinder_view_param_
                         : *::caffe::CylinderViewParameter::internal_default_instance();
}
inline ::caffe::CylinderViewParameter* LayerParameter::mutable_cylinder_view_param() {
  set_has_cylinder_view_param();
  if (cylinder_view_param_ == NULL) {
    cylinder_view_param_ = new ::caffe::CylinderViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.cylinder_view_param)
  return cylinder_view_param_;
}
inline ::caffe::CylinderViewParameter* LayerParameter::release_cylinder_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.cylinder_view_param)
  clear_has_cylinder_view_param();
  ::caffe::CylinderViewParameter* temp = cylinder_view_param_;
  cylinder_view_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_cylinder_view_param(::caffe::CylinderViewParameter* cylinder_view_param) {
  delete cylinder_view_param_;
  cylinder_view_param_ = cylinder_view_param;
  if (cylinder_view_param) {
    set_has_cylinder_view_param();
  } else {
    clear_has_cylinder_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.cylinder_view_param)
}

// optional .caffe.BirdviewParameter bird_view_param = 5008;
inline bool LayerParameter::has_bird_view_param() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_bird_view_param() {
  _has_bits_[2] |= 0x40000000u;
}
inline void LayerParameter::clear_has_bird_view_param() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void LayerParameter::clear_bird_view_param() {
  if (bird_view_param_ != NULL) bird_view_param_->::caffe::BirdviewParameter::Clear();
  clear_has_bird_view_param();
}
inline const ::caffe::BirdviewParameter& LayerParameter::bird_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bird_view_param)
  return bird_view_param_ != NULL ? *bird_view_param_
                         : *::caffe::BirdviewParameter::internal_default_instance();
}
inline ::caffe::BirdviewParameter* LayerParameter::mutable_bird_view_param() {
  set_has_bird_view_param();
  if (bird_view_param_ == NULL) {
    bird_view_param_ = new ::caffe::BirdviewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bird_view_param)
  return bird_view_param_;
}
inline ::caffe::BirdviewParameter* LayerParameter::release_bird_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bird_view_param)
  clear_has_bird_view_param();
  ::caffe::BirdviewParameter* temp = bird_view_param_;
  bird_view_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bird_view_param(::caffe::BirdviewParameter* bird_view_param) {
  delete bird_view_param_;
  bird_view_param_ = bird_view_param;
  if (bird_view_param) {
    set_has_bird_view_param();
  } else {
    clear_has_bird_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bird_view_param)
}

// optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
inline bool LayerParameter::has_repeat_channel_param() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_repeat_channel_param() {
  _has_bits_[2] |= 0x80000000u;
}
inline void LayerParameter::clear_has_repeat_channel_param() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void LayerParameter::clear_repeat_channel_param() {
  if (repeat_channel_param_ != NULL) repeat_channel_param_->::caffe::RepeatChannelParameter::Clear();
  clear_has_repeat_channel_param();
}
inline const ::caffe::RepeatChannelParameter& LayerParameter::repeat_channel_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.repeat_channel_param)
  return repeat_channel_param_ != NULL ? *repeat_channel_param_
                         : *::caffe::RepeatChannelParameter::internal_default_instance();
}
inline ::caffe::RepeatChannelParameter* LayerParameter::mutable_repeat_channel_param() {
  set_has_repeat_channel_param();
  if (repeat_channel_param_ == NULL) {
    repeat_channel_param_ = new ::caffe::RepeatChannelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.repeat_channel_param)
  return repeat_channel_param_;
}
inline ::caffe::RepeatChannelParameter* LayerParameter::release_repeat_channel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.repeat_channel_param)
  clear_has_repeat_channel_param();
  ::caffe::RepeatChannelParameter* temp = repeat_channel_param_;
  repeat_channel_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_repeat_channel_param(::caffe::RepeatChannelParameter* repeat_channel_param) {
  delete repeat_channel_param_;
  repeat_channel_param_ = repeat_channel_param;
  if (repeat_channel_param) {
    set_has_repeat_channel_param();
  } else {
    clear_has_repeat_channel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.repeat_channel_param)
}

// optional .caffe.RegionParameter region_param = 300;
inline bool LayerParameter::has_region_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_region_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_region_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_region_param() {
  if (region_param_ != NULL) region_param_->::caffe::RegionParameter::Clear();
  clear_has_region_param();
}
inline const ::caffe::RegionParameter& LayerParameter::region_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.region_param)
  return region_param_ != NULL ? *region_param_
                         : *::caffe::RegionParameter::internal_default_instance();
}
inline ::caffe::RegionParameter* LayerParameter::mutable_region_param() {
  set_has_region_param();
  if (region_param_ == NULL) {
    region_param_ = new ::caffe::RegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.region_param)
  return region_param_;
}
inline ::caffe::RegionParameter* LayerParameter::release_region_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.region_param)
  clear_has_region_param();
  ::caffe::RegionParameter* temp = region_param_;
  region_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_region_param(::caffe::RegionParameter* region_param) {
  delete region_param_;
  region_param_ = region_param;
  if (region_param) {
    set_has_region_param();
  } else {
    clear_has_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.region_param)
}

// optional .caffe.ReorgParameter reorg_param = 301;
inline bool LayerParameter::has_reorg_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_reorg_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_reorg_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_reorg_param() {
  if (reorg_param_ != NULL) reorg_param_->::caffe::ReorgParameter::Clear();
  clear_has_reorg_param();
}
inline const ::caffe::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reorg_param)
  return reorg_param_ != NULL ? *reorg_param_
                         : *::caffe::ReorgParameter::internal_default_instance();
}
inline ::caffe::ReorgParameter* LayerParameter::mutable_reorg_param() {
  set_has_reorg_param();
  if (reorg_param_ == NULL) {
    reorg_param_ = new ::caffe::ReorgParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reorg_param)
  return reorg_param_;
}
inline ::caffe::ReorgParameter* LayerParameter::release_reorg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reorg_param)
  clear_has_reorg_param();
  ::caffe::ReorgParameter* temp = reorg_param_;
  reorg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param) {
  delete reorg_param_;
  reorg_param_ = reorg_param;
  if (reorg_param) {
    set_has_reorg_param();
  } else {
    clear_has_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reorg_param)
}

// optional .caffe.RegionOutputParameter region_output_param = 310;
inline bool LayerParameter::has_region_output_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_region_output_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_region_output_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_region_output_param() {
  if (region_output_param_ != NULL) region_output_param_->::caffe::RegionOutputParameter::Clear();
  clear_has_region_output_param();
}
inline const ::caffe::RegionOutputParameter& LayerParameter::region_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.region_output_param)
  return region_output_param_ != NULL ? *region_output_param_
                         : *::caffe::RegionOutputParameter::internal_default_instance();
}
inline ::caffe::RegionOutputParameter* LayerParameter::mutable_region_output_param() {
  set_has_region_output_param();
  if (region_output_param_ == NULL) {
    region_output_param_ = new ::caffe::RegionOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.region_output_param)
  return region_output_param_;
}
inline ::caffe::RegionOutputParameter* LayerParameter::release_region_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.region_output_param)
  clear_has_region_output_param();
  ::caffe::RegionOutputParameter* temp = region_output_param_;
  region_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_region_output_param(::caffe::RegionOutputParameter* region_output_param) {
  delete region_output_param_;
  region_output_param_ = region_output_param;
  if (region_output_param) {
    set_has_region_output_param();
  } else {
    clear_has_region_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.region_output_param)
}

// optional .caffe.PermuteParameter permute_param = 202;
inline bool LayerParameter::has_permute_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_permute_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_permute_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->::caffe::PermuteParameter::Clear();
  clear_has_permute_param();
}
inline const ::caffe::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.permute_param)
  return permute_param_ != NULL ? *permute_param_
                         : *::caffe::PermuteParameter::internal_default_instance();
}
inline ::caffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) {
    permute_param_ = new ::caffe::PermuteParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.permute_param)
  return permute_param_;
}
inline ::caffe::PermuteParameter* LayerParameter::release_permute_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.permute_param)
  clear_has_permute_param();
  ::caffe::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_permute_param(::caffe::PermuteParameter* permute_param) {
  delete permute_param_;
  permute_param_ = permute_param;
  if (permute_param) {
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.permute_param)
}

// optional .caffe.ResampleParameter resample_param = 1000;
inline bool LayerParameter::has_resample_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_resample_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_resample_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_resample_param() {
  if (resample_param_ != NULL) resample_param_->::caffe::ResampleParameter::Clear();
  clear_has_resample_param();
}
inline const ::caffe::ResampleParameter& LayerParameter::resample_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resample_param)
  return resample_param_ != NULL ? *resample_param_
                         : *::caffe::ResampleParameter::internal_default_instance();
}
inline ::caffe::ResampleParameter* LayerParameter::mutable_resample_param() {
  set_has_resample_param();
  if (resample_param_ == NULL) {
    resample_param_ = new ::caffe::ResampleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resample_param)
  return resample_param_;
}
inline ::caffe::ResampleParameter* LayerParameter::release_resample_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resample_param)
  clear_has_resample_param();
  ::caffe::ResampleParameter* temp = resample_param_;
  resample_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_resample_param(::caffe::ResampleParameter* resample_param) {
  delete resample_param_;
  resample_param_ = resample_param;
  if (resample_param) {
    set_has_resample_param();
  } else {
    clear_has_resample_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resample_param)
}

// optional bool reshape_every_iter = 1001 [default = true];
inline bool LayerParameter::has_reshape_every_iter() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_reshape_every_iter() {
  _has_bits_[3] |= 0x00000004u;
}
inline void LayerParameter::clear_has_reshape_every_iter() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void LayerParameter::clear_reshape_every_iter() {
  reshape_every_iter_ = true;
  clear_has_reshape_every_iter();
}
inline bool LayerParameter::reshape_every_iter() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_every_iter)
  return reshape_every_iter_;
}
inline void LayerParameter::set_reshape_every_iter(bool value) {
  set_has_reshape_every_iter();
  reshape_every_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.reshape_every_iter)
}

// optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
inline bool LayerParameter::has_detection_output_ssd_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_detection_output_ssd_param() {
  _has_bits_[2] |= 0x00010000u;
}
inline void LayerParameter::clear_has_detection_output_ssd_param() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void LayerParameter::clear_detection_output_ssd_param() {
  if (detection_output_ssd_param_ != NULL) detection_output_ssd_param_->::caffe::DetectionOutputSSDParameter::Clear();
  clear_has_detection_output_ssd_param();
}
inline const ::caffe::DetectionOutputSSDParameter& LayerParameter::detection_output_ssd_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_output_ssd_param)
  return detection_output_ssd_param_ != NULL ? *detection_output_ssd_param_
                         : *::caffe::DetectionOutputSSDParameter::internal_default_instance();
}
inline ::caffe::DetectionOutputSSDParameter* LayerParameter::mutable_detection_output_ssd_param() {
  set_has_detection_output_ssd_param();
  if (detection_output_ssd_param_ == NULL) {
    detection_output_ssd_param_ = new ::caffe::DetectionOutputSSDParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_output_ssd_param)
  return detection_output_ssd_param_;
}
inline ::caffe::DetectionOutputSSDParameter* LayerParameter::release_detection_output_ssd_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_output_ssd_param)
  clear_has_detection_output_ssd_param();
  ::caffe::DetectionOutputSSDParameter* temp = detection_output_ssd_param_;
  detection_output_ssd_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_output_ssd_param(::caffe::DetectionOutputSSDParameter* detection_output_ssd_param) {
  delete detection_output_ssd_param_;
  detection_output_ssd_param_ = detection_output_ssd_param;
  if (detection_output_ssd_param) {
    set_has_detection_output_ssd_param();
  } else {
    clear_has_detection_output_ssd_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_output_ssd_param)
}

// optional .caffe.ImageDistortParameter image_distort_param = 4008;
inline bool LayerParameter::has_image_distort_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_image_distort_param() {
  _has_bits_[2] |= 0x00020000u;
}
inline void LayerParameter::clear_has_image_distort_param() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void LayerParameter::clear_image_distort_param() {
  if (image_distort_param_ != NULL) image_distort_param_->::caffe::ImageDistortParameter::Clear();
  clear_has_image_distort_param();
}
inline const ::caffe::ImageDistortParameter& LayerParameter::image_distort_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_distort_param)
  return image_distort_param_ != NULL ? *image_distort_param_
                         : *::caffe::ImageDistortParameter::internal_default_instance();
}
inline ::caffe::ImageDistortParameter* LayerParameter::mutable_image_distort_param() {
  set_has_image_distort_param();
  if (image_distort_param_ == NULL) {
    image_distort_param_ = new ::caffe::ImageDistortParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_distort_param)
  return image_distort_param_;
}
inline ::caffe::ImageDistortParameter* LayerParameter::release_image_distort_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_distort_param)
  clear_has_image_distort_param();
  ::caffe::ImageDistortParameter* temp = image_distort_param_;
  image_distort_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_distort_param(::caffe::ImageDistortParameter* image_distort_param) {
  delete image_distort_param_;
  image_distort_param_ = image_distort_param;
  if (image_distort_param) {
    set_has_image_distort_param();
  } else {
    clear_has_image_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_distort_param)
}

// optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
inline bool LayerParameter::has_bbox_reg_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_bbox_reg_param() {
  _has_bits_[2] |= 0x00040000u;
}
inline void LayerParameter::clear_has_bbox_reg_param() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void LayerParameter::clear_bbox_reg_param() {
  if (bbox_reg_param_ != NULL) bbox_reg_param_->::caffe::BBoxRegParameter::Clear();
  clear_has_bbox_reg_param();
}
inline const ::caffe::BBoxRegParameter& LayerParameter::bbox_reg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_reg_param)
  return bbox_reg_param_ != NULL ? *bbox_reg_param_
                         : *::caffe::BBoxRegParameter::internal_default_instance();
}
inline ::caffe::BBoxRegParameter* LayerParameter::mutable_bbox_reg_param() {
  set_has_bbox_reg_param();
  if (bbox_reg_param_ == NULL) {
    bbox_reg_param_ = new ::caffe::BBoxRegParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_reg_param)
  return bbox_reg_param_;
}
inline ::caffe::BBoxRegParameter* LayerParameter::release_bbox_reg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_reg_param)
  clear_has_bbox_reg_param();
  ::caffe::BBoxRegParameter* temp = bbox_reg_param_;
  bbox_reg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bbox_reg_param(::caffe::BBoxRegParameter* bbox_reg_param) {
  delete bbox_reg_param_;
  bbox_reg_param_ = bbox_reg_param;
  if (bbox_reg_param) {
    set_has_bbox_reg_param();
  } else {
    clear_has_bbox_reg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_reg_param)
}

// optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
inline bool LayerParameter::has_psroi_pooling_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_psroi_pooling_param() {
  _has_bits_[2] |= 0x00080000u;
}
inline void LayerParameter::clear_has_psroi_pooling_param() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void LayerParameter::clear_psroi_pooling_param() {
  if (psroi_pooling_param_ != NULL) psroi_pooling_param_->::caffe::PSROIPoolingParameter::Clear();
  clear_has_psroi_pooling_param();
}
inline const ::caffe::PSROIPoolingParameter& LayerParameter::psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_ != NULL ? *psroi_pooling_param_
                         : *::caffe::PSROIPoolingParameter::internal_default_instance();
}
inline ::caffe::PSROIPoolingParameter* LayerParameter::mutable_psroi_pooling_param() {
  set_has_psroi_pooling_param();
  if (psroi_pooling_param_ == NULL) {
    psroi_pooling_param_ = new ::caffe::PSROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_;
}
inline ::caffe::PSROIPoolingParameter* LayerParameter::release_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.psroi_pooling_param)
  clear_has_psroi_pooling_param();
  ::caffe::PSROIPoolingParameter* temp = psroi_pooling_param_;
  psroi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_psroi_pooling_param(::caffe::PSROIPoolingParameter* psroi_pooling_param) {
  delete psroi_pooling_param_;
  psroi_pooling_param_ = psroi_pooling_param;
  if (psroi_pooling_param) {
    set_has_psroi_pooling_param();
  } else {
    clear_has_psroi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.psroi_pooling_param)
}

// optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
inline bool LayerParameter::has_dfmb_psroi_pooling_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_dfmb_psroi_pooling_param() {
  _has_bits_[2] |= 0x00100000u;
}
inline void LayerParameter::clear_has_dfmb_psroi_pooling_param() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void LayerParameter::clear_dfmb_psroi_pooling_param() {
  if (dfmb_psroi_pooling_param_ != NULL) dfmb_psroi_pooling_param_->::caffe::DFMBPSROIPoolingParameter::Clear();
  clear_has_dfmb_psroi_pooling_param();
}
inline const ::caffe::DFMBPSROIPoolingParameter& LayerParameter::dfmb_psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dfmb_psroi_pooling_param)
  return dfmb_psroi_pooling_param_ != NULL ? *dfmb_psroi_pooling_param_
                         : *::caffe::DFMBPSROIPoolingParameter::internal_default_instance();
}
inline ::caffe::DFMBPSROIPoolingParameter* LayerParameter::mutable_dfmb_psroi_pooling_param() {
  set_has_dfmb_psroi_pooling_param();
  if (dfmb_psroi_pooling_param_ == NULL) {
    dfmb_psroi_pooling_param_ = new ::caffe::DFMBPSROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dfmb_psroi_pooling_param)
  return dfmb_psroi_pooling_param_;
}
inline ::caffe::DFMBPSROIPoolingParameter* LayerParameter::release_dfmb_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dfmb_psroi_pooling_param)
  clear_has_dfmb_psroi_pooling_param();
  ::caffe::DFMBPSROIPoolingParameter* temp = dfmb_psroi_pooling_param_;
  dfmb_psroi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dfmb_psroi_pooling_param(::caffe::DFMBPSROIPoolingParameter* dfmb_psroi_pooling_param) {
  delete dfmb_psroi_pooling_param_;
  dfmb_psroi_pooling_param_ = dfmb_psroi_pooling_param;
  if (dfmb_psroi_pooling_param) {
    set_has_dfmb_psroi_pooling_param();
  } else {
    clear_has_dfmb_psroi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dfmb_psroi_pooling_param)
}

// optional .caffe.RegParameter reg_param = 4023;
inline bool LayerParameter::has_reg_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_reg_param() {
  _has_bits_[2] |= 0x00200000u;
}
inline void LayerParameter::clear_has_reg_param() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void LayerParameter::clear_reg_param() {
  if (reg_param_ != NULL) reg_param_->::caffe::RegParameter::Clear();
  clear_has_reg_param();
}
inline const ::caffe::RegParameter& LayerParameter::reg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reg_param)
  return reg_param_ != NULL ? *reg_param_
                         : *::caffe::RegParameter::internal_default_instance();
}
inline ::caffe::RegParameter* LayerParameter::mutable_reg_param() {
  set_has_reg_param();
  if (reg_param_ == NULL) {
    reg_param_ = new ::caffe::RegParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reg_param)
  return reg_param_;
}
inline ::caffe::RegParameter* LayerParameter::release_reg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reg_param)
  clear_has_reg_param();
  ::caffe::RegParameter* temp = reg_param_;
  reg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reg_param(::caffe::RegParameter* reg_param) {
  delete reg_param_;
  reg_param_ = reg_param;
  if (reg_param) {
    set_has_reg_param();
  } else {
    clear_has_reg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reg_param)
}

// optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
inline bool LayerParameter::has_proposal_img_scale_to_cam_coords_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_proposal_img_scale_to_cam_coords_param() {
  _has_bits_[2] |= 0x00400000u;
}
inline void LayerParameter::clear_has_proposal_img_scale_to_cam_coords_param() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void LayerParameter::clear_proposal_img_scale_to_cam_coords_param() {
  if (proposal_img_scale_to_cam_coords_param_ != NULL) proposal_img_scale_to_cam_coords_param_->::caffe::ProposalImgScaleToCamCoordsParameter::Clear();
  clear_has_proposal_img_scale_to_cam_coords_param();
}
inline const ::caffe::ProposalImgScaleToCamCoordsParameter& LayerParameter::proposal_img_scale_to_cam_coords_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
  return proposal_img_scale_to_cam_coords_param_ != NULL ? *proposal_img_scale_to_cam_coords_param_
                         : *::caffe::ProposalImgScaleToCamCoordsParameter::internal_default_instance();
}
inline ::caffe::ProposalImgScaleToCamCoordsParameter* LayerParameter::mutable_proposal_img_scale_to_cam_coords_param() {
  set_has_proposal_img_scale_to_cam_coords_param();
  if (proposal_img_scale_to_cam_coords_param_ == NULL) {
    proposal_img_scale_to_cam_coords_param_ = new ::caffe::ProposalImgScaleToCamCoordsParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
  return proposal_img_scale_to_cam_coords_param_;
}
inline ::caffe::ProposalImgScaleToCamCoordsParameter* LayerParameter::release_proposal_img_scale_to_cam_coords_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
  clear_has_proposal_img_scale_to_cam_coords_param();
  ::caffe::ProposalImgScaleToCamCoordsParameter* temp = proposal_img_scale_to_cam_coords_param_;
  proposal_img_scale_to_cam_coords_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_proposal_img_scale_to_cam_coords_param(::caffe::ProposalImgScaleToCamCoordsParameter* proposal_img_scale_to_cam_coords_param) {
  delete proposal_img_scale_to_cam_coords_param_;
  proposal_img_scale_to_cam_coords_param_ = proposal_img_scale_to_cam_coords_param;
  if (proposal_img_scale_to_cam_coords_param) {
    set_has_proposal_img_scale_to_cam_coords_param();
  } else {
    clear_has_proposal_img_scale_to_cam_coords_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
}

// -------------------------------------------------------------------

// ExpandlabelParameter

// optional uint32 maxlabel = 1 [default = 0];
inline bool ExpandlabelParameter::has_maxlabel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpandlabelParameter::set_has_maxlabel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpandlabelParameter::clear_has_maxlabel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpandlabelParameter::clear_maxlabel() {
  maxlabel_ = 0u;
  clear_has_maxlabel();
}
inline ::google::protobuf::uint32 ExpandlabelParameter::maxlabel() const {
  // @@protoc_insertion_point(field_get:caffe.ExpandlabelParameter.maxlabel)
  return maxlabel_;
}
inline void ExpandlabelParameter::set_maxlabel(::google::protobuf::uint32 value) {
  set_has_maxlabel();
  maxlabel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpandlabelParameter.maxlabel)
}

// -------------------------------------------------------------------

// RepeatChannelParameter

// optional uint32 num_repeat = 1 [default = 1];
inline bool RepeatChannelParameter::has_num_repeat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepeatChannelParameter::set_has_num_repeat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepeatChannelParameter::clear_has_num_repeat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepeatChannelParameter::clear_num_repeat() {
  num_repeat_ = 1u;
  clear_has_num_repeat();
}
inline ::google::protobuf::uint32 RepeatChannelParameter::num_repeat() const {
  // @@protoc_insertion_point(field_get:caffe.RepeatChannelParameter.num_repeat)
  return num_repeat_;
}
inline void RepeatChannelParameter::set_num_repeat(::google::protobuf::uint32 value) {
  set_has_num_repeat();
  num_repeat_ = value;
  // @@protoc_insertion_point(field_set:caffe.RepeatChannelParameter.num_repeat)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::order_size() const {
  return order_.size();
}
inline void PermuteParameter::clear_order() {
  order_.Clear();
}
inline ::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PermuteParameter.order)
  return order_.Get(index);
}
inline void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PermuteParameter.order)
}
inline void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:caffe.PermuteParameter.order)
  return order_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PermuteParameter.order)
  return &order_;
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizedBBox::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizedBBox::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmin)
  return xmin_;
}
inline void NormalizedBBox::set_xmin(float value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmin)
}

// optional float ymin = 2;
inline bool NormalizedBBox::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizedBBox::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizedBBox::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymin)
  return ymin_;
}
inline void NormalizedBBox::set_ymin(float value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymin)
}

// optional float xmax = 3;
inline bool NormalizedBBox::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizedBBox::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizedBBox::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmax)
  return xmax_;
}
inline void NormalizedBBox::set_xmax(float value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmax)
}

// optional float ymax = 4;
inline bool NormalizedBBox::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizedBBox::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizedBBox::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymax)
  return ymax_;
}
inline void NormalizedBBox::set_ymax(float value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymax)
}

// optional int32 label = 5;
inline bool NormalizedBBox::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NormalizedBBox::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NormalizedBBox::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NormalizedBBox::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.label)
  return label_;
}
inline void NormalizedBBox::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.label)
}

// optional bool difficult = 6;
inline bool NormalizedBBox::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NormalizedBBox::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NormalizedBBox::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  clear_has_difficult();
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.difficult)
  return difficult_;
}
inline void NormalizedBBox::set_difficult(bool value) {
  set_has_difficult();
  difficult_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.difficult)
}

// optional float score = 7;
inline bool NormalizedBBox::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NormalizedBBox::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NormalizedBBox::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NormalizedBBox::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.score)
  return score_;
}
inline void NormalizedBBox::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.score)
}

// optional float size = 8;
inline bool NormalizedBBox::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NormalizedBBox::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NormalizedBBox::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NormalizedBBox::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.size)
  return size_;
}
inline void NormalizedBBox::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.size)
}

// -------------------------------------------------------------------

// RegionOutputParameter

// optional uint32 num_classes = 1;
inline bool RegionOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 RegionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.num_classes)
  return num_classes_;
}
inline void RegionOutputParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionOutputParameter.num_classes)
}

// optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
inline bool RegionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NonMaximumSuppressionParameter& RegionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::caffe::NonMaximumSuppressionParameter::internal_default_instance();
}
inline ::caffe::NonMaximumSuppressionParameter* RegionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NonMaximumSuppressionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RegionOutputParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* RegionOutputParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.RegionOutputParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void RegionOutputParameter::set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RegionOutputParameter.nms_param)
}

// optional int32 keep_top_k = 3 [default = -1];
inline bool RegionOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 RegionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.keep_top_k)
  return keep_top_k_;
}
inline void RegionOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 4;
inline bool RegionOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  clear_has_confidence_threshold();
}
inline float RegionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
inline void RegionOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionOutputParameter.confidence_threshold)
}

// repeated .caffe.AnchorBox anchorbox = 5;
inline int RegionOutputParameter::anchorbox_size() const {
  return anchorbox_.size();
}
inline void RegionOutputParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
inline const ::caffe::AnchorBox& RegionOutputParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_.Get(index);
}
inline ::caffe::AnchorBox* RegionOutputParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
inline ::caffe::AnchorBox* RegionOutputParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >*
RegionOutputParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegionOutputParameter.anchorbox)
  return &anchorbox_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >&
RegionOutputParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_;
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  clear_has_nms_threshold();
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.nms_threshold)
  return nms_threshold_;
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  top_k_ = 0;
  clear_has_top_k();
}
inline ::google::protobuf::int32 NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.top_k)
  return top_k_;
}
inline void NonMaximumSuppressionParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.top_k)
}

// optional float eta = 3 [default = 1];
inline bool NonMaximumSuppressionParameter::has_eta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_eta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NonMaximumSuppressionParameter::clear_has_eta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NonMaximumSuppressionParameter::clear_eta() {
  eta_ = 1;
  clear_has_eta();
}
inline float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.eta)
  return eta_;
}
inline void NonMaximumSuppressionParameter::set_eta(float value) {
  set_has_eta();
  eta_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.eta)
}

// -------------------------------------------------------------------

// RegionParameter

// repeated .caffe.AnchorBox anchorbox = 1;
inline int RegionParameter::anchorbox_size() const {
  return anchorbox_.size();
}
inline void RegionParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
inline const ::caffe::AnchorBox& RegionParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.anchorbox)
  return anchorbox_.Get(index);
}
inline ::caffe::AnchorBox* RegionParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.RegionParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
inline ::caffe::AnchorBox* RegionParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:caffe.RegionParameter.anchorbox)
  return anchorbox_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >*
RegionParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegionParameter.anchorbox)
  return &anchorbox_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >&
RegionParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:caffe.RegionParameter.anchorbox)
  return anchorbox_;
}

// repeated float thresholds = 2;
inline int RegionParameter::thresholds_size() const {
  return thresholds_.size();
}
inline void RegionParameter::clear_thresholds() {
  thresholds_.Clear();
}
inline float RegionParameter::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.thresholds)
  return thresholds_.Get(index);
}
inline void RegionParameter::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.thresholds)
}
inline void RegionParameter::add_thresholds(float value) {
  thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RegionParameter.thresholds)
}
inline const ::google::protobuf::RepeatedField< float >&
RegionParameter::thresholds() const {
  // @@protoc_insertion_point(field_list:caffe.RegionParameter.thresholds)
  return thresholds_;
}
inline ::google::protobuf::RepeatedField< float >*
RegionParameter::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegionParameter.thresholds)
  return &thresholds_;
}

// optional uint32 object_scale = 3;
inline bool RegionParameter::has_object_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionParameter::set_has_object_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionParameter::clear_has_object_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionParameter::clear_object_scale() {
  object_scale_ = 0u;
  clear_has_object_scale();
}
inline ::google::protobuf::uint32 RegionParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.object_scale)
  return object_scale_;
}
inline void RegionParameter::set_object_scale(::google::protobuf::uint32 value) {
  set_has_object_scale();
  object_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.object_scale)
}

// optional uint32 noobject_scale = 4;
inline bool RegionParameter::has_noobject_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionParameter::set_has_noobject_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionParameter::clear_has_noobject_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionParameter::clear_noobject_scale() {
  noobject_scale_ = 0u;
  clear_has_noobject_scale();
}
inline ::google::protobuf::uint32 RegionParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.noobject_scale)
  return noobject_scale_;
}
inline void RegionParameter::set_noobject_scale(::google::protobuf::uint32 value) {
  set_has_noobject_scale();
  noobject_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.noobject_scale)
}

// optional uint32 class_scale = 5;
inline bool RegionParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionParameter::clear_class_scale() {
  class_scale_ = 0u;
  clear_has_class_scale();
}
inline ::google::protobuf::uint32 RegionParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.class_scale)
  return class_scale_;
}
inline void RegionParameter::set_class_scale(::google::protobuf::uint32 value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.class_scale)
}

// optional uint32 coord_scale = 6;
inline bool RegionParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionParameter::clear_coord_scale() {
  coord_scale_ = 0u;
  clear_has_coord_scale();
}
inline ::google::protobuf::uint32 RegionParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.coord_scale)
  return coord_scale_;
}
inline void RegionParameter::set_coord_scale(::google::protobuf::uint32 value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.coord_scale)
}

// optional float jitter = 7;
inline bool RegionParameter::has_jitter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegionParameter::set_has_jitter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegionParameter::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegionParameter::clear_jitter() {
  jitter_ = 0;
  clear_has_jitter();
}
inline float RegionParameter::jitter() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.jitter)
  return jitter_;
}
inline void RegionParameter::set_jitter(float value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.jitter)
}

// optional float bias = 8;
inline bool RegionParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float RegionParameter::bias() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.bias)
  return bias_;
}
inline void RegionParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.bias)
}

// optional bool rescore = 9;
inline bool RegionParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionParameter::clear_rescore() {
  rescore_ = false;
  clear_has_rescore();
}
inline bool RegionParameter::rescore() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.rescore)
  return rescore_;
}
inline void RegionParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.rescore)
}

// optional uint32 num_classes = 10;
inline bool RegionParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 RegionParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.num_classes)
  return num_classes_;
}
inline void RegionParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.num_classes)
}

// optional bool bias_match = 11;
inline bool RegionParameter::has_bias_match() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegionParameter::set_has_bias_match() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegionParameter::clear_has_bias_match() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegionParameter::clear_bias_match() {
  bias_match_ = false;
  clear_has_bias_match();
}
inline bool RegionParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.bias_match)
  return bias_match_;
}
inline void RegionParameter::set_bias_match(bool value) {
  set_has_bias_match();
  bias_match_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.bias_match)
}

// optional float threshold = 12;
inline bool RegionParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegionParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegionParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegionParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float RegionParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.threshold)
  return threshold_;
}
inline void RegionParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.threshold)
}

// optional bool adjust_anchor = 13 [default = true];
inline bool RegionParameter::has_adjust_anchor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegionParameter::set_has_adjust_anchor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegionParameter::clear_has_adjust_anchor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegionParameter::clear_adjust_anchor() {
  adjust_anchor_ = true;
  clear_has_adjust_anchor();
}
inline bool RegionParameter::adjust_anchor() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.adjust_anchor)
  return adjust_anchor_;
}
inline void RegionParameter::set_adjust_anchor(bool value) {
  set_has_adjust_anchor();
  adjust_anchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.adjust_anchor)
}

// -------------------------------------------------------------------

// AnchorBox

// optional float w = 1;
inline bool AnchorBox::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnchorBox::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnchorBox::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnchorBox::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float AnchorBox::w() const {
  // @@protoc_insertion_point(field_get:caffe.AnchorBox.w)
  return w_;
}
inline void AnchorBox::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnchorBox.w)
}

// optional float h = 2;
inline bool AnchorBox::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnchorBox::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnchorBox::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnchorBox::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float AnchorBox::h() const {
  // @@protoc_insertion_point(field_get:caffe.AnchorBox.h)
  return h_;
}
inline void AnchorBox::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnchorBox.h)
}

// -------------------------------------------------------------------

// ReorgParameter

// optional uint32 stride = 1;
inline bool ReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorgParameter::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.stride)
  return stride_;
}
inline void ReorgParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.stride)
}

// -------------------------------------------------------------------

// BirdviewParameter

// optional bool use_max_height = 1 [default = false];
inline bool BirdviewParameter::has_use_max_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BirdviewParameter::set_has_use_max_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BirdviewParameter::clear_has_use_max_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BirdviewParameter::clear_use_max_height() {
  use_max_height_ = false;
  clear_has_use_max_height();
}
inline bool BirdviewParameter::use_max_height() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_max_height)
  return use_max_height_;
}
inline void BirdviewParameter::set_use_max_height(bool value) {
  set_has_use_max_height();
  use_max_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_max_height)
}

// optional bool use_mean_height = 2 [default = false];
inline bool BirdviewParameter::has_use_mean_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BirdviewParameter::set_has_use_mean_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BirdviewParameter::clear_has_use_mean_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BirdviewParameter::clear_use_mean_height() {
  use_mean_height_ = false;
  clear_has_use_mean_height();
}
inline bool BirdviewParameter::use_mean_height() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_mean_height)
  return use_mean_height_;
}
inline void BirdviewParameter::set_use_mean_height(bool value) {
  set_has_use_mean_height();
  use_mean_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_mean_height)
}

// optional bool use_log_count = 3 [default = false];
inline bool BirdviewParameter::has_use_log_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BirdviewParameter::set_has_use_log_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BirdviewParameter::clear_has_use_log_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BirdviewParameter::clear_use_log_count() {
  use_log_count_ = false;
  clear_has_use_log_count();
}
inline bool BirdviewParameter::use_log_count() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_log_count)
  return use_log_count_;
}
inline void BirdviewParameter::set_use_log_count(bool value) {
  set_has_use_log_count();
  use_log_count_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_log_count)
}

// optional bool use_direction = 4 [default = false];
inline bool BirdviewParameter::has_use_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BirdviewParameter::set_has_use_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BirdviewParameter::clear_has_use_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BirdviewParameter::clear_use_direction() {
  use_direction_ = false;
  clear_has_use_direction();
}
inline bool BirdviewParameter::use_direction() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_direction)
  return use_direction_;
}
inline void BirdviewParameter::set_use_direction(bool value) {
  set_has_use_direction();
  use_direction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_direction)
}

// optional bool use_top_intensity = 5 [default = false];
inline bool BirdviewParameter::has_use_top_intensity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BirdviewParameter::set_has_use_top_intensity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BirdviewParameter::clear_has_use_top_intensity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BirdviewParameter::clear_use_top_intensity() {
  use_top_intensity_ = false;
  clear_has_use_top_intensity();
}
inline bool BirdviewParameter::use_top_intensity() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_top_intensity)
  return use_top_intensity_;
}
inline void BirdviewParameter::set_use_top_intensity(bool value) {
  set_has_use_top_intensity();
  use_top_intensity_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_top_intensity)
}

// optional bool use_mean_intensity = 6 [default = false];
inline bool BirdviewParameter::has_use_mean_intensity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BirdviewParameter::set_has_use_mean_intensity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BirdviewParameter::clear_has_use_mean_intensity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BirdviewParameter::clear_use_mean_intensity() {
  use_mean_intensity_ = false;
  clear_has_use_mean_intensity();
}
inline bool BirdviewParameter::use_mean_intensity() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_mean_intensity)
  return use_mean_intensity_;
}
inline void BirdviewParameter::set_use_mean_intensity(bool value) {
  set_has_use_mean_intensity();
  use_mean_intensity_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_mean_intensity)
}

// optional bool use_distance = 7 [default = false];
inline bool BirdviewParameter::has_use_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BirdviewParameter::set_has_use_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BirdviewParameter::clear_has_use_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BirdviewParameter::clear_use_distance() {
  use_distance_ = false;
  clear_has_use_distance();
}
inline bool BirdviewParameter::use_distance() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_distance)
  return use_distance_;
}
inline void BirdviewParameter::set_use_distance(bool value) {
  set_has_use_distance();
  use_distance_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_distance)
}

// optional bool use_nonempty = 8 [default = false];
inline bool BirdviewParameter::has_use_nonempty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BirdviewParameter::set_has_use_nonempty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BirdviewParameter::clear_has_use_nonempty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BirdviewParameter::clear_use_nonempty() {
  use_nonempty_ = false;
  clear_has_use_nonempty();
}
inline bool BirdviewParameter::use_nonempty() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_nonempty)
  return use_nonempty_;
}
inline void BirdviewParameter::set_use_nonempty(bool value) {
  set_has_use_nonempty();
  use_nonempty_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_nonempty)
}

// optional bool use_first_order = 9 [default = false];
inline bool BirdviewParameter::has_use_first_order() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BirdviewParameter::set_has_use_first_order() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BirdviewParameter::clear_has_use_first_order() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BirdviewParameter::clear_use_first_order() {
  use_first_order_ = false;
  clear_has_use_first_order();
}
inline bool BirdviewParameter::use_first_order() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_first_order)
  return use_first_order_;
}
inline void BirdviewParameter::set_use_first_order(bool value) {
  set_has_use_first_order();
  use_first_order_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_first_order)
}

// optional bool use_second_order = 10 [default = false];
inline bool BirdviewParameter::has_use_second_order() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BirdviewParameter::set_has_use_second_order() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BirdviewParameter::clear_has_use_second_order() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BirdviewParameter::clear_use_second_order() {
  use_second_order_ = false;
  clear_has_use_second_order();
}
inline bool BirdviewParameter::use_second_order() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_second_order)
  return use_second_order_;
}
inline void BirdviewParameter::set_use_second_order(bool value) {
  set_has_use_second_order();
  use_second_order_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_second_order)
}

// optional bool use_height_filter = 14 [default = false];
inline bool BirdviewParameter::has_use_height_filter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BirdviewParameter::set_has_use_height_filter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BirdviewParameter::clear_has_use_height_filter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BirdviewParameter::clear_use_height_filter() {
  use_height_filter_ = false;
  clear_has_use_height_filter();
}
inline bool BirdviewParameter::use_height_filter() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_height_filter)
  return use_height_filter_;
}
inline void BirdviewParameter::set_use_height_filter(bool value) {
  set_has_use_height_filter();
  use_height_filter_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_height_filter)
}

// optional bool use_dense_feat = 15 [default = false];
inline bool BirdviewParameter::has_use_dense_feat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BirdviewParameter::set_has_use_dense_feat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BirdviewParameter::clear_has_use_dense_feat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BirdviewParameter::clear_use_dense_feat() {
  use_dense_feat_ = false;
  clear_has_use_dense_feat();
}
inline bool BirdviewParameter::use_dense_feat() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_dense_feat)
  return use_dense_feat_;
}
inline void BirdviewParameter::set_use_dense_feat(bool value) {
  set_has_use_dense_feat();
  use_dense_feat_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_dense_feat)
}

// optional uint32 point_cloud_range = 16;
inline bool BirdviewParameter::has_point_cloud_range() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BirdviewParameter::set_has_point_cloud_range() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BirdviewParameter::clear_has_point_cloud_range() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BirdviewParameter::clear_point_cloud_range() {
  point_cloud_range_ = 0u;
  clear_has_point_cloud_range();
}
inline ::google::protobuf::uint32 BirdviewParameter::point_cloud_range() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.point_cloud_range)
  return point_cloud_range_;
}
inline void BirdviewParameter::set_point_cloud_range(::google::protobuf::uint32 value) {
  set_has_point_cloud_range();
  point_cloud_range_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.point_cloud_range)
}

// optional uint32 width = 17;
inline bool BirdviewParameter::has_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BirdviewParameter::set_has_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BirdviewParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BirdviewParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 BirdviewParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.width)
  return width_;
}
inline void BirdviewParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.width)
}

// optional uint32 height = 18;
inline bool BirdviewParameter::has_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BirdviewParameter::set_has_height() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BirdviewParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BirdviewParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BirdviewParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.height)
  return height_;
}
inline void BirdviewParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.height)
}

// -------------------------------------------------------------------

// CylinderViewParameter

// optional uint32 ntheta = 1;
inline bool CylinderViewParameter::has_ntheta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CylinderViewParameter::set_has_ntheta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CylinderViewParameter::clear_has_ntheta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CylinderViewParameter::clear_ntheta() {
  ntheta_ = 0u;
  clear_has_ntheta();
}
inline ::google::protobuf::uint32 CylinderViewParameter::ntheta() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.ntheta)
  return ntheta_;
}
inline void CylinderViewParameter::set_ntheta(::google::protobuf::uint32 value) {
  set_has_ntheta();
  ntheta_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.ntheta)
}

// optional uint32 nphi = 2;
inline bool CylinderViewParameter::has_nphi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CylinderViewParameter::set_has_nphi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CylinderViewParameter::clear_has_nphi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CylinderViewParameter::clear_nphi() {
  nphi_ = 0u;
  clear_has_nphi();
}
inline ::google::protobuf::uint32 CylinderViewParameter::nphi() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.nphi)
  return nphi_;
}
inline void CylinderViewParameter::set_nphi(::google::protobuf::uint32 value) {
  set_has_nphi();
  nphi_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.nphi)
}

// optional float otheta = 3;
inline bool CylinderViewParameter::has_otheta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CylinderViewParameter::set_has_otheta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CylinderViewParameter::clear_has_otheta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CylinderViewParameter::clear_otheta() {
  otheta_ = 0;
  clear_has_otheta();
}
inline float CylinderViewParameter::otheta() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.otheta)
  return otheta_;
}
inline void CylinderViewParameter::set_otheta(float value) {
  set_has_otheta();
  otheta_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.otheta)
}

// optional float ophi = 4;
inline bool CylinderViewParameter::has_ophi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CylinderViewParameter::set_has_ophi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CylinderViewParameter::clear_has_ophi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CylinderViewParameter::clear_ophi() {
  ophi_ = 0;
  clear_has_ophi();
}
inline float CylinderViewParameter::ophi() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.ophi)
  return ophi_;
}
inline void CylinderViewParameter::set_ophi(float value) {
  set_has_ophi();
  ophi_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.ophi)
}

// optional float dtheta = 5;
inline bool CylinderViewParameter::has_dtheta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CylinderViewParameter::set_has_dtheta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CylinderViewParameter::clear_has_dtheta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CylinderViewParameter::clear_dtheta() {
  dtheta_ = 0;
  clear_has_dtheta();
}
inline float CylinderViewParameter::dtheta() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.dtheta)
  return dtheta_;
}
inline void CylinderViewParameter::set_dtheta(float value) {
  set_has_dtheta();
  dtheta_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.dtheta)
}

// optional float dphi = 6;
inline bool CylinderViewParameter::has_dphi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CylinderViewParameter::set_has_dphi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CylinderViewParameter::clear_has_dphi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CylinderViewParameter::clear_dphi() {
  dphi_ = 0;
  clear_has_dphi();
}
inline float CylinderViewParameter::dphi() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.dphi)
  return dphi_;
}
inline void CylinderViewParameter::set_dphi(float value) {
  set_has_dphi();
  dphi_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.dphi)
}

// -------------------------------------------------------------------

// BinaryDataParameter

// optional string source = 1;
inline bool BinaryDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinaryDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinaryDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& BinaryDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.source)
  return source_.GetNoArena();
}
inline void BinaryDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.source)
}
#if LANG_CXX11
inline void BinaryDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BinaryDataParameter.source)
}
#endif
inline void BinaryDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BinaryDataParameter.source)
}
inline void BinaryDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BinaryDataParameter.source)
}
inline ::std::string* BinaryDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.BinaryDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BinaryDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.BinaryDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.BinaryDataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool BinaryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BinaryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BinaryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BinaryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 BinaryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.batch_size)
  return batch_size_;
}
inline void BinaryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool BinaryDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BinaryDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BinaryDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BinaryDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool BinaryDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.shuffle)
  return shuffle_;
}
inline void BinaryDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.shuffle)
}

// optional bool use_disturb = 4 [default = false];
inline bool BinaryDataParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BinaryDataParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BinaryDataParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BinaryDataParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
inline bool BinaryDataParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.use_disturb)
  return use_disturb_;
}
inline void BinaryDataParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.use_disturb)
}

// optional uint32 ignore_label = 5 [default = 0];
inline bool BinaryDataParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BinaryDataParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BinaryDataParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BinaryDataParameter::clear_ignore_label() {
  ignore_label_ = 0u;
  clear_has_ignore_label();
}
inline ::google::protobuf::uint32 BinaryDataParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.ignore_label)
  return ignore_label_;
}
inline void BinaryDataParameter::set_ignore_label(::google::protobuf::uint32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.ignore_label)
}

// optional uint32 pad_size = 6 [default = 0];
inline bool BinaryDataParameter::has_pad_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BinaryDataParameter::set_has_pad_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BinaryDataParameter::clear_has_pad_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BinaryDataParameter::clear_pad_size() {
  pad_size_ = 0u;
  clear_has_pad_size();
}
inline ::google::protobuf::uint32 BinaryDataParameter::pad_size() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.pad_size)
  return pad_size_;
}
inline void BinaryDataParameter::set_pad_size(::google::protobuf::uint32 value) {
  set_has_pad_size();
  pad_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.pad_size)
}

// optional bool use_instance_level = 7 [default = false];
inline bool BinaryDataParameter::has_use_instance_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BinaryDataParameter::set_has_use_instance_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BinaryDataParameter::clear_has_use_instance_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BinaryDataParameter::clear_use_instance_level() {
  use_instance_level_ = false;
  clear_has_use_instance_level();
}
inline bool BinaryDataParameter::use_instance_level() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.use_instance_level)
  return use_instance_level_;
}
inline void BinaryDataParameter::set_use_instance_level(bool value) {
  set_has_use_instance_level();
  use_instance_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.use_instance_level)
}

// optional uint32 num_instance_feat = 8 [default = 0];
inline bool BinaryDataParameter::has_num_instance_feat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BinaryDataParameter::set_has_num_instance_feat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BinaryDataParameter::clear_has_num_instance_feat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BinaryDataParameter::clear_num_instance_feat() {
  num_instance_feat_ = 0u;
  clear_has_num_instance_feat();
}
inline ::google::protobuf::uint32 BinaryDataParameter::num_instance_feat() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.num_instance_feat)
  return num_instance_feat_;
}
inline void BinaryDataParameter::set_num_instance_feat(::google::protobuf::uint32 value) {
  set_has_num_instance_feat();
  num_instance_feat_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.num_instance_feat)
}

// optional string root_folder = 12 [default = ""];
inline bool BinaryDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinaryDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BinaryDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BinaryDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& BinaryDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void BinaryDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.root_folder)
}
#if LANG_CXX11
inline void BinaryDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BinaryDataParameter.root_folder)
}
#endif
inline void BinaryDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BinaryDataParameter.root_folder)
}
inline void BinaryDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BinaryDataParameter.root_folder)
}
inline ::std::string* BinaryDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.BinaryDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BinaryDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.BinaryDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.BinaryDataParameter.root_folder)
}

// optional bool pre_load = 20 [default = false];
inline bool BinaryDataParameter::has_pre_load() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BinaryDataParameter::set_has_pre_load() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BinaryDataParameter::clear_has_pre_load() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BinaryDataParameter::clear_pre_load() {
  pre_load_ = false;
  clear_has_pre_load();
}
inline bool BinaryDataParameter::pre_load() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.pre_load)
  return pre_load_;
}
inline void BinaryDataParameter::set_pre_load(bool value) {
  set_has_pre_load();
  pre_load_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.pre_load)
}

// optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
inline bool BinaryDataParameter::has_view_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BinaryDataParameter::set_has_view_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BinaryDataParameter::clear_has_view_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BinaryDataParameter::clear_view_type() {
  view_type_ = 1;
  clear_has_view_type();
}
inline ::caffe::BinaryDataParameter_ViewType BinaryDataParameter::view_type() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.view_type)
  return static_cast< ::caffe::BinaryDataParameter_ViewType >(view_type_);
}
inline void BinaryDataParameter::set_view_type(::caffe::BinaryDataParameter_ViewType value) {
  assert(::caffe::BinaryDataParameter_ViewType_IsValid(value));
  set_has_view_type();
  view_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.view_type)
}

// optional string label_map_file = 22;
inline bool BinaryDataParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinaryDataParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BinaryDataParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BinaryDataParameter::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_file();
}
inline const ::std::string& BinaryDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.label_map_file)
  return label_map_file_.GetNoArena();
}
inline void BinaryDataParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.label_map_file)
}
#if LANG_CXX11
inline void BinaryDataParameter::set_label_map_file(::std::string&& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BinaryDataParameter.label_map_file)
}
#endif
inline void BinaryDataParameter::set_label_map_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BinaryDataParameter.label_map_file)
}
inline void BinaryDataParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BinaryDataParameter.label_map_file)
}
inline ::std::string* BinaryDataParameter::mutable_label_map_file() {
  set_has_label_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.BinaryDataParameter.label_map_file)
  return label_map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BinaryDataParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:caffe.BinaryDataParameter.label_map_file)
  clear_has_label_map_file();
  return label_map_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryDataParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file != NULL) {
    set_has_label_map_file();
  } else {
    clear_has_label_map_file();
  }
  label_map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.BinaryDataParameter.label_map_file)
}

// optional bool do_classify = 23 [default = false];
inline bool BinaryDataParameter::has_do_classify() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BinaryDataParameter::set_has_do_classify() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BinaryDataParameter::clear_has_do_classify() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BinaryDataParameter::clear_do_classify() {
  do_classify_ = false;
  clear_has_do_classify();
}
inline bool BinaryDataParameter::do_classify() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.do_classify)
  return do_classify_;
}
inline void BinaryDataParameter::set_do_classify(bool value) {
  set_has_do_classify();
  do_classify_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.do_classify)
}

// -------------------------------------------------------------------

// LabelMapItem

// optional string name = 1;
inline bool LabelMapItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelMapItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelMapItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelMapItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LabelMapItem::name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.name)
  return name_.GetNoArena();
}
inline void LabelMapItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.name)
}
#if LANG_CXX11
inline void LabelMapItem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LabelMapItem.name)
}
#endif
inline void LabelMapItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.name)
}
inline ::std::string* LabelMapItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMapItem::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LabelMapItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMapItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.name)
}

// optional int32 label = 2;
inline bool LabelMapItem::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelMapItem::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelMapItem::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelMapItem::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 LabelMapItem::label() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.label)
  return label_;
}
inline void LabelMapItem::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.label)
}

// optional string display_name = 3;
inline bool LabelMapItem::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelMapItem::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelMapItem::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelMapItem::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
inline const ::std::string& LabelMapItem::display_name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.display_name)
  return display_name_.GetNoArena();
}
inline void LabelMapItem::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.display_name)
}
#if LANG_CXX11
inline void LabelMapItem::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LabelMapItem.display_name)
}
#endif
inline void LabelMapItem::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.display_name)
}
inline ::std::string* LabelMapItem::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMapItem::release_display_name() {
  // @@protoc_insertion_point(field_release:caffe.LabelMapItem.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMapItem::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.display_name)
}

// -------------------------------------------------------------------

// LabelMap

// repeated .caffe.LabelMapItem item = 1;
inline int LabelMap::item_size() const {
  return item_.size();
}
inline void LabelMap::clear_item() {
  item_.Clear();
}
inline const ::caffe::LabelMapItem& LabelMap::item(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelMap.item)
  return item_.Get(index);
}
inline ::caffe::LabelMapItem* LabelMap::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LabelMap.item)
  return item_.Mutable(index);
}
inline ::caffe::LabelMapItem* LabelMap::add_item() {
  // @@protoc_insertion_point(field_add:caffe.LabelMap.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
LabelMap::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelMap.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
LabelMap::item() const {
  // @@protoc_insertion_point(field_list:caffe.LabelMap.item)
  return item_;
}

// -------------------------------------------------------------------

// Slice

// repeated uint32 dim = 1;
inline int Slice::dim_size() const {
  return dim_.size();
}
inline void Slice::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::uint32 Slice::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Slice.dim)
  return dim_.Get(index);
}
inline void Slice::set_dim(int index, ::google::protobuf::uint32 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Slice.dim)
}
inline void Slice::add_dim(::google::protobuf::uint32 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Slice.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Slice::dim() const {
  // @@protoc_insertion_point(field_list:caffe.Slice.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Slice::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Slice.dim)
  return &dim_;
}

// repeated uint32 stride = 2;
inline int Slice::stride_size() const {
  return stride_.size();
}
inline void Slice::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 Slice::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Slice.stride)
  return stride_.Get(index);
}
inline void Slice::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Slice.stride)
}
inline void Slice::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Slice.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Slice::stride() const {
  // @@protoc_insertion_point(field_list:caffe.Slice.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Slice::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Slice.stride)
  return &stride_;
}

// repeated uint32 offset = 3;
inline int Slice::offset_size() const {
  return offset_.size();
}
inline void Slice::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 Slice::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Slice.offset)
  return offset_.Get(index);
}
inline void Slice::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Slice.offset)
}
inline void Slice::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Slice.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Slice::offset() const {
  // @@protoc_insertion_point(field_list:caffe.Slice.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Slice::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Slice.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// ImageLabelDataParameter

// optional string source = 1;
inline bool ImageLabelDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageLabelDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageLabelDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageLabelDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageLabelDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.source)
  return source_.GetNoArena();
}
inline void ImageLabelDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.source)
}
#if LANG_CXX11
inline void ImageLabelDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageLabelDataParameter.source)
}
#endif
inline void ImageLabelDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageLabelDataParameter.source)
}
inline void ImageLabelDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageLabelDataParameter.source)
}
inline ::std::string* ImageLabelDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageLabelDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageLabelDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageLabelDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageLabelDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageLabelDataParameter.source)
}

// optional uint32 batch_size = 3 [default = 1];
inline bool ImageLabelDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageLabelDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageLabelDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageLabelDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageLabelDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.batch_size)
  return batch_size_;
}
inline void ImageLabelDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.batch_size)
}

// optional uint32 rand_skip = 4 [default = 0];
inline bool ImageLabelDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageLabelDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageLabelDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageLabelDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageLabelDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageLabelDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.rand_skip)
}

// optional bool shuffle = 5 [default = false];
inline bool ImageLabelDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageLabelDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageLabelDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageLabelDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageLabelDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.shuffle)
  return shuffle_;
}
inline void ImageLabelDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.shuffle)
}

// optional bool rand_scale = 6 [default = false];
inline bool ImageLabelDataParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageLabelDataParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageLabelDataParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageLabelDataParameter::clear_rand_scale() {
  rand_scale_ = false;
  clear_has_rand_scale();
}
inline bool ImageLabelDataParameter::rand_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.rand_scale)
  return rand_scale_;
}
inline void ImageLabelDataParameter::set_rand_scale(bool value) {
  set_has_rand_scale();
  rand_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.rand_scale)
}

// optional float min_scale = 7 [default = 1];
inline bool ImageLabelDataParameter::has_min_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageLabelDataParameter::set_has_min_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageLabelDataParameter::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageLabelDataParameter::clear_min_scale() {
  min_scale_ = 1;
  clear_has_min_scale();
}
inline float ImageLabelDataParameter::min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.min_scale)
  return min_scale_;
}
inline void ImageLabelDataParameter::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.min_scale)
}

// optional float max_scale = 8 [default = 1];
inline bool ImageLabelDataParameter::has_max_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageLabelDataParameter::set_has_max_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageLabelDataParameter::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageLabelDataParameter::clear_max_scale() {
  max_scale_ = 1;
  clear_has_max_scale();
}
inline float ImageLabelDataParameter::max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.max_scale)
  return max_scale_;
}
inline void ImageLabelDataParameter::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.max_scale)
}

// optional .caffe.Slice label_slice = 10;
inline bool ImageLabelDataParameter::has_label_slice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageLabelDataParameter::set_has_label_slice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageLabelDataParameter::clear_has_label_slice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageLabelDataParameter::clear_label_slice() {
  if (label_slice_ != NULL) label_slice_->::caffe::Slice::Clear();
  clear_has_label_slice();
}
inline const ::caffe::Slice& ImageLabelDataParameter::label_slice() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.label_slice)
  return label_slice_ != NULL ? *label_slice_
                         : *::caffe::Slice::internal_default_instance();
}
inline ::caffe::Slice* ImageLabelDataParameter::mutable_label_slice() {
  set_has_label_slice();
  if (label_slice_ == NULL) {
    label_slice_ = new ::caffe::Slice;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageLabelDataParameter.label_slice)
  return label_slice_;
}
inline ::caffe::Slice* ImageLabelDataParameter::release_label_slice() {
  // @@protoc_insertion_point(field_release:caffe.ImageLabelDataParameter.label_slice)
  clear_has_label_slice();
  ::caffe::Slice* temp = label_slice_;
  label_slice_ = NULL;
  return temp;
}
inline void ImageLabelDataParameter::set_allocated_label_slice(::caffe::Slice* label_slice) {
  delete label_slice_;
  label_slice_ = label_slice;
  if (label_slice) {
    set_has_label_slice();
  } else {
    clear_has_label_slice();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageLabelDataParameter.label_slice)
}

// optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
inline bool ImageLabelDataParameter::has_padding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageLabelDataParameter::set_has_padding() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageLabelDataParameter::clear_has_padding() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageLabelDataParameter::clear_padding() {
  padding_ = 1;
  clear_has_padding();
}
inline ::caffe::ImageLabelDataParameter_Padding ImageLabelDataParameter::padding() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.padding)
  return static_cast< ::caffe::ImageLabelDataParameter_Padding >(padding_);
}
inline void ImageLabelDataParameter::set_padding(::caffe::ImageLabelDataParameter_Padding value) {
  assert(::caffe::ImageLabelDataParameter_Padding_IsValid(value));
  set_has_padding();
  padding_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.padding)
}

// -------------------------------------------------------------------

// ImageDataArbitraryParameter

// optional string source = 1;
inline bool ImageDataArbitraryParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataArbitraryParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataArbitraryParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageDataArbitraryParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.source)
  return source_.GetNoArena();
}
inline void ImageDataArbitraryParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.source)
}
#if LANG_CXX11
inline void ImageDataArbitraryParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.source)
}
#endif
inline void ImageDataArbitraryParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.source)
}
inline void ImageDataArbitraryParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.source)
}
inline ::std::string* ImageDataArbitraryParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataArbitraryParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataArbitraryParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.source)
}

// optional string meanfile = 13;
inline bool ImageDataArbitraryParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataArbitraryParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataArbitraryParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
inline const ::std::string& ImageDataArbitraryParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.meanfile)
  return meanfile_.GetNoArena();
}
inline void ImageDataArbitraryParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.meanfile)
}
#if LANG_CXX11
inline void ImageDataArbitraryParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.meanfile)
}
#endif
inline void ImageDataArbitraryParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.meanfile)
}
inline void ImageDataArbitraryParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.meanfile)
}
inline ::std::string* ImageDataArbitraryParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataArbitraryParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataArbitraryParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.meanfile)
}

// optional bool use_disturb = 14 [default = false];
inline bool ImageDataArbitraryParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImageDataArbitraryParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImageDataArbitraryParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
inline bool ImageDataArbitraryParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.use_disturb)
  return use_disturb_;
}
inline void ImageDataArbitraryParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.use_disturb)
}

// optional bool useflip = 15 [default = false];
inline bool ImageDataArbitraryParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImageDataArbitraryParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImageDataArbitraryParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
inline bool ImageDataArbitraryParameter::useflip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.useflip)
  return useflip_;
}
inline void ImageDataArbitraryParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.useflip)
}

// optional bool usemovedisturb = 16 [default = false];
inline bool ImageDataArbitraryParameter::has_usemovedisturb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_usemovedisturb() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImageDataArbitraryParameter::clear_has_usemovedisturb() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImageDataArbitraryParameter::clear_usemovedisturb() {
  usemovedisturb_ = false;
  clear_has_usemovedisturb();
}
inline bool ImageDataArbitraryParameter::usemovedisturb() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.usemovedisturb)
  return usemovedisturb_;
}
inline void ImageDataArbitraryParameter::set_usemovedisturb(bool value) {
  set_has_usemovedisturb();
  usemovedisturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.usemovedisturb)
}

// optional uint32 batch_size = 4;
inline bool ImageDataArbitraryParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataArbitraryParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataArbitraryParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.batch_size)
  return batch_size_;
}
inline void ImageDataArbitraryParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataArbitraryParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataArbitraryParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataArbitraryParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataArbitraryParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataArbitraryParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ImageDataArbitraryParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ImageDataArbitraryParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataArbitraryParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.shuffle)
  return shuffle_;
}
inline void ImageDataArbitraryParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.shuffle)
}

// optional uint32 data_height = 9 [default = 0];
inline bool ImageDataArbitraryParameter::has_data_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_data_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataArbitraryParameter::clear_has_data_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataArbitraryParameter::clear_data_height() {
  data_height_ = 0u;
  clear_has_data_height();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::data_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_height)
  return data_height_;
}
inline void ImageDataArbitraryParameter::set_data_height(::google::protobuf::uint32 value) {
  set_has_data_height();
  data_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_height)
}

// optional uint32 data_width = 10 [default = 0];
inline bool ImageDataArbitraryParameter::has_data_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_data_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataArbitraryParameter::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataArbitraryParameter::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::data_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_width)
  return data_width_;
}
inline void ImageDataArbitraryParameter::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_width)
}

// optional float data_scale = 2 [default = 1];
inline bool ImageDataArbitraryParameter::has_data_scale() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_data_scale() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ImageDataArbitraryParameter::clear_has_data_scale() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ImageDataArbitraryParameter::clear_data_scale() {
  data_scale_ = 1;
  clear_has_data_scale();
}
inline float ImageDataArbitraryParameter::data_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_scale)
  return data_scale_;
}
inline void ImageDataArbitraryParameter::set_data_scale(float value) {
  set_has_data_scale();
  data_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_scale)
}

// optional string mean_file = 3;
inline bool ImageDataArbitraryParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataArbitraryParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataArbitraryParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& ImageDataArbitraryParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void ImageDataArbitraryParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mean_file)
}
#if LANG_CXX11
inline void ImageDataArbitraryParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.mean_file)
}
#endif
inline void ImageDataArbitraryParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.mean_file)
}
inline void ImageDataArbitraryParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.mean_file)
}
inline ::std::string* ImageDataArbitraryParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataArbitraryParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataArbitraryParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataArbitraryParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataArbitraryParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataArbitraryParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.crop_size)
  return crop_size_;
}
inline void ImageDataArbitraryParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataArbitraryParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImageDataArbitraryParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImageDataArbitraryParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataArbitraryParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.mirror)
  return mirror_;
}
inline void ImageDataArbitraryParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mirror)
}

// optional uint32 label_height = 11 [default = 0];
inline bool ImageDataArbitraryParameter::has_label_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_label_height() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataArbitraryParameter::clear_has_label_height() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataArbitraryParameter::clear_label_height() {
  label_height_ = 0u;
  clear_has_label_height();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::label_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.label_height)
  return label_height_;
}
inline void ImageDataArbitraryParameter::set_label_height(::google::protobuf::uint32 value) {
  set_has_label_height();
  label_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.label_height)
}

// optional uint32 label_width = 12 [default = 0];
inline bool ImageDataArbitraryParameter::has_label_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_label_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataArbitraryParameter::clear_has_label_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataArbitraryParameter::clear_label_width() {
  label_width_ = 0u;
  clear_has_label_width();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::label_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.label_width)
  return label_width_;
}
inline void ImageDataArbitraryParameter::set_label_width(::google::protobuf::uint32 value) {
  set_has_label_width();
  label_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.label_width)
}

// optional uint32 data_channels = 17 [default = 3];
inline bool ImageDataArbitraryParameter::has_data_channels() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_data_channels() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ImageDataArbitraryParameter::clear_has_data_channels() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ImageDataArbitraryParameter::clear_data_channels() {
  data_channels_ = 3u;
  clear_has_data_channels();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::data_channels() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_channels)
  return data_channels_;
}
inline void ImageDataArbitraryParameter::set_data_channels(::google::protobuf::uint32 value) {
  set_has_data_channels();
  data_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_channels)
}

// optional bool need_split = 18 [default = false];
inline bool ImageDataArbitraryParameter::has_need_split() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_need_split() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ImageDataArbitraryParameter::clear_has_need_split() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ImageDataArbitraryParameter::clear_need_split() {
  need_split_ = false;
  clear_has_need_split();
}
inline bool ImageDataArbitraryParameter::need_split() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.need_split)
  return need_split_;
}
inline void ImageDataArbitraryParameter::set_need_split(bool value) {
  set_has_need_split();
  need_split_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.need_split)
}

// optional string left_roi = 19;
inline bool ImageDataArbitraryParameter::has_left_roi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_left_roi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataArbitraryParameter::clear_has_left_roi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataArbitraryParameter::clear_left_roi() {
  left_roi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_roi();
}
inline const ::std::string& ImageDataArbitraryParameter::left_roi() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.left_roi)
  return left_roi_.GetNoArena();
}
inline void ImageDataArbitraryParameter::set_left_roi(const ::std::string& value) {
  set_has_left_roi();
  left_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.left_roi)
}
#if LANG_CXX11
inline void ImageDataArbitraryParameter::set_left_roi(::std::string&& value) {
  set_has_left_roi();
  left_roi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.left_roi)
}
#endif
inline void ImageDataArbitraryParameter::set_left_roi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_left_roi();
  left_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.left_roi)
}
inline void ImageDataArbitraryParameter::set_left_roi(const char* value, size_t size) {
  set_has_left_roi();
  left_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.left_roi)
}
inline ::std::string* ImageDataArbitraryParameter::mutable_left_roi() {
  set_has_left_roi();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.left_roi)
  return left_roi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataArbitraryParameter::release_left_roi() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.left_roi)
  clear_has_left_roi();
  return left_roi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataArbitraryParameter::set_allocated_left_roi(::std::string* left_roi) {
  if (left_roi != NULL) {
    set_has_left_roi();
  } else {
    clear_has_left_roi();
  }
  left_roi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_roi);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.left_roi)
}

// optional string right_roi = 20;
inline bool ImageDataArbitraryParameter::has_right_roi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_right_roi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataArbitraryParameter::clear_has_right_roi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataArbitraryParameter::clear_right_roi() {
  right_roi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_roi();
}
inline const ::std::string& ImageDataArbitraryParameter::right_roi() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.right_roi)
  return right_roi_.GetNoArena();
}
inline void ImageDataArbitraryParameter::set_right_roi(const ::std::string& value) {
  set_has_right_roi();
  right_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.right_roi)
}
#if LANG_CXX11
inline void ImageDataArbitraryParameter::set_right_roi(::std::string&& value) {
  set_has_right_roi();
  right_roi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.right_roi)
}
#endif
inline void ImageDataArbitraryParameter::set_right_roi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_right_roi();
  right_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.right_roi)
}
inline void ImageDataArbitraryParameter::set_right_roi(const char* value, size_t size) {
  set_has_right_roi();
  right_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.right_roi)
}
inline ::std::string* ImageDataArbitraryParameter::mutable_right_roi() {
  set_has_right_roi();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.right_roi)
  return right_roi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataArbitraryParameter::release_right_roi() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.right_roi)
  clear_has_right_roi();
  return right_roi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataArbitraryParameter::set_allocated_right_roi(::std::string* right_roi) {
  if (right_roi != NULL) {
    set_has_right_roi();
  } else {
    clear_has_right_roi();
  }
  right_roi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_roi);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.right_roi)
}

// -------------------------------------------------------------------

// ManipulateLossParameter

// optional bool use_balancesample = 1 [default = false];
inline bool ManipulateLossParameter::has_use_balancesample() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManipulateLossParameter::set_has_use_balancesample() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManipulateLossParameter::clear_has_use_balancesample() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManipulateLossParameter::clear_use_balancesample() {
  use_balancesample_ = false;
  clear_has_use_balancesample();
}
inline bool ManipulateLossParameter::use_balancesample() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_balancesample)
  return use_balancesample_;
}
inline void ManipulateLossParameter::set_use_balancesample(bool value) {
  set_has_use_balancesample();
  use_balancesample_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_balancesample)
}

// optional string ignore_value = 2 [default = ""];
inline bool ManipulateLossParameter::has_ignore_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManipulateLossParameter::set_has_ignore_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManipulateLossParameter::clear_has_ignore_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManipulateLossParameter::clear_ignore_value() {
  ignore_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ignore_value();
}
inline const ::std::string& ManipulateLossParameter::ignore_value() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.ignore_value)
  return ignore_value_.GetNoArena();
}
inline void ManipulateLossParameter::set_ignore_value(const ::std::string& value) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.ignore_value)
}
#if LANG_CXX11
inline void ManipulateLossParameter::set_ignore_value(::std::string&& value) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ManipulateLossParameter.ignore_value)
}
#endif
inline void ManipulateLossParameter::set_ignore_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ManipulateLossParameter.ignore_value)
}
inline void ManipulateLossParameter::set_ignore_value(const char* value, size_t size) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ManipulateLossParameter.ignore_value)
}
inline ::std::string* ManipulateLossParameter::mutable_ignore_value() {
  set_has_ignore_value();
  // @@protoc_insertion_point(field_mutable:caffe.ManipulateLossParameter.ignore_value)
  return ignore_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManipulateLossParameter::release_ignore_value() {
  // @@protoc_insertion_point(field_release:caffe.ManipulateLossParameter.ignore_value)
  clear_has_ignore_value();
  return ignore_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManipulateLossParameter::set_allocated_ignore_value(::std::string* ignore_value) {
  if (ignore_value != NULL) {
    set_has_ignore_value();
  } else {
    clear_has_ignore_value();
  }
  ignore_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ignore_value);
  // @@protoc_insertion_point(field_set_allocated:caffe.ManipulateLossParameter.ignore_value)
}

// optional bool use_fullzeroignore = 3 [default = false];
inline bool ManipulateLossParameter::has_use_fullzeroignore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManipulateLossParameter::set_has_use_fullzeroignore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManipulateLossParameter::clear_has_use_fullzeroignore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManipulateLossParameter::clear_use_fullzeroignore() {
  use_fullzeroignore_ = false;
  clear_has_use_fullzeroignore();
}
inline bool ManipulateLossParameter::use_fullzeroignore() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_fullzeroignore)
  return use_fullzeroignore_;
}
inline void ManipulateLossParameter::set_use_fullzeroignore(bool value) {
  set_has_use_fullzeroignore();
  use_fullzeroignore_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_fullzeroignore)
}

// optional float bg_ratio = 4 [default = 1];
inline bool ManipulateLossParameter::has_bg_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManipulateLossParameter::set_has_bg_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ManipulateLossParameter::clear_has_bg_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ManipulateLossParameter::clear_bg_ratio() {
  bg_ratio_ = 1;
  clear_has_bg_ratio();
}
inline float ManipulateLossParameter::bg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.bg_ratio)
  return bg_ratio_;
}
inline void ManipulateLossParameter::set_bg_ratio(float value) {
  set_has_bg_ratio();
  bg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.bg_ratio)
}

// optional float uniform_droprate = 5 [default = 1];
inline bool ManipulateLossParameter::has_uniform_droprate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ManipulateLossParameter::set_has_uniform_droprate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ManipulateLossParameter::clear_has_uniform_droprate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ManipulateLossParameter::clear_uniform_droprate() {
  uniform_droprate_ = 1;
  clear_has_uniform_droprate();
}
inline float ManipulateLossParameter::uniform_droprate() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.uniform_droprate)
  return uniform_droprate_;
}
inline void ManipulateLossParameter::set_uniform_droprate(float value) {
  set_has_uniform_droprate();
  uniform_droprate_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.uniform_droprate)
}

// optional bool use_perchannel_balance = 6 [default = false];
inline bool ManipulateLossParameter::has_use_perchannel_balance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManipulateLossParameter::set_has_use_perchannel_balance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManipulateLossParameter::clear_has_use_perchannel_balance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManipulateLossParameter::clear_use_perchannel_balance() {
  use_perchannel_balance_ = false;
  clear_has_use_perchannel_balance();
}
inline bool ManipulateLossParameter::use_perchannel_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_perchannel_balance)
  return use_perchannel_balance_;
}
inline void ManipulateLossParameter::set_use_perchannel_balance(bool value) {
  set_has_use_perchannel_balance();
  use_perchannel_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_perchannel_balance)
}

// optional bool drop_singleclasschannel = 7 [default = false];
inline bool ManipulateLossParameter::has_drop_singleclasschannel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManipulateLossParameter::set_has_drop_singleclasschannel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManipulateLossParameter::clear_has_drop_singleclasschannel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManipulateLossParameter::clear_drop_singleclasschannel() {
  drop_singleclasschannel_ = false;
  clear_has_drop_singleclasschannel();
}
inline bool ManipulateLossParameter::drop_singleclasschannel() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.drop_singleclasschannel)
  return drop_singleclasschannel_;
}
inline void ManipulateLossParameter::set_drop_singleclasschannel(bool value) {
  set_has_drop_singleclasschannel();
  drop_singleclasschannel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.drop_singleclasschannel)
}

// optional bool print_info = 8 [default = false];
inline bool ManipulateLossParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManipulateLossParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManipulateLossParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManipulateLossParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
inline bool ManipulateLossParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.print_info)
  return print_info_;
}
inline void ManipulateLossParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.print_info)
}

// optional bool use_unionchannel_balance = 9 [default = false];
inline bool ManipulateLossParameter::has_use_unionchannel_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManipulateLossParameter::set_has_use_unionchannel_balance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManipulateLossParameter::clear_has_use_unionchannel_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManipulateLossParameter::clear_use_unionchannel_balance() {
  use_unionchannel_balance_ = false;
  clear_has_use_unionchannel_balance();
}
inline bool ManipulateLossParameter::use_unionchannel_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_unionchannel_balance)
  return use_unionchannel_balance_;
}
inline void ManipulateLossParameter::set_use_unionchannel_balance(bool value) {
  set_has_use_unionchannel_balance();
  use_unionchannel_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_unionchannel_balance)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
#if LANG_CXX11
inline void TransformationParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TransformationParameter.mean_file)
}
#endif
inline void TransformationParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

// optional bool normalize_per_positive = 100 [default = true];
inline bool LossParameter::has_normalize_per_positive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LossParameter::set_has_normalize_per_positive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LossParameter::clear_has_normalize_per_positive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LossParameter::clear_normalize_per_positive() {
  normalize_per_positive_ = true;
  clear_has_normalize_per_positive();
}
inline bool LossParameter::normalize_per_positive() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize_per_positive)
  return normalize_per_positive_;
}
inline void LossParameter::set_normalize_per_positive(bool value) {
  set_has_normalize_per_positive();
  normalize_per_positive_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize_per_positive)
}

// optional uint32 label_bottom_id = 101 [default = 1];
inline bool LossParameter::has_label_bottom_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LossParameter::set_has_label_bottom_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LossParameter::clear_has_label_bottom_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LossParameter::clear_label_bottom_id() {
  label_bottom_id_ = 1u;
  clear_has_label_bottom_id();
}
inline ::google::protobuf::uint32 LossParameter::label_bottom_id() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.label_bottom_id)
  return label_bottom_id_;
}
inline void LossParameter::set_label_bottom_id(::google::protobuf::uint32 value) {
  set_has_label_bottom_id();
  label_bottom_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.label_bottom_id)
}

// optional float scale = 102 [default = 1];
inline bool LossParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LossParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LossParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LossParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LossParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.scale)
  return scale_;
}
inline void LossParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.scale)
}

// optional bool smooth = 103 [default = false];
inline bool LossParameter::has_smooth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_smooth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_smooth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_smooth() {
  smooth_ = false;
  clear_has_smooth();
}
inline bool LossParameter::smooth() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.smooth)
  return smooth_;
}
inline void LossParameter::set_smooth(bool value) {
  set_has_smooth();
  smooth_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.smooth)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

// optional bool use_instance_norm = 4 [default = false];
inline bool BatchNormParameter::has_use_instance_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_use_instance_norm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_use_instance_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_use_instance_norm() {
  use_instance_norm_ = false;
  clear_has_use_instance_norm();
}
inline bool BatchNormParameter::use_instance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_instance_norm)
  return use_instance_norm_;
}
inline void BatchNormParameter::set_use_instance_norm(bool value) {
  set_has_use_instance_norm();
  use_instance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_instance_norm)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

// optional int32 dfmb_bottom_idx = 1001 [default = -1];
inline bool ConvolutionParameter::has_dfmb_bottom_idx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_dfmb_bottom_idx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_dfmb_bottom_idx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_dfmb_bottom_idx() {
  dfmb_bottom_idx_ = -1;
  clear_has_dfmb_bottom_idx();
}
inline ::google::protobuf::int32 ConvolutionParameter::dfmb_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dfmb_bottom_idx)
  return dfmb_bottom_idx_;
}
inline void ConvolutionParameter::set_dfmb_bottom_idx(::google::protobuf::int32 value) {
  set_has_dfmb_bottom_idx();
  dfmb_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dfmb_bottom_idx)
}

// optional int32 mask_bottom_idx = 1002 [default = -1];
inline bool ConvolutionParameter::has_mask_bottom_idx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_mask_bottom_idx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_mask_bottom_idx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_mask_bottom_idx() {
  mask_bottom_idx_ = -1;
  clear_has_mask_bottom_idx();
}
inline ::google::protobuf::int32 ConvolutionParameter::mask_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.mask_bottom_idx)
  return mask_bottom_idx_;
}
inline void ConvolutionParameter::set_mask_bottom_idx(::google::protobuf::int32 value) {
  set_has_mask_bottom_idx();
  mask_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.mask_bottom_idx)
}

// optional uint32 analysis_num_group = 1003 [default = 1];
inline bool ConvolutionParameter::has_analysis_num_group() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_analysis_num_group() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_analysis_num_group() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_analysis_num_group() {
  analysis_num_group_ = 1u;
  clear_has_analysis_num_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::analysis_num_group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.analysis_num_group)
  return analysis_num_group_;
}
inline void ConvolutionParameter::set_analysis_num_group(::google::protobuf::uint32 value) {
  set_has_analysis_num_group();
  analysis_num_group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.analysis_num_group)
}

// repeated uint32 kernel_h_offset = 1004;
inline int ConvolutionParameter::kernel_h_offset_size() const {
  return kernel_h_offset_.size();
}
inline void ConvolutionParameter::clear_kernel_h_offset() {
  kernel_h_offset_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h_offset)
  return kernel_h_offset_.Get(index);
}
inline void ConvolutionParameter::set_kernel_h_offset(int index, ::google::protobuf::uint32 value) {
  kernel_h_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h_offset)
}
inline void ConvolutionParameter::add_kernel_h_offset(::google::protobuf::uint32 value) {
  kernel_h_offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_h_offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_h_offset() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_h_offset)
  return kernel_h_offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_h_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_h_offset)
  return &kernel_h_offset_;
}

// repeated uint32 kernel_w_offset = 1005;
inline int ConvolutionParameter::kernel_w_offset_size() const {
  return kernel_w_offset_.size();
}
inline void ConvolutionParameter::clear_kernel_w_offset() {
  kernel_w_offset_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w_offset)
  return kernel_w_offset_.Get(index);
}
inline void ConvolutionParameter::set_kernel_w_offset(int index, ::google::protobuf::uint32 value) {
  kernel_w_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w_offset)
}
inline void ConvolutionParameter::add_kernel_w_offset(::google::protobuf::uint32 value) {
  kernel_w_offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_w_offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_w_offset() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_w_offset)
  return kernel_w_offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_w_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_w_offset)
  return &kernel_w_offset_;
}

// optional bool print_weight_bias_statistics = 1006;
inline bool ConvolutionParameter::has_print_weight_bias_statistics() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_print_weight_bias_statistics() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_print_weight_bias_statistics() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_print_weight_bias_statistics() {
  print_weight_bias_statistics_ = false;
  clear_has_print_weight_bias_statistics();
}
inline bool ConvolutionParameter::print_weight_bias_statistics() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.print_weight_bias_statistics)
  return print_weight_bias_statistics_;
}
inline void ConvolutionParameter::set_print_weight_bias_statistics(bool value) {
  set_has_print_weight_bias_statistics();
  print_weight_bias_statistics_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.print_weight_bias_statistics)
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena();
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
#if LANG_CXX11
inline void DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.source)
}
#endif
inline void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
#if LANG_CXX11
inline void DataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.mean_file)
}
#endif
inline void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena();
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
#if LANG_CXX11
inline void HDF5DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5DataParameter.source)
}
#endif
inline void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena();
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
#if LANG_CXX11
inline void HDF5OutputParameter::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5OutputParameter.file_name)
}
#endif
inline void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena();
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
#if LANG_CXX11
inline void ImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.source)
}
#endif
inline void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
#if LANG_CXX11
inline void ImageDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.mean_file)
}
#endif
inline void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
#if LANG_CXX11
inline void ImageDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.root_folder)
}
#endif
inline void ImageDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena();
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
#if LANG_CXX11
inline void InfogainLossParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InfogainLossParameter.source)
}
#endif
inline void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
inline bool PoolingParameter::has_cmp_out_shape_floor_as_conv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_cmp_out_shape_floor_as_conv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_cmp_out_shape_floor_as_conv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_cmp_out_shape_floor_as_conv() {
  cmp_out_shape_floor_as_conv_ = false;
  clear_has_cmp_out_shape_floor_as_conv();
}
inline bool PoolingParameter::cmp_out_shape_floor_as_conv() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.cmp_out_shape_floor_as_conv)
  return cmp_out_shape_floor_as_conv_;
}
inline void PoolingParameter::set_cmp_out_shape_floor_as_conv(bool value) {
  set_has_cmp_out_shape_floor_as_conv();
  cmp_out_shape_floor_as_conv_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.cmp_out_shape_floor_as_conv)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena();
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
#if LANG_CXX11
inline void PythonParameter::set_module(::std::string&& value) {
  set_has_module();
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.module)
}
#endif
inline void PythonParameter::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena();
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
#if LANG_CXX11
inline void PythonParameter::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.layer)
}
#endif
inline void PythonParameter::set_layer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena();
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
#if LANG_CXX11
inline void PythonParameter::set_param_str(::std::string&& value) {
  set_has_param_str();
  param_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.param_str)
}
#endif
inline void PythonParameter::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
inline ::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
inline void ROIPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
inline void ROIPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.spatial_scale)
}

// optional float heat_map_a = 4;
inline bool ROIPoolingParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIPoolingParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIPoolingParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIPoolingParameter::clear_heat_map_a() {
  heat_map_a_ = 0;
  clear_has_heat_map_a();
}
inline float ROIPoolingParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.heat_map_a)
  return heat_map_a_;
}
inline void ROIPoolingParameter::set_heat_map_a(float value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.heat_map_a)
}

// optional float heat_map_b = 5 [default = 0];
inline bool ROIPoolingParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIPoolingParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIPoolingParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIPoolingParameter::clear_heat_map_b() {
  heat_map_b_ = 0;
  clear_has_heat_map_b();
}
inline float ROIPoolingParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.heat_map_b)
  return heat_map_b_;
}
inline void ROIPoolingParameter::set_heat_map_b(float value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.heat_map_b)
}

// optional float pad_ratio = 6 [default = 0];
inline bool ROIPoolingParameter::has_pad_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ROIPoolingParameter::set_has_pad_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ROIPoolingParameter::clear_has_pad_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ROIPoolingParameter::clear_pad_ratio() {
  pad_ratio_ = 0;
  clear_has_pad_ratio();
}
inline float ROIPoolingParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pad_ratio)
  return pad_ratio_;
}
inline void ROIPoolingParameter::set_pad_ratio(float value) {
  set_has_pad_ratio();
  pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pad_ratio)
}

// optional bool use_floor = 7 [default = false];
inline bool ROIPoolingParameter::has_use_floor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ROIPoolingParameter::set_has_use_floor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ROIPoolingParameter::clear_has_use_floor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ROIPoolingParameter::clear_use_floor() {
  use_floor_ = false;
  clear_has_use_floor();
}
inline bool ROIPoolingParameter::use_floor() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.use_floor)
  return use_floor_;
}
inline void ROIPoolingParameter::set_use_floor(bool value) {
  set_has_use_floor();
  use_floor_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.use_floor)
}

// optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
inline bool ROIPoolingParameter::has_sqrt_sample_loc_num_per_bin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ROIPoolingParameter::set_has_sqrt_sample_loc_num_per_bin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ROIPoolingParameter::clear_has_sqrt_sample_loc_num_per_bin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ROIPoolingParameter::clear_sqrt_sample_loc_num_per_bin() {
  sqrt_sample_loc_num_per_bin_ = 2u;
  clear_has_sqrt_sample_loc_num_per_bin();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::sqrt_sample_loc_num_per_bin() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.sqrt_sample_loc_num_per_bin)
  return sqrt_sample_loc_num_per_bin_;
}
inline void ROIPoolingParameter::set_sqrt_sample_loc_num_per_bin(::google::protobuf::uint32 value) {
  set_has_sqrt_sample_loc_num_per_bin();
  sqrt_sample_loc_num_per_bin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.sqrt_sample_loc_num_per_bin)
}

// optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
inline bool ROIPoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ROIPoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ROIPoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ROIPoolingParameter::clear_pool() {
  pool_ = 1;
  clear_has_pool();
}
inline ::caffe::ROIPoolingParameter_PoolMethod ROIPoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pool)
  return static_cast< ::caffe::ROIPoolingParameter_PoolMethod >(pool_);
}
inline void ROIPoolingParameter::set_pool(::caffe::ROIPoolingParameter_PoolMethod value) {
  assert(::caffe::ROIPoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pool)
}

// optional bool position_sensitive = 10 [default = false];
inline bool ROIPoolingParameter::has_position_sensitive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ROIPoolingParameter::set_has_position_sensitive() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ROIPoolingParameter::clear_has_position_sensitive() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ROIPoolingParameter::clear_position_sensitive() {
  position_sensitive_ = false;
  clear_has_position_sensitive();
}
inline bool ROIPoolingParameter::position_sensitive() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.position_sensitive)
  return position_sensitive_;
}
inline void ROIPoolingParameter::set_position_sensitive(bool value) {
  set_has_position_sensitive();
  position_sensitive_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.position_sensitive)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena();
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
#if LANG_CXX11
inline void WindowDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.source)
}
#endif
inline void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
#if LANG_CXX11
inline void WindowDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.mean_file)
}
#endif
inline void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(&WindowDataParameter::_default_crop_mode_.get());
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena();
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
#if LANG_CXX11
inline void WindowDataParameter::set_crop_mode(::std::string&& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(
    &WindowDataParameter::_default_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.crop_mode)
}
#endif
inline void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(&WindowDataParameter::_default_crop_mode_.get());
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(&WindowDataParameter::_default_crop_mode_.get());
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(&WindowDataParameter::_default_crop_mode_.get(), crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
#if LANG_CXX11
inline void WindowDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.root_folder)
}
#endif
inline void WindowDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void V1LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
inline ::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#if LANG_CXX11
inline void V1LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#endif
inline void V1LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void V1LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
inline void V1LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
inline ::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#if LANG_CXX11
inline void V1LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#endif
inline void V1LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena();
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
#if LANG_CXX11
inline void V1LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V1LayerParameter.name)
}
#endif
inline void V1LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void V1LayerParameter::set_param(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(std::move(value));
}
#endif
inline void V1LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
inline ::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#if LANG_CXX11
inline void V1LayerParameter::add_param(::std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#endif
inline void V1LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
inline ::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
inline ::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
inline ::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
inline ::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
inline ::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
inline ::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
inline ::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
inline ::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
inline ::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
inline ::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
inline ::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
inline ::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
inline ::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
inline ::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
inline ::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
inline ::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
inline ::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
inline ::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
inline ::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
inline ::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
inline ::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
inline ::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_
                         : *::caffe::V0LayerParameter::internal_default_instance();
}
inline ::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

// optional .caffe.CropParameter crop_parameter = 50;
inline bool V1LayerParameter::has_crop_parameter() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_crop_parameter() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_crop_parameter() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_crop_parameter() {
  if (crop_parameter_ != NULL) crop_parameter_->::caffe::CropParameter::Clear();
  clear_has_crop_parameter();
}
inline const ::caffe::CropParameter& V1LayerParameter::crop_parameter() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.crop_parameter)
  return crop_parameter_ != NULL ? *crop_parameter_
                         : *::caffe::CropParameter::internal_default_instance();
}
inline ::caffe::CropParameter* V1LayerParameter::mutable_crop_parameter() {
  set_has_crop_parameter();
  if (crop_parameter_ == NULL) {
    crop_parameter_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.crop_parameter)
  return crop_parameter_;
}
inline ::caffe::CropParameter* V1LayerParameter::release_crop_parameter() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.crop_parameter)
  clear_has_crop_parameter();
  ::caffe::CropParameter* temp = crop_parameter_;
  crop_parameter_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_crop_parameter(::caffe::CropParameter* crop_parameter) {
  delete crop_parameter_;
  crop_parameter_ = crop_parameter;
  if (crop_parameter) {
    set_has_crop_parameter();
  } else {
    clear_has_crop_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.crop_parameter)
}

// optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
inline bool V1LayerParameter::has_image_data_arbitrary_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_image_data_arbitrary_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_image_data_arbitrary_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_image_data_arbitrary_param() {
  if (image_data_arbitrary_param_ != NULL) image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
  clear_has_image_data_arbitrary_param();
}
inline const ::caffe::ImageDataArbitraryParameter& V1LayerParameter::image_data_arbitrary_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_ != NULL ? *image_data_arbitrary_param_
                         : *::caffe::ImageDataArbitraryParameter::internal_default_instance();
}
inline ::caffe::ImageDataArbitraryParameter* V1LayerParameter::mutable_image_data_arbitrary_param() {
  set_has_image_data_arbitrary_param();
  if (image_data_arbitrary_param_ == NULL) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_;
}
inline ::caffe::ImageDataArbitraryParameter* V1LayerParameter::release_image_data_arbitrary_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_arbitrary_param)
  clear_has_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* temp = image_data_arbitrary_param_;
  image_data_arbitrary_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param) {
  delete image_data_arbitrary_param_;
  image_data_arbitrary_param_ = image_data_arbitrary_param;
  if (image_data_arbitrary_param) {
    set_has_image_data_arbitrary_param();
  } else {
    clear_has_image_data_arbitrary_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_arbitrary_param)
}

// optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
inline bool V1LayerParameter::has_expandlabel_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_expandlabel_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_expandlabel_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_expandlabel_param() {
  if (expandlabel_param_ != NULL) expandlabel_param_->::caffe::ExpandlabelParameter::Clear();
  clear_has_expandlabel_param();
}
inline const ::caffe::ExpandlabelParameter& V1LayerParameter::expandlabel_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.expandlabel_param)
  return expandlabel_param_ != NULL ? *expandlabel_param_
                         : *::caffe::ExpandlabelParameter::internal_default_instance();
}
inline ::caffe::ExpandlabelParameter* V1LayerParameter::mutable_expandlabel_param() {
  set_has_expandlabel_param();
  if (expandlabel_param_ == NULL) {
    expandlabel_param_ = new ::caffe::ExpandlabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.expandlabel_param)
  return expandlabel_param_;
}
inline ::caffe::ExpandlabelParameter* V1LayerParameter::release_expandlabel_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.expandlabel_param)
  clear_has_expandlabel_param();
  ::caffe::ExpandlabelParameter* temp = expandlabel_param_;
  expandlabel_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_expandlabel_param(::caffe::ExpandlabelParameter* expandlabel_param) {
  delete expandlabel_param_;
  expandlabel_param_ = expandlabel_param;
  if (expandlabel_param) {
    set_has_expandlabel_param();
  } else {
    clear_has_expandlabel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.expandlabel_param)
}

// optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
inline bool V1LayerParameter::has_deformable_convolution_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_deformable_convolution_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_deformable_convolution_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_deformable_convolution_param() {
  if (deformable_convolution_param_ != NULL) deformable_convolution_param_->::caffe::DeformableConvolutionParameter::Clear();
  clear_has_deformable_convolution_param();
}
inline const ::caffe::DeformableConvolutionParameter& V1LayerParameter::deformable_convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_ != NULL ? *deformable_convolution_param_
                         : *::caffe::DeformableConvolutionParameter::internal_default_instance();
}
inline ::caffe::DeformableConvolutionParameter* V1LayerParameter::mutable_deformable_convolution_param() {
  set_has_deformable_convolution_param();
  if (deformable_convolution_param_ == NULL) {
    deformable_convolution_param_ = new ::caffe::DeformableConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_;
}
inline ::caffe::DeformableConvolutionParameter* V1LayerParameter::release_deformable_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.deformable_convolution_param)
  clear_has_deformable_convolution_param();
  ::caffe::DeformableConvolutionParameter* temp = deformable_convolution_param_;
  deformable_convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_deformable_convolution_param(::caffe::DeformableConvolutionParameter* deformable_convolution_param) {
  delete deformable_convolution_param_;
  deformable_convolution_param_ = deformable_convolution_param;
  if (deformable_convolution_param) {
    set_has_deformable_convolution_param();
  } else {
    clear_has_deformable_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.deformable_convolution_param)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena();
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
#if LANG_CXX11
inline void V0LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.name)
}
#endif
inline void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena();
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
#if LANG_CXX11
inline void V0LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.type)
}
#endif
inline void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena();
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
#if LANG_CXX11
inline void V0LayerParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.source)
}
#endif
inline void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena();
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
#if LANG_CXX11
inline void V0LayerParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.meanfile)
}
#endif
inline void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena();
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
#if LANG_CXX11
inline void V0LayerParameter::set_det_crop_mode(::std::string&& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(
    &V0LayerParameter::_default_det_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.det_crop_mode)
}
#endif
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional uint32 height = 1;
inline bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
inline void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional uint32 width = 2;
inline bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
inline void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional bool is_pyramid_test = 3 [default = false];
inline bool ResizeParameter::has_is_pyramid_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResizeParameter::set_has_is_pyramid_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResizeParameter::clear_has_is_pyramid_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResizeParameter::clear_is_pyramid_test() {
  is_pyramid_test_ = false;
  clear_has_is_pyramid_test();
}
inline bool ResizeParameter::is_pyramid_test() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.is_pyramid_test)
  return is_pyramid_test_;
}
inline void ResizeParameter::set_is_pyramid_test(bool value) {
  set_has_is_pyramid_test();
  is_pyramid_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.is_pyramid_test)
}

// optional float out_height_scale = 4;
inline bool ResizeParameter::has_out_height_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResizeParameter::set_has_out_height_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResizeParameter::clear_has_out_height_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResizeParameter::clear_out_height_scale() {
  out_height_scale_ = 0;
  clear_has_out_height_scale();
}
inline float ResizeParameter::out_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_height_scale)
  return out_height_scale_;
}
inline void ResizeParameter::set_out_height_scale(float value) {
  set_has_out_height_scale();
  out_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_height_scale)
}

// optional float out_width_scale = 5;
inline bool ResizeParameter::has_out_width_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResizeParameter::set_has_out_width_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResizeParameter::clear_has_out_width_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResizeParameter::clear_out_width_scale() {
  out_width_scale_ = 0;
  clear_has_out_width_scale();
}
inline float ResizeParameter::out_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_width_scale)
  return out_width_scale_;
}
inline void ResizeParameter::set_out_width_scale(float value) {
  set_has_out_width_scale();
  out_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_width_scale)
}

// -------------------------------------------------------------------

// LabelRelatedDropoutParam

// optional float negative_ratio = 1 [default = 0.5];
inline bool LabelRelatedDropoutParam::has_negative_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_negative_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LabelRelatedDropoutParam::clear_has_negative_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LabelRelatedDropoutParam::clear_negative_ratio() {
  negative_ratio_ = 0.5f;
  clear_has_negative_ratio();
}
inline float LabelRelatedDropoutParam::negative_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.negative_ratio)
  return negative_ratio_;
}
inline void LabelRelatedDropoutParam::set_negative_ratio(float value) {
  set_has_negative_ratio();
  negative_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.negative_ratio)
}

// optional float value_masked = 3 [default = 0];
inline bool LabelRelatedDropoutParam::has_value_masked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_value_masked() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelRelatedDropoutParam::clear_has_value_masked() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelRelatedDropoutParam::clear_value_masked() {
  value_masked_ = 0;
  clear_has_value_masked();
}
inline float LabelRelatedDropoutParam::value_masked() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.value_masked)
  return value_masked_;
}
inline void LabelRelatedDropoutParam::set_value_masked(float value) {
  set_has_value_masked();
  value_masked_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.value_masked)
}

// optional float hard_ratio = 4 [default = 0.5];
inline bool LabelRelatedDropoutParam::has_hard_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_hard_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LabelRelatedDropoutParam::clear_has_hard_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LabelRelatedDropoutParam::clear_hard_ratio() {
  hard_ratio_ = 0.5f;
  clear_has_hard_ratio();
}
inline float LabelRelatedDropoutParam::hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.hard_ratio)
  return hard_ratio_;
}
inline void LabelRelatedDropoutParam::set_hard_ratio(float value) {
  set_has_hard_ratio();
  hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.hard_ratio)
}

// optional uint32 margin = 5 [default = 3];
inline bool LabelRelatedDropoutParam::has_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_margin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LabelRelatedDropoutParam::clear_has_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LabelRelatedDropoutParam::clear_margin() {
  margin_ = 3u;
  clear_has_margin();
}
inline ::google::protobuf::uint32 LabelRelatedDropoutParam::margin() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.margin)
  return margin_;
}
inline void LabelRelatedDropoutParam::set_margin(::google::protobuf::uint32 value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.margin)
}

// optional uint32 ignore_largest_n = 6 [default = 0];
inline bool LabelRelatedDropoutParam::has_ignore_largest_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_ignore_largest_n() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelRelatedDropoutParam::clear_has_ignore_largest_n() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelRelatedDropoutParam::clear_ignore_largest_n() {
  ignore_largest_n_ = 0u;
  clear_has_ignore_largest_n();
}
inline ::google::protobuf::uint32 LabelRelatedDropoutParam::ignore_largest_n() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.ignore_largest_n)
  return ignore_largest_n_;
}
inline void LabelRelatedDropoutParam::set_ignore_largest_n(::google::protobuf::uint32 value) {
  set_has_ignore_largest_n();
  ignore_largest_n_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.ignore_largest_n)
}

// optional uint32 min_neg_nums = 7 [default = 0];
inline bool LabelRelatedDropoutParam::has_min_neg_nums() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_min_neg_nums() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelRelatedDropoutParam::clear_has_min_neg_nums() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelRelatedDropoutParam::clear_min_neg_nums() {
  min_neg_nums_ = 0u;
  clear_has_min_neg_nums();
}
inline ::google::protobuf::uint32 LabelRelatedDropoutParam::min_neg_nums() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.min_neg_nums)
  return min_neg_nums_;
}
inline void LabelRelatedDropoutParam::set_min_neg_nums(::google::protobuf::uint32 value) {
  set_has_min_neg_nums();
  min_neg_nums_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.min_neg_nums)
}

// optional bool per_image = 8 [default = false];
inline bool LabelRelatedDropoutParam::has_per_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LabelRelatedDropoutParam::set_has_per_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LabelRelatedDropoutParam::clear_has_per_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LabelRelatedDropoutParam::clear_per_image() {
  per_image_ = false;
  clear_has_per_image();
}
inline bool LabelRelatedDropoutParam::per_image() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.per_image)
  return per_image_;
}
inline void LabelRelatedDropoutParam::set_per_image(bool value) {
  set_has_per_image();
  per_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.per_image)
}

// -------------------------------------------------------------------

// InceptionColumnParameter

// repeated .caffe.ConvolutionParameter convolution_param = 1;
inline int InceptionColumnParameter::convolution_param_size() const {
  return convolution_param_.size();
}
inline void InceptionColumnParameter::clear_convolution_param() {
  convolution_param_.Clear();
}
inline const ::caffe::ConvolutionParameter& InceptionColumnParameter::convolution_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_.Get(index);
}
inline ::caffe::ConvolutionParameter* InceptionColumnParameter::mutable_convolution_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_.Mutable(index);
}
inline ::caffe::ConvolutionParameter* InceptionColumnParameter::add_convolution_param() {
  // @@protoc_insertion_point(field_add:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter >*
InceptionColumnParameter::mutable_convolution_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InceptionColumnParameter.convolution_param)
  return &convolution_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter >&
InceptionColumnParameter::convolution_param() const {
  // @@protoc_insertion_point(field_list:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_;
}

// optional .caffe.PoolingParameter pooling_param = 2;
inline bool InceptionColumnParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InceptionColumnParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InceptionColumnParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InceptionColumnParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& InceptionColumnParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionColumnParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
inline ::caffe::PoolingParameter* InceptionColumnParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionColumnParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* InceptionColumnParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.InceptionColumnParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void InceptionColumnParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionColumnParameter.pooling_param)
}

// optional string column_name = 3;
inline bool InceptionColumnParameter::has_column_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InceptionColumnParameter::set_has_column_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InceptionColumnParameter::clear_has_column_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InceptionColumnParameter::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_column_name();
}
inline const ::std::string& InceptionColumnParameter::column_name() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionColumnParameter.column_name)
  return column_name_.GetNoArena();
}
inline void InceptionColumnParameter::set_column_name(const ::std::string& value) {
  set_has_column_name();
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InceptionColumnParameter.column_name)
}
#if LANG_CXX11
inline void InceptionColumnParameter::set_column_name(::std::string&& value) {
  set_has_column_name();
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InceptionColumnParameter.column_name)
}
#endif
inline void InceptionColumnParameter::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_column_name();
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InceptionColumnParameter.column_name)
}
inline void InceptionColumnParameter::set_column_name(const char* value, size_t size) {
  set_has_column_name();
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InceptionColumnParameter.column_name)
}
inline ::std::string* InceptionColumnParameter::mutable_column_name() {
  set_has_column_name();
  // @@protoc_insertion_point(field_mutable:caffe.InceptionColumnParameter.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InceptionColumnParameter::release_column_name() {
  // @@protoc_insertion_point(field_release:caffe.InceptionColumnParameter.column_name)
  clear_has_column_name();
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InceptionColumnParameter::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    set_has_column_name();
  } else {
    clear_has_column_name();
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionColumnParameter.column_name)
}

// -------------------------------------------------------------------

// InceptionParameter

// optional .caffe.ReLUParameter relu_param = 1;
inline bool InceptionParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InceptionParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InceptionParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InceptionParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& InceptionParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
inline ::caffe::ReLUParameter* InceptionParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* InceptionParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.InceptionParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void InceptionParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionParameter.relu_param)
}

// optional .caffe.FillerParameter weight_filler = 2;
inline bool InceptionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InceptionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InceptionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InceptionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InceptionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InceptionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* InceptionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InceptionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InceptionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
inline bool InceptionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InceptionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InceptionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InceptionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InceptionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InceptionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* InceptionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InceptionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InceptionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionParameter.bias_filler)
}

// optional bool need_relu = 5 [default = true];
inline bool InceptionParameter::has_need_relu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InceptionParameter::set_has_need_relu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InceptionParameter::clear_has_need_relu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InceptionParameter::clear_need_relu() {
  need_relu_ = true;
  clear_has_need_relu();
}
inline bool InceptionParameter::need_relu() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.need_relu)
  return need_relu_;
}
inline void InceptionParameter::set_need_relu(bool value) {
  set_has_need_relu();
  need_relu_ = value;
  // @@protoc_insertion_point(field_set:caffe.InceptionParameter.need_relu)
}

// optional bool relu_at_top = 6 [default = true];
inline bool InceptionParameter::has_relu_at_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InceptionParameter::set_has_relu_at_top() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InceptionParameter::clear_has_relu_at_top() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InceptionParameter::clear_relu_at_top() {
  relu_at_top_ = true;
  clear_has_relu_at_top();
}
inline bool InceptionParameter::relu_at_top() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.relu_at_top)
  return relu_at_top_;
}
inline void InceptionParameter::set_relu_at_top(bool value) {
  set_has_relu_at_top();
  relu_at_top_ = value;
  // @@protoc_insertion_point(field_set:caffe.InceptionParameter.relu_at_top)
}

// repeated .caffe.InceptionColumnParameter inception_column = 7;
inline int InceptionParameter::inception_column_size() const {
  return inception_column_.size();
}
inline void InceptionParameter::clear_inception_column() {
  inception_column_.Clear();
}
inline const ::caffe::InceptionColumnParameter& InceptionParameter::inception_column(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.inception_column)
  return inception_column_.Get(index);
}
inline ::caffe::InceptionColumnParameter* InceptionParameter::mutable_inception_column(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.inception_column)
  return inception_column_.Mutable(index);
}
inline ::caffe::InceptionColumnParameter* InceptionParameter::add_inception_column() {
  // @@protoc_insertion_point(field_add:caffe.InceptionParameter.inception_column)
  return inception_column_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter >*
InceptionParameter::mutable_inception_column() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InceptionParameter.inception_column)
  return &inception_column_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter >&
InceptionParameter::inception_column() const {
  // @@protoc_insertion_point(field_list:caffe.InceptionParameter.inception_column)
  return inception_column_;
}

// -------------------------------------------------------------------

// ElementHingeLossParameter

// optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
inline bool ElementHingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElementHingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElementHingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElementHingeLossParameter::clear_norm() {
  norm_ = 2;
  clear_has_norm();
}
inline ::caffe::ElementHingeLossParameter_Norm ElementHingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.ElementHingeLossParameter.norm)
  return static_cast< ::caffe::ElementHingeLossParameter_Norm >(norm_);
}
inline void ElementHingeLossParameter::set_norm(::caffe::ElementHingeLossParameter_Norm value) {
  assert(::caffe::ElementHingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.ElementHingeLossParameter.norm)
}

// optional bool scale_loss = 2 [default = false];
inline bool ElementHingeLossParameter::has_scale_loss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElementHingeLossParameter::set_has_scale_loss() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElementHingeLossParameter::clear_has_scale_loss() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElementHingeLossParameter::clear_scale_loss() {
  scale_loss_ = false;
  clear_has_scale_loss();
}
inline bool ElementHingeLossParameter::scale_loss() const {
  // @@protoc_insertion_point(field_get:caffe.ElementHingeLossParameter.scale_loss)
  return scale_loss_;
}
inline void ElementHingeLossParameter::set_scale_loss(bool value) {
  set_has_scale_loss();
  scale_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.ElementHingeLossParameter.scale_loss)
}

// -------------------------------------------------------------------

// BlockPackingParameter

// optional uint32 max_stride = 6 [default = 8];
inline bool BlockPackingParameter::has_max_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockPackingParameter::set_has_max_stride() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockPackingParameter::clear_has_max_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockPackingParameter::clear_max_stride() {
  max_stride_ = 8u;
  clear_has_max_stride();
}
inline ::google::protobuf::uint32 BlockPackingParameter::max_stride() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.max_stride)
  return max_stride_;
}
inline void BlockPackingParameter::set_max_stride(::google::protobuf::uint32 value) {
  set_has_max_stride();
  max_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.max_stride)
}

// optional uint32 pad_h = 7 [default = 0];
inline bool BlockPackingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockPackingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockPackingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockPackingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 BlockPackingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.pad_h)
  return pad_h_;
}
inline void BlockPackingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.pad_h)
}

// optional uint32 pad_w = 8 [default = 0];
inline bool BlockPackingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockPackingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockPackingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockPackingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 BlockPackingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.pad_w)
  return pad_w_;
}
inline void BlockPackingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.pad_w)
}

// optional uint32 max_block_size = 9 [default = 500];
inline bool BlockPackingParameter::has_max_block_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockPackingParameter::set_has_max_block_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockPackingParameter::clear_has_max_block_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockPackingParameter::clear_max_block_size() {
  max_block_size_ = 500u;
  clear_has_max_block_size();
}
inline ::google::protobuf::uint32 BlockPackingParameter::max_block_size() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.max_block_size)
  return max_block_size_;
}
inline void BlockPackingParameter::set_max_block_size(::google::protobuf::uint32 value) {
  set_has_max_block_size();
  max_block_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.max_block_size)
}

// optional float roi_star_percent = 10 [default = 0];
inline bool BlockPackingParameter::has_roi_star_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPackingParameter::set_has_roi_star_percent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockPackingParameter::clear_has_roi_star_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockPackingParameter::clear_roi_star_percent() {
  roi_star_percent_ = 0;
  clear_has_roi_star_percent();
}
inline float BlockPackingParameter::roi_star_percent() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.roi_star_percent)
  return roi_star_percent_;
}
inline void BlockPackingParameter::set_roi_star_percent(float value) {
  set_has_roi_star_percent();
  roi_star_percent_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.roi_star_percent)
}

// optional float roi_height_percent = 11 [default = 1];
inline bool BlockPackingParameter::has_roi_height_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockPackingParameter::set_has_roi_height_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockPackingParameter::clear_has_roi_height_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockPackingParameter::clear_roi_height_percent() {
  roi_height_percent_ = 1;
  clear_has_roi_height_percent();
}
inline float BlockPackingParameter::roi_height_percent() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.roi_height_percent)
  return roi_height_percent_;
}
inline void BlockPackingParameter::set_roi_height_percent(float value) {
  set_has_roi_height_percent();
  roi_height_percent_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.roi_height_percent)
}

// -------------------------------------------------------------------

// PyramidDataParameter

// optional string image_list_file = 1;
inline bool PyramidDataParameter::has_image_list_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PyramidDataParameter::set_has_image_list_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PyramidDataParameter::clear_has_image_list_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PyramidDataParameter::clear_image_list_file() {
  image_list_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_list_file();
}
inline const ::std::string& PyramidDataParameter::image_list_file() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.image_list_file)
  return image_list_file_.GetNoArena();
}
inline void PyramidDataParameter::set_image_list_file(const ::std::string& value) {
  set_has_image_list_file();
  image_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.image_list_file)
}
#if LANG_CXX11
inline void PyramidDataParameter::set_image_list_file(::std::string&& value) {
  set_has_image_list_file();
  image_list_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.image_list_file)
}
#endif
inline void PyramidDataParameter::set_image_list_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image_list_file();
  image_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.image_list_file)
}
inline void PyramidDataParameter::set_image_list_file(const char* value, size_t size) {
  set_has_image_list_file();
  image_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.image_list_file)
}
inline ::std::string* PyramidDataParameter::mutable_image_list_file() {
  set_has_image_list_file();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.image_list_file)
  return image_list_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PyramidDataParameter::release_image_list_file() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.image_list_file)
  clear_has_image_list_file();
  return image_list_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PyramidDataParameter::set_allocated_image_list_file(::std::string* image_list_file) {
  if (image_list_file != NULL) {
    set_has_image_list_file();
  } else {
    clear_has_image_list_file();
  }
  image_list_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_list_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.image_list_file)
}

// optional string image_folder = 2;
inline bool PyramidDataParameter::has_image_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PyramidDataParameter::set_has_image_folder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PyramidDataParameter::clear_has_image_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PyramidDataParameter::clear_image_folder() {
  image_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_folder();
}
inline const ::std::string& PyramidDataParameter::image_folder() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.image_folder)
  return image_folder_.GetNoArena();
}
inline void PyramidDataParameter::set_image_folder(const ::std::string& value) {
  set_has_image_folder();
  image_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.image_folder)
}
#if LANG_CXX11
inline void PyramidDataParameter::set_image_folder(::std::string&& value) {
  set_has_image_folder();
  image_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.image_folder)
}
#endif
inline void PyramidDataParameter::set_image_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image_folder();
  image_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.image_folder)
}
inline void PyramidDataParameter::set_image_folder(const char* value, size_t size) {
  set_has_image_folder();
  image_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.image_folder)
}
inline ::std::string* PyramidDataParameter::mutable_image_folder() {
  set_has_image_folder();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.image_folder)
  return image_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PyramidDataParameter::release_image_folder() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.image_folder)
  clear_has_image_folder();
  return image_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PyramidDataParameter::set_allocated_image_folder(::std::string* image_folder) {
  if (image_folder != NULL) {
    set_has_image_folder();
  } else {
    clear_has_image_folder();
  }
  image_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.image_folder)
}

// optional float scale_start = 3 [default = -2];
inline bool PyramidDataParameter::has_scale_start() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PyramidDataParameter::set_has_scale_start() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PyramidDataParameter::clear_has_scale_start() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PyramidDataParameter::clear_scale_start() {
  scale_start_ = -2;
  clear_has_scale_start();
}
inline float PyramidDataParameter::scale_start() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_start)
  return scale_start_;
}
inline void PyramidDataParameter::set_scale_start(float value) {
  set_has_scale_start();
  scale_start_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_start)
}

// optional float scale_end = 4 [default = 1];
inline bool PyramidDataParameter::has_scale_end() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PyramidDataParameter::set_has_scale_end() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PyramidDataParameter::clear_has_scale_end() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PyramidDataParameter::clear_scale_end() {
  scale_end_ = 1;
  clear_has_scale_end();
}
inline float PyramidDataParameter::scale_end() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_end)
  return scale_end_;
}
inline void PyramidDataParameter::set_scale_end(float value) {
  set_has_scale_end();
  scale_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_end)
}

// optional float scale_step = 5 [default = 0.3];
inline bool PyramidDataParameter::has_scale_step() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PyramidDataParameter::set_has_scale_step() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PyramidDataParameter::clear_has_scale_step() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PyramidDataParameter::clear_scale_step() {
  scale_step_ = 0.3f;
  clear_has_scale_step();
}
inline float PyramidDataParameter::scale_step() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_step)
  return scale_step_;
}
inline void PyramidDataParameter::set_scale_step(float value) {
  set_has_scale_step();
  scale_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_step)
}

// optional bool scale_from_annotation = 14 [default = false];
inline bool PyramidDataParameter::has_scale_from_annotation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PyramidDataParameter::set_has_scale_from_annotation() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PyramidDataParameter::clear_has_scale_from_annotation() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PyramidDataParameter::clear_scale_from_annotation() {
  scale_from_annotation_ = false;
  clear_has_scale_from_annotation();
}
inline bool PyramidDataParameter::scale_from_annotation() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_from_annotation)
  return scale_from_annotation_;
}
inline void PyramidDataParameter::set_scale_from_annotation(bool value) {
  set_has_scale_from_annotation();
  scale_from_annotation_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_from_annotation)
}

// optional .caffe.BlockPackingParameter block_packing_param = 6;
inline bool PyramidDataParameter::has_block_packing_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PyramidDataParameter::set_has_block_packing_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PyramidDataParameter::clear_has_block_packing_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PyramidDataParameter::clear_block_packing_param() {
  if (block_packing_param_ != NULL) block_packing_param_->::caffe::BlockPackingParameter::Clear();
  clear_has_block_packing_param();
}
inline const ::caffe::BlockPackingParameter& PyramidDataParameter::block_packing_param() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.block_packing_param)
  return block_packing_param_ != NULL ? *block_packing_param_
                         : *::caffe::BlockPackingParameter::internal_default_instance();
}
inline ::caffe::BlockPackingParameter* PyramidDataParameter::mutable_block_packing_param() {
  set_has_block_packing_param();
  if (block_packing_param_ == NULL) {
    block_packing_param_ = new ::caffe::BlockPackingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.block_packing_param)
  return block_packing_param_;
}
inline ::caffe::BlockPackingParameter* PyramidDataParameter::release_block_packing_param() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.block_packing_param)
  clear_has_block_packing_param();
  ::caffe::BlockPackingParameter* temp = block_packing_param_;
  block_packing_param_ = NULL;
  return temp;
}
inline void PyramidDataParameter::set_allocated_block_packing_param(::caffe::BlockPackingParameter* block_packing_param) {
  delete block_packing_param_;
  block_packing_param_ = block_packing_param;
  if (block_packing_param) {
    set_has_block_packing_param();
  } else {
    clear_has_block_packing_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.block_packing_param)
}

// optional uint32 heat_map_a = 10 [default = 0];
inline bool PyramidDataParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PyramidDataParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PyramidDataParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PyramidDataParameter::clear_heat_map_a() {
  heat_map_a_ = 0u;
  clear_has_heat_map_a();
}
inline ::google::protobuf::uint32 PyramidDataParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.heat_map_a)
  return heat_map_a_;
}
inline void PyramidDataParameter::set_heat_map_a(::google::protobuf::uint32 value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.heat_map_a)
}

// optional uint32 heat_map_b = 11 [default = 0];
inline bool PyramidDataParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PyramidDataParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PyramidDataParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PyramidDataParameter::clear_heat_map_b() {
  heat_map_b_ = 0u;
  clear_has_heat_map_b();
}
inline ::google::protobuf::uint32 PyramidDataParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.heat_map_b)
  return heat_map_b_;
}
inline void PyramidDataParameter::set_heat_map_b(::google::protobuf::uint32 value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.heat_map_b)
}

// optional float mean_r = 7 [default = 0];
inline bool PyramidDataParameter::has_mean_r() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PyramidDataParameter::set_has_mean_r() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PyramidDataParameter::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PyramidDataParameter::clear_mean_r() {
  mean_r_ = 0;
  clear_has_mean_r();
}
inline float PyramidDataParameter::mean_r() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean_r)
  return mean_r_;
}
inline void PyramidDataParameter::set_mean_r(float value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean_r)
}

// optional float mean_g = 8 [default = 0];
inline bool PyramidDataParameter::has_mean_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PyramidDataParameter::set_has_mean_g() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PyramidDataParameter::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PyramidDataParameter::clear_mean_g() {
  mean_g_ = 0;
  clear_has_mean_g();
}
inline float PyramidDataParameter::mean_g() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean_g)
  return mean_g_;
}
inline void PyramidDataParameter::set_mean_g(float value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean_g)
}

// optional float mean_b = 9 [default = 0];
inline bool PyramidDataParameter::has_mean_b() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PyramidDataParameter::set_has_mean_b() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PyramidDataParameter::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PyramidDataParameter::clear_mean_b() {
  mean_b_ = 0;
  clear_has_mean_b();
}
inline float PyramidDataParameter::mean_b() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean_b)
  return mean_b_;
}
inline void PyramidDataParameter::set_mean_b(float value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean_b)
}

// optional uint32 max_block_num = 12 [default = 4];
inline bool PyramidDataParameter::has_max_block_num() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PyramidDataParameter::set_has_max_block_num() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PyramidDataParameter::clear_has_max_block_num() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PyramidDataParameter::clear_max_block_num() {
  max_block_num_ = 4u;
  clear_has_max_block_num();
}
inline ::google::protobuf::uint32 PyramidDataParameter::max_block_num() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.max_block_num)
  return max_block_num_;
}
inline void PyramidDataParameter::set_max_block_num(::google::protobuf::uint32 value) {
  set_has_max_block_num();
  max_block_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.max_block_num)
}

// optional bool shuffle = 13 [default = false];
inline bool PyramidDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PyramidDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PyramidDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PyramidDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool PyramidDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.shuffle)
  return shuffle_;
}
inline void PyramidDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.shuffle)
}

// optional float mean2_r = 21 [default = 0];
inline bool PyramidDataParameter::has_mean2_r() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PyramidDataParameter::set_has_mean2_r() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PyramidDataParameter::clear_has_mean2_r() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PyramidDataParameter::clear_mean2_r() {
  mean2_r_ = 0;
  clear_has_mean2_r();
}
inline float PyramidDataParameter::mean2_r() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean2_r)
  return mean2_r_;
}
inline void PyramidDataParameter::set_mean2_r(float value) {
  set_has_mean2_r();
  mean2_r_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean2_r)
}

// optional float mean2_g = 22 [default = 0];
inline bool PyramidDataParameter::has_mean2_g() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PyramidDataParameter::set_has_mean2_g() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PyramidDataParameter::clear_has_mean2_g() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PyramidDataParameter::clear_mean2_g() {
  mean2_g_ = 0;
  clear_has_mean2_g();
}
inline float PyramidDataParameter::mean2_g() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean2_g)
  return mean2_g_;
}
inline void PyramidDataParameter::set_mean2_g(float value) {
  set_has_mean2_g();
  mean2_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean2_g)
}

// optional float mean2_b = 23 [default = 0];
inline bool PyramidDataParameter::has_mean2_b() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PyramidDataParameter::set_has_mean2_b() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PyramidDataParameter::clear_has_mean2_b() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PyramidDataParameter::clear_mean2_b() {
  mean2_b_ = 0;
  clear_has_mean2_b();
}
inline float PyramidDataParameter::mean2_b() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean2_b)
  return mean2_b_;
}
inline void PyramidDataParameter::set_mean2_b(float value) {
  set_has_mean2_b();
  mean2_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean2_b)
}

// optional bool is_img_pair = 24 [default = false];
inline bool PyramidDataParameter::has_is_img_pair() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PyramidDataParameter::set_has_is_img_pair() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PyramidDataParameter::clear_has_is_img_pair() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PyramidDataParameter::clear_is_img_pair() {
  is_img_pair_ = false;
  clear_has_is_img_pair();
}
inline bool PyramidDataParameter::is_img_pair() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.is_img_pair)
  return is_img_pair_;
}
inline void PyramidDataParameter::set_is_img_pair(bool value) {
  set_has_is_img_pair();
  is_img_pair_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.is_img_pair)
}

// optional bool use_video = 115 [default = false];
inline bool PyramidDataParameter::has_use_video() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PyramidDataParameter::set_has_use_video() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PyramidDataParameter::clear_has_use_video() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PyramidDataParameter::clear_use_video() {
  use_video_ = false;
  clear_has_use_video();
}
inline bool PyramidDataParameter::use_video() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.use_video)
  return use_video_;
}
inline void PyramidDataParameter::set_use_video(bool value) {
  set_has_use_video();
  use_video_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.use_video)
}

// optional string video_file = 116;
inline bool PyramidDataParameter::has_video_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PyramidDataParameter::set_has_video_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PyramidDataParameter::clear_has_video_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PyramidDataParameter::clear_video_file() {
  video_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_file();
}
inline const ::std::string& PyramidDataParameter::video_file() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.video_file)
  return video_file_.GetNoArena();
}
inline void PyramidDataParameter::set_video_file(const ::std::string& value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.video_file)
}
#if LANG_CXX11
inline void PyramidDataParameter::set_video_file(::std::string&& value) {
  set_has_video_file();
  video_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.video_file)
}
#endif
inline void PyramidDataParameter::set_video_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.video_file)
}
inline void PyramidDataParameter::set_video_file(const char* value, size_t size) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.video_file)
}
inline ::std::string* PyramidDataParameter::mutable_video_file() {
  set_has_video_file();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.video_file)
  return video_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PyramidDataParameter::release_video_file() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.video_file)
  clear_has_video_file();
  return video_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PyramidDataParameter::set_allocated_video_file(::std::string* video_file) {
  if (video_file != NULL) {
    set_has_video_file();
  } else {
    clear_has_video_file();
  }
  video_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.video_file)
}

// optional string list_file = 117;
inline bool PyramidDataParameter::has_list_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PyramidDataParameter::set_has_list_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PyramidDataParameter::clear_has_list_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PyramidDataParameter::clear_list_file() {
  list_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_list_file();
}
inline const ::std::string& PyramidDataParameter::list_file() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.list_file)
  return list_file_.GetNoArena();
}
inline void PyramidDataParameter::set_list_file(const ::std::string& value) {
  set_has_list_file();
  list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.list_file)
}
#if LANG_CXX11
inline void PyramidDataParameter::set_list_file(::std::string&& value) {
  set_has_list_file();
  list_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.list_file)
}
#endif
inline void PyramidDataParameter::set_list_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_list_file();
  list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.list_file)
}
inline void PyramidDataParameter::set_list_file(const char* value, size_t size) {
  set_has_list_file();
  list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.list_file)
}
inline ::std::string* PyramidDataParameter::mutable_list_file() {
  set_has_list_file();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.list_file)
  return list_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PyramidDataParameter::release_list_file() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.list_file)
  clear_has_list_file();
  return list_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PyramidDataParameter::set_allocated_list_file(::std::string* list_file) {
  if (list_file != NULL) {
    set_has_list_file();
  } else {
    clear_has_list_file();
  }
  list_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.list_file)
}

// optional uint32 device = 118 [default = 0];
inline bool PyramidDataParameter::has_device() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PyramidDataParameter::set_has_device() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PyramidDataParameter::clear_has_device() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PyramidDataParameter::clear_device() {
  device_ = 0u;
  clear_has_device();
}
inline ::google::protobuf::uint32 PyramidDataParameter::device() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.device)
  return device_;
}
inline void PyramidDataParameter::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.device)
}

// optional bool rgb = 119 [default = true];
inline bool PyramidDataParameter::has_rgb() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PyramidDataParameter::set_has_rgb() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PyramidDataParameter::clear_has_rgb() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PyramidDataParameter::clear_rgb() {
  rgb_ = true;
  clear_has_rgb();
}
inline bool PyramidDataParameter::rgb() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.rgb)
  return rgb_;
}
inline void PyramidDataParameter::set_rgb(bool value) {
  set_has_rgb();
  rgb_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.rgb)
}

// optional bool pic_print = 120 [default = false];
inline bool PyramidDataParameter::has_pic_print() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PyramidDataParameter::set_has_pic_print() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PyramidDataParameter::clear_has_pic_print() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PyramidDataParameter::clear_pic_print() {
  pic_print_ = false;
  clear_has_pic_print();
}
inline bool PyramidDataParameter::pic_print() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.pic_print)
  return pic_print_;
}
inline void PyramidDataParameter::set_pic_print(bool value) {
  set_has_pic_print();
  pic_print_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.pic_print)
}

// optional bool show_time = 121 [default = false];
inline bool PyramidDataParameter::has_show_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PyramidDataParameter::set_has_show_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PyramidDataParameter::clear_has_show_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PyramidDataParameter::clear_show_time() {
  show_time_ = false;
  clear_has_show_time();
}
inline bool PyramidDataParameter::show_time() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.show_time)
  return show_time_;
}
inline void PyramidDataParameter::set_show_time(bool value) {
  set_has_show_time();
  show_time_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.show_time)
}

// optional float resize_scale = 122 [default = 1];
inline bool PyramidDataParameter::has_resize_scale() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PyramidDataParameter::set_has_resize_scale() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PyramidDataParameter::clear_has_resize_scale() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PyramidDataParameter::clear_resize_scale() {
  resize_scale_ = 1;
  clear_has_resize_scale();
}
inline float PyramidDataParameter::resize_scale() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.resize_scale)
  return resize_scale_;
}
inline void PyramidDataParameter::set_resize_scale(float value) {
  set_has_resize_scale();
  resize_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.resize_scale)
}

// repeated float scales = 28;
inline int PyramidDataParameter::scales_size() const {
  return scales_.size();
}
inline void PyramidDataParameter::clear_scales() {
  scales_.Clear();
}
inline float PyramidDataParameter::scales(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scales)
  return scales_.Get(index);
}
inline void PyramidDataParameter::set_scales(int index, float value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scales)
}
inline void PyramidDataParameter::add_scales(float value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PyramidDataParameter.scales)
}
inline const ::google::protobuf::RepeatedField< float >&
PyramidDataParameter::scales() const {
  // @@protoc_insertion_point(field_list:caffe.PyramidDataParameter.scales)
  return scales_;
}
inline ::google::protobuf::RepeatedField< float >*
PyramidDataParameter::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PyramidDataParameter.scales)
  return &scales_;
}

// -------------------------------------------------------------------

// NMSParameter

// optional bool need_nms = 1 [default = true];
inline bool NMSParameter::has_need_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NMSParameter::set_has_need_nms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NMSParameter::clear_has_need_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NMSParameter::clear_need_nms() {
  need_nms_ = true;
  clear_has_need_nms();
}
inline bool NMSParameter::need_nms() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.need_nms)
  return need_nms_;
}
inline void NMSParameter::set_need_nms(bool value) {
  set_has_need_nms();
  need_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.need_nms)
}

// optional float overlap_ratio = 2 [default = 0.5];
inline bool NMSParameter::has_overlap_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NMSParameter::set_has_overlap_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NMSParameter::clear_has_overlap_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NMSParameter::clear_overlap_ratio() {
  overlap_ratio_ = 0.5f;
  clear_has_overlap_ratio();
}
inline float NMSParameter::overlap_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.overlap_ratio)
  return overlap_ratio_;
}
inline void NMSParameter::set_overlap_ratio(float value) {
  set_has_overlap_ratio();
  overlap_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.overlap_ratio)
}

// optional uint32 top_n = 3 [default = 100];
inline bool NMSParameter::has_top_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NMSParameter::set_has_top_n() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NMSParameter::clear_has_top_n() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NMSParameter::clear_top_n() {
  top_n_ = 100u;
  clear_has_top_n();
}
inline ::google::protobuf::uint32 NMSParameter::top_n() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.top_n)
  return top_n_;
}
inline void NMSParameter::set_top_n(::google::protobuf::uint32 value) {
  set_has_top_n();
  top_n_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.top_n)
}

// optional bool add_score = 4 [default = false];
inline bool NMSParameter::has_add_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NMSParameter::set_has_add_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NMSParameter::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NMSParameter::clear_add_score() {
  add_score_ = false;
  clear_has_add_score();
}
inline bool NMSParameter::add_score() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.add_score)
  return add_score_;
}
inline void NMSParameter::set_add_score(bool value) {
  set_has_add_score();
  add_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.add_score)
}

// -------------------------------------------------------------------

// DetectionOutputParameter

// optional .caffe.NMSParameter nms_param = 1;
inline bool DetectionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NMSParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NMSParameter& DetectionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::caffe::NMSParameter::internal_default_instance();
}
inline ::caffe::NMSParameter* DetectionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NMSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NMSParameter* DetectionOutputParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NMSParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void DetectionOutputParameter::set_allocated_nms_param(::caffe::NMSParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputParameter.nms_param)
}

// optional float threshold = 2 [default = 0.5];
inline bool DetectionOutputParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionOutputParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionOutputParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionOutputParameter::clear_threshold() {
  threshold_ = 0.5f;
  clear_has_threshold();
}
inline float DetectionOutputParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.threshold)
  return threshold_;
}
inline void DetectionOutputParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.threshold)
}

// optional uint32 channel_per_scale = 3 [default = 5];
inline bool DetectionOutputParameter::has_channel_per_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionOutputParameter::set_has_channel_per_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionOutputParameter::clear_has_channel_per_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionOutputParameter::clear_channel_per_scale() {
  channel_per_scale_ = 5u;
  clear_has_channel_per_scale();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::channel_per_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.channel_per_scale)
  return channel_per_scale_;
}
inline void DetectionOutputParameter::set_channel_per_scale(::google::protobuf::uint32 value) {
  set_has_channel_per_scale();
  channel_per_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.channel_per_scale)
}

// repeated string class_name_list = 4;
inline int DetectionOutputParameter::class_name_list_size() const {
  return class_name_list_.size();
}
inline void DetectionOutputParameter::clear_class_name_list() {
  class_name_list_.Clear();
}
inline const ::std::string& DetectionOutputParameter::class_name_list(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_.Get(index);
}
inline ::std::string* DetectionOutputParameter::mutable_class_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_.Mutable(index);
}
inline void DetectionOutputParameter::set_class_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.class_name_list)
  class_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DetectionOutputParameter::set_class_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.class_name_list)
  class_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DetectionOutputParameter::set_class_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.DetectionOutputParameter.class_name_list)
}
inline void DetectionOutputParameter::set_class_name_list(int index, const char* value, size_t size) {
  class_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionOutputParameter.class_name_list)
}
inline ::std::string* DetectionOutputParameter::add_class_name_list() {
  // @@protoc_insertion_point(field_add_mutable:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_.Add();
}
inline void DetectionOutputParameter::add_class_name_list(const ::std::string& value) {
  class_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.class_name_list)
}
#if LANG_CXX11
inline void DetectionOutputParameter::add_class_name_list(::std::string&& value) {
  class_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.class_name_list)
}
#endif
inline void DetectionOutputParameter::add_class_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.DetectionOutputParameter.class_name_list)
}
inline void DetectionOutputParameter::add_class_name_list(const char* value, size_t size) {
  class_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.DetectionOutputParameter.class_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DetectionOutputParameter::class_name_list() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DetectionOutputParameter::mutable_class_name_list() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.class_name_list)
  return &class_name_list_;
}

// optional uint32 num_class = 5 [default = 1];
inline bool DetectionOutputParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionOutputParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionOutputParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionOutputParameter::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.num_class)
  return num_class_;
}
inline void DetectionOutputParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.num_class)
}

// optional bool refine_out_of_map_bbox = 6 [default = true];
inline bool DetectionOutputParameter::has_refine_out_of_map_bbox() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionOutputParameter::set_has_refine_out_of_map_bbox() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionOutputParameter::clear_has_refine_out_of_map_bbox() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionOutputParameter::clear_refine_out_of_map_bbox() {
  refine_out_of_map_bbox_ = true;
  clear_has_refine_out_of_map_bbox();
}
inline bool DetectionOutputParameter::refine_out_of_map_bbox() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.refine_out_of_map_bbox)
  return refine_out_of_map_bbox_;
}
inline void DetectionOutputParameter::set_refine_out_of_map_bbox(bool value) {
  set_has_refine_out_of_map_bbox();
  refine_out_of_map_bbox_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.refine_out_of_map_bbox)
}

// optional bool all_pos = 7 [default = false];
inline bool DetectionOutputParameter::has_all_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionOutputParameter::set_has_all_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionOutputParameter::clear_has_all_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionOutputParameter::clear_all_pos() {
  all_pos_ = false;
  clear_has_all_pos();
}
inline bool DetectionOutputParameter::all_pos() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.all_pos)
  return all_pos_;
}
inline void DetectionOutputParameter::set_all_pos(bool value) {
  set_has_all_pos();
  all_pos_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.all_pos)
}

// optional uint32 step = 9 [default = 1];
inline bool DetectionOutputParameter::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionOutputParameter::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionOutputParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionOutputParameter::clear_step() {
  step_ = 1u;
  clear_has_step();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::step() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.step)
  return step_;
}
inline void DetectionOutputParameter::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.step)
}

// repeated float mean_w = 10;
inline int DetectionOutputParameter::mean_w_size() const {
  return mean_w_.size();
}
inline void DetectionOutputParameter::clear_mean_w() {
  mean_w_.Clear();
}
inline float DetectionOutputParameter::mean_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.mean_w)
  return mean_w_.Get(index);
}
inline void DetectionOutputParameter::set_mean_w(int index, float value) {
  mean_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.mean_w)
}
inline void DetectionOutputParameter::add_mean_w(float value) {
  mean_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.mean_w)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::mean_w() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.mean_w)
  return mean_w_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_mean_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.mean_w)
  return &mean_w_;
}

// repeated float mean_h = 11;
inline int DetectionOutputParameter::mean_h_size() const {
  return mean_h_.size();
}
inline void DetectionOutputParameter::clear_mean_h() {
  mean_h_.Clear();
}
inline float DetectionOutputParameter::mean_h(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.mean_h)
  return mean_h_.Get(index);
}
inline void DetectionOutputParameter::set_mean_h(int index, float value) {
  mean_h_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.mean_h)
}
inline void DetectionOutputParameter::add_mean_h(float value) {
  mean_h_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.mean_h)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::mean_h() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.mean_h)
  return mean_h_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_mean_h() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.mean_h)
  return &mean_h_;
}

// repeated float mean_l = 12;
inline int DetectionOutputParameter::mean_l_size() const {
  return mean_l_.size();
}
inline void DetectionOutputParameter::clear_mean_l() {
  mean_l_.Clear();
}
inline float DetectionOutputParameter::mean_l(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.mean_l)
  return mean_l_.Get(index);
}
inline void DetectionOutputParameter::set_mean_l(int index, float value) {
  mean_l_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.mean_l)
}
inline void DetectionOutputParameter::add_mean_l(float value) {
  mean_l_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.mean_l)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::mean_l() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.mean_l)
  return mean_l_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_mean_l() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.mean_l)
  return &mean_l_;
}

// repeated uint32 class_inds = 13;
inline int DetectionOutputParameter::class_inds_size() const {
  return class_inds_.size();
}
inline void DetectionOutputParameter::clear_class_inds() {
  class_inds_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::class_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.class_inds)
  return class_inds_.Get(index);
}
inline void DetectionOutputParameter::set_class_inds(int index, ::google::protobuf::uint32 value) {
  class_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.class_inds)
}
inline void DetectionOutputParameter::add_class_inds(::google::protobuf::uint32 value) {
  class_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.class_inds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::class_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.class_inds)
  return class_inds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_class_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.class_inds)
  return &class_inds_;
}

// repeated uint32 dim_inds = 14;
inline int DetectionOutputParameter::dim_inds_size() const {
  return dim_inds_.size();
}
inline void DetectionOutputParameter::clear_dim_inds() {
  dim_inds_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::dim_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.dim_inds)
  return dim_inds_.Get(index);
}
inline void DetectionOutputParameter::set_dim_inds(int index, ::google::protobuf::uint32 value) {
  dim_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.dim_inds)
}
inline void DetectionOutputParameter::add_dim_inds(::google::protobuf::uint32 value) {
  dim_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.dim_inds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::dim_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.dim_inds)
  return dim_inds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_dim_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.dim_inds)
  return &dim_inds_;
}

// repeated uint32 pars_inds = 15;
inline int DetectionOutputParameter::pars_inds_size() const {
  return pars_inds_.size();
}
inline void DetectionOutputParameter::clear_pars_inds() {
  pars_inds_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::pars_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.pars_inds)
  return pars_inds_.Get(index);
}
inline void DetectionOutputParameter::set_pars_inds(int index, ::google::protobuf::uint32 value) {
  pars_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.pars_inds)
}
inline void DetectionOutputParameter::add_pars_inds(::google::protobuf::uint32 value) {
  pars_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.pars_inds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::pars_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.pars_inds)
  return pars_inds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_pars_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.pars_inds)
  return &pars_inds_;
}

// repeated uint32 angle_inds = 16;
inline int DetectionOutputParameter::angle_inds_size() const {
  return angle_inds_.size();
}
inline void DetectionOutputParameter::clear_angle_inds() {
  angle_inds_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::angle_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.angle_inds)
  return angle_inds_.Get(index);
}
inline void DetectionOutputParameter::set_angle_inds(int index, ::google::protobuf::uint32 value) {
  angle_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.angle_inds)
}
inline void DetectionOutputParameter::add_angle_inds(::google::protobuf::uint32 value) {
  angle_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.angle_inds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::angle_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.angle_inds)
  return angle_inds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_angle_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.angle_inds)
  return &angle_inds_;
}

// repeated uint32 pts8_inds = 17;
inline int DetectionOutputParameter::pts8_inds_size() const {
  return pts8_inds_.size();
}
inline void DetectionOutputParameter::clear_pts8_inds() {
  pts8_inds_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::pts8_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.pts8_inds)
  return pts8_inds_.Get(index);
}
inline void DetectionOutputParameter::set_pts8_inds(int index, ::google::protobuf::uint32 value) {
  pts8_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.pts8_inds)
}
inline void DetectionOutputParameter::add_pts8_inds(::google::protobuf::uint32 value) {
  pts8_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.pts8_inds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::pts8_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.pts8_inds)
  return pts8_inds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_pts8_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.pts8_inds)
  return &pts8_inds_;
}

// repeated uint32 box2d_inds = 18;
inline int DetectionOutputParameter::box2d_inds_size() const {
  return box2d_inds_.size();
}
inline void DetectionOutputParameter::clear_box2d_inds() {
  box2d_inds_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::box2d_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.box2d_inds)
  return box2d_inds_.Get(index);
}
inline void DetectionOutputParameter::set_box2d_inds(int index, ::google::protobuf::uint32 value) {
  box2d_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.box2d_inds)
}
inline void DetectionOutputParameter::add_box2d_inds(::google::protobuf::uint32 value) {
  box2d_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.box2d_inds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::box2d_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.box2d_inds)
  return box2d_inds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_box2d_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.box2d_inds)
  return &box2d_inds_;
}

// optional bool group_veh = 19 [default = false];
inline bool DetectionOutputParameter::has_group_veh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionOutputParameter::set_has_group_veh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionOutputParameter::clear_has_group_veh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionOutputParameter::clear_group_veh() {
  group_veh_ = false;
  clear_has_group_veh();
}
inline bool DetectionOutputParameter::group_veh() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.group_veh)
  return group_veh_;
}
inline void DetectionOutputParameter::set_group_veh(bool value) {
  set_has_group_veh();
  group_veh_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.group_veh)
}

// repeated float new_class_thr = 20;
inline int DetectionOutputParameter::new_class_thr_size() const {
  return new_class_thr_.size();
}
inline void DetectionOutputParameter::clear_new_class_thr() {
  new_class_thr_.Clear();
}
inline float DetectionOutputParameter::new_class_thr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.new_class_thr)
  return new_class_thr_.Get(index);
}
inline void DetectionOutputParameter::set_new_class_thr(int index, float value) {
  new_class_thr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.new_class_thr)
}
inline void DetectionOutputParameter::add_new_class_thr(float value) {
  new_class_thr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.new_class_thr)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::new_class_thr() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.new_class_thr)
  return new_class_thr_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_new_class_thr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.new_class_thr)
  return &new_class_thr_;
}

// repeated float new_class_overlap_ratio = 21;
inline int DetectionOutputParameter::new_class_overlap_ratio_size() const {
  return new_class_overlap_ratio_.size();
}
inline void DetectionOutputParameter::clear_new_class_overlap_ratio() {
  new_class_overlap_ratio_.Clear();
}
inline float DetectionOutputParameter::new_class_overlap_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.new_class_overlap_ratio)
  return new_class_overlap_ratio_.Get(index);
}
inline void DetectionOutputParameter::set_new_class_overlap_ratio(int index, float value) {
  new_class_overlap_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.new_class_overlap_ratio)
}
inline void DetectionOutputParameter::add_new_class_overlap_ratio(float value) {
  new_class_overlap_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.new_class_overlap_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::new_class_overlap_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.new_class_overlap_ratio)
  return new_class_overlap_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_new_class_overlap_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.new_class_overlap_ratio)
  return &new_class_overlap_ratio_;
}

// optional uint32 shallow_track_step = 22 [default = 0];
inline bool DetectionOutputParameter::has_shallow_track_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionOutputParameter::set_has_shallow_track_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionOutputParameter::clear_has_shallow_track_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionOutputParameter::clear_shallow_track_step() {
  shallow_track_step_ = 0u;
  clear_has_shallow_track_step();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::shallow_track_step() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.shallow_track_step)
  return shallow_track_step_;
}
inline void DetectionOutputParameter::set_shallow_track_step(::google::protobuf::uint32 value) {
  set_has_shallow_track_step();
  shallow_track_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.shallow_track_step)
}

// -------------------------------------------------------------------

// ROIDataParam

// optional float pos_iou_ratio = 1 [default = 0.7];
inline bool ROIDataParam::has_pos_iou_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIDataParam::set_has_pos_iou_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIDataParam::clear_has_pos_iou_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIDataParam::clear_pos_iou_ratio() {
  pos_iou_ratio_ = 0.7f;
  clear_has_pos_iou_ratio();
}
inline float ROIDataParam::pos_iou_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.pos_iou_ratio)
  return pos_iou_ratio_;
}
inline void ROIDataParam::set_pos_iou_ratio(float value) {
  set_has_pos_iou_ratio();
  pos_iou_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.pos_iou_ratio)
}

// optional float neg_iou_ratio = 2 [default = 0.5];
inline bool ROIDataParam::has_neg_iou_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIDataParam::set_has_neg_iou_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIDataParam::clear_has_neg_iou_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIDataParam::clear_neg_iou_ratio() {
  neg_iou_ratio_ = 0.5f;
  clear_has_neg_iou_ratio();
}
inline float ROIDataParam::neg_iou_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.neg_iou_ratio)
  return neg_iou_ratio_;
}
inline void ROIDataParam::set_neg_iou_ratio(float value) {
  set_has_neg_iou_ratio();
  neg_iou_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.neg_iou_ratio)
}

// optional uint32 num_class = 3 [default = 1];
inline bool ROIDataParam::has_num_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIDataParam::set_has_num_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIDataParam::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIDataParam::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 ROIDataParam::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.num_class)
  return num_class_;
}
inline void ROIDataParam::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.num_class)
}

// optional bool need_balance = 4 [default = false];
inline bool ROIDataParam::has_need_balance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIDataParam::set_has_need_balance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIDataParam::clear_has_need_balance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIDataParam::clear_need_balance() {
  need_balance_ = false;
  clear_has_need_balance();
}
inline bool ROIDataParam::need_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.need_balance)
  return need_balance_;
}
inline void ROIDataParam::set_need_balance(bool value) {
  set_has_need_balance();
  need_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.need_balance)
}

// optional float neg_ratio = 5 [default = 0.75];
inline bool ROIDataParam::has_neg_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ROIDataParam::set_has_neg_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ROIDataParam::clear_has_neg_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ROIDataParam::clear_neg_ratio() {
  neg_ratio_ = 0.75f;
  clear_has_neg_ratio();
}
inline float ROIDataParam::neg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.neg_ratio)
  return neg_ratio_;
}
inline void ROIDataParam::set_neg_ratio(float value) {
  set_has_neg_ratio();
  neg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.neg_ratio)
}

// optional float hard_ratio = 6 [default = 1];
inline bool ROIDataParam::has_hard_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ROIDataParam::set_has_hard_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ROIDataParam::clear_has_hard_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ROIDataParam::clear_hard_ratio() {
  hard_ratio_ = 1;
  clear_has_hard_ratio();
}
inline float ROIDataParam::hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.hard_ratio)
  return hard_ratio_;
}
inline void ROIDataParam::set_hard_ratio(float value) {
  set_has_hard_ratio();
  hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.hard_ratio)
}

// optional float hard_threshold = 7 [default = 0.1];
inline bool ROIDataParam::has_hard_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ROIDataParam::set_has_hard_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ROIDataParam::clear_has_hard_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ROIDataParam::clear_hard_threshold() {
  hard_threshold_ = 0.1f;
  clear_has_hard_threshold();
}
inline float ROIDataParam::hard_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.hard_threshold)
  return hard_threshold_;
}
inline void ROIDataParam::set_hard_threshold(float value) {
  set_has_hard_threshold();
  hard_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.hard_threshold)
}

// -------------------------------------------------------------------

// ROI2HeatMapParam

// optional uint32 num_class = 1 [default = 1];
inline bool ROI2HeatMapParam::has_num_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROI2HeatMapParam::set_has_num_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROI2HeatMapParam::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROI2HeatMapParam::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 ROI2HeatMapParam::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.num_class)
  return num_class_;
}
inline void ROI2HeatMapParam::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.num_class)
}

// optional uint32 map_w = 2;
inline bool ROI2HeatMapParam::has_map_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROI2HeatMapParam::set_has_map_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROI2HeatMapParam::clear_has_map_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROI2HeatMapParam::clear_map_w() {
  map_w_ = 0u;
  clear_has_map_w();
}
inline ::google::protobuf::uint32 ROI2HeatMapParam::map_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.map_w)
  return map_w_;
}
inline void ROI2HeatMapParam::set_map_w(::google::protobuf::uint32 value) {
  set_has_map_w();
  map_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.map_w)
}

// optional uint32 map_h = 3;
inline bool ROI2HeatMapParam::has_map_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROI2HeatMapParam::set_has_map_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROI2HeatMapParam::clear_has_map_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROI2HeatMapParam::clear_map_h() {
  map_h_ = 0u;
  clear_has_map_h();
}
inline ::google::protobuf::uint32 ROI2HeatMapParam::map_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.map_h)
  return map_h_;
}
inline void ROI2HeatMapParam::set_map_h(::google::protobuf::uint32 value) {
  set_has_map_h();
  map_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.map_h)
}

// optional uint32 map_num = 4;
inline bool ROI2HeatMapParam::has_map_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROI2HeatMapParam::set_has_map_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROI2HeatMapParam::clear_has_map_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROI2HeatMapParam::clear_map_num() {
  map_num_ = 0u;
  clear_has_map_num();
}
inline ::google::protobuf::uint32 ROI2HeatMapParam::map_num() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.map_num)
  return map_num_;
}
inline void ROI2HeatMapParam::set_map_num(::google::protobuf::uint32 value) {
  set_has_map_num();
  map_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.map_num)
}

// optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
inline bool ROI2HeatMapParam::has_label_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ROI2HeatMapParam::set_has_label_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ROI2HeatMapParam::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ROI2HeatMapParam::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
inline ::caffe::ROI2HeatMapParam_LabelType ROI2HeatMapParam::label_type() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.label_type)
  return static_cast< ::caffe::ROI2HeatMapParam_LabelType >(label_type_);
}
inline void ROI2HeatMapParam::set_label_type(::caffe::ROI2HeatMapParam_LabelType value) {
  assert(::caffe::ROI2HeatMapParam_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.label_type)
}

// -------------------------------------------------------------------

// ROIRefineParam

// optional uint32 num_class = 1 [default = 1];
inline bool ROIRefineParam::has_num_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIRefineParam::set_has_num_class() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIRefineParam::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIRefineParam::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 ROIRefineParam::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ROIRefineParam.num_class)
  return num_class_;
}
inline void ROIRefineParam::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIRefineParam.num_class)
}

// optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
inline bool ROIRefineParam::has_label_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIRefineParam::set_has_label_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIRefineParam::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIRefineParam::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
inline ::caffe::ROIRefineParam_LabelType ROIRefineParam::label_type() const {
  // @@protoc_insertion_point(field_get:caffe.ROIRefineParam.label_type)
  return static_cast< ::caffe::ROIRefineParam_LabelType >(label_type_);
}
inline void ROIRefineParam::set_label_type(::caffe::ROIRefineParam_LabelType value) {
  assert(::caffe::ROIRefineParam_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIRefineParam.label_type)
}

// -------------------------------------------------------------------

// ROIShowParam

// optional bool is_input_heatmap = 1 [default = false];
inline bool ROIShowParam::has_is_input_heatmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIShowParam::set_has_is_input_heatmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIShowParam::clear_has_is_input_heatmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIShowParam::clear_is_input_heatmap() {
  is_input_heatmap_ = false;
  clear_has_is_input_heatmap();
}
inline bool ROIShowParam::is_input_heatmap() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.is_input_heatmap)
  return is_input_heatmap_;
}
inline void ROIShowParam::set_is_input_heatmap(bool value) {
  set_has_is_input_heatmap();
  is_input_heatmap_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.is_input_heatmap)
}

// optional float heatmap_threshold = 2 [default = 0];
inline bool ROIShowParam::has_heatmap_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIShowParam::set_has_heatmap_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIShowParam::clear_has_heatmap_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIShowParam::clear_heatmap_threshold() {
  heatmap_threshold_ = 0;
  clear_has_heatmap_threshold();
}
inline float ROIShowParam::heatmap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.heatmap_threshold)
  return heatmap_threshold_;
}
inline void ROIShowParam::set_heatmap_threshold(float value) {
  set_has_heatmap_threshold();
  heatmap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.heatmap_threshold)
}

// optional uint32 heat_map_a = 5;
inline bool ROIShowParam::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIShowParam::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIShowParam::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIShowParam::clear_heat_map_a() {
  heat_map_a_ = 0u;
  clear_has_heat_map_a();
}
inline ::google::protobuf::uint32 ROIShowParam::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.heat_map_a)
  return heat_map_a_;
}
inline void ROIShowParam::set_heat_map_a(::google::protobuf::uint32 value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.heat_map_a)
}

// optional uint32 heat_map_b = 6;
inline bool ROIShowParam::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIShowParam::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIShowParam::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIShowParam::clear_heat_map_b() {
  heat_map_b_ = 0u;
  clear_has_heat_map_b();
}
inline ::google::protobuf::uint32 ROIShowParam::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.heat_map_b)
  return heat_map_b_;
}
inline void ROIShowParam::set_heat_map_b(::google::protobuf::uint32 value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.heat_map_b)
}

// optional float mean_r = 7 [default = 0];
inline bool ROIShowParam::has_mean_r() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ROIShowParam::set_has_mean_r() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ROIShowParam::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ROIShowParam::clear_mean_r() {
  mean_r_ = 0;
  clear_has_mean_r();
}
inline float ROIShowParam::mean_r() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.mean_r)
  return mean_r_;
}
inline void ROIShowParam::set_mean_r(float value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.mean_r)
}

// optional float mean_g = 8 [default = 0];
inline bool ROIShowParam::has_mean_g() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ROIShowParam::set_has_mean_g() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ROIShowParam::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ROIShowParam::clear_mean_g() {
  mean_g_ = 0;
  clear_has_mean_g();
}
inline float ROIShowParam::mean_g() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.mean_g)
  return mean_g_;
}
inline void ROIShowParam::set_mean_g(float value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.mean_g)
}

// optional float mean_b = 9 [default = 0];
inline bool ROIShowParam::has_mean_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ROIShowParam::set_has_mean_b() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ROIShowParam::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ROIShowParam::clear_mean_b() {
  mean_b_ = 0;
  clear_has_mean_b();
}
inline float ROIShowParam::mean_b() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.mean_b)
  return mean_b_;
}
inline void ROIShowParam::set_mean_b(float value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.mean_b)
}

// -------------------------------------------------------------------

// PreviousStageParameter

// optional string net_prototxt = 1;
inline bool PreviousStageParameter::has_net_prototxt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreviousStageParameter::set_has_net_prototxt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreviousStageParameter::clear_has_net_prototxt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreviousStageParameter::clear_net_prototxt() {
  net_prototxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_prototxt();
}
inline const ::std::string& PreviousStageParameter::net_prototxt() const {
  // @@protoc_insertion_point(field_get:caffe.PreviousStageParameter.net_prototxt)
  return net_prototxt_.GetNoArena();
}
inline void PreviousStageParameter::set_net_prototxt(const ::std::string& value) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PreviousStageParameter.net_prototxt)
}
#if LANG_CXX11
inline void PreviousStageParameter::set_net_prototxt(::std::string&& value) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PreviousStageParameter.net_prototxt)
}
#endif
inline void PreviousStageParameter::set_net_prototxt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PreviousStageParameter.net_prototxt)
}
inline void PreviousStageParameter::set_net_prototxt(const char* value, size_t size) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PreviousStageParameter.net_prototxt)
}
inline ::std::string* PreviousStageParameter::mutable_net_prototxt() {
  set_has_net_prototxt();
  // @@protoc_insertion_point(field_mutable:caffe.PreviousStageParameter.net_prototxt)
  return net_prototxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PreviousStageParameter::release_net_prototxt() {
  // @@protoc_insertion_point(field_release:caffe.PreviousStageParameter.net_prototxt)
  clear_has_net_prototxt();
  return net_prototxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PreviousStageParameter::set_allocated_net_prototxt(::std::string* net_prototxt) {
  if (net_prototxt != NULL) {
    set_has_net_prototxt();
  } else {
    clear_has_net_prototxt();
  }
  net_prototxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_prototxt);
  // @@protoc_insertion_point(field_set_allocated:caffe.PreviousStageParameter.net_prototxt)
}

// optional string net_param_file = 2;
inline bool PreviousStageParameter::has_net_param_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PreviousStageParameter::set_has_net_param_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PreviousStageParameter::clear_has_net_param_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PreviousStageParameter::clear_net_param_file() {
  net_param_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_param_file();
}
inline const ::std::string& PreviousStageParameter::net_param_file() const {
  // @@protoc_insertion_point(field_get:caffe.PreviousStageParameter.net_param_file)
  return net_param_file_.GetNoArena();
}
inline void PreviousStageParameter::set_net_param_file(const ::std::string& value) {
  set_has_net_param_file();
  net_param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PreviousStageParameter.net_param_file)
}
#if LANG_CXX11
inline void PreviousStageParameter::set_net_param_file(::std::string&& value) {
  set_has_net_param_file();
  net_param_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PreviousStageParameter.net_param_file)
}
#endif
inline void PreviousStageParameter::set_net_param_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net_param_file();
  net_param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PreviousStageParameter.net_param_file)
}
inline void PreviousStageParameter::set_net_param_file(const char* value, size_t size) {
  set_has_net_param_file();
  net_param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PreviousStageParameter.net_param_file)
}
inline ::std::string* PreviousStageParameter::mutable_net_param_file() {
  set_has_net_param_file();
  // @@protoc_insertion_point(field_mutable:caffe.PreviousStageParameter.net_param_file)
  return net_param_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PreviousStageParameter::release_net_param_file() {
  // @@protoc_insertion_point(field_release:caffe.PreviousStageParameter.net_param_file)
  clear_has_net_param_file();
  return net_param_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PreviousStageParameter::set_allocated_net_param_file(::std::string* net_param_file) {
  if (net_param_file != NULL) {
    set_has_net_param_file();
  } else {
    clear_has_net_param_file();
  }
  net_param_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_param_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PreviousStageParameter.net_param_file)
}

// -------------------------------------------------------------------

// CropParameter

// optional .caffe.CropParameter.Type type = 1 [default = CENTER];
inline bool CropParameter::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CropParameter::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CropParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CropParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::caffe::CropParameter_Type CropParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.type)
  return static_cast< ::caffe::CropParameter_Type >(type_);
}
inline void CropParameter::set_type(::caffe::CropParameter_Type value) {
  assert(::caffe::CropParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.type)
}

// optional uint32 crop_w = 2 [default = 0];
inline bool CropParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 CropParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.crop_w)
  return crop_w_;
}
inline void CropParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.crop_w)
}

// optional uint32 crop_h = 3 [default = 0];
inline bool CropParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CropParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CropParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CropParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 CropParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.crop_h)
  return crop_h_;
}
inline void CropParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.crop_h)
}

// optional bool print_info = 4 [default = false];
inline bool CropParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CropParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CropParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CropParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
inline bool CropParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.print_info)
  return print_info_;
}
inline void CropParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.print_info)
}

// -------------------------------------------------------------------

// ResampleParameter

// optional bool antialias = 4 [default = true];
inline bool ResampleParameter::has_antialias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResampleParameter::set_has_antialias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResampleParameter::clear_has_antialias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResampleParameter::clear_antialias() {
  antialias_ = true;
  clear_has_antialias();
}
inline bool ResampleParameter::antialias() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.antialias)
  return antialias_;
}
inline void ResampleParameter::set_antialias(bool value) {
  set_has_antialias();
  antialias_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.antialias)
}

// optional uint32 width = 1;
inline bool ResampleParameter::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResampleParameter::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResampleParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResampleParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ResampleParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.width)
  return width_;
}
inline void ResampleParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.width)
}

// optional uint32 height = 2;
inline bool ResampleParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResampleParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResampleParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResampleParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ResampleParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.height)
  return height_;
}
inline void ResampleParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.height)
}

// optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
inline bool ResampleParameter::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResampleParameter::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResampleParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResampleParameter::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::caffe::ResampleParameter_ResampleType ResampleParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.type)
  return static_cast< ::caffe::ResampleParameter_ResampleType >(type_);
}
inline void ResampleParameter::set_type(::caffe::ResampleParameter_ResampleType value) {
  assert(::caffe::ResampleParameter_ResampleType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.type)
}

// -------------------------------------------------------------------

// GenerateAnchorParameter

// optional float base_size = 1 [default = 16];
inline bool GenerateAnchorParameter::has_base_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenerateAnchorParameter::set_has_base_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenerateAnchorParameter::clear_has_base_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenerateAnchorParameter::clear_base_size() {
  base_size_ = 16;
  clear_has_base_size();
}
inline float GenerateAnchorParameter::base_size() const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.base_size)
  return base_size_;
}
inline void GenerateAnchorParameter::set_base_size(float value) {
  set_has_base_size();
  base_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.base_size)
}

// repeated float ratios = 2;
inline int GenerateAnchorParameter::ratios_size() const {
  return ratios_.size();
}
inline void GenerateAnchorParameter::clear_ratios() {
  ratios_.Clear();
}
inline float GenerateAnchorParameter::ratios(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.ratios)
  return ratios_.Get(index);
}
inline void GenerateAnchorParameter::set_ratios(int index, float value) {
  ratios_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.ratios)
}
inline void GenerateAnchorParameter::add_ratios(float value) {
  ratios_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.ratios)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::ratios() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.ratios)
  return ratios_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_ratios() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.ratios)
  return &ratios_;
}

// repeated float scales = 3;
inline int GenerateAnchorParameter::scales_size() const {
  return scales_.size();
}
inline void GenerateAnchorParameter::clear_scales() {
  scales_.Clear();
}
inline float GenerateAnchorParameter::scales(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.scales)
  return scales_.Get(index);
}
inline void GenerateAnchorParameter::set_scales(int index, float value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.scales)
}
inline void GenerateAnchorParameter::add_scales(float value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.scales)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::scales() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.scales)
  return scales_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.scales)
  return &scales_;
}

// repeated float anchor_width = 4;
inline int GenerateAnchorParameter::anchor_width_size() const {
  return anchor_width_.size();
}
inline void GenerateAnchorParameter::clear_anchor_width() {
  anchor_width_.Clear();
}
inline float GenerateAnchorParameter::anchor_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_width)
  return anchor_width_.Get(index);
}
inline void GenerateAnchorParameter::set_anchor_width(int index, float value) {
  anchor_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_width)
}
inline void GenerateAnchorParameter::add_anchor_width(float value) {
  anchor_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_width)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_width() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_width)
  return anchor_width_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_width)
  return &anchor_width_;
}

// repeated float anchor_height = 5;
inline int GenerateAnchorParameter::anchor_height_size() const {
  return anchor_height_.size();
}
inline void GenerateAnchorParameter::clear_anchor_height() {
  anchor_height_.Clear();
}
inline float GenerateAnchorParameter::anchor_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_height)
  return anchor_height_.Get(index);
}
inline void GenerateAnchorParameter::set_anchor_height(int index, float value) {
  anchor_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_height)
}
inline void GenerateAnchorParameter::add_anchor_height(float value) {
  anchor_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_height)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_height() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_height)
  return anchor_height_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_height)
  return &anchor_height_;
}

// repeated float anchor_x1 = 6;
inline int GenerateAnchorParameter::anchor_x1_size() const {
  return anchor_x1_.size();
}
inline void GenerateAnchorParameter::clear_anchor_x1() {
  anchor_x1_.Clear();
}
inline float GenerateAnchorParameter::anchor_x1(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_x1)
  return anchor_x1_.Get(index);
}
inline void GenerateAnchorParameter::set_anchor_x1(int index, float value) {
  anchor_x1_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_x1)
}
inline void GenerateAnchorParameter::add_anchor_x1(float value) {
  anchor_x1_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_x1)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_x1() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_x1)
  return anchor_x1_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_x1() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_x1)
  return &anchor_x1_;
}

// repeated float anchor_y1 = 7;
inline int GenerateAnchorParameter::anchor_y1_size() const {
  return anchor_y1_.size();
}
inline void GenerateAnchorParameter::clear_anchor_y1() {
  anchor_y1_.Clear();
}
inline float GenerateAnchorParameter::anchor_y1(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_y1)
  return anchor_y1_.Get(index);
}
inline void GenerateAnchorParameter::set_anchor_y1(int index, float value) {
  anchor_y1_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_y1)
}
inline void GenerateAnchorParameter::add_anchor_y1(float value) {
  anchor_y1_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_y1)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_y1() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_y1)
  return anchor_y1_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_y1() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_y1)
  return &anchor_y1_;
}

// repeated float anchor_x2 = 8;
inline int GenerateAnchorParameter::anchor_x2_size() const {
  return anchor_x2_.size();
}
inline void GenerateAnchorParameter::clear_anchor_x2() {
  anchor_x2_.Clear();
}
inline float GenerateAnchorParameter::anchor_x2(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_x2)
  return anchor_x2_.Get(index);
}
inline void GenerateAnchorParameter::set_anchor_x2(int index, float value) {
  anchor_x2_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_x2)
}
inline void GenerateAnchorParameter::add_anchor_x2(float value) {
  anchor_x2_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_x2)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_x2() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_x2)
  return anchor_x2_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_x2() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_x2)
  return &anchor_x2_;
}

// repeated float anchor_y2 = 9;
inline int GenerateAnchorParameter::anchor_y2_size() const {
  return anchor_y2_.size();
}
inline void GenerateAnchorParameter::clear_anchor_y2() {
  anchor_y2_.Clear();
}
inline float GenerateAnchorParameter::anchor_y2(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_y2)
  return anchor_y2_.Get(index);
}
inline void GenerateAnchorParameter::set_anchor_y2(int index, float value) {
  anchor_y2_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_y2)
}
inline void GenerateAnchorParameter::add_anchor_y2(float value) {
  anchor_y2_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_y2)
}
inline const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_y2() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_y2)
  return anchor_y2_;
}
inline ::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_y2() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_y2)
  return &anchor_y2_;
}

// optional bool zero_anchor_center = 10 [default = true];
inline bool GenerateAnchorParameter::has_zero_anchor_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenerateAnchorParameter::set_has_zero_anchor_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenerateAnchorParameter::clear_has_zero_anchor_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenerateAnchorParameter::clear_zero_anchor_center() {
  zero_anchor_center_ = true;
  clear_has_zero_anchor_center();
}
inline bool GenerateAnchorParameter::zero_anchor_center() const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.zero_anchor_center)
  return zero_anchor_center_;
}
inline void GenerateAnchorParameter::set_zero_anchor_center(bool value) {
  set_has_zero_anchor_center();
  zero_anchor_center_ = value;
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.zero_anchor_center)
}

// -------------------------------------------------------------------

// NMSSSDParameter

// optional bool need_nms = 1 [default = true];
inline bool NMSSSDParameter::has_need_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NMSSSDParameter::set_has_need_nms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NMSSSDParameter::clear_has_need_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NMSSSDParameter::clear_need_nms() {
  need_nms_ = true;
  clear_has_need_nms();
}
inline bool NMSSSDParameter::need_nms() const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.need_nms)
  return need_nms_;
}
inline void NMSSSDParameter::set_need_nms(bool value) {
  set_has_need_nms();
  need_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.need_nms)
}

// repeated float overlap_ratio = 2;
inline int NMSSSDParameter::overlap_ratio_size() const {
  return overlap_ratio_.size();
}
inline void NMSSSDParameter::clear_overlap_ratio() {
  overlap_ratio_.Clear();
}
inline float NMSSSDParameter::overlap_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.overlap_ratio)
  return overlap_ratio_.Get(index);
}
inline void NMSSSDParameter::set_overlap_ratio(int index, float value) {
  overlap_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.overlap_ratio)
}
inline void NMSSSDParameter::add_overlap_ratio(float value) {
  overlap_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.overlap_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
NMSSSDParameter::overlap_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.overlap_ratio)
  return overlap_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
NMSSSDParameter::mutable_overlap_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.overlap_ratio)
  return &overlap_ratio_;
}

// repeated uint32 top_n = 3;
inline int NMSSSDParameter::top_n_size() const {
  return top_n_.size();
}
inline void NMSSSDParameter::clear_top_n() {
  top_n_.Clear();
}
inline ::google::protobuf::uint32 NMSSSDParameter::top_n(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.top_n)
  return top_n_.Get(index);
}
inline void NMSSSDParameter::set_top_n(int index, ::google::protobuf::uint32 value) {
  top_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.top_n)
}
inline void NMSSSDParameter::add_top_n(::google::protobuf::uint32 value) {
  top_n_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.top_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NMSSSDParameter::top_n() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.top_n)
  return top_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NMSSSDParameter::mutable_top_n() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.top_n)
  return &top_n_;
}

// optional bool add_score = 4 [default = false];
inline bool NMSSSDParameter::has_add_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NMSSSDParameter::set_has_add_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NMSSSDParameter::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NMSSSDParameter::clear_add_score() {
  add_score_ = false;
  clear_has_add_score();
}
inline bool NMSSSDParameter::add_score() const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.add_score)
  return add_score_;
}
inline void NMSSSDParameter::set_add_score(bool value) {
  set_has_add_score();
  add_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.add_score)
}

// repeated int32 max_candidate_n = 5;
inline int NMSSSDParameter::max_candidate_n_size() const {
  return max_candidate_n_.size();
}
inline void NMSSSDParameter::clear_max_candidate_n() {
  max_candidate_n_.Clear();
}
inline ::google::protobuf::int32 NMSSSDParameter::max_candidate_n(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.max_candidate_n)
  return max_candidate_n_.Get(index);
}
inline void NMSSSDParameter::set_max_candidate_n(int index, ::google::protobuf::int32 value) {
  max_candidate_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.max_candidate_n)
}
inline void NMSSSDParameter::add_max_candidate_n(::google::protobuf::int32 value) {
  max_candidate_n_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.max_candidate_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NMSSSDParameter::max_candidate_n() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.max_candidate_n)
  return max_candidate_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NMSSSDParameter::mutable_max_candidate_n() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.max_candidate_n)
  return &max_candidate_n_;
}

// repeated bool use_soft_nms = 6;
inline int NMSSSDParameter::use_soft_nms_size() const {
  return use_soft_nms_.size();
}
inline void NMSSSDParameter::clear_use_soft_nms() {
  use_soft_nms_.Clear();
}
inline bool NMSSSDParameter::use_soft_nms(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.use_soft_nms)
  return use_soft_nms_.Get(index);
}
inline void NMSSSDParameter::set_use_soft_nms(int index, bool value) {
  use_soft_nms_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.use_soft_nms)
}
inline void NMSSSDParameter::add_use_soft_nms(bool value) {
  use_soft_nms_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.use_soft_nms)
}
inline const ::google::protobuf::RepeatedField< bool >&
NMSSSDParameter::use_soft_nms() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.use_soft_nms)
  return use_soft_nms_;
}
inline ::google::protobuf::RepeatedField< bool >*
NMSSSDParameter::mutable_use_soft_nms() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.use_soft_nms)
  return &use_soft_nms_;
}

// optional bool nms_among_classes = 7 [default = false];
inline bool NMSSSDParameter::has_nms_among_classes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NMSSSDParameter::set_has_nms_among_classes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NMSSSDParameter::clear_has_nms_among_classes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NMSSSDParameter::clear_nms_among_classes() {
  nms_among_classes_ = false;
  clear_has_nms_among_classes();
}
inline bool NMSSSDParameter::nms_among_classes() const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.nms_among_classes)
  return nms_among_classes_;
}
inline void NMSSSDParameter::set_nms_among_classes(bool value) {
  set_has_nms_among_classes();
  nms_among_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.nms_among_classes)
}

// repeated bool voting = 8;
inline int NMSSSDParameter::voting_size() const {
  return voting_.size();
}
inline void NMSSSDParameter::clear_voting() {
  voting_.Clear();
}
inline bool NMSSSDParameter::voting(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.voting)
  return voting_.Get(index);
}
inline void NMSSSDParameter::set_voting(int index, bool value) {
  voting_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.voting)
}
inline void NMSSSDParameter::add_voting(bool value) {
  voting_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.voting)
}
inline const ::google::protobuf::RepeatedField< bool >&
NMSSSDParameter::voting() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.voting)
  return voting_;
}
inline ::google::protobuf::RepeatedField< bool >*
NMSSSDParameter::mutable_voting() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.voting)
  return &voting_;
}

// repeated float vote_iou = 9;
inline int NMSSSDParameter::vote_iou_size() const {
  return vote_iou_.size();
}
inline void NMSSSDParameter::clear_vote_iou() {
  vote_iou_.Clear();
}
inline float NMSSSDParameter::vote_iou(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.vote_iou)
  return vote_iou_.Get(index);
}
inline void NMSSSDParameter::set_vote_iou(int index, float value) {
  vote_iou_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.vote_iou)
}
inline void NMSSSDParameter::add_vote_iou(float value) {
  vote_iou_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.vote_iou)
}
inline const ::google::protobuf::RepeatedField< float >&
NMSSSDParameter::vote_iou() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.vote_iou)
  return vote_iou_;
}
inline ::google::protobuf::RepeatedField< float >*
NMSSSDParameter::mutable_vote_iou() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.vote_iou)
  return &vote_iou_;
}

// -------------------------------------------------------------------

// KPTSParameter

// required uint32 kpts_exist_bottom_idx = 1;
inline bool KPTSParameter::has_kpts_exist_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KPTSParameter::set_has_kpts_exist_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KPTSParameter::clear_has_kpts_exist_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KPTSParameter::clear_kpts_exist_bottom_idx() {
  kpts_exist_bottom_idx_ = 0u;
  clear_has_kpts_exist_bottom_idx();
}
inline ::google::protobuf::uint32 KPTSParameter::kpts_exist_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_exist_bottom_idx)
  return kpts_exist_bottom_idx_;
}
inline void KPTSParameter::set_kpts_exist_bottom_idx(::google::protobuf::uint32 value) {
  set_has_kpts_exist_bottom_idx();
  kpts_exist_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_exist_bottom_idx)
}

// required uint32 kpts_reg_bottom_idx = 2;
inline bool KPTSParameter::has_kpts_reg_bottom_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KPTSParameter::set_has_kpts_reg_bottom_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KPTSParameter::clear_has_kpts_reg_bottom_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KPTSParameter::clear_kpts_reg_bottom_idx() {
  kpts_reg_bottom_idx_ = 0u;
  clear_has_kpts_reg_bottom_idx();
}
inline ::google::protobuf::uint32 KPTSParameter::kpts_reg_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_reg_bottom_idx)
  return kpts_reg_bottom_idx_;
}
inline void KPTSParameter::set_kpts_reg_bottom_idx(::google::protobuf::uint32 value) {
  set_has_kpts_reg_bottom_idx();
  kpts_reg_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_reg_bottom_idx)
}

// optional bool kpts_reg_as_classify = 3 [default = false];
inline bool KPTSParameter::has_kpts_reg_as_classify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KPTSParameter::set_has_kpts_reg_as_classify() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KPTSParameter::clear_has_kpts_reg_as_classify() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KPTSParameter::clear_kpts_reg_as_classify() {
  kpts_reg_as_classify_ = false;
  clear_has_kpts_reg_as_classify();
}
inline bool KPTSParameter::kpts_reg_as_classify() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_reg_as_classify)
  return kpts_reg_as_classify_;
}
inline void KPTSParameter::set_kpts_reg_as_classify(bool value) {
  set_has_kpts_reg_as_classify();
  kpts_reg_as_classify_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_reg_as_classify)
}

// optional uint32 kpts_classify_width = 4;
inline bool KPTSParameter::has_kpts_classify_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KPTSParameter::set_has_kpts_classify_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KPTSParameter::clear_has_kpts_classify_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KPTSParameter::clear_kpts_classify_width() {
  kpts_classify_width_ = 0u;
  clear_has_kpts_classify_width();
}
inline ::google::protobuf::uint32 KPTSParameter::kpts_classify_width() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_classify_width)
  return kpts_classify_width_;
}
inline void KPTSParameter::set_kpts_classify_width(::google::protobuf::uint32 value) {
  set_has_kpts_classify_width();
  kpts_classify_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_classify_width)
}

// optional uint32 kpts_classify_height = 5;
inline bool KPTSParameter::has_kpts_classify_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KPTSParameter::set_has_kpts_classify_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KPTSParameter::clear_has_kpts_classify_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KPTSParameter::clear_kpts_classify_height() {
  kpts_classify_height_ = 0u;
  clear_has_kpts_classify_height();
}
inline ::google::protobuf::uint32 KPTSParameter::kpts_classify_height() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_classify_height)
  return kpts_classify_height_;
}
inline void KPTSParameter::set_kpts_classify_height(::google::protobuf::uint32 value) {
  set_has_kpts_classify_height();
  kpts_classify_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_classify_height)
}

// optional int32 kpts_reg_norm_idx_st = 6;
inline bool KPTSParameter::has_kpts_reg_norm_idx_st() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KPTSParameter::set_has_kpts_reg_norm_idx_st() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KPTSParameter::clear_has_kpts_reg_norm_idx_st() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KPTSParameter::clear_kpts_reg_norm_idx_st() {
  kpts_reg_norm_idx_st_ = 0;
  clear_has_kpts_reg_norm_idx_st();
}
inline ::google::protobuf::int32 KPTSParameter::kpts_reg_norm_idx_st() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_reg_norm_idx_st)
  return kpts_reg_norm_idx_st_;
}
inline void KPTSParameter::set_kpts_reg_norm_idx_st(::google::protobuf::int32 value) {
  set_has_kpts_reg_norm_idx_st();
  kpts_reg_norm_idx_st_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_reg_norm_idx_st)
}

// repeated int32 kpts_st_for_each_class = 7;
inline int KPTSParameter::kpts_st_for_each_class_size() const {
  return kpts_st_for_each_class_.size();
}
inline void KPTSParameter::clear_kpts_st_for_each_class() {
  kpts_st_for_each_class_.Clear();
}
inline ::google::protobuf::int32 KPTSParameter::kpts_st_for_each_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_st_for_each_class)
  return kpts_st_for_each_class_.Get(index);
}
inline void KPTSParameter::set_kpts_st_for_each_class(int index, ::google::protobuf::int32 value) {
  kpts_st_for_each_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_st_for_each_class)
}
inline void KPTSParameter::add_kpts_st_for_each_class(::google::protobuf::int32 value) {
  kpts_st_for_each_class_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.KPTSParameter.kpts_st_for_each_class)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KPTSParameter::kpts_st_for_each_class() const {
  // @@protoc_insertion_point(field_list:caffe.KPTSParameter.kpts_st_for_each_class)
  return kpts_st_for_each_class_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KPTSParameter::mutable_kpts_st_for_each_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.KPTSParameter.kpts_st_for_each_class)
  return &kpts_st_for_each_class_;
}

// repeated int32 kpts_ed_for_each_class = 8;
inline int KPTSParameter::kpts_ed_for_each_class_size() const {
  return kpts_ed_for_each_class_.size();
}
inline void KPTSParameter::clear_kpts_ed_for_each_class() {
  kpts_ed_for_each_class_.Clear();
}
inline ::google::protobuf::int32 KPTSParameter::kpts_ed_for_each_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_ed_for_each_class)
  return kpts_ed_for_each_class_.Get(index);
}
inline void KPTSParameter::set_kpts_ed_for_each_class(int index, ::google::protobuf::int32 value) {
  kpts_ed_for_each_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_ed_for_each_class)
}
inline void KPTSParameter::add_kpts_ed_for_each_class(::google::protobuf::int32 value) {
  kpts_ed_for_each_class_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.KPTSParameter.kpts_ed_for_each_class)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KPTSParameter::kpts_ed_for_each_class() const {
  // @@protoc_insertion_point(field_list:caffe.KPTSParameter.kpts_ed_for_each_class)
  return kpts_ed_for_each_class_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KPTSParameter::mutable_kpts_ed_for_each_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.KPTSParameter.kpts_ed_for_each_class)
  return &kpts_ed_for_each_class_;
}

// optional float kpts_classify_pad_ratio = 9 [default = 0];
inline bool KPTSParameter::has_kpts_classify_pad_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KPTSParameter::set_has_kpts_classify_pad_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KPTSParameter::clear_has_kpts_classify_pad_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KPTSParameter::clear_kpts_classify_pad_ratio() {
  kpts_classify_pad_ratio_ = 0;
  clear_has_kpts_classify_pad_ratio();
}
inline float KPTSParameter::kpts_classify_pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_classify_pad_ratio)
  return kpts_classify_pad_ratio_;
}
inline void KPTSParameter::set_kpts_classify_pad_ratio(float value) {
  set_has_kpts_classify_pad_ratio();
  kpts_classify_pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_classify_pad_ratio)
}

// -------------------------------------------------------------------

// ATRSParameter

// required uint32 atrs_reg_bottom_idx = 1;
inline bool ATRSParameter::has_atrs_reg_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATRSParameter::set_has_atrs_reg_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATRSParameter::clear_has_atrs_reg_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATRSParameter::clear_atrs_reg_bottom_idx() {
  atrs_reg_bottom_idx_ = 0u;
  clear_has_atrs_reg_bottom_idx();
}
inline ::google::protobuf::uint32 ATRSParameter::atrs_reg_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.ATRSParameter.atrs_reg_bottom_idx)
  return atrs_reg_bottom_idx_;
}
inline void ATRSParameter::set_atrs_reg_bottom_idx(::google::protobuf::uint32 value) {
  set_has_atrs_reg_bottom_idx();
  atrs_reg_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.ATRSParameter.atrs_reg_bottom_idx)
}

// optional int32 atrs_reg_norm_idx_st = 2;
inline bool ATRSParameter::has_atrs_reg_norm_idx_st() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATRSParameter::set_has_atrs_reg_norm_idx_st() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATRSParameter::clear_has_atrs_reg_norm_idx_st() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATRSParameter::clear_atrs_reg_norm_idx_st() {
  atrs_reg_norm_idx_st_ = 0;
  clear_has_atrs_reg_norm_idx_st();
}
inline ::google::protobuf::int32 ATRSParameter::atrs_reg_norm_idx_st() const {
  // @@protoc_insertion_point(field_get:caffe.ATRSParameter.atrs_reg_norm_idx_st)
  return atrs_reg_norm_idx_st_;
}
inline void ATRSParameter::set_atrs_reg_norm_idx_st(::google::protobuf::int32 value) {
  set_has_atrs_reg_norm_idx_st();
  atrs_reg_norm_idx_st_ = value;
  // @@protoc_insertion_point(field_set:caffe.ATRSParameter.atrs_reg_norm_idx_st)
}

// repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
inline int ATRSParameter::atrs_norm_type_size() const {
  return atrs_norm_type_.size();
}
inline void ATRSParameter::clear_atrs_norm_type() {
  atrs_norm_type_.Clear();
}
inline ::caffe::ATRSParameter_NormType ATRSParameter::atrs_norm_type(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ATRSParameter.atrs_norm_type)
  return static_cast< ::caffe::ATRSParameter_NormType >(atrs_norm_type_.Get(index));
}
inline void ATRSParameter::set_atrs_norm_type(int index, ::caffe::ATRSParameter_NormType value) {
  assert(::caffe::ATRSParameter_NormType_IsValid(value));
  atrs_norm_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ATRSParameter.atrs_norm_type)
}
inline void ATRSParameter::add_atrs_norm_type(::caffe::ATRSParameter_NormType value) {
  assert(::caffe::ATRSParameter_NormType_IsValid(value));
  atrs_norm_type_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ATRSParameter.atrs_norm_type)
}
inline const ::google::protobuf::RepeatedField<int>&
ATRSParameter::atrs_norm_type() const {
  // @@protoc_insertion_point(field_list:caffe.ATRSParameter.atrs_norm_type)
  return atrs_norm_type_;
}
inline ::google::protobuf::RepeatedField<int>*
ATRSParameter::mutable_atrs_norm_type() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ATRSParameter.atrs_norm_type)
  return &atrs_norm_type_;
}

// -------------------------------------------------------------------

// FTRSParameter

// required uint32 ftrs_bottom_idx = 1;
inline bool FTRSParameter::has_ftrs_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FTRSParameter::set_has_ftrs_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FTRSParameter::clear_has_ftrs_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FTRSParameter::clear_ftrs_bottom_idx() {
  ftrs_bottom_idx_ = 0u;
  clear_has_ftrs_bottom_idx();
}
inline ::google::protobuf::uint32 FTRSParameter::ftrs_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.FTRSParameter.ftrs_bottom_idx)
  return ftrs_bottom_idx_;
}
inline void FTRSParameter::set_ftrs_bottom_idx(::google::protobuf::uint32 value) {
  set_has_ftrs_bottom_idx();
  ftrs_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTRSParameter.ftrs_bottom_idx)
}

// -------------------------------------------------------------------

// SPMPParameter

// required uint32 spmp_bottom_idx = 1;
inline bool SPMPParameter::has_spmp_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPMPParameter::set_has_spmp_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPMPParameter::clear_has_spmp_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPMPParameter::clear_spmp_bottom_idx() {
  spmp_bottom_idx_ = 0u;
  clear_has_spmp_bottom_idx();
}
inline ::google::protobuf::uint32 SPMPParameter::spmp_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_bottom_idx)
  return spmp_bottom_idx_;
}
inline void SPMPParameter::set_spmp_bottom_idx(::google::protobuf::uint32 value) {
  set_has_spmp_bottom_idx();
  spmp_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_bottom_idx)
}

// repeated bool spmp_class_aware = 2;
inline int SPMPParameter::spmp_class_aware_size() const {
  return spmp_class_aware_.size();
}
inline void SPMPParameter::clear_spmp_class_aware() {
  spmp_class_aware_.Clear();
}
inline bool SPMPParameter::spmp_class_aware(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_class_aware)
  return spmp_class_aware_.Get(index);
}
inline void SPMPParameter::set_spmp_class_aware(int index, bool value) {
  spmp_class_aware_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_class_aware)
}
inline void SPMPParameter::add_spmp_class_aware(bool value) {
  spmp_class_aware_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_class_aware)
}
inline const ::google::protobuf::RepeatedField< bool >&
SPMPParameter::spmp_class_aware() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_class_aware)
  return spmp_class_aware_;
}
inline ::google::protobuf::RepeatedField< bool >*
SPMPParameter::mutable_spmp_class_aware() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_class_aware)
  return &spmp_class_aware_;
}

// repeated uint32 spmp_label_width = 3;
inline int SPMPParameter::spmp_label_width_size() const {
  return spmp_label_width_.size();
}
inline void SPMPParameter::clear_spmp_label_width() {
  spmp_label_width_.Clear();
}
inline ::google::protobuf::uint32 SPMPParameter::spmp_label_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_label_width)
  return spmp_label_width_.Get(index);
}
inline void SPMPParameter::set_spmp_label_width(int index, ::google::protobuf::uint32 value) {
  spmp_label_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_label_width)
}
inline void SPMPParameter::add_spmp_label_width(::google::protobuf::uint32 value) {
  spmp_label_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_label_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SPMPParameter::spmp_label_width() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_label_width)
  return spmp_label_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SPMPParameter::mutable_spmp_label_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_label_width)
  return &spmp_label_width_;
}

// repeated uint32 spmp_label_height = 4;
inline int SPMPParameter::spmp_label_height_size() const {
  return spmp_label_height_.size();
}
inline void SPMPParameter::clear_spmp_label_height() {
  spmp_label_height_.Clear();
}
inline ::google::protobuf::uint32 SPMPParameter::spmp_label_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_label_height)
  return spmp_label_height_.Get(index);
}
inline void SPMPParameter::set_spmp_label_height(int index, ::google::protobuf::uint32 value) {
  spmp_label_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_label_height)
}
inline void SPMPParameter::add_spmp_label_height(::google::protobuf::uint32 value) {
  spmp_label_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_label_height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SPMPParameter::spmp_label_height() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_label_height)
  return spmp_label_height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SPMPParameter::mutable_spmp_label_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_label_height)
  return &spmp_label_height_;
}

// repeated float spmp_pad_ratio = 5;
inline int SPMPParameter::spmp_pad_ratio_size() const {
  return spmp_pad_ratio_.size();
}
inline void SPMPParameter::clear_spmp_pad_ratio() {
  spmp_pad_ratio_.Clear();
}
inline float SPMPParameter::spmp_pad_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_pad_ratio)
  return spmp_pad_ratio_.Get(index);
}
inline void SPMPParameter::set_spmp_pad_ratio(int index, float value) {
  spmp_pad_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_pad_ratio)
}
inline void SPMPParameter::add_spmp_pad_ratio(float value) {
  spmp_pad_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_pad_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
SPMPParameter::spmp_pad_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_pad_ratio)
  return spmp_pad_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
SPMPParameter::mutable_spmp_pad_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_pad_ratio)
  return &spmp_pad_ratio_;
}

// -------------------------------------------------------------------

// Cam3dParameter

// required uint32 cam3d_bottom_idx = 1;
inline bool Cam3dParameter::has_cam3d_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cam3dParameter::set_has_cam3d_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cam3dParameter::clear_has_cam3d_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cam3dParameter::clear_cam3d_bottom_idx() {
  cam3d_bottom_idx_ = 0u;
  clear_has_cam3d_bottom_idx();
}
inline ::google::protobuf::uint32 Cam3dParameter::cam3d_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.Cam3dParameter.cam3d_bottom_idx)
  return cam3d_bottom_idx_;
}
inline void Cam3dParameter::set_cam3d_bottom_idx(::google::protobuf::uint32 value) {
  set_has_cam3d_bottom_idx();
  cam3d_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.Cam3dParameter.cam3d_bottom_idx)
}

// -------------------------------------------------------------------

// DetectionOutputSSDParameter

// optional .caffe.NMSSSDParameter nms_param = 1;
inline bool DetectionOutputSSDParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionOutputSSDParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionOutputSSDParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NMSSSDParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NMSSSDParameter& DetectionOutputSSDParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::caffe::NMSSSDParameter::internal_default_instance();
}
inline ::caffe::NMSSSDParameter* DetectionOutputSSDParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NMSSSDParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NMSSSDParameter* DetectionOutputSSDParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NMSSSDParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_nms_param(::caffe::NMSSSDParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.nms_param)
}

// repeated float threshold = 2;
inline int DetectionOutputSSDParameter::threshold_size() const {
  return threshold_.size();
}
inline void DetectionOutputSSDParameter::clear_threshold() {
  threshold_.Clear();
}
inline float DetectionOutputSSDParameter::threshold(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.threshold)
  return threshold_.Get(index);
}
inline void DetectionOutputSSDParameter::set_threshold(int index, float value) {
  threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.threshold)
}
inline void DetectionOutputSSDParameter::add_threshold(float value) {
  threshold_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.threshold)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::threshold() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.threshold)
  return threshold_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_threshold() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.threshold)
  return &threshold_;
}

// optional uint32 channel_per_scale = 3 [default = 5];
inline bool DetectionOutputSSDParameter::has_channel_per_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_channel_per_scale() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DetectionOutputSSDParameter::clear_has_channel_per_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DetectionOutputSSDParameter::clear_channel_per_scale() {
  channel_per_scale_ = 5u;
  clear_has_channel_per_scale();
}
inline ::google::protobuf::uint32 DetectionOutputSSDParameter::channel_per_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.channel_per_scale)
  return channel_per_scale_;
}
inline void DetectionOutputSSDParameter::set_channel_per_scale(::google::protobuf::uint32 value) {
  set_has_channel_per_scale();
  channel_per_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.channel_per_scale)
}

// optional string class_name_list = 4;
inline bool DetectionOutputSSDParameter::has_class_name_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_class_name_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionOutputSSDParameter::clear_has_class_name_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionOutputSSDParameter::clear_class_name_list() {
  class_name_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name_list();
}
inline const ::std::string& DetectionOutputSSDParameter::class_name_list() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.class_name_list)
  return class_name_list_.GetNoArena();
}
inline void DetectionOutputSSDParameter::set_class_name_list(const ::std::string& value) {
  set_has_class_name_list();
  class_name_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.class_name_list)
}
#if LANG_CXX11
inline void DetectionOutputSSDParameter::set_class_name_list(::std::string&& value) {
  set_has_class_name_list();
  class_name_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DetectionOutputSSDParameter.class_name_list)
}
#endif
inline void DetectionOutputSSDParameter::set_class_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_name_list();
  class_name_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionOutputSSDParameter.class_name_list)
}
inline void DetectionOutputSSDParameter::set_class_name_list(const char* value, size_t size) {
  set_has_class_name_list();
  class_name_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionOutputSSDParameter.class_name_list)
}
inline ::std::string* DetectionOutputSSDParameter::mutable_class_name_list() {
  set_has_class_name_list();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.class_name_list)
  return class_name_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionOutputSSDParameter::release_class_name_list() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.class_name_list)
  clear_has_class_name_list();
  return class_name_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionOutputSSDParameter::set_allocated_class_name_list(::std::string* class_name_list) {
  if (class_name_list != NULL) {
    set_has_class_name_list();
  } else {
    clear_has_class_name_list();
  }
  class_name_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name_list);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.class_name_list)
}

// optional uint32 num_class = 5 [default = 1];
inline bool DetectionOutputSSDParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DetectionOutputSSDParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DetectionOutputSSDParameter::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 DetectionOutputSSDParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.num_class)
  return num_class_;
}
inline void DetectionOutputSSDParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.num_class)
}

// optional bool refine_out_of_map_bbox = 6 [default = false];
inline bool DetectionOutputSSDParameter::has_refine_out_of_map_bbox() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_refine_out_of_map_bbox() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectionOutputSSDParameter::clear_has_refine_out_of_map_bbox() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectionOutputSSDParameter::clear_refine_out_of_map_bbox() {
  refine_out_of_map_bbox_ = false;
  clear_has_refine_out_of_map_bbox();
}
inline bool DetectionOutputSSDParameter::refine_out_of_map_bbox() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.refine_out_of_map_bbox)
  return refine_out_of_map_bbox_;
}
inline void DetectionOutputSSDParameter::set_refine_out_of_map_bbox(bool value) {
  set_has_refine_out_of_map_bbox();
  refine_out_of_map_bbox_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.refine_out_of_map_bbox)
}

// repeated uint32 class_indexes = 7;
inline int DetectionOutputSSDParameter::class_indexes_size() const {
  return class_indexes_.size();
}
inline void DetectionOutputSSDParameter::clear_class_indexes() {
  class_indexes_.Clear();
}
inline ::google::protobuf::uint32 DetectionOutputSSDParameter::class_indexes(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.class_indexes)
  return class_indexes_.Get(index);
}
inline void DetectionOutputSSDParameter::set_class_indexes(int index, ::google::protobuf::uint32 value) {
  class_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.class_indexes)
}
inline void DetectionOutputSSDParameter::add_class_indexes(::google::protobuf::uint32 value) {
  class_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.class_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputSSDParameter::class_indexes() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.class_indexes)
  return class_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputSSDParameter::mutable_class_indexes() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.class_indexes)
  return &class_indexes_;
}

// repeated float heat_map_a = 8;
inline int DetectionOutputSSDParameter::heat_map_a_size() const {
  return heat_map_a_.size();
}
inline void DetectionOutputSSDParameter::clear_heat_map_a() {
  heat_map_a_.Clear();
}
inline float DetectionOutputSSDParameter::heat_map_a(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.heat_map_a)
  return heat_map_a_.Get(index);
}
inline void DetectionOutputSSDParameter::set_heat_map_a(int index, float value) {
  heat_map_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.heat_map_a)
}
inline void DetectionOutputSSDParameter::add_heat_map_a(float value) {
  heat_map_a_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.heat_map_a)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.heat_map_a)
  return heat_map_a_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_heat_map_a() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.heat_map_a)
  return &heat_map_a_;
}

// repeated float heat_map_b = 13;
inline int DetectionOutputSSDParameter::heat_map_b_size() const {
  return heat_map_b_.size();
}
inline void DetectionOutputSSDParameter::clear_heat_map_b() {
  heat_map_b_.Clear();
}
inline float DetectionOutputSSDParameter::heat_map_b(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.heat_map_b)
  return heat_map_b_.Get(index);
}
inline void DetectionOutputSSDParameter::set_heat_map_b(int index, float value) {
  heat_map_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.heat_map_b)
}
inline void DetectionOutputSSDParameter::add_heat_map_b(float value) {
  heat_map_b_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.heat_map_b)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.heat_map_b)
  return heat_map_b_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_heat_map_b() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.heat_map_b)
  return &heat_map_b_;
}

// optional float threshold_objectness = 9 [default = 0];
inline bool DetectionOutputSSDParameter::has_threshold_objectness() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_threshold_objectness() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionOutputSSDParameter::clear_has_threshold_objectness() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionOutputSSDParameter::clear_threshold_objectness() {
  threshold_objectness_ = 0;
  clear_has_threshold_objectness();
}
inline float DetectionOutputSSDParameter::threshold_objectness() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.threshold_objectness)
  return threshold_objectness_;
}
inline void DetectionOutputSSDParameter::set_threshold_objectness(float value) {
  set_has_threshold_objectness();
  threshold_objectness_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.threshold_objectness)
}

// repeated float proposal_min_sqrt_area = 10;
inline int DetectionOutputSSDParameter::proposal_min_sqrt_area_size() const {
  return proposal_min_sqrt_area_.size();
}
inline void DetectionOutputSSDParameter::clear_proposal_min_sqrt_area() {
  proposal_min_sqrt_area_.Clear();
}
inline float DetectionOutputSSDParameter::proposal_min_sqrt_area(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
  return proposal_min_sqrt_area_.Get(index);
}
inline void DetectionOutputSSDParameter::set_proposal_min_sqrt_area(int index, float value) {
  proposal_min_sqrt_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
}
inline void DetectionOutputSSDParameter::add_proposal_min_sqrt_area(float value) {
  proposal_min_sqrt_area_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::proposal_min_sqrt_area() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
  return proposal_min_sqrt_area_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_proposal_min_sqrt_area() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
  return &proposal_min_sqrt_area_;
}

// repeated float proposal_max_sqrt_area = 11;
inline int DetectionOutputSSDParameter::proposal_max_sqrt_area_size() const {
  return proposal_max_sqrt_area_.size();
}
inline void DetectionOutputSSDParameter::clear_proposal_max_sqrt_area() {
  proposal_max_sqrt_area_.Clear();
}
inline float DetectionOutputSSDParameter::proposal_max_sqrt_area(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
  return proposal_max_sqrt_area_.Get(index);
}
inline void DetectionOutputSSDParameter::set_proposal_max_sqrt_area(int index, float value) {
  proposal_max_sqrt_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
}
inline void DetectionOutputSSDParameter::add_proposal_max_sqrt_area(float value) {
  proposal_max_sqrt_area_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::proposal_max_sqrt_area() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
  return proposal_max_sqrt_area_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_proposal_max_sqrt_area() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
  return &proposal_max_sqrt_area_;
}

// optional bool bg_as_one_of_softmax = 12 [default = false];
inline bool DetectionOutputSSDParameter::has_bg_as_one_of_softmax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_bg_as_one_of_softmax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DetectionOutputSSDParameter::clear_has_bg_as_one_of_softmax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DetectionOutputSSDParameter::clear_bg_as_one_of_softmax() {
  bg_as_one_of_softmax_ = false;
  clear_has_bg_as_one_of_softmax();
}
inline bool DetectionOutputSSDParameter::bg_as_one_of_softmax() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.bg_as_one_of_softmax)
  return bg_as_one_of_softmax_;
}
inline void DetectionOutputSSDParameter::set_bg_as_one_of_softmax(bool value) {
  set_has_bg_as_one_of_softmax();
  bg_as_one_of_softmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.bg_as_one_of_softmax)
}

// optional bool use_target_type_rcnn = 14 [default = true];
inline bool DetectionOutputSSDParameter::has_use_target_type_rcnn() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_use_target_type_rcnn() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DetectionOutputSSDParameter::clear_has_use_target_type_rcnn() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DetectionOutputSSDParameter::clear_use_target_type_rcnn() {
  use_target_type_rcnn_ = true;
  clear_has_use_target_type_rcnn();
}
inline bool DetectionOutputSSDParameter::use_target_type_rcnn() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.use_target_type_rcnn)
  return use_target_type_rcnn_;
}
inline void DetectionOutputSSDParameter::set_use_target_type_rcnn(bool value) {
  set_has_use_target_type_rcnn();
  use_target_type_rcnn_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.use_target_type_rcnn)
}

// optional float im_width = 15 [default = 0];
inline bool DetectionOutputSSDParameter::has_im_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_im_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DetectionOutputSSDParameter::clear_has_im_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DetectionOutputSSDParameter::clear_im_width() {
  im_width_ = 0;
  clear_has_im_width();
}
inline float DetectionOutputSSDParameter::im_width() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.im_width)
  return im_width_;
}
inline void DetectionOutputSSDParameter::set_im_width(float value) {
  set_has_im_width();
  im_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.im_width)
}

// optional float im_height = 16 [default = 0];
inline bool DetectionOutputSSDParameter::has_im_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_im_height() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DetectionOutputSSDParameter::clear_has_im_height() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DetectionOutputSSDParameter::clear_im_height() {
  im_height_ = 0;
  clear_has_im_height();
}
inline float DetectionOutputSSDParameter::im_height() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.im_height)
  return im_height_;
}
inline void DetectionOutputSSDParameter::set_im_height(float value) {
  set_has_im_height();
  im_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.im_height)
}

// optional bool rpn_proposal_output_score = 17 [default = false];
inline bool DetectionOutputSSDParameter::has_rpn_proposal_output_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_rpn_proposal_output_score() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DetectionOutputSSDParameter::clear_has_rpn_proposal_output_score() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DetectionOutputSSDParameter::clear_rpn_proposal_output_score() {
  rpn_proposal_output_score_ = false;
  clear_has_rpn_proposal_output_score();
}
inline bool DetectionOutputSSDParameter::rpn_proposal_output_score() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.rpn_proposal_output_score)
  return rpn_proposal_output_score_;
}
inline void DetectionOutputSSDParameter::set_rpn_proposal_output_score(bool value) {
  set_has_rpn_proposal_output_score();
  rpn_proposal_output_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.rpn_proposal_output_score)
}

// optional bool regress_agnostic = 18 [default = true];
inline bool DetectionOutputSSDParameter::has_regress_agnostic() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_regress_agnostic() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DetectionOutputSSDParameter::clear_has_regress_agnostic() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DetectionOutputSSDParameter::clear_regress_agnostic() {
  regress_agnostic_ = true;
  clear_has_regress_agnostic();
}
inline bool DetectionOutputSSDParameter::regress_agnostic() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.regress_agnostic)
  return regress_agnostic_;
}
inline void DetectionOutputSSDParameter::set_regress_agnostic(bool value) {
  set_has_regress_agnostic();
  regress_agnostic_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.regress_agnostic)
}

// optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
inline bool DetectionOutputSSDParameter::has_gen_anchor_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_gen_anchor_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionOutputSSDParameter::clear_has_gen_anchor_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionOutputSSDParameter::clear_gen_anchor_param() {
  if (gen_anchor_param_ != NULL) gen_anchor_param_->::caffe::GenerateAnchorParameter::Clear();
  clear_has_gen_anchor_param();
}
inline const ::caffe::GenerateAnchorParameter& DetectionOutputSSDParameter::gen_anchor_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.gen_anchor_param)
  return gen_anchor_param_ != NULL ? *gen_anchor_param_
                         : *::caffe::GenerateAnchorParameter::internal_default_instance();
}
inline ::caffe::GenerateAnchorParameter* DetectionOutputSSDParameter::mutable_gen_anchor_param() {
  set_has_gen_anchor_param();
  if (gen_anchor_param_ == NULL) {
    gen_anchor_param_ = new ::caffe::GenerateAnchorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.gen_anchor_param)
  return gen_anchor_param_;
}
inline ::caffe::GenerateAnchorParameter* DetectionOutputSSDParameter::release_gen_anchor_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.gen_anchor_param)
  clear_has_gen_anchor_param();
  ::caffe::GenerateAnchorParameter* temp = gen_anchor_param_;
  gen_anchor_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_gen_anchor_param(::caffe::GenerateAnchorParameter* gen_anchor_param) {
  delete gen_anchor_param_;
  gen_anchor_param_ = gen_anchor_param;
  if (gen_anchor_param) {
    set_has_gen_anchor_param();
  } else {
    clear_has_gen_anchor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.gen_anchor_param)
}

// optional float allow_border = 20 [default = -1];
inline bool DetectionOutputSSDParameter::has_allow_border() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_allow_border() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DetectionOutputSSDParameter::clear_has_allow_border() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DetectionOutputSSDParameter::clear_allow_border() {
  allow_border_ = -1;
  clear_has_allow_border();
}
inline float DetectionOutputSSDParameter::allow_border() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.allow_border)
  return allow_border_;
}
inline void DetectionOutputSSDParameter::set_allow_border(float value) {
  set_has_allow_border();
  allow_border_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.allow_border)
}

// optional float allow_border_ratio = 21 [default = -1];
inline bool DetectionOutputSSDParameter::has_allow_border_ratio() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_allow_border_ratio() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DetectionOutputSSDParameter::clear_has_allow_border_ratio() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DetectionOutputSSDParameter::clear_allow_border_ratio() {
  allow_border_ratio_ = -1;
  clear_has_allow_border_ratio();
}
inline float DetectionOutputSSDParameter::allow_border_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.allow_border_ratio)
  return allow_border_ratio_;
}
inline void DetectionOutputSSDParameter::set_allow_border_ratio(float value) {
  set_has_allow_border_ratio();
  allow_border_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.allow_border_ratio)
}

// optional bool bbox_size_add_one = 22 [default = true];
inline bool DetectionOutputSSDParameter::has_bbox_size_add_one() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_bbox_size_add_one() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DetectionOutputSSDParameter::clear_has_bbox_size_add_one() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DetectionOutputSSDParameter::clear_bbox_size_add_one() {
  bbox_size_add_one_ = true;
  clear_has_bbox_size_add_one();
}
inline bool DetectionOutputSSDParameter::bbox_size_add_one() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.bbox_size_add_one)
  return bbox_size_add_one_;
}
inline void DetectionOutputSSDParameter::set_bbox_size_add_one(bool value) {
  set_has_bbox_size_add_one();
  bbox_size_add_one_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.bbox_size_add_one)
}

// optional float read_width_scale = 29 [default = 1];
inline bool DetectionOutputSSDParameter::has_read_width_scale() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_read_width_scale() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DetectionOutputSSDParameter::clear_has_read_width_scale() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DetectionOutputSSDParameter::clear_read_width_scale() {
  read_width_scale_ = 1;
  clear_has_read_width_scale();
}
inline float DetectionOutputSSDParameter::read_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.read_width_scale)
  return read_width_scale_;
}
inline void DetectionOutputSSDParameter::set_read_width_scale(float value) {
  set_has_read_width_scale();
  read_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.read_width_scale)
}

// optional float read_height_scale = 30 [default = 1];
inline bool DetectionOutputSSDParameter::has_read_height_scale() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_read_height_scale() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DetectionOutputSSDParameter::clear_has_read_height_scale() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DetectionOutputSSDParameter::clear_read_height_scale() {
  read_height_scale_ = 1;
  clear_has_read_height_scale();
}
inline float DetectionOutputSSDParameter::read_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.read_height_scale)
  return read_height_scale_;
}
inline void DetectionOutputSSDParameter::set_read_height_scale(float value) {
  set_has_read_height_scale();
  read_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.read_height_scale)
}

// optional uint32 read_height_offset = 31 [default = 0];
inline bool DetectionOutputSSDParameter::has_read_height_offset() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_read_height_offset() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DetectionOutputSSDParameter::clear_has_read_height_offset() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DetectionOutputSSDParameter::clear_read_height_offset() {
  read_height_offset_ = 0u;
  clear_has_read_height_offset();
}
inline ::google::protobuf::uint32 DetectionOutputSSDParameter::read_height_offset() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.read_height_offset)
  return read_height_offset_;
}
inline void DetectionOutputSSDParameter::set_read_height_offset(::google::protobuf::uint32 value) {
  set_has_read_height_offset();
  read_height_offset_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.read_height_offset)
}

// optional float min_size_h = 32 [default = 2];
inline bool DetectionOutputSSDParameter::has_min_size_h() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_min_size_h() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DetectionOutputSSDParameter::clear_has_min_size_h() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DetectionOutputSSDParameter::clear_min_size_h() {
  min_size_h_ = 2;
  clear_has_min_size_h();
}
inline float DetectionOutputSSDParameter::min_size_h() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.min_size_h)
  return min_size_h_;
}
inline void DetectionOutputSSDParameter::set_min_size_h(float value) {
  set_has_min_size_h();
  min_size_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.min_size_h)
}

// optional float min_size_w = 33 [default = 2];
inline bool DetectionOutputSSDParameter::has_min_size_w() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_min_size_w() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DetectionOutputSSDParameter::clear_has_min_size_w() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DetectionOutputSSDParameter::clear_min_size_w() {
  min_size_w_ = 2;
  clear_has_min_size_w();
}
inline float DetectionOutputSSDParameter::min_size_w() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.min_size_w)
  return min_size_w_;
}
inline void DetectionOutputSSDParameter::set_min_size_w(float value) {
  set_has_min_size_w();
  min_size_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.min_size_w)
}

// optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
inline bool DetectionOutputSSDParameter::has_min_size_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_min_size_mode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DetectionOutputSSDParameter::clear_has_min_size_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DetectionOutputSSDParameter::clear_min_size_mode() {
  min_size_mode_ = 0;
  clear_has_min_size_mode();
}
inline ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::min_size_mode() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.min_size_mode)
  return static_cast< ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE >(min_size_mode_);
}
inline void DetectionOutputSSDParameter::set_min_size_mode(::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE value) {
  assert(::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(value));
  set_has_min_size_mode();
  min_size_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.min_size_mode)
}

// optional .caffe.KPTSParameter kpts_param = 35;
inline bool DetectionOutputSSDParameter::has_kpts_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_kpts_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionOutputSSDParameter::clear_has_kpts_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionOutputSSDParameter::clear_kpts_param() {
  if (kpts_param_ != NULL) kpts_param_->::caffe::KPTSParameter::Clear();
  clear_has_kpts_param();
}
inline const ::caffe::KPTSParameter& DetectionOutputSSDParameter::kpts_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.kpts_param)
  return kpts_param_ != NULL ? *kpts_param_
                         : *::caffe::KPTSParameter::internal_default_instance();
}
inline ::caffe::KPTSParameter* DetectionOutputSSDParameter::mutable_kpts_param() {
  set_has_kpts_param();
  if (kpts_param_ == NULL) {
    kpts_param_ = new ::caffe::KPTSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.kpts_param)
  return kpts_param_;
}
inline ::caffe::KPTSParameter* DetectionOutputSSDParameter::release_kpts_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.kpts_param)
  clear_has_kpts_param();
  ::caffe::KPTSParameter* temp = kpts_param_;
  kpts_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_kpts_param(::caffe::KPTSParameter* kpts_param) {
  delete kpts_param_;
  kpts_param_ = kpts_param;
  if (kpts_param) {
    set_has_kpts_param();
  } else {
    clear_has_kpts_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.kpts_param)
}

// optional .caffe.ATRSParameter atrs_param = 36;
inline bool DetectionOutputSSDParameter::has_atrs_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_atrs_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionOutputSSDParameter::clear_has_atrs_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionOutputSSDParameter::clear_atrs_param() {
  if (atrs_param_ != NULL) atrs_param_->::caffe::ATRSParameter::Clear();
  clear_has_atrs_param();
}
inline const ::caffe::ATRSParameter& DetectionOutputSSDParameter::atrs_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.atrs_param)
  return atrs_param_ != NULL ? *atrs_param_
                         : *::caffe::ATRSParameter::internal_default_instance();
}
inline ::caffe::ATRSParameter* DetectionOutputSSDParameter::mutable_atrs_param() {
  set_has_atrs_param();
  if (atrs_param_ == NULL) {
    atrs_param_ = new ::caffe::ATRSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.atrs_param)
  return atrs_param_;
}
inline ::caffe::ATRSParameter* DetectionOutputSSDParameter::release_atrs_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.atrs_param)
  clear_has_atrs_param();
  ::caffe::ATRSParameter* temp = atrs_param_;
  atrs_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_atrs_param(::caffe::ATRSParameter* atrs_param) {
  delete atrs_param_;
  atrs_param_ = atrs_param;
  if (atrs_param) {
    set_has_atrs_param();
  } else {
    clear_has_atrs_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.atrs_param)
}

// optional .caffe.FTRSParameter ftrs_param = 37;
inline bool DetectionOutputSSDParameter::has_ftrs_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_ftrs_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionOutputSSDParameter::clear_has_ftrs_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionOutputSSDParameter::clear_ftrs_param() {
  if (ftrs_param_ != NULL) ftrs_param_->::caffe::FTRSParameter::Clear();
  clear_has_ftrs_param();
}
inline const ::caffe::FTRSParameter& DetectionOutputSSDParameter::ftrs_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.ftrs_param)
  return ftrs_param_ != NULL ? *ftrs_param_
                         : *::caffe::FTRSParameter::internal_default_instance();
}
inline ::caffe::FTRSParameter* DetectionOutputSSDParameter::mutable_ftrs_param() {
  set_has_ftrs_param();
  if (ftrs_param_ == NULL) {
    ftrs_param_ = new ::caffe::FTRSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.ftrs_param)
  return ftrs_param_;
}
inline ::caffe::FTRSParameter* DetectionOutputSSDParameter::release_ftrs_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.ftrs_param)
  clear_has_ftrs_param();
  ::caffe::FTRSParameter* temp = ftrs_param_;
  ftrs_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_ftrs_param(::caffe::FTRSParameter* ftrs_param) {
  delete ftrs_param_;
  ftrs_param_ = ftrs_param;
  if (ftrs_param) {
    set_has_ftrs_param();
  } else {
    clear_has_ftrs_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.ftrs_param)
}

// optional .caffe.SPMPParameter spmp_param = 38;
inline bool DetectionOutputSSDParameter::has_spmp_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_spmp_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionOutputSSDParameter::clear_has_spmp_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionOutputSSDParameter::clear_spmp_param() {
  if (spmp_param_ != NULL) spmp_param_->::caffe::SPMPParameter::Clear();
  clear_has_spmp_param();
}
inline const ::caffe::SPMPParameter& DetectionOutputSSDParameter::spmp_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.spmp_param)
  return spmp_param_ != NULL ? *spmp_param_
                         : *::caffe::SPMPParameter::internal_default_instance();
}
inline ::caffe::SPMPParameter* DetectionOutputSSDParameter::mutable_spmp_param() {
  set_has_spmp_param();
  if (spmp_param_ == NULL) {
    spmp_param_ = new ::caffe::SPMPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.spmp_param)
  return spmp_param_;
}
inline ::caffe::SPMPParameter* DetectionOutputSSDParameter::release_spmp_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.spmp_param)
  clear_has_spmp_param();
  ::caffe::SPMPParameter* temp = spmp_param_;
  spmp_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_spmp_param(::caffe::SPMPParameter* spmp_param) {
  delete spmp_param_;
  spmp_param_ = spmp_param;
  if (spmp_param) {
    set_has_spmp_param();
  } else {
    clear_has_spmp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.spmp_param)
}

// optional .caffe.Cam3dParameter cam3d_param = 39;
inline bool DetectionOutputSSDParameter::has_cam3d_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionOutputSSDParameter::set_has_cam3d_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionOutputSSDParameter::clear_has_cam3d_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionOutputSSDParameter::clear_cam3d_param() {
  if (cam3d_param_ != NULL) cam3d_param_->::caffe::Cam3dParameter::Clear();
  clear_has_cam3d_param();
}
inline const ::caffe::Cam3dParameter& DetectionOutputSSDParameter::cam3d_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.cam3d_param)
  return cam3d_param_ != NULL ? *cam3d_param_
                         : *::caffe::Cam3dParameter::internal_default_instance();
}
inline ::caffe::Cam3dParameter* DetectionOutputSSDParameter::mutable_cam3d_param() {
  set_has_cam3d_param();
  if (cam3d_param_ == NULL) {
    cam3d_param_ = new ::caffe::Cam3dParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.cam3d_param)
  return cam3d_param_;
}
inline ::caffe::Cam3dParameter* DetectionOutputSSDParameter::release_cam3d_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.cam3d_param)
  clear_has_cam3d_param();
  ::caffe::Cam3dParameter* temp = cam3d_param_;
  cam3d_param_ = NULL;
  return temp;
}
inline void DetectionOutputSSDParameter::set_allocated_cam3d_param(::caffe::Cam3dParameter* cam3d_param) {
  delete cam3d_param_;
  cam3d_param_ = cam3d_param;
  if (cam3d_param) {
    set_has_cam3d_param();
  } else {
    clear_has_cam3d_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.cam3d_param)
}

// -------------------------------------------------------------------

// BBoxRegParameter

// repeated float bbox_mean = 1;
inline int BBoxRegParameter::bbox_mean_size() const {
  return bbox_mean_.size();
}
inline void BBoxRegParameter::clear_bbox_mean() {
  bbox_mean_.Clear();
}
inline float BBoxRegParameter::bbox_mean(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxRegParameter.bbox_mean)
  return bbox_mean_.Get(index);
}
inline void BBoxRegParameter::set_bbox_mean(int index, float value) {
  bbox_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxRegParameter.bbox_mean)
}
inline void BBoxRegParameter::add_bbox_mean(float value) {
  bbox_mean_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxRegParameter.bbox_mean)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxRegParameter::bbox_mean() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxRegParameter.bbox_mean)
  return bbox_mean_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxRegParameter::mutable_bbox_mean() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxRegParameter.bbox_mean)
  return &bbox_mean_;
}

// repeated float bbox_std = 2;
inline int BBoxRegParameter::bbox_std_size() const {
  return bbox_std_.size();
}
inline void BBoxRegParameter::clear_bbox_std() {
  bbox_std_.Clear();
}
inline float BBoxRegParameter::bbox_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxRegParameter.bbox_std)
  return bbox_std_.Get(index);
}
inline void BBoxRegParameter::set_bbox_std(int index, float value) {
  bbox_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxRegParameter.bbox_std)
}
inline void BBoxRegParameter::add_bbox_std(float value) {
  bbox_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxRegParameter.bbox_std)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxRegParameter::bbox_std() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxRegParameter.bbox_std)
  return bbox_std_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxRegParameter::mutable_bbox_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxRegParameter.bbox_std)
  return &bbox_std_;
}

// -------------------------------------------------------------------

// RegParameter

// repeated float mean = 1;
inline int RegParameter::mean_size() const {
  return mean_.size();
}
inline void RegParameter::clear_mean() {
  mean_.Clear();
}
inline float RegParameter::mean(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegParameter.mean)
  return mean_.Get(index);
}
inline void RegParameter::set_mean(int index, float value) {
  mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RegParameter.mean)
}
inline void RegParameter::add_mean(float value) {
  mean_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RegParameter.mean)
}
inline const ::google::protobuf::RepeatedField< float >&
RegParameter::mean() const {
  // @@protoc_insertion_point(field_list:caffe.RegParameter.mean)
  return mean_;
}
inline ::google::protobuf::RepeatedField< float >*
RegParameter::mutable_mean() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegParameter.mean)
  return &mean_;
}

// repeated float std = 2;
inline int RegParameter::std_size() const {
  return std_.size();
}
inline void RegParameter::clear_std() {
  std_.Clear();
}
inline float RegParameter::std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegParameter.std)
  return std_.Get(index);
}
inline void RegParameter::set_std(int index, float value) {
  std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RegParameter.std)
}
inline void RegParameter::add_std(float value) {
  std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RegParameter.std)
}
inline const ::google::protobuf::RepeatedField< float >&
RegParameter::std() const {
  // @@protoc_insertion_point(field_list:caffe.RegParameter.std)
  return std_;
}
inline ::google::protobuf::RepeatedField< float >*
RegParameter::mutable_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegParameter.std)
  return &std_;
}

// -------------------------------------------------------------------

// ImageDistortParameter

// repeated float pre_mean_value = 1;
inline int ImageDistortParameter::pre_mean_value_size() const {
  return pre_mean_value_.size();
}
inline void ImageDistortParameter::clear_pre_mean_value() {
  pre_mean_value_.Clear();
}
inline float ImageDistortParameter::pre_mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.pre_mean_value)
  return pre_mean_value_.Get(index);
}
inline void ImageDistortParameter::set_pre_mean_value(int index, float value) {
  pre_mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.pre_mean_value)
}
inline void ImageDistortParameter::add_pre_mean_value(float value) {
  pre_mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDistortParameter.pre_mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
ImageDistortParameter::pre_mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDistortParameter.pre_mean_value)
  return pre_mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageDistortParameter::mutable_pre_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDistortParameter.pre_mean_value)
  return &pre_mean_value_;
}

// repeated float new_mean_value = 2;
inline int ImageDistortParameter::new_mean_value_size() const {
  return new_mean_value_.size();
}
inline void ImageDistortParameter::clear_new_mean_value() {
  new_mean_value_.Clear();
}
inline float ImageDistortParameter::new_mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.new_mean_value)
  return new_mean_value_.Get(index);
}
inline void ImageDistortParameter::set_new_mean_value(int index, float value) {
  new_mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.new_mean_value)
}
inline void ImageDistortParameter::add_new_mean_value(float value) {
  new_mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDistortParameter.new_mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
ImageDistortParameter::new_mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDistortParameter.new_mean_value)
  return new_mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageDistortParameter::mutable_new_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDistortParameter.new_mean_value)
  return &new_mean_value_;
}

// optional float pre_scale = 3 [default = 1];
inline bool ImageDistortParameter::has_pre_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDistortParameter::set_has_pre_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDistortParameter::clear_has_pre_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDistortParameter::clear_pre_scale() {
  pre_scale_ = 1;
  clear_has_pre_scale();
}
inline float ImageDistortParameter::pre_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.pre_scale)
  return pre_scale_;
}
inline void ImageDistortParameter::set_pre_scale(float value) {
  set_has_pre_scale();
  pre_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.pre_scale)
}

// optional float new_scale = 4;
inline bool ImageDistortParameter::has_new_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDistortParameter::set_has_new_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDistortParameter::clear_has_new_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDistortParameter::clear_new_scale() {
  new_scale_ = 0;
  clear_has_new_scale();
}
inline float ImageDistortParameter::new_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.new_scale)
  return new_scale_;
}
inline void ImageDistortParameter::set_new_scale(float value) {
  set_has_new_scale();
  new_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.new_scale)
}

// optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
inline bool ImageDistortParameter::has_distort_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDistortParameter::set_has_distort_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDistortParameter::clear_has_distort_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDistortParameter::clear_distort_param() {
  if (distort_param_ != NULL) distort_param_->::caffe_fcn_data_layer::DistortionParameter::Clear();
  clear_has_distort_param();
}
inline const ::caffe_fcn_data_layer::DistortionParameter& ImageDistortParameter::distort_param() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.distort_param)
  return distort_param_ != NULL ? *distort_param_
                         : *::caffe_fcn_data_layer::DistortionParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::DistortionParameter* ImageDistortParameter::mutable_distort_param() {
  set_has_distort_param();
  if (distort_param_ == NULL) {
    distort_param_ = new ::caffe_fcn_data_layer::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDistortParameter.distort_param)
  return distort_param_;
}
inline ::caffe_fcn_data_layer::DistortionParameter* ImageDistortParameter::release_distort_param() {
  // @@protoc_insertion_point(field_release:caffe.ImageDistortParameter.distort_param)
  clear_has_distort_param();
  ::caffe_fcn_data_layer::DistortionParameter* temp = distort_param_;
  distort_param_ = NULL;
  return temp;
}
inline void ImageDistortParameter::set_allocated_distort_param(::caffe_fcn_data_layer::DistortionParameter* distort_param) {
  delete distort_param_;
  distort_param_ = distort_param;
  if (distort_param) {
    set_has_distort_param();
  } else {
    clear_has_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDistortParameter.distort_param)
}

// optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
inline bool ImageDistortParameter::has_noise_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDistortParameter::set_has_noise_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDistortParameter::clear_has_noise_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDistortParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe_fcn_data_layer::NoiseParameter::Clear();
  clear_has_noise_param();
}
inline const ::caffe_fcn_data_layer::NoiseParameter& ImageDistortParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_
                         : *::caffe_fcn_data_layer::NoiseParameter::internal_default_instance();
}
inline ::caffe_fcn_data_layer::NoiseParameter* ImageDistortParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe_fcn_data_layer::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDistortParameter.noise_param)
  return noise_param_;
}
inline ::caffe_fcn_data_layer::NoiseParameter* ImageDistortParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.ImageDistortParameter.noise_param)
  clear_has_noise_param();
  ::caffe_fcn_data_layer::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
inline void ImageDistortParameter::set_allocated_noise_param(::caffe_fcn_data_layer::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDistortParameter.noise_param)
}

// -------------------------------------------------------------------

// PSROIPoolingParameter

// required float heat_map_a = 1;
inline bool PSROIPoolingParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PSROIPoolingParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PSROIPoolingParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PSROIPoolingParameter::clear_heat_map_a() {
  heat_map_a_ = 0;
  clear_has_heat_map_a();
}
inline float PSROIPoolingParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.heat_map_a)
  return heat_map_a_;
}
inline void PSROIPoolingParameter::set_heat_map_a(float value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.heat_map_a)
}

// optional float heat_map_b = 2 [default = 0];
inline bool PSROIPoolingParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PSROIPoolingParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PSROIPoolingParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PSROIPoolingParameter::clear_heat_map_b() {
  heat_map_b_ = 0;
  clear_has_heat_map_b();
}
inline float PSROIPoolingParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.heat_map_b)
  return heat_map_b_;
}
inline void PSROIPoolingParameter::set_heat_map_b(float value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.heat_map_b)
}

// optional float pad_ratio = 3 [default = 0];
inline bool PSROIPoolingParameter::has_pad_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PSROIPoolingParameter::set_has_pad_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PSROIPoolingParameter::clear_has_pad_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PSROIPoolingParameter::clear_pad_ratio() {
  pad_ratio_ = 0;
  clear_has_pad_ratio();
}
inline float PSROIPoolingParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.pad_ratio)
  return pad_ratio_;
}
inline void PSROIPoolingParameter::set_pad_ratio(float value) {
  set_has_pad_ratio();
  pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.pad_ratio)
}

// required int32 output_dim = 4;
inline bool PSROIPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PSROIPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PSROIPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PSROIPoolingParameter::clear_output_dim() {
  output_dim_ = 0;
  clear_has_output_dim();
}
inline ::google::protobuf::int32 PSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.output_dim)
  return output_dim_;
}
inline void PSROIPoolingParameter::set_output_dim(::google::protobuf::int32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.output_dim)
}

// required int32 group_size = 5;
inline bool PSROIPoolingParameter::has_group_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PSROIPoolingParameter::set_has_group_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PSROIPoolingParameter::clear_has_group_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PSROIPoolingParameter::clear_group_size() {
  group_size_ = 0;
  clear_has_group_size();
}
inline ::google::protobuf::int32 PSROIPoolingParameter::group_size() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.group_size)
  return group_size_;
}
inline void PSROIPoolingParameter::set_group_size(::google::protobuf::int32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.group_size)
}

// -------------------------------------------------------------------

// DFMBPSROIPoolingParameter

// required float heat_map_a = 1;
inline bool DFMBPSROIPoolingParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DFMBPSROIPoolingParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DFMBPSROIPoolingParameter::clear_heat_map_a() {
  heat_map_a_ = 0;
  clear_has_heat_map_a();
}
inline float DFMBPSROIPoolingParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.heat_map_a)
  return heat_map_a_;
}
inline void DFMBPSROIPoolingParameter::set_heat_map_a(float value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.heat_map_a)
}

// optional float heat_map_b = 2 [default = 0];
inline bool DFMBPSROIPoolingParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DFMBPSROIPoolingParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DFMBPSROIPoolingParameter::clear_heat_map_b() {
  heat_map_b_ = 0;
  clear_has_heat_map_b();
}
inline float DFMBPSROIPoolingParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.heat_map_b)
  return heat_map_b_;
}
inline void DFMBPSROIPoolingParameter::set_heat_map_b(float value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.heat_map_b)
}

// optional float pad_ratio = 3 [default = 0];
inline bool DFMBPSROIPoolingParameter::has_pad_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_pad_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DFMBPSROIPoolingParameter::clear_has_pad_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DFMBPSROIPoolingParameter::clear_pad_ratio() {
  pad_ratio_ = 0;
  clear_has_pad_ratio();
}
inline float DFMBPSROIPoolingParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.pad_ratio)
  return pad_ratio_;
}
inline void DFMBPSROIPoolingParameter::set_pad_ratio(float value) {
  set_has_pad_ratio();
  pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.pad_ratio)
}

// required uint32 output_dim = 4;
inline bool DFMBPSROIPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DFMBPSROIPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DFMBPSROIPoolingParameter::clear_output_dim() {
  output_dim_ = 0u;
  clear_has_output_dim();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.output_dim)
  return output_dim_;
}
inline void DFMBPSROIPoolingParameter::set_output_dim(::google::protobuf::uint32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.output_dim)
}

// optional float trans_std = 5 [default = 0.1];
inline bool DFMBPSROIPoolingParameter::has_trans_std() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_trans_std() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DFMBPSROIPoolingParameter::clear_has_trans_std() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DFMBPSROIPoolingParameter::clear_trans_std() {
  trans_std_ = 0.1f;
  clear_has_trans_std();
}
inline float DFMBPSROIPoolingParameter::trans_std() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.trans_std)
  return trans_std_;
}
inline void DFMBPSROIPoolingParameter::set_trans_std(float value) {
  set_has_trans_std();
  trans_std_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.trans_std)
}

// optional uint32 sample_per_part = 6 [default = 4];
inline bool DFMBPSROIPoolingParameter::has_sample_per_part() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_sample_per_part() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DFMBPSROIPoolingParameter::clear_has_sample_per_part() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DFMBPSROIPoolingParameter::clear_sample_per_part() {
  sample_per_part_ = 4u;
  clear_has_sample_per_part();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::sample_per_part() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.sample_per_part)
  return sample_per_part_;
}
inline void DFMBPSROIPoolingParameter::set_sample_per_part(::google::protobuf::uint32 value) {
  set_has_sample_per_part();
  sample_per_part_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.sample_per_part)
}

// optional uint32 group_height = 7 [default = 7];
inline bool DFMBPSROIPoolingParameter::has_group_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_group_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DFMBPSROIPoolingParameter::clear_has_group_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DFMBPSROIPoolingParameter::clear_group_height() {
  group_height_ = 7u;
  clear_has_group_height();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::group_height() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.group_height)
  return group_height_;
}
inline void DFMBPSROIPoolingParameter::set_group_height(::google::protobuf::uint32 value) {
  set_has_group_height();
  group_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.group_height)
}

// optional uint32 group_width = 8 [default = 7];
inline bool DFMBPSROIPoolingParameter::has_group_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_group_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DFMBPSROIPoolingParameter::clear_has_group_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DFMBPSROIPoolingParameter::clear_group_width() {
  group_width_ = 7u;
  clear_has_group_width();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::group_width() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.group_width)
  return group_width_;
}
inline void DFMBPSROIPoolingParameter::set_group_width(::google::protobuf::uint32 value) {
  set_has_group_width();
  group_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.group_width)
}

// optional uint32 pooled_height = 9 [default = 7];
inline bool DFMBPSROIPoolingParameter::has_pooled_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_pooled_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DFMBPSROIPoolingParameter::clear_has_pooled_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DFMBPSROIPoolingParameter::clear_pooled_height() {
  pooled_height_ = 7u;
  clear_has_pooled_height();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::pooled_height() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.pooled_height)
  return pooled_height_;
}
inline void DFMBPSROIPoolingParameter::set_pooled_height(::google::protobuf::uint32 value) {
  set_has_pooled_height();
  pooled_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.pooled_height)
}

// optional uint32 pooled_width = 10 [default = 7];
inline bool DFMBPSROIPoolingParameter::has_pooled_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_pooled_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DFMBPSROIPoolingParameter::clear_has_pooled_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DFMBPSROIPoolingParameter::clear_pooled_width() {
  pooled_width_ = 7u;
  clear_has_pooled_width();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::pooled_width() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.pooled_width)
  return pooled_width_;
}
inline void DFMBPSROIPoolingParameter::set_pooled_width(::google::protobuf::uint32 value) {
  set_has_pooled_width();
  pooled_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.pooled_width)
}

// optional uint32 part_height = 11 [default = 7];
inline bool DFMBPSROIPoolingParameter::has_part_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_part_height() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DFMBPSROIPoolingParameter::clear_has_part_height() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DFMBPSROIPoolingParameter::clear_part_height() {
  part_height_ = 7u;
  clear_has_part_height();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::part_height() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.part_height)
  return part_height_;
}
inline void DFMBPSROIPoolingParameter::set_part_height(::google::protobuf::uint32 value) {
  set_has_part_height();
  part_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.part_height)
}

// optional uint32 part_width = 12 [default = 7];
inline bool DFMBPSROIPoolingParameter::has_part_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DFMBPSROIPoolingParameter::set_has_part_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DFMBPSROIPoolingParameter::clear_has_part_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DFMBPSROIPoolingParameter::clear_part_width() {
  part_width_ = 7u;
  clear_has_part_width();
}
inline ::google::protobuf::uint32 DFMBPSROIPoolingParameter::part_width() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.part_width)
  return part_width_;
}
inline void DFMBPSROIPoolingParameter::set_part_width(::google::protobuf::uint32 value) {
  set_has_part_width();
  part_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.part_width)
}

// -------------------------------------------------------------------

// ProposalImgScaleToCamCoordsParameter

// required uint32 num_class = 1;
inline bool ProposalImgScaleToCamCoordsParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_num_class() {
  num_class_ = 0u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.num_class)
  return num_class_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.num_class)
}

// repeated uint32 sub_class_num_class = 2;
inline int ProposalImgScaleToCamCoordsParameter::sub_class_num_class_size() const {
  return sub_class_num_class_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_sub_class_num_class() {
  sub_class_num_class_.Clear();
}
inline ::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::sub_class_num_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
  return sub_class_num_class_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_sub_class_num_class(int index, ::google::protobuf::uint32 value) {
  sub_class_num_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
}
inline void ProposalImgScaleToCamCoordsParameter::add_sub_class_num_class(::google::protobuf::uint32 value) {
  sub_class_num_class_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::sub_class_num_class() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
  return sub_class_num_class_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_sub_class_num_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
  return &sub_class_num_class_;
}

// repeated int32 sub_class_bottom_idx = 3;
inline int ProposalImgScaleToCamCoordsParameter::sub_class_bottom_idx_size() const {
  return sub_class_bottom_idx_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_sub_class_bottom_idx() {
  sub_class_bottom_idx_.Clear();
}
inline ::google::protobuf::int32 ProposalImgScaleToCamCoordsParameter::sub_class_bottom_idx(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
  return sub_class_bottom_idx_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_sub_class_bottom_idx(int index, ::google::protobuf::int32 value) {
  sub_class_bottom_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
}
inline void ProposalImgScaleToCamCoordsParameter::add_sub_class_bottom_idx(::google::protobuf::int32 value) {
  sub_class_bottom_idx_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProposalImgScaleToCamCoordsParameter::sub_class_bottom_idx() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
  return sub_class_bottom_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProposalImgScaleToCamCoordsParameter::mutable_sub_class_bottom_idx() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
  return &sub_class_bottom_idx_;
}

// optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
inline bool ProposalImgScaleToCamCoordsParameter::has_prj_h_norm_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_prj_h_norm_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_prj_h_norm_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_prj_h_norm_type() {
  prj_h_norm_type_ = 1;
  clear_has_prj_h_norm_type();
}
inline ::caffe::ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter::prj_h_norm_type() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_norm_type)
  return static_cast< ::caffe::ProposalImgScaleToCamCoordsParameter_NormType >(prj_h_norm_type_);
}
inline void ProposalImgScaleToCamCoordsParameter::set_prj_h_norm_type(::caffe::ProposalImgScaleToCamCoordsParameter_NormType value) {
  assert(::caffe::ProposalImgScaleToCamCoordsParameter_NormType_IsValid(value));
  set_has_prj_h_norm_type();
  prj_h_norm_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_norm_type)
}

// optional bool has_size3d_and_orien3d = 5 [default = false];
inline bool ProposalImgScaleToCamCoordsParameter::has_has_size3d_and_orien3d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_has_size3d_and_orien3d() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_has_size3d_and_orien3d() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_size3d_and_orien3d() {
  has_size3d_and_orien3d_ = false;
  clear_has_has_size3d_and_orien3d();
}
inline bool ProposalImgScaleToCamCoordsParameter::has_size3d_and_orien3d() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.has_size3d_and_orien3d)
  return has_size3d_and_orien3d_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_size3d_and_orien3d(bool value) {
  set_has_has_size3d_and_orien3d();
  has_size3d_and_orien3d_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.has_size3d_and_orien3d)
}

// optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
inline bool ProposalImgScaleToCamCoordsParameter::has_orien_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_orien_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_orien_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_orien_type() {
  orien_type_ = 1;
  clear_has_orien_type();
}
inline ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter::orien_type() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.orien_type)
  return static_cast< ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType >(orien_type_);
}
inline void ProposalImgScaleToCamCoordsParameter::set_orien_type(::caffe::ProposalImgScaleToCamCoordsParameter_OrienType value) {
  assert(::caffe::ProposalImgScaleToCamCoordsParameter_OrienType_IsValid(value));
  set_has_orien_type();
  orien_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.orien_type)
}

// repeated uint32 cls_ids_zero_size3d_w = 7;
inline int ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_w_size() const {
  return cls_ids_zero_size3d_w_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cls_ids_zero_size3d_w() {
  cls_ids_zero_size3d_w_.Clear();
}
inline ::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
  return cls_ids_zero_size3d_w_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_cls_ids_zero_size3d_w(int index, ::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
}
inline void ProposalImgScaleToCamCoordsParameter::add_cls_ids_zero_size3d_w(::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_w() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
  return cls_ids_zero_size3d_w_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_cls_ids_zero_size3d_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
  return &cls_ids_zero_size3d_w_;
}

// repeated uint32 cls_ids_zero_size3d_l = 8;
inline int ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_l_size() const {
  return cls_ids_zero_size3d_l_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cls_ids_zero_size3d_l() {
  cls_ids_zero_size3d_l_.Clear();
}
inline ::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_l(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
  return cls_ids_zero_size3d_l_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_cls_ids_zero_size3d_l(int index, ::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_l_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
}
inline void ProposalImgScaleToCamCoordsParameter::add_cls_ids_zero_size3d_l(::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_l_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_l() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
  return cls_ids_zero_size3d_l_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_cls_ids_zero_size3d_l() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
  return &cls_ids_zero_size3d_l_;
}

// repeated uint32 cls_ids_zero_orien3d = 9;
inline int ProposalImgScaleToCamCoordsParameter::cls_ids_zero_orien3d_size() const {
  return cls_ids_zero_orien3d_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cls_ids_zero_orien3d() {
  cls_ids_zero_orien3d_.Clear();
}
inline ::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cls_ids_zero_orien3d(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
  return cls_ids_zero_orien3d_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_cls_ids_zero_orien3d(int index, ::google::protobuf::uint32 value) {
  cls_ids_zero_orien3d_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
}
inline void ProposalImgScaleToCamCoordsParameter::add_cls_ids_zero_orien3d(::google::protobuf::uint32 value) {
  cls_ids_zero_orien3d_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::cls_ids_zero_orien3d() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
  return cls_ids_zero_orien3d_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_cls_ids_zero_orien3d() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
  return &cls_ids_zero_orien3d_;
}

// optional bool cmp_pts_corner_3d = 10 [default = false];
inline bool ProposalImgScaleToCamCoordsParameter::has_cmp_pts_corner_3d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_cmp_pts_corner_3d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_cmp_pts_corner_3d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cmp_pts_corner_3d() {
  cmp_pts_corner_3d_ = false;
  clear_has_cmp_pts_corner_3d();
}
inline bool ProposalImgScaleToCamCoordsParameter::cmp_pts_corner_3d() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_3d)
  return cmp_pts_corner_3d_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_cmp_pts_corner_3d(bool value) {
  set_has_cmp_pts_corner_3d();
  cmp_pts_corner_3d_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_3d)
}

// optional bool cmp_pts_corner_2d = 11 [default = false];
inline bool ProposalImgScaleToCamCoordsParameter::has_cmp_pts_corner_2d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_cmp_pts_corner_2d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_cmp_pts_corner_2d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cmp_pts_corner_2d() {
  cmp_pts_corner_2d_ = false;
  clear_has_cmp_pts_corner_2d();
}
inline bool ProposalImgScaleToCamCoordsParameter::cmp_pts_corner_2d() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_2d)
  return cmp_pts_corner_2d_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_cmp_pts_corner_2d(bool value) {
  set_has_cmp_pts_corner_2d();
  cmp_pts_corner_2d_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_2d)
}

// repeated float ctr_2d_means = 12;
inline int ProposalImgScaleToCamCoordsParameter::ctr_2d_means_size() const {
  return ctr_2d_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_ctr_2d_means() {
  ctr_2d_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::ctr_2d_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
  return ctr_2d_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_ctr_2d_means(int index, float value) {
  ctr_2d_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_ctr_2d_means(float value) {
  ctr_2d_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::ctr_2d_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
  return ctr_2d_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_ctr_2d_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
  return &ctr_2d_means_;
}

// repeated float ctr_2d_stds = 13;
inline int ProposalImgScaleToCamCoordsParameter::ctr_2d_stds_size() const {
  return ctr_2d_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_ctr_2d_stds() {
  ctr_2d_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::ctr_2d_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
  return ctr_2d_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_ctr_2d_stds(int index, float value) {
  ctr_2d_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_ctr_2d_stds(float value) {
  ctr_2d_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::ctr_2d_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
  return ctr_2d_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_ctr_2d_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
  return &ctr_2d_stds_;
}

// repeated float prj_h_means = 14;
inline int ProposalImgScaleToCamCoordsParameter::prj_h_means_size() const {
  return prj_h_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_prj_h_means() {
  prj_h_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::prj_h_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
  return prj_h_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_prj_h_means(int index, float value) {
  prj_h_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_prj_h_means(float value) {
  prj_h_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::prj_h_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
  return prj_h_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_prj_h_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
  return &prj_h_means_;
}

// repeated float prj_h_stds = 15;
inline int ProposalImgScaleToCamCoordsParameter::prj_h_stds_size() const {
  return prj_h_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_prj_h_stds() {
  prj_h_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::prj_h_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
  return prj_h_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_prj_h_stds(int index, float value) {
  prj_h_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_prj_h_stds(float value) {
  prj_h_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::prj_h_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
  return prj_h_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_prj_h_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
  return &prj_h_stds_;
}

// repeated float real_h_means = 16;
inline int ProposalImgScaleToCamCoordsParameter::real_h_means_size() const {
  return real_h_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_real_h_means() {
  real_h_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::real_h_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
  return real_h_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_real_h_means(int index, float value) {
  real_h_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_real_h_means(float value) {
  real_h_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_h_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
  return real_h_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_h_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
  return &real_h_means_;
}

// repeated float real_h_stds = 17;
inline int ProposalImgScaleToCamCoordsParameter::real_h_stds_size() const {
  return real_h_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_real_h_stds() {
  real_h_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::real_h_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
  return real_h_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_real_h_stds(int index, float value) {
  real_h_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_real_h_stds(float value) {
  real_h_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_h_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
  return real_h_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_h_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
  return &real_h_stds_;
}

// repeated float real_w_means = 18;
inline int ProposalImgScaleToCamCoordsParameter::real_w_means_size() const {
  return real_w_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_real_w_means() {
  real_w_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::real_w_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
  return real_w_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_real_w_means(int index, float value) {
  real_w_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_real_w_means(float value) {
  real_w_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_w_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
  return real_w_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_w_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
  return &real_w_means_;
}

// repeated float real_w_stds = 19;
inline int ProposalImgScaleToCamCoordsParameter::real_w_stds_size() const {
  return real_w_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_real_w_stds() {
  real_w_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::real_w_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
  return real_w_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_real_w_stds(int index, float value) {
  real_w_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_real_w_stds(float value) {
  real_w_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_w_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
  return real_w_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_w_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
  return &real_w_stds_;
}

// repeated float real_l_means = 20;
inline int ProposalImgScaleToCamCoordsParameter::real_l_means_size() const {
  return real_l_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_real_l_means() {
  real_l_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::real_l_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
  return real_l_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_real_l_means(int index, float value) {
  real_l_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_real_l_means(float value) {
  real_l_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_l_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
  return real_l_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_l_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
  return &real_l_means_;
}

// repeated float real_l_stds = 21;
inline int ProposalImgScaleToCamCoordsParameter::real_l_stds_size() const {
  return real_l_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_real_l_stds() {
  real_l_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::real_l_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
  return real_l_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_real_l_stds(int index, float value) {
  real_l_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_real_l_stds(float value) {
  real_l_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_l_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
  return real_l_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_l_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
  return &real_l_stds_;
}

// repeated float sin_means = 22;
inline int ProposalImgScaleToCamCoordsParameter::sin_means_size() const {
  return sin_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_sin_means() {
  sin_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::sin_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
  return sin_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_sin_means(int index, float value) {
  sin_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_sin_means(float value) {
  sin_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::sin_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
  return sin_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_sin_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
  return &sin_means_;
}

// repeated float sin_stds = 23;
inline int ProposalImgScaleToCamCoordsParameter::sin_stds_size() const {
  return sin_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_sin_stds() {
  sin_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::sin_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
  return sin_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_sin_stds(int index, float value) {
  sin_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_sin_stds(float value) {
  sin_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::sin_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
  return sin_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_sin_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
  return &sin_stds_;
}

// repeated float cos_means = 24;
inline int ProposalImgScaleToCamCoordsParameter::cos_means_size() const {
  return cos_means_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cos_means() {
  cos_means_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::cos_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
  return cos_means_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_cos_means(int index, float value) {
  cos_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
}
inline void ProposalImgScaleToCamCoordsParameter::add_cos_means(float value) {
  cos_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::cos_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
  return cos_means_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_cos_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
  return &cos_means_;
}

// repeated float cos_stds = 25;
inline int ProposalImgScaleToCamCoordsParameter::cos_stds_size() const {
  return cos_stds_.size();
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cos_stds() {
  cos_stds_.Clear();
}
inline float ProposalImgScaleToCamCoordsParameter::cos_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
  return cos_stds_.Get(index);
}
inline void ProposalImgScaleToCamCoordsParameter::set_cos_stds(int index, float value) {
  cos_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
}
inline void ProposalImgScaleToCamCoordsParameter::add_cos_stds(float value) {
  cos_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::cos_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
  return cos_stds_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_cos_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
  return &cos_stds_;
}

// optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
inline bool ProposalImgScaleToCamCoordsParameter::has_cam_info_idx_st_in_im_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_cam_info_idx_st_in_im_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_cam_info_idx_st_in_im_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cam_info_idx_st_in_im_info() {
  cam_info_idx_st_in_im_info_ = 0u;
  clear_has_cam_info_idx_st_in_im_info();
}
inline ::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cam_info_idx_st_in_im_info() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cam_info_idx_st_in_im_info)
  return cam_info_idx_st_in_im_info_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_cam_info_idx_st_in_im_info(::google::protobuf::uint32 value) {
  set_has_cam_info_idx_st_in_im_info();
  cam_info_idx_st_in_im_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cam_info_idx_st_in_im_info)
}

// optional float im_width_scale = 27 [default = 1];
inline bool ProposalImgScaleToCamCoordsParameter::has_im_width_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_im_width_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_im_width_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_im_width_scale() {
  im_width_scale_ = 1;
  clear_has_im_width_scale();
}
inline float ProposalImgScaleToCamCoordsParameter::im_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.im_width_scale)
  return im_width_scale_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_im_width_scale(float value) {
  set_has_im_width_scale();
  im_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.im_width_scale)
}

// optional float im_height_scale = 28 [default = 1];
inline bool ProposalImgScaleToCamCoordsParameter::has_im_height_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_im_height_scale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_im_height_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_im_height_scale() {
  im_height_scale_ = 1;
  clear_has_im_height_scale();
}
inline float ProposalImgScaleToCamCoordsParameter::im_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.im_height_scale)
  return im_height_scale_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_im_height_scale(float value) {
  set_has_im_height_scale();
  im_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.im_height_scale)
}

// optional float cords_offset_x = 29 [default = 0];
inline bool ProposalImgScaleToCamCoordsParameter::has_cords_offset_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_cords_offset_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_cords_offset_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cords_offset_x() {
  cords_offset_x_ = 0;
  clear_has_cords_offset_x();
}
inline float ProposalImgScaleToCamCoordsParameter::cords_offset_x() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_x)
  return cords_offset_x_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_cords_offset_x(float value) {
  set_has_cords_offset_x();
  cords_offset_x_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_x)
}

// optional float cords_offset_y = 30 [default = 0];
inline bool ProposalImgScaleToCamCoordsParameter::has_cords_offset_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_cords_offset_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_cords_offset_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_cords_offset_y() {
  cords_offset_y_ = 0;
  clear_has_cords_offset_y();
}
inline float ProposalImgScaleToCamCoordsParameter::cords_offset_y() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_y)
  return cords_offset_y_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_cords_offset_y(float value) {
  set_has_cords_offset_y();
  cords_offset_y_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_y)
}

// optional bool bbox_size_add_one = 31 [default = true];
inline bool ProposalImgScaleToCamCoordsParameter::has_bbox_size_add_one() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProposalImgScaleToCamCoordsParameter::set_has_bbox_size_add_one() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_has_bbox_size_add_one() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProposalImgScaleToCamCoordsParameter::clear_bbox_size_add_one() {
  bbox_size_add_one_ = true;
  clear_has_bbox_size_add_one();
}
inline bool ProposalImgScaleToCamCoordsParameter::bbox_size_add_one() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.bbox_size_add_one)
  return bbox_size_add_one_;
}
inline void ProposalImgScaleToCamCoordsParameter::set_bbox_size_add_one(bool value) {
  set_has_bbox_size_add_one();
  bbox_size_add_one_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.bbox_size_add_one)
}

// -------------------------------------------------------------------

// DeformableConvolutionParameter

// optional uint32 num_output = 1;
inline bool DeformableConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeformableConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeformableConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeformableConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.num_output)
  return num_output_;
}
inline void DeformableConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool DeformableConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeformableConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DeformableConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DeformableConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool DeformableConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.bias_term)
  return bias_term_;
}
inline void DeformableConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int DeformableConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void DeformableConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void DeformableConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.pad)
}
inline void DeformableConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int DeformableConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void DeformableConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void DeformableConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.kernel_size)
}
inline void DeformableConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int DeformableConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void DeformableConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void DeformableConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.stride)
}
inline void DeformableConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int DeformableConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void DeformableConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void DeformableConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.dilation)
}
inline void DeformableConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool DeformableConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeformableConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeformableConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeformableConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.pad_h)
  return pad_h_;
}
inline void DeformableConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool DeformableConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeformableConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeformableConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeformableConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.pad_w)
  return pad_w_;
}
inline void DeformableConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool DeformableConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeformableConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeformableConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeformableConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void DeformableConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool DeformableConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeformableConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeformableConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeformableConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void DeformableConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool DeformableConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeformableConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeformableConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeformableConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.stride_h)
  return stride_h_;
}
inline void DeformableConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool DeformableConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeformableConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeformableConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeformableConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.stride_w)
  return stride_w_;
}
inline void DeformableConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool DeformableConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DeformableConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DeformableConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DeformableConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 DeformableConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.group)
  return group_;
}
inline void DeformableConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool DeformableConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeformableConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeformableConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeformableConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& DeformableConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* DeformableConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DeformableConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* DeformableConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.DeformableConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void DeformableConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DeformableConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool DeformableConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeformableConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeformableConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeformableConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& DeformableConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* DeformableConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DeformableConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* DeformableConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.DeformableConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void DeformableConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DeformableConvolutionParameter.bias_filler)
}

// optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool DeformableConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeformableConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeformableConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeformableConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::DeformableConvolutionParameter_Engine DeformableConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.engine)
  return static_cast< ::caffe::DeformableConvolutionParameter_Engine >(engine_);
}
inline void DeformableConvolutionParameter::set_engine(::caffe::DeformableConvolutionParameter_Engine value) {
  assert(::caffe::DeformableConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool DeformableConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeformableConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DeformableConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DeformableConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 DeformableConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.axis)
  return axis_;
}
inline void DeformableConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool DeformableConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeformableConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DeformableConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DeformableConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool DeformableConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void DeformableConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.force_nd_im2col)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace caffe

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SnapshotFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SnapshotFormat>() {
  return ::caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::BinaryDataParameter_ViewType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BinaryDataParameter_ViewType>() {
  return ::caffe::BinaryDataParameter_ViewType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ImageLabelDataParameter_Padding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ImageLabelDataParameter_Padding>() {
  return ::caffe::ImageLabelDataParameter_Padding_descriptor();
}
template <> struct is_proto_enum< ::caffe::LossParameter_NormalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LossParameter_NormalizationMode>() {
  return ::caffe::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::caffe::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::HingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_Engine>() {
  return ::caffe::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReductionParameter_ReductionOp>() {
  return ::caffe::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ROIPoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ROIPoolingParameter_PoolMethod>() {
  return ::caffe::ROIPoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::TanHParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_PoolMethod>() {
  return ::caffe::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_Engine>() {
  return ::caffe::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_LayerType>() {
  return ::caffe::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_DimCheckMode>() {
  return ::caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::ElementHingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ElementHingeLossParameter_Norm>() {
  return ::caffe::ElementHingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::ROI2HeatMapParam_LabelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ROI2HeatMapParam_LabelType>() {
  return ::caffe::ROI2HeatMapParam_LabelType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ROIRefineParam_LabelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ROIRefineParam_LabelType>() {
  return ::caffe::ROIRefineParam_LabelType_descriptor();
}
template <> struct is_proto_enum< ::caffe::CropParameter_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::CropParameter_Type>() {
  return ::caffe::CropParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResampleParameter_ResampleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResampleParameter_ResampleType>() {
  return ::caffe::ResampleParameter_ResampleType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ATRSParameter_NormType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ATRSParameter_NormType>() {
  return ::caffe::ATRSParameter_NormType_descriptor();
}
template <> struct is_proto_enum< ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE>() {
  return ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor();
}
template <> struct is_proto_enum< ::caffe::ProposalImgScaleToCamCoordsParameter_NormType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ProposalImgScaleToCamCoordsParameter_NormType>() {
  return ::caffe::ProposalImgScaleToCamCoordsParameter_NormType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType>() {
  return ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType_descriptor();
}
template <> struct is_proto_enum< ::caffe::DeformableConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DeformableConvolutionParameter_Engine>() {
  return ::caffe::DeformableConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}
template <> struct is_proto_enum< ::caffe::LabelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LabelType>() {
  return ::caffe::LabelType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
