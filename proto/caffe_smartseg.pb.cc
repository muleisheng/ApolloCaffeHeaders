// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_smartseg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe_smartseg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace smartseg {
class ConfigParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigParameter> {
} _ConfigParameter_default_instance_;
class FrameDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameDataParameter> {
} _FrameDataParameter_default_instance_;
class FrameSequenceDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameSequenceDataParameter> {
} _FrameSequenceDataParameter_default_instance_;
class BlobVisualizeParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobVisualizeParameter> {
} _BlobVisualizeParameter_default_instance_;
class PlanViewParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanViewParameter> {
} _PlanViewParameter_default_instance_;
class PlanViewExtractorParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanViewExtractorParameter> {
} _PlanViewExtractorParameter_default_instance_;
class HorizontalViewParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HorizontalViewParameter> {
} _HorizontalViewParameter_default_instance_;
class HorizontalViewExtractorParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HorizontalViewExtractorParameter> {
} _HorizontalViewExtractorParameter_default_instance_;
class SideViewParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SideViewParameter> {
} _SideViewParameter_default_instance_;
class SideViewExtractorParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SideViewExtractorParameter> {
} _SideViewExtractorParameter_default_instance_;
class SegmentorParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SegmentorParameter> {
} _SegmentorParameter_default_instance_;
class FrameTargetParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameTargetParameter> {
} _FrameTargetParameter_default_instance_;
class ViewPoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ViewPoolingParameter> {
} _ViewPoolingParameter_default_instance_;
class ViewUnpoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ViewUnpoolingParameter> {
} _ViewUnpoolingParameter_default_instance_;
class PointInterpolationParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointInterpolationParameter> {
} _PointInterpolationParameter_default_instance_;
class OnlineNormParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnlineNormParameter> {
} _OnlineNormParameter_default_instance_;
class DilationParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DilationParameter> {
} _DilationParameter_default_instance_;

namespace protobuf_caffe_5fsmartseg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParameter, max_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParameter, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParameter, class_orientation_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, pcd_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, label_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDataParameter, perturbation_rate_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, pcd_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, label_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, sequence_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, num_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSequenceDataParameter, perturbation_rate_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, ignore_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVisualizeParameter, channel_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewParameter, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewParameter, splits_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewExtractorParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewExtractorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewExtractorParameter, filter_min_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewExtractorParameter, filter_max_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanViewExtractorParameter, shift_z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewParameter, lower_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewParameter, upper_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewParameter, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewParameter, cols_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewExtractorParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalViewExtractorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewParameter, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewParameter, splits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewParameter, side_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewExtractorParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SideViewExtractorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentorParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentorParameter, training_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentorParameter, merge_diagonal_grids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentorParameter, find_best_cut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentorParameter, topz_threshold_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, startup_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, max_center_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, equal_objectness_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, point_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTargetParameter, sample_grid_center_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewPoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewUnpoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewUnpoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointInterpolationParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointInterpolationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineNormParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineNormParameter, iters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineNormParameter, moving_average_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineNormParameter, eps_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DilationParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DilationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DilationParameter, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DilationParameter, nonempty_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DilationParameter, feature_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DilationParameter, steps_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(ConfigParameter)},
  { 11, 21, sizeof(FrameDataParameter)},
  { 26, 39, sizeof(FrameSequenceDataParameter)},
  { 47, 57, sizeof(BlobVisualizeParameter)},
  { 62, 69, sizeof(PlanViewParameter)},
  { 71, 79, sizeof(PlanViewExtractorParameter)},
  { 82, 91, sizeof(HorizontalViewParameter)},
  { 95, 100, sizeof(HorizontalViewExtractorParameter)},
  { 100, 108, sizeof(SideViewParameter)},
  { 111, 116, sizeof(SideViewExtractorParameter)},
  { 116, 125, sizeof(SegmentorParameter)},
  { 129, 139, sizeof(FrameTargetParameter)},
  { 144, 149, sizeof(ViewPoolingParameter)},
  { 149, 154, sizeof(ViewUnpoolingParameter)},
  { 154, 159, sizeof(PointInterpolationParameter)},
  { 159, 167, sizeof(OnlineNormParameter)},
  { 170, 179, sizeof(DilationParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameSequenceDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobVisualizeParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanViewParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanViewExtractorParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HorizontalViewParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HorizontalViewExtractorParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SideViewParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SideViewExtractorParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SegmentorParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameTargetParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ViewPoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ViewUnpoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointInterpolationParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnlineNormParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DilationParameter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "caffe_smartseg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void TableStruct::Shutdown() {
  _ConfigParameter_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FrameDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FrameSequenceDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BlobVisualizeParameter_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  BlobVisualizeParameter::_default_name_.Shutdown();
  _PlanViewParameter_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PlanViewExtractorParameter_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _HorizontalViewParameter_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _HorizontalViewExtractorParameter_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SideViewParameter_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SideViewExtractorParameter_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SegmentorParameter_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _FrameTargetParameter_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ViewPoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ViewUnpoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _PointInterpolationParameter_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _OnlineNormParameter_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _DilationParameter_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ConfigParameter_default_instance_.DefaultConstruct();
  _FrameDataParameter_default_instance_.DefaultConstruct();
  _FrameSequenceDataParameter_default_instance_.DefaultConstruct();
  BlobVisualizeParameter::_default_name_.DefaultConstruct();
  *BlobVisualizeParameter::_default_name_.get_mutable() = ::std::string("visualize", 9);
  _BlobVisualizeParameter_default_instance_.DefaultConstruct();
  _PlanViewParameter_default_instance_.DefaultConstruct();
  _PlanViewExtractorParameter_default_instance_.DefaultConstruct();
  _HorizontalViewParameter_default_instance_.DefaultConstruct();
  _HorizontalViewExtractorParameter_default_instance_.DefaultConstruct();
  _SideViewParameter_default_instance_.DefaultConstruct();
  _SideViewExtractorParameter_default_instance_.DefaultConstruct();
  _SegmentorParameter_default_instance_.DefaultConstruct();
  _FrameTargetParameter_default_instance_.DefaultConstruct();
  _ViewPoolingParameter_default_instance_.DefaultConstruct();
  _ViewUnpoolingParameter_default_instance_.DefaultConstruct();
  _PointInterpolationParameter_default_instance_.DefaultConstruct();
  _OnlineNormParameter_default_instance_.DefaultConstruct();
  _DilationParameter_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024caffe_smartseg.proto\022\010smartseg\"\\\n\017Conf"
      "igParameter\022\032\n\nmax_points\030\001 \001(\005:\006250000\022"
      "\022\n\nclass_name\030\002 \003(\t\022\031\n\021class_orientation"
      "\030\003 \003(\010\"\200\001\n\022FrameDataParameter\022\016\n\006source\030"
      "\001 \002(\t\022\020\n\010pcd_path\030\002 \002(\t\022\022\n\nlabel_path\030\003 "
      "\002(\t\022\026\n\013buffer_size\030\004 \001(\005:\0015\022\034\n\021perturbat"
      "ion_rate\030\005 \001(\002:\0010\"\304\001\n\032FrameSequenceDataP"
      "arameter\022\016\n\006source\030\001 \002(\t\022\020\n\010pcd_path\030\002 \002"
      "(\t\022\022\n\nlabel_path\030\003 \002(\t\022\025\n\rsequence_path\030"
      "\004 \002(\t\022\022\n\nnum_frames\030\005 \002(\005\022\017\n\004step\030\006 \001(\005:"
      "\0011\022\026\n\013buffer_size\030\007 \001(\005:\0015\022\034\n\021perturbati"
      "on_rate\030\010 \001(\002:\0010\"\216\001\n\026BlobVisualizeParame"
      "ter\022\027\n\004name\030\001 \002(\t:\tvisualize\022\026\n\013lower_bo"
      "und\030\002 \001(\002:\0010\022\026\n\013upper_bound\030\003 \001(\002:\0011\022\027\n\014"
      "ignore_value\030\004 \001(\002:\0010\022\022\n\007channel\030\005 \001(\005:\001"
      "0\"2\n\021PlanViewParameter\022\r\n\005range\030\001 \002(\002\022\016\n"
      "\006splits\030\002 \002(\005\"\\\n\032PlanViewExtractorParame"
      "ter\022\024\n\014filter_min_z\030\001 \002(\002\022\024\n\014filter_max_"
      "z\030\002 \002(\002\022\022\n\007shift_z\030\003 \001(\002:\0010\"_\n\027Horizonta"
      "lViewParameter\022\023\n\013lower_pitch\030\001 \002(\002\022\023\n\013u"
      "pper_pitch\030\002 \002(\002\022\014\n\004rows\030\003 \002(\005\022\014\n\004cols\030\004"
      " \002(\005\"\"\n HorizontalViewExtractorParameter"
      "\"@\n\021SideViewParameter\022\r\n\005range\030\001 \002(\002\022\016\n\006"
      "splits\030\002 \002(\005\022\014\n\004side\030\003 \002(\005\"\034\n\032SideViewEx"
      "tractorParameter\"\221\001\n\022SegmentorParameter\022"
      "\034\n\rtraining_mode\030\001 \001(\010:\005false\022#\n\024merge_d"
      "iagonal_grids\030\002 \001(\010:\005false\022\034\n\rfind_best_"
      "cut\030\003 \001(\010:\005false\022\032\n\016topz_threshold\030\004 \001(\002"
      ":\002-1\"\263\001\n\024FrameTargetParameter\022\027\n\014startup"
      "_iter\030\001 \001(\005:\0010\022\032\n\017max_center_norm\030\002 \001(\002:"
      "\0010\022&\n\027equal_objectness_weight\030\003 \001(\010:\005fal"
      "se\022\033\n\014point_center\030\004 \001(\010:\005false\022!\n\022sampl"
      "e_grid_center\030\005 \001(\010:\005false\"\026\n\024ViewPoolin"
      "gParameter\"\030\n\026ViewUnpoolingParameter\"\035\n\033"
      "PointInterpolationParameter\"`\n\023OnlineNor"
      "mParameter\022\r\n\005iters\030\001 \002(\002\022&\n\027moving_aver"
      "age_fraction\030\002 \001(\002:\0050.999\022\022\n\003eps\030\003 \001(\002:\005"
      "1e-05\"\252\001\n\021DilationParameter\0222\n\006method\030\001 "
      "\002(\0162\".smartseg.DilationParameter.Method\022"
      "\030\n\020nonempty_channel\030\002 \002(\005\022\027\n\017feature_cha"
      "nnel\030\003 \002(\005\022\r\n\005steps\030\004 \002(\005\"\037\n\006Method\022\013\n\007C"
      "LOSEST\020\000\022\010\n\004MEAN\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe_smartseg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_caffe_5fsmartseg_2eproto

const ::google::protobuf::EnumDescriptor* DilationParameter_Method_descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_enum_descriptors[0];
}
bool DilationParameter_Method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DilationParameter_Method DilationParameter::CLOSEST;
const DilationParameter_Method DilationParameter::MEAN;
const DilationParameter_Method DilationParameter::Method_MIN;
const DilationParameter_Method DilationParameter::Method_MAX;
const int DilationParameter::Method_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigParameter::kMaxPointsFieldNumber;
const int ConfigParameter::kClassNameFieldNumber;
const int ConfigParameter::kClassOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigParameter::ConfigParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.ConfigParameter)
}
ConfigParameter::ConfigParameter(const ConfigParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      class_name_(from.class_name_),
      class_orientation_(from.class_orientation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_points_ = from.max_points_;
  // @@protoc_insertion_point(copy_constructor:smartseg.ConfigParameter)
}

void ConfigParameter::SharedCtor() {
  _cached_size_ = 0;
  max_points_ = 250000;
}

ConfigParameter::~ConfigParameter() {
  // @@protoc_insertion_point(destructor:smartseg.ConfigParameter)
  SharedDtor();
}

void ConfigParameter::SharedDtor() {
}

void ConfigParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigParameter& ConfigParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigParameter* ConfigParameter::New(::google::protobuf::Arena* arena) const {
  ConfigParameter* n = new ConfigParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.ConfigParameter)
  class_name_.Clear();
  class_orientation_.Clear();
  max_points_ = 250000;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.ConfigParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_points = 1 [default = 250000];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string class_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name(this->class_name_size() - 1).data(),
            this->class_name(this->class_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.ConfigParameter.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool class_orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24u, input, this->mutable_class_orientation())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_class_orientation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.ConfigParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.ConfigParameter)
  return false;
#undef DO_
}

void ConfigParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.ConfigParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_points = 1 [default = 250000];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_points(), output);
  }

  // repeated string class_name = 2;
  for (int i = 0, n = this->class_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name(i).data(), this->class_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.ConfigParameter.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_name(i), output);
  }

  // repeated bool class_orientation = 3;
  for (int i = 0, n = this->class_orientation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->class_orientation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.ConfigParameter)
}

::google::protobuf::uint8* ConfigParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.ConfigParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_points = 1 [default = 250000];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_points(), target);
  }

  // repeated string class_name = 2;
  for (int i = 0, n = this->class_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name(i).data(), this->class_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.ConfigParameter.class_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_name(i), target);
  }

  // repeated bool class_orientation = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(3, this->class_orientation_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.ConfigParameter)
  return target;
}

size_t ConfigParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.ConfigParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string class_name = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->class_name_size());
  for (int i = 0, n = this->class_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_name(i));
  }

  // repeated bool class_orientation = 3;
  {
    unsigned int count = this->class_orientation_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->class_orientation_size());
    total_size += data_size;
  }

  // optional int32 max_points = 1 [default = 250000];
  if (has_max_points()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.ConfigParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.ConfigParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.ConfigParameter)
    MergeFrom(*source);
  }
}

void ConfigParameter::MergeFrom(const ConfigParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.ConfigParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_name_.MergeFrom(from.class_name_);
  class_orientation_.MergeFrom(from.class_orientation_);
  if (from.has_max_points()) {
    set_max_points(from.max_points());
  }
}

void ConfigParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.ConfigParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigParameter::CopyFrom(const ConfigParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.ConfigParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigParameter::IsInitialized() const {
  return true;
}

void ConfigParameter::Swap(ConfigParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigParameter::InternalSwap(ConfigParameter* other) {
  class_name_.InternalSwap(&other->class_name_);
  class_orientation_.InternalSwap(&other->class_orientation_);
  std::swap(max_points_, other->max_points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigParameter

// optional int32 max_points = 1 [default = 250000];
bool ConfigParameter::has_max_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigParameter::set_has_max_points() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigParameter::clear_has_max_points() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigParameter::clear_max_points() {
  max_points_ = 250000;
  clear_has_max_points();
}
::google::protobuf::int32 ConfigParameter::max_points() const {
  // @@protoc_insertion_point(field_get:smartseg.ConfigParameter.max_points)
  return max_points_;
}
void ConfigParameter::set_max_points(::google::protobuf::int32 value) {
  set_has_max_points();
  max_points_ = value;
  // @@protoc_insertion_point(field_set:smartseg.ConfigParameter.max_points)
}

// repeated string class_name = 2;
int ConfigParameter::class_name_size() const {
  return class_name_.size();
}
void ConfigParameter::clear_class_name() {
  class_name_.Clear();
}
const ::std::string& ConfigParameter::class_name(int index) const {
  // @@protoc_insertion_point(field_get:smartseg.ConfigParameter.class_name)
  return class_name_.Get(index);
}
::std::string* ConfigParameter::mutable_class_name(int index) {
  // @@protoc_insertion_point(field_mutable:smartseg.ConfigParameter.class_name)
  return class_name_.Mutable(index);
}
void ConfigParameter::set_class_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:smartseg.ConfigParameter.class_name)
  class_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ConfigParameter::set_class_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:smartseg.ConfigParameter.class_name)
  class_name_.Mutable(index)->assign(std::move(value));
}
#endif
void ConfigParameter::set_class_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:smartseg.ConfigParameter.class_name)
}
void ConfigParameter::set_class_name(int index, const char* value, size_t size) {
  class_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:smartseg.ConfigParameter.class_name)
}
::std::string* ConfigParameter::add_class_name() {
  // @@protoc_insertion_point(field_add_mutable:smartseg.ConfigParameter.class_name)
  return class_name_.Add();
}
void ConfigParameter::add_class_name(const ::std::string& value) {
  class_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:smartseg.ConfigParameter.class_name)
}
#if LANG_CXX11
void ConfigParameter::add_class_name(::std::string&& value) {
  class_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:smartseg.ConfigParameter.class_name)
}
#endif
void ConfigParameter::add_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:smartseg.ConfigParameter.class_name)
}
void ConfigParameter::add_class_name(const char* value, size_t size) {
  class_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:smartseg.ConfigParameter.class_name)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConfigParameter::class_name() const {
  // @@protoc_insertion_point(field_list:smartseg.ConfigParameter.class_name)
  return class_name_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ConfigParameter::mutable_class_name() {
  // @@protoc_insertion_point(field_mutable_list:smartseg.ConfigParameter.class_name)
  return &class_name_;
}

// repeated bool class_orientation = 3;
int ConfigParameter::class_orientation_size() const {
  return class_orientation_.size();
}
void ConfigParameter::clear_class_orientation() {
  class_orientation_.Clear();
}
bool ConfigParameter::class_orientation(int index) const {
  // @@protoc_insertion_point(field_get:smartseg.ConfigParameter.class_orientation)
  return class_orientation_.Get(index);
}
void ConfigParameter::set_class_orientation(int index, bool value) {
  class_orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:smartseg.ConfigParameter.class_orientation)
}
void ConfigParameter::add_class_orientation(bool value) {
  class_orientation_.Add(value);
  // @@protoc_insertion_point(field_add:smartseg.ConfigParameter.class_orientation)
}
const ::google::protobuf::RepeatedField< bool >&
ConfigParameter::class_orientation() const {
  // @@protoc_insertion_point(field_list:smartseg.ConfigParameter.class_orientation)
  return class_orientation_;
}
::google::protobuf::RepeatedField< bool >*
ConfigParameter::mutable_class_orientation() {
  // @@protoc_insertion_point(field_mutable_list:smartseg.ConfigParameter.class_orientation)
  return &class_orientation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameDataParameter::kSourceFieldNumber;
const int FrameDataParameter::kPcdPathFieldNumber;
const int FrameDataParameter::kLabelPathFieldNumber;
const int FrameDataParameter::kBufferSizeFieldNumber;
const int FrameDataParameter::kPerturbationRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameDataParameter::FrameDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.FrameDataParameter)
}
FrameDataParameter::FrameDataParameter(const FrameDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  pcd_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcd_path()) {
    pcd_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcd_path_);
  }
  label_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_path()) {
    label_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_path_);
  }
  ::memcpy(&perturbation_rate_, &from.perturbation_rate_,
    reinterpret_cast<char*>(&buffer_size_) -
    reinterpret_cast<char*>(&perturbation_rate_) + sizeof(buffer_size_));
  // @@protoc_insertion_point(copy_constructor:smartseg.FrameDataParameter)
}

void FrameDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcd_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perturbation_rate_ = 0;
  buffer_size_ = 5;
}

FrameDataParameter::~FrameDataParameter() {
  // @@protoc_insertion_point(destructor:smartseg.FrameDataParameter)
  SharedDtor();
}

void FrameDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcd_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameDataParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameDataParameter& FrameDataParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameDataParameter* FrameDataParameter::New(::google::protobuf::Arena* arena) const {
  FrameDataParameter* n = new FrameDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.FrameDataParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_pcd_path()) {
      GOOGLE_DCHECK(!pcd_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcd_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_label_path()) {
      GOOGLE_DCHECK(!label_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    perturbation_rate_ = 0;
    buffer_size_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.FrameDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pcd_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcd_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcd_path().data(), this->pcd_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameDataParameter.pcd_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string label_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_path().data(), this->label_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameDataParameter.label_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buffer_size = 4 [default = 5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float perturbation_rate = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_perturbation_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &perturbation_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.FrameDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.FrameDataParameter)
  return false;
#undef DO_
}

void FrameDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.FrameDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required string pcd_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_path().data(), this->pcd_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameDataParameter.pcd_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pcd_path(), output);
  }

  // required string label_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_path().data(), this->label_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameDataParameter.label_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label_path(), output);
  }

  // optional int32 buffer_size = 4 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buffer_size(), output);
  }

  // optional float perturbation_rate = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->perturbation_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.FrameDataParameter)
}

::google::protobuf::uint8* FrameDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.FrameDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required string pcd_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_path().data(), this->pcd_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameDataParameter.pcd_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pcd_path(), target);
  }

  // required string label_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_path().data(), this->label_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameDataParameter.label_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label_path(), target);
  }

  // optional int32 buffer_size = 4 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buffer_size(), target);
  }

  // optional float perturbation_rate = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->perturbation_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.FrameDataParameter)
  return target;
}

size_t FrameDataParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.FrameDataParameter)
  size_t total_size = 0;

  if (has_source()) {
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_pcd_path()) {
    // required string pcd_path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pcd_path());
  }

  if (has_label_path()) {
    // required string label_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_path());
  }

  return total_size;
}
size_t FrameDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.FrameDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required string pcd_path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pcd_path());

    // required string label_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional float perturbation_rate = 5 [default = 0];
    if (has_perturbation_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 buffer_size = 4 [default = 5];
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffer_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.FrameDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.FrameDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.FrameDataParameter)
    MergeFrom(*source);
  }
}

void FrameDataParameter::MergeFrom(const FrameDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.FrameDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pcd_path();
      pcd_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcd_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_label_path();
      label_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      perturbation_rate_ = from.perturbation_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      buffer_size_ = from.buffer_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.FrameDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameDataParameter::CopyFrom(const FrameDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.FrameDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameDataParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void FrameDataParameter::Swap(FrameDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameDataParameter::InternalSwap(FrameDataParameter* other) {
  source_.Swap(&other->source_);
  pcd_path_.Swap(&other->pcd_path_);
  label_path_.Swap(&other->label_path_);
  std::swap(perturbation_rate_, other->perturbation_rate_);
  std::swap(buffer_size_, other->buffer_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameDataParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameDataParameter

// required string source = 1;
bool FrameDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& FrameDataParameter::source() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameDataParameter.source)
  return source_.GetNoArena();
}
void FrameDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameDataParameter.source)
}
#if LANG_CXX11
void FrameDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameDataParameter.source)
}
#endif
void FrameDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameDataParameter.source)
}
void FrameDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameDataParameter.source)
}
::std::string* FrameDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:smartseg.FrameDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameDataParameter.source)
}

// required string pcd_path = 2;
bool FrameDataParameter::has_pcd_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameDataParameter::set_has_pcd_path() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameDataParameter::clear_has_pcd_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameDataParameter::clear_pcd_path() {
  pcd_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcd_path();
}
const ::std::string& FrameDataParameter::pcd_path() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameDataParameter.pcd_path)
  return pcd_path_.GetNoArena();
}
void FrameDataParameter::set_pcd_path(const ::std::string& value) {
  set_has_pcd_path();
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameDataParameter.pcd_path)
}
#if LANG_CXX11
void FrameDataParameter::set_pcd_path(::std::string&& value) {
  set_has_pcd_path();
  pcd_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameDataParameter.pcd_path)
}
#endif
void FrameDataParameter::set_pcd_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcd_path();
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameDataParameter.pcd_path)
}
void FrameDataParameter::set_pcd_path(const char* value, size_t size) {
  set_has_pcd_path();
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameDataParameter.pcd_path)
}
::std::string* FrameDataParameter::mutable_pcd_path() {
  set_has_pcd_path();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameDataParameter.pcd_path)
  return pcd_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameDataParameter::release_pcd_path() {
  // @@protoc_insertion_point(field_release:smartseg.FrameDataParameter.pcd_path)
  clear_has_pcd_path();
  return pcd_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameDataParameter::set_allocated_pcd_path(::std::string* pcd_path) {
  if (pcd_path != NULL) {
    set_has_pcd_path();
  } else {
    clear_has_pcd_path();
  }
  pcd_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcd_path);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameDataParameter.pcd_path)
}

// required string label_path = 3;
bool FrameDataParameter::has_label_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameDataParameter::set_has_label_path() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameDataParameter::clear_has_label_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameDataParameter::clear_label_path() {
  label_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_path();
}
const ::std::string& FrameDataParameter::label_path() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameDataParameter.label_path)
  return label_path_.GetNoArena();
}
void FrameDataParameter::set_label_path(const ::std::string& value) {
  set_has_label_path();
  label_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameDataParameter.label_path)
}
#if LANG_CXX11
void FrameDataParameter::set_label_path(::std::string&& value) {
  set_has_label_path();
  label_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameDataParameter.label_path)
}
#endif
void FrameDataParameter::set_label_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_path();
  label_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameDataParameter.label_path)
}
void FrameDataParameter::set_label_path(const char* value, size_t size) {
  set_has_label_path();
  label_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameDataParameter.label_path)
}
::std::string* FrameDataParameter::mutable_label_path() {
  set_has_label_path();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameDataParameter.label_path)
  return label_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameDataParameter::release_label_path() {
  // @@protoc_insertion_point(field_release:smartseg.FrameDataParameter.label_path)
  clear_has_label_path();
  return label_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameDataParameter::set_allocated_label_path(::std::string* label_path) {
  if (label_path != NULL) {
    set_has_label_path();
  } else {
    clear_has_label_path();
  }
  label_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_path);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameDataParameter.label_path)
}

// optional int32 buffer_size = 4 [default = 5];
bool FrameDataParameter::has_buffer_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FrameDataParameter::set_has_buffer_size() {
  _has_bits_[0] |= 0x00000010u;
}
void FrameDataParameter::clear_has_buffer_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void FrameDataParameter::clear_buffer_size() {
  buffer_size_ = 5;
  clear_has_buffer_size();
}
::google::protobuf::int32 FrameDataParameter::buffer_size() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameDataParameter.buffer_size)
  return buffer_size_;
}
void FrameDataParameter::set_buffer_size(::google::protobuf::int32 value) {
  set_has_buffer_size();
  buffer_size_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameDataParameter.buffer_size)
}

// optional float perturbation_rate = 5 [default = 0];
bool FrameDataParameter::has_perturbation_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrameDataParameter::set_has_perturbation_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void FrameDataParameter::clear_has_perturbation_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrameDataParameter::clear_perturbation_rate() {
  perturbation_rate_ = 0;
  clear_has_perturbation_rate();
}
float FrameDataParameter::perturbation_rate() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameDataParameter.perturbation_rate)
  return perturbation_rate_;
}
void FrameDataParameter::set_perturbation_rate(float value) {
  set_has_perturbation_rate();
  perturbation_rate_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameDataParameter.perturbation_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameSequenceDataParameter::kSourceFieldNumber;
const int FrameSequenceDataParameter::kPcdPathFieldNumber;
const int FrameSequenceDataParameter::kLabelPathFieldNumber;
const int FrameSequenceDataParameter::kSequencePathFieldNumber;
const int FrameSequenceDataParameter::kNumFramesFieldNumber;
const int FrameSequenceDataParameter::kStepFieldNumber;
const int FrameSequenceDataParameter::kBufferSizeFieldNumber;
const int FrameSequenceDataParameter::kPerturbationRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameSequenceDataParameter::FrameSequenceDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.FrameSequenceDataParameter)
}
FrameSequenceDataParameter::FrameSequenceDataParameter(const FrameSequenceDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  pcd_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcd_path()) {
    pcd_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcd_path_);
  }
  label_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_path()) {
    label_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_path_);
  }
  sequence_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_path()) {
    sequence_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_path_);
  }
  ::memcpy(&num_frames_, &from.num_frames_,
    reinterpret_cast<char*>(&buffer_size_) -
    reinterpret_cast<char*>(&num_frames_) + sizeof(buffer_size_));
  // @@protoc_insertion_point(copy_constructor:smartseg.FrameSequenceDataParameter)
}

void FrameSequenceDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcd_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_frames_, 0, reinterpret_cast<char*>(&perturbation_rate_) -
    reinterpret_cast<char*>(&num_frames_) + sizeof(perturbation_rate_));
  step_ = 1;
  buffer_size_ = 5;
}

FrameSequenceDataParameter::~FrameSequenceDataParameter() {
  // @@protoc_insertion_point(destructor:smartseg.FrameSequenceDataParameter)
  SharedDtor();
}

void FrameSequenceDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcd_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameSequenceDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameSequenceDataParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameSequenceDataParameter& FrameSequenceDataParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameSequenceDataParameter* FrameSequenceDataParameter::New(::google::protobuf::Arena* arena) const {
  FrameSequenceDataParameter* n = new FrameSequenceDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameSequenceDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.FrameSequenceDataParameter)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_pcd_path()) {
      GOOGLE_DCHECK(!pcd_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcd_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_label_path()) {
      GOOGLE_DCHECK(!label_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_sequence_path()) {
      GOOGLE_DCHECK(!sequence_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sequence_path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&num_frames_, 0, reinterpret_cast<char*>(&perturbation_rate_) -
      reinterpret_cast<char*>(&num_frames_) + sizeof(perturbation_rate_));
    step_ = 1;
    buffer_size_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameSequenceDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.FrameSequenceDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameSequenceDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pcd_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcd_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcd_path().data(), this->pcd_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameSequenceDataParameter.pcd_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string label_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_path().data(), this->label_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameSequenceDataParameter.label_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sequence_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_path().data(), this->sequence_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.FrameSequenceDataParameter.sequence_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_frames = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 step = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buffer_size = 7 [default = 5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float perturbation_rate = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_perturbation_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &perturbation_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.FrameSequenceDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.FrameSequenceDataParameter)
  return false;
#undef DO_
}

void FrameSequenceDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.FrameSequenceDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required string pcd_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_path().data(), this->pcd_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.pcd_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pcd_path(), output);
  }

  // required string label_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_path().data(), this->label_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.label_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label_path(), output);
  }

  // required string sequence_path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_path().data(), this->sequence_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.sequence_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sequence_path(), output);
  }

  // required int32 num_frames = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_frames(), output);
  }

  // optional int32 step = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->step(), output);
  }

  // optional int32 buffer_size = 7 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buffer_size(), output);
  }

  // optional float perturbation_rate = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->perturbation_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.FrameSequenceDataParameter)
}

::google::protobuf::uint8* FrameSequenceDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.FrameSequenceDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required string pcd_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_path().data(), this->pcd_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.pcd_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pcd_path(), target);
  }

  // required string label_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_path().data(), this->label_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.label_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label_path(), target);
  }

  // required string sequence_path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_path().data(), this->sequence_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.FrameSequenceDataParameter.sequence_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sequence_path(), target);
  }

  // required int32 num_frames = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_frames(), target);
  }

  // optional int32 step = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->step(), target);
  }

  // optional int32 buffer_size = 7 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buffer_size(), target);
  }

  // optional float perturbation_rate = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->perturbation_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.FrameSequenceDataParameter)
  return target;
}

size_t FrameSequenceDataParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.FrameSequenceDataParameter)
  size_t total_size = 0;

  if (has_source()) {
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_pcd_path()) {
    // required string pcd_path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pcd_path());
  }

  if (has_label_path()) {
    // required string label_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_path());
  }

  if (has_sequence_path()) {
    // required string sequence_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence_path());
  }

  if (has_num_frames()) {
    // required int32 num_frames = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_frames());
  }

  return total_size;
}
size_t FrameSequenceDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.FrameSequenceDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required string pcd_path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pcd_path());

    // required string label_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_path());

    // required string sequence_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence_path());

    // required int32 num_frames = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_frames());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional float perturbation_rate = 8 [default = 0];
    if (has_perturbation_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 step = 6 [default = 1];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional int32 buffer_size = 7 [default = 5];
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffer_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameSequenceDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.FrameSequenceDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameSequenceDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameSequenceDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.FrameSequenceDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.FrameSequenceDataParameter)
    MergeFrom(*source);
  }
}

void FrameSequenceDataParameter::MergeFrom(const FrameSequenceDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.FrameSequenceDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pcd_path();
      pcd_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcd_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_label_path();
      label_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sequence_path();
      sequence_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_path_);
    }
    if (cached_has_bits & 0x00000010u) {
      num_frames_ = from.num_frames_;
    }
    if (cached_has_bits & 0x00000020u) {
      perturbation_rate_ = from.perturbation_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000080u) {
      buffer_size_ = from.buffer_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameSequenceDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.FrameSequenceDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameSequenceDataParameter::CopyFrom(const FrameSequenceDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.FrameSequenceDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSequenceDataParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void FrameSequenceDataParameter::Swap(FrameSequenceDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameSequenceDataParameter::InternalSwap(FrameSequenceDataParameter* other) {
  source_.Swap(&other->source_);
  pcd_path_.Swap(&other->pcd_path_);
  label_path_.Swap(&other->label_path_);
  sequence_path_.Swap(&other->sequence_path_);
  std::swap(num_frames_, other->num_frames_);
  std::swap(perturbation_rate_, other->perturbation_rate_);
  std::swap(step_, other->step_);
  std::swap(buffer_size_, other->buffer_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameSequenceDataParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameSequenceDataParameter

// required string source = 1;
bool FrameSequenceDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameSequenceDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameSequenceDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameSequenceDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& FrameSequenceDataParameter::source() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.source)
  return source_.GetNoArena();
}
void FrameSequenceDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.source)
}
#if LANG_CXX11
void FrameSequenceDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameSequenceDataParameter.source)
}
#endif
void FrameSequenceDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameSequenceDataParameter.source)
}
void FrameSequenceDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameSequenceDataParameter.source)
}
::std::string* FrameSequenceDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameSequenceDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameSequenceDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:smartseg.FrameSequenceDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameSequenceDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameSequenceDataParameter.source)
}

// required string pcd_path = 2;
bool FrameSequenceDataParameter::has_pcd_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameSequenceDataParameter::set_has_pcd_path() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameSequenceDataParameter::clear_has_pcd_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameSequenceDataParameter::clear_pcd_path() {
  pcd_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcd_path();
}
const ::std::string& FrameSequenceDataParameter::pcd_path() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.pcd_path)
  return pcd_path_.GetNoArena();
}
void FrameSequenceDataParameter::set_pcd_path(const ::std::string& value) {
  set_has_pcd_path();
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.pcd_path)
}
#if LANG_CXX11
void FrameSequenceDataParameter::set_pcd_path(::std::string&& value) {
  set_has_pcd_path();
  pcd_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameSequenceDataParameter.pcd_path)
}
#endif
void FrameSequenceDataParameter::set_pcd_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcd_path();
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameSequenceDataParameter.pcd_path)
}
void FrameSequenceDataParameter::set_pcd_path(const char* value, size_t size) {
  set_has_pcd_path();
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameSequenceDataParameter.pcd_path)
}
::std::string* FrameSequenceDataParameter::mutable_pcd_path() {
  set_has_pcd_path();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameSequenceDataParameter.pcd_path)
  return pcd_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameSequenceDataParameter::release_pcd_path() {
  // @@protoc_insertion_point(field_release:smartseg.FrameSequenceDataParameter.pcd_path)
  clear_has_pcd_path();
  return pcd_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameSequenceDataParameter::set_allocated_pcd_path(::std::string* pcd_path) {
  if (pcd_path != NULL) {
    set_has_pcd_path();
  } else {
    clear_has_pcd_path();
  }
  pcd_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcd_path);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameSequenceDataParameter.pcd_path)
}

// required string label_path = 3;
bool FrameSequenceDataParameter::has_label_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameSequenceDataParameter::set_has_label_path() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameSequenceDataParameter::clear_has_label_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameSequenceDataParameter::clear_label_path() {
  label_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_path();
}
const ::std::string& FrameSequenceDataParameter::label_path() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.label_path)
  return label_path_.GetNoArena();
}
void FrameSequenceDataParameter::set_label_path(const ::std::string& value) {
  set_has_label_path();
  label_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.label_path)
}
#if LANG_CXX11
void FrameSequenceDataParameter::set_label_path(::std::string&& value) {
  set_has_label_path();
  label_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameSequenceDataParameter.label_path)
}
#endif
void FrameSequenceDataParameter::set_label_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_path();
  label_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameSequenceDataParameter.label_path)
}
void FrameSequenceDataParameter::set_label_path(const char* value, size_t size) {
  set_has_label_path();
  label_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameSequenceDataParameter.label_path)
}
::std::string* FrameSequenceDataParameter::mutable_label_path() {
  set_has_label_path();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameSequenceDataParameter.label_path)
  return label_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameSequenceDataParameter::release_label_path() {
  // @@protoc_insertion_point(field_release:smartseg.FrameSequenceDataParameter.label_path)
  clear_has_label_path();
  return label_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameSequenceDataParameter::set_allocated_label_path(::std::string* label_path) {
  if (label_path != NULL) {
    set_has_label_path();
  } else {
    clear_has_label_path();
  }
  label_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_path);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameSequenceDataParameter.label_path)
}

// required string sequence_path = 4;
bool FrameSequenceDataParameter::has_sequence_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrameSequenceDataParameter::set_has_sequence_path() {
  _has_bits_[0] |= 0x00000008u;
}
void FrameSequenceDataParameter::clear_has_sequence_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrameSequenceDataParameter::clear_sequence_path() {
  sequence_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_path();
}
const ::std::string& FrameSequenceDataParameter::sequence_path() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.sequence_path)
  return sequence_path_.GetNoArena();
}
void FrameSequenceDataParameter::set_sequence_path(const ::std::string& value) {
  set_has_sequence_path();
  sequence_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.sequence_path)
}
#if LANG_CXX11
void FrameSequenceDataParameter::set_sequence_path(::std::string&& value) {
  set_has_sequence_path();
  sequence_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.FrameSequenceDataParameter.sequence_path)
}
#endif
void FrameSequenceDataParameter::set_sequence_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_path();
  sequence_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.FrameSequenceDataParameter.sequence_path)
}
void FrameSequenceDataParameter::set_sequence_path(const char* value, size_t size) {
  set_has_sequence_path();
  sequence_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.FrameSequenceDataParameter.sequence_path)
}
::std::string* FrameSequenceDataParameter::mutable_sequence_path() {
  set_has_sequence_path();
  // @@protoc_insertion_point(field_mutable:smartseg.FrameSequenceDataParameter.sequence_path)
  return sequence_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameSequenceDataParameter::release_sequence_path() {
  // @@protoc_insertion_point(field_release:smartseg.FrameSequenceDataParameter.sequence_path)
  clear_has_sequence_path();
  return sequence_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameSequenceDataParameter::set_allocated_sequence_path(::std::string* sequence_path) {
  if (sequence_path != NULL) {
    set_has_sequence_path();
  } else {
    clear_has_sequence_path();
  }
  sequence_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_path);
  // @@protoc_insertion_point(field_set_allocated:smartseg.FrameSequenceDataParameter.sequence_path)
}

// required int32 num_frames = 5;
bool FrameSequenceDataParameter::has_num_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FrameSequenceDataParameter::set_has_num_frames() {
  _has_bits_[0] |= 0x00000010u;
}
void FrameSequenceDataParameter::clear_has_num_frames() {
  _has_bits_[0] &= ~0x00000010u;
}
void FrameSequenceDataParameter::clear_num_frames() {
  num_frames_ = 0;
  clear_has_num_frames();
}
::google::protobuf::int32 FrameSequenceDataParameter::num_frames() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.num_frames)
  return num_frames_;
}
void FrameSequenceDataParameter::set_num_frames(::google::protobuf::int32 value) {
  set_has_num_frames();
  num_frames_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.num_frames)
}

// optional int32 step = 6 [default = 1];
bool FrameSequenceDataParameter::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FrameSequenceDataParameter::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
void FrameSequenceDataParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
void FrameSequenceDataParameter::clear_step() {
  step_ = 1;
  clear_has_step();
}
::google::protobuf::int32 FrameSequenceDataParameter::step() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.step)
  return step_;
}
void FrameSequenceDataParameter::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.step)
}

// optional int32 buffer_size = 7 [default = 5];
bool FrameSequenceDataParameter::has_buffer_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FrameSequenceDataParameter::set_has_buffer_size() {
  _has_bits_[0] |= 0x00000080u;
}
void FrameSequenceDataParameter::clear_has_buffer_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void FrameSequenceDataParameter::clear_buffer_size() {
  buffer_size_ = 5;
  clear_has_buffer_size();
}
::google::protobuf::int32 FrameSequenceDataParameter::buffer_size() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.buffer_size)
  return buffer_size_;
}
void FrameSequenceDataParameter::set_buffer_size(::google::protobuf::int32 value) {
  set_has_buffer_size();
  buffer_size_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.buffer_size)
}

// optional float perturbation_rate = 8 [default = 0];
bool FrameSequenceDataParameter::has_perturbation_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FrameSequenceDataParameter::set_has_perturbation_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void FrameSequenceDataParameter::clear_has_perturbation_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void FrameSequenceDataParameter::clear_perturbation_rate() {
  perturbation_rate_ = 0;
  clear_has_perturbation_rate();
}
float FrameSequenceDataParameter::perturbation_rate() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameSequenceDataParameter.perturbation_rate)
  return perturbation_rate_;
}
void FrameSequenceDataParameter::set_perturbation_rate(float value) {
  set_has_perturbation_rate();
  perturbation_rate_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameSequenceDataParameter.perturbation_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> BlobVisualizeParameter::_default_name_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobVisualizeParameter::kNameFieldNumber;
const int BlobVisualizeParameter::kLowerBoundFieldNumber;
const int BlobVisualizeParameter::kUpperBoundFieldNumber;
const int BlobVisualizeParameter::kIgnoreValueFieldNumber;
const int BlobVisualizeParameter::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobVisualizeParameter::BlobVisualizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.BlobVisualizeParameter)
}
BlobVisualizeParameter::BlobVisualizeParameter(const BlobVisualizeParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&BlobVisualizeParameter::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&BlobVisualizeParameter::_default_name_.get(), from.name_);
  }
  ::memcpy(&lower_bound_, &from.lower_bound_,
    reinterpret_cast<char*>(&upper_bound_) -
    reinterpret_cast<char*>(&lower_bound_) + sizeof(upper_bound_));
  // @@protoc_insertion_point(copy_constructor:smartseg.BlobVisualizeParameter)
}

void BlobVisualizeParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&BlobVisualizeParameter::_default_name_.get());
  ::memset(&lower_bound_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&lower_bound_) + sizeof(channel_));
  upper_bound_ = 1;
}

BlobVisualizeParameter::~BlobVisualizeParameter() {
  // @@protoc_insertion_point(destructor:smartseg.BlobVisualizeParameter)
  SharedDtor();
}

void BlobVisualizeParameter::SharedDtor() {
  name_.DestroyNoArena(&BlobVisualizeParameter::_default_name_.get());
}

void BlobVisualizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobVisualizeParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobVisualizeParameter& BlobVisualizeParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobVisualizeParameter* BlobVisualizeParameter::New(::google::protobuf::Arena* arena) const {
  BlobVisualizeParameter* n = new BlobVisualizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobVisualizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.BlobVisualizeParameter)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&BlobVisualizeParameter::_default_name_.get()));
    (*name_.UnsafeRawStringPointer())->assign(*&BlobVisualizeParameter::_default_name_.get());
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&lower_bound_, 0, reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&lower_bound_) + sizeof(channel_));
    upper_bound_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobVisualizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.BlobVisualizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "visualize"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smartseg.BlobVisualizeParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lower_bound = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_lower_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float upper_bound = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_upper_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ignore_value = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_ignore_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ignore_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channel = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.BlobVisualizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.BlobVisualizeParameter)
  return false;
#undef DO_
}

void BlobVisualizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.BlobVisualizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1 [default = "visualize"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.BlobVisualizeParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float lower_bound = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lower_bound(), output);
  }

  // optional float upper_bound = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->upper_bound(), output);
  }

  // optional float ignore_value = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ignore_value(), output);
  }

  // optional int32 channel = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.BlobVisualizeParameter)
}

::google::protobuf::uint8* BlobVisualizeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.BlobVisualizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1 [default = "visualize"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "smartseg.BlobVisualizeParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float lower_bound = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lower_bound(), target);
  }

  // optional float upper_bound = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->upper_bound(), target);
  }

  // optional float ignore_value = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ignore_value(), target);
  }

  // optional int32 channel = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.BlobVisualizeParameter)
  return target;
}

size_t BlobVisualizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.BlobVisualizeParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1 [default = "visualize"];
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional float lower_bound = 2 [default = 0];
    if (has_lower_bound()) {
      total_size += 1 + 4;
    }

    // optional float ignore_value = 4 [default = 0];
    if (has_ignore_value()) {
      total_size += 1 + 4;
    }

    // optional int32 channel = 5 [default = 0];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional float upper_bound = 3 [default = 1];
    if (has_upper_bound()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobVisualizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.BlobVisualizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobVisualizeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobVisualizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.BlobVisualizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.BlobVisualizeParameter)
    MergeFrom(*source);
  }
}

void BlobVisualizeParameter::MergeFrom(const BlobVisualizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.BlobVisualizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&BlobVisualizeParameter::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      lower_bound_ = from.lower_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_value_ = from.ignore_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000010u) {
      upper_bound_ = from.upper_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobVisualizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.BlobVisualizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobVisualizeParameter::CopyFrom(const BlobVisualizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.BlobVisualizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobVisualizeParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BlobVisualizeParameter::Swap(BlobVisualizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobVisualizeParameter::InternalSwap(BlobVisualizeParameter* other) {
  name_.Swap(&other->name_);
  std::swap(lower_bound_, other->lower_bound_);
  std::swap(ignore_value_, other->ignore_value_);
  std::swap(channel_, other->channel_);
  std::swap(upper_bound_, other->upper_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobVisualizeParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobVisualizeParameter

// required string name = 1 [default = "visualize"];
bool BlobVisualizeParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobVisualizeParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobVisualizeParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobVisualizeParameter::clear_name() {
  name_.ClearToDefaultNoArena(&BlobVisualizeParameter::_default_name_.get());
  clear_has_name();
}
const ::std::string& BlobVisualizeParameter::name() const {
  // @@protoc_insertion_point(field_get:smartseg.BlobVisualizeParameter.name)
  return name_.GetNoArena();
}
void BlobVisualizeParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&BlobVisualizeParameter::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:smartseg.BlobVisualizeParameter.name)
}
#if LANG_CXX11
void BlobVisualizeParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &BlobVisualizeParameter::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smartseg.BlobVisualizeParameter.name)
}
#endif
void BlobVisualizeParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&BlobVisualizeParameter::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smartseg.BlobVisualizeParameter.name)
}
void BlobVisualizeParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&BlobVisualizeParameter::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smartseg.BlobVisualizeParameter.name)
}
::std::string* BlobVisualizeParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:smartseg.BlobVisualizeParameter.name)
  return name_.MutableNoArena(&BlobVisualizeParameter::_default_name_.get());
}
::std::string* BlobVisualizeParameter::release_name() {
  // @@protoc_insertion_point(field_release:smartseg.BlobVisualizeParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&BlobVisualizeParameter::_default_name_.get());
}
void BlobVisualizeParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&BlobVisualizeParameter::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:smartseg.BlobVisualizeParameter.name)
}

// optional float lower_bound = 2 [default = 0];
bool BlobVisualizeParameter::has_lower_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobVisualizeParameter::set_has_lower_bound() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobVisualizeParameter::clear_has_lower_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobVisualizeParameter::clear_lower_bound() {
  lower_bound_ = 0;
  clear_has_lower_bound();
}
float BlobVisualizeParameter::lower_bound() const {
  // @@protoc_insertion_point(field_get:smartseg.BlobVisualizeParameter.lower_bound)
  return lower_bound_;
}
void BlobVisualizeParameter::set_lower_bound(float value) {
  set_has_lower_bound();
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:smartseg.BlobVisualizeParameter.lower_bound)
}

// optional float upper_bound = 3 [default = 1];
bool BlobVisualizeParameter::has_upper_bound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlobVisualizeParameter::set_has_upper_bound() {
  _has_bits_[0] |= 0x00000010u;
}
void BlobVisualizeParameter::clear_has_upper_bound() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlobVisualizeParameter::clear_upper_bound() {
  upper_bound_ = 1;
  clear_has_upper_bound();
}
float BlobVisualizeParameter::upper_bound() const {
  // @@protoc_insertion_point(field_get:smartseg.BlobVisualizeParameter.upper_bound)
  return upper_bound_;
}
void BlobVisualizeParameter::set_upper_bound(float value) {
  set_has_upper_bound();
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:smartseg.BlobVisualizeParameter.upper_bound)
}

// optional float ignore_value = 4 [default = 0];
bool BlobVisualizeParameter::has_ignore_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobVisualizeParameter::set_has_ignore_value() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobVisualizeParameter::clear_has_ignore_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobVisualizeParameter::clear_ignore_value() {
  ignore_value_ = 0;
  clear_has_ignore_value();
}
float BlobVisualizeParameter::ignore_value() const {
  // @@protoc_insertion_point(field_get:smartseg.BlobVisualizeParameter.ignore_value)
  return ignore_value_;
}
void BlobVisualizeParameter::set_ignore_value(float value) {
  set_has_ignore_value();
  ignore_value_ = value;
  // @@protoc_insertion_point(field_set:smartseg.BlobVisualizeParameter.ignore_value)
}

// optional int32 channel = 5 [default = 0];
bool BlobVisualizeParameter::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobVisualizeParameter::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobVisualizeParameter::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobVisualizeParameter::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
::google::protobuf::int32 BlobVisualizeParameter::channel() const {
  // @@protoc_insertion_point(field_get:smartseg.BlobVisualizeParameter.channel)
  return channel_;
}
void BlobVisualizeParameter::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:smartseg.BlobVisualizeParameter.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanViewParameter::kRangeFieldNumber;
const int PlanViewParameter::kSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanViewParameter::PlanViewParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.PlanViewParameter)
}
PlanViewParameter::PlanViewParameter(const PlanViewParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_, &from.range_,
    reinterpret_cast<char*>(&splits_) -
    reinterpret_cast<char*>(&range_) + sizeof(splits_));
  // @@protoc_insertion_point(copy_constructor:smartseg.PlanViewParameter)
}

void PlanViewParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&range_, 0, reinterpret_cast<char*>(&splits_) -
    reinterpret_cast<char*>(&range_) + sizeof(splits_));
}

PlanViewParameter::~PlanViewParameter() {
  // @@protoc_insertion_point(destructor:smartseg.PlanViewParameter)
  SharedDtor();
}

void PlanViewParameter::SharedDtor() {
}

void PlanViewParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanViewParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanViewParameter& PlanViewParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanViewParameter* PlanViewParameter::New(::google::protobuf::Arena* arena) const {
  PlanViewParameter* n = new PlanViewParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanViewParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.PlanViewParameter)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&range_, 0, reinterpret_cast<char*>(&splits_) -
      reinterpret_cast<char*>(&range_) + sizeof(splits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanViewParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.PlanViewParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 splits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_splits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.PlanViewParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.PlanViewParameter)
  return false;
#undef DO_
}

void PlanViewParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.PlanViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float range = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->range(), output);
  }

  // required int32 splits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->splits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.PlanViewParameter)
}

::google::protobuf::uint8* PlanViewParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.PlanViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->range(), target);
  }

  // required int32 splits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->splits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.PlanViewParameter)
  return target;
}

size_t PlanViewParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.PlanViewParameter)
  size_t total_size = 0;

  if (has_range()) {
    // required float range = 1;
    total_size += 1 + 4;
  }

  if (has_splits()) {
    // required int32 splits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->splits());
  }

  return total_size;
}
size_t PlanViewParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.PlanViewParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float range = 1;
    total_size += 1 + 4;

    // required int32 splits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->splits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanViewParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.PlanViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanViewParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanViewParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.PlanViewParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.PlanViewParameter)
    MergeFrom(*source);
  }
}

void PlanViewParameter::MergeFrom(const PlanViewParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.PlanViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000002u) {
      splits_ = from.splits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanViewParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.PlanViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanViewParameter::CopyFrom(const PlanViewParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.PlanViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanViewParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlanViewParameter::Swap(PlanViewParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanViewParameter::InternalSwap(PlanViewParameter* other) {
  std::swap(range_, other->range_);
  std::swap(splits_, other->splits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanViewParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanViewParameter

// required float range = 1;
bool PlanViewParameter::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanViewParameter::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanViewParameter::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanViewParameter::clear_range() {
  range_ = 0;
  clear_has_range();
}
float PlanViewParameter::range() const {
  // @@protoc_insertion_point(field_get:smartseg.PlanViewParameter.range)
  return range_;
}
void PlanViewParameter::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:smartseg.PlanViewParameter.range)
}

// required int32 splits = 2;
bool PlanViewParameter::has_splits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanViewParameter::set_has_splits() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanViewParameter::clear_has_splits() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanViewParameter::clear_splits() {
  splits_ = 0;
  clear_has_splits();
}
::google::protobuf::int32 PlanViewParameter::splits() const {
  // @@protoc_insertion_point(field_get:smartseg.PlanViewParameter.splits)
  return splits_;
}
void PlanViewParameter::set_splits(::google::protobuf::int32 value) {
  set_has_splits();
  splits_ = value;
  // @@protoc_insertion_point(field_set:smartseg.PlanViewParameter.splits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanViewExtractorParameter::kFilterMinZFieldNumber;
const int PlanViewExtractorParameter::kFilterMaxZFieldNumber;
const int PlanViewExtractorParameter::kShiftZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanViewExtractorParameter::PlanViewExtractorParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.PlanViewExtractorParameter)
}
PlanViewExtractorParameter::PlanViewExtractorParameter(const PlanViewExtractorParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&filter_min_z_, &from.filter_min_z_,
    reinterpret_cast<char*>(&shift_z_) -
    reinterpret_cast<char*>(&filter_min_z_) + sizeof(shift_z_));
  // @@protoc_insertion_point(copy_constructor:smartseg.PlanViewExtractorParameter)
}

void PlanViewExtractorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filter_min_z_, 0, reinterpret_cast<char*>(&shift_z_) -
    reinterpret_cast<char*>(&filter_min_z_) + sizeof(shift_z_));
}

PlanViewExtractorParameter::~PlanViewExtractorParameter() {
  // @@protoc_insertion_point(destructor:smartseg.PlanViewExtractorParameter)
  SharedDtor();
}

void PlanViewExtractorParameter::SharedDtor() {
}

void PlanViewExtractorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanViewExtractorParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanViewExtractorParameter& PlanViewExtractorParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanViewExtractorParameter* PlanViewExtractorParameter::New(::google::protobuf::Arena* arena) const {
  PlanViewExtractorParameter* n = new PlanViewExtractorParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanViewExtractorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.PlanViewExtractorParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&filter_min_z_, 0, reinterpret_cast<char*>(&shift_z_) -
      reinterpret_cast<char*>(&filter_min_z_) + sizeof(shift_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanViewExtractorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.PlanViewExtractorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float filter_min_z = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_filter_min_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &filter_min_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float filter_max_z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_filter_max_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &filter_max_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift_z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_shift_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.PlanViewExtractorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.PlanViewExtractorParameter)
  return false;
#undef DO_
}

void PlanViewExtractorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.PlanViewExtractorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float filter_min_z = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->filter_min_z(), output);
  }

  // required float filter_max_z = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->filter_max_z(), output);
  }

  // optional float shift_z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.PlanViewExtractorParameter)
}

::google::protobuf::uint8* PlanViewExtractorParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.PlanViewExtractorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float filter_min_z = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->filter_min_z(), target);
  }

  // required float filter_max_z = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->filter_max_z(), target);
  }

  // optional float shift_z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.PlanViewExtractorParameter)
  return target;
}

size_t PlanViewExtractorParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.PlanViewExtractorParameter)
  size_t total_size = 0;

  if (has_filter_min_z()) {
    // required float filter_min_z = 1;
    total_size += 1 + 4;
  }

  if (has_filter_max_z()) {
    // required float filter_max_z = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PlanViewExtractorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.PlanViewExtractorParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float filter_min_z = 1;
    total_size += 1 + 4;

    // required float filter_max_z = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float shift_z = 3 [default = 0];
  if (has_shift_z()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanViewExtractorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.PlanViewExtractorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanViewExtractorParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanViewExtractorParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.PlanViewExtractorParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.PlanViewExtractorParameter)
    MergeFrom(*source);
  }
}

void PlanViewExtractorParameter::MergeFrom(const PlanViewExtractorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.PlanViewExtractorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      filter_min_z_ = from.filter_min_z_;
    }
    if (cached_has_bits & 0x00000002u) {
      filter_max_z_ = from.filter_max_z_;
    }
    if (cached_has_bits & 0x00000004u) {
      shift_z_ = from.shift_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanViewExtractorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.PlanViewExtractorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanViewExtractorParameter::CopyFrom(const PlanViewExtractorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.PlanViewExtractorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanViewExtractorParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlanViewExtractorParameter::Swap(PlanViewExtractorParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanViewExtractorParameter::InternalSwap(PlanViewExtractorParameter* other) {
  std::swap(filter_min_z_, other->filter_min_z_);
  std::swap(filter_max_z_, other->filter_max_z_);
  std::swap(shift_z_, other->shift_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanViewExtractorParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanViewExtractorParameter

// required float filter_min_z = 1;
bool PlanViewExtractorParameter::has_filter_min_z() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanViewExtractorParameter::set_has_filter_min_z() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanViewExtractorParameter::clear_has_filter_min_z() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanViewExtractorParameter::clear_filter_min_z() {
  filter_min_z_ = 0;
  clear_has_filter_min_z();
}
float PlanViewExtractorParameter::filter_min_z() const {
  // @@protoc_insertion_point(field_get:smartseg.PlanViewExtractorParameter.filter_min_z)
  return filter_min_z_;
}
void PlanViewExtractorParameter::set_filter_min_z(float value) {
  set_has_filter_min_z();
  filter_min_z_ = value;
  // @@protoc_insertion_point(field_set:smartseg.PlanViewExtractorParameter.filter_min_z)
}

// required float filter_max_z = 2;
bool PlanViewExtractorParameter::has_filter_max_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanViewExtractorParameter::set_has_filter_max_z() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanViewExtractorParameter::clear_has_filter_max_z() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanViewExtractorParameter::clear_filter_max_z() {
  filter_max_z_ = 0;
  clear_has_filter_max_z();
}
float PlanViewExtractorParameter::filter_max_z() const {
  // @@protoc_insertion_point(field_get:smartseg.PlanViewExtractorParameter.filter_max_z)
  return filter_max_z_;
}
void PlanViewExtractorParameter::set_filter_max_z(float value) {
  set_has_filter_max_z();
  filter_max_z_ = value;
  // @@protoc_insertion_point(field_set:smartseg.PlanViewExtractorParameter.filter_max_z)
}

// optional float shift_z = 3 [default = 0];
bool PlanViewExtractorParameter::has_shift_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanViewExtractorParameter::set_has_shift_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanViewExtractorParameter::clear_has_shift_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanViewExtractorParameter::clear_shift_z() {
  shift_z_ = 0;
  clear_has_shift_z();
}
float PlanViewExtractorParameter::shift_z() const {
  // @@protoc_insertion_point(field_get:smartseg.PlanViewExtractorParameter.shift_z)
  return shift_z_;
}
void PlanViewExtractorParameter::set_shift_z(float value) {
  set_has_shift_z();
  shift_z_ = value;
  // @@protoc_insertion_point(field_set:smartseg.PlanViewExtractorParameter.shift_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HorizontalViewParameter::kLowerPitchFieldNumber;
const int HorizontalViewParameter::kUpperPitchFieldNumber;
const int HorizontalViewParameter::kRowsFieldNumber;
const int HorizontalViewParameter::kColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HorizontalViewParameter::HorizontalViewParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.HorizontalViewParameter)
}
HorizontalViewParameter::HorizontalViewParameter(const HorizontalViewParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lower_pitch_, &from.lower_pitch_,
    reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&lower_pitch_) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:smartseg.HorizontalViewParameter)
}

void HorizontalViewParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lower_pitch_, 0, reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&lower_pitch_) + sizeof(cols_));
}

HorizontalViewParameter::~HorizontalViewParameter() {
  // @@protoc_insertion_point(destructor:smartseg.HorizontalViewParameter)
  SharedDtor();
}

void HorizontalViewParameter::SharedDtor() {
}

void HorizontalViewParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorizontalViewParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HorizontalViewParameter& HorizontalViewParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

HorizontalViewParameter* HorizontalViewParameter::New(::google::protobuf::Arena* arena) const {
  HorizontalViewParameter* n = new HorizontalViewParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HorizontalViewParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.HorizontalViewParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&lower_pitch_, 0, reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&lower_pitch_) + sizeof(cols_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HorizontalViewParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.HorizontalViewParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float lower_pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_lower_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float upper_pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_upper_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cols = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cols();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.HorizontalViewParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.HorizontalViewParameter)
  return false;
#undef DO_
}

void HorizontalViewParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.HorizontalViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float lower_pitch = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lower_pitch(), output);
  }

  // required float upper_pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->upper_pitch(), output);
  }

  // required int32 rows = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rows(), output);
  }

  // required int32 cols = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cols(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.HorizontalViewParameter)
}

::google::protobuf::uint8* HorizontalViewParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.HorizontalViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float lower_pitch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lower_pitch(), target);
  }

  // required float upper_pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->upper_pitch(), target);
  }

  // required int32 rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rows(), target);
  }

  // required int32 cols = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cols(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.HorizontalViewParameter)
  return target;
}

size_t HorizontalViewParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.HorizontalViewParameter)
  size_t total_size = 0;

  if (has_lower_pitch()) {
    // required float lower_pitch = 1;
    total_size += 1 + 4;
  }

  if (has_upper_pitch()) {
    // required float upper_pitch = 2;
    total_size += 1 + 4;
  }

  if (has_rows()) {
    // required int32 rows = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  if (has_cols()) {
    // required int32 cols = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  return total_size;
}
size_t HorizontalViewParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.HorizontalViewParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float lower_pitch = 1;
    total_size += 1 + 4;

    // required float upper_pitch = 2;
    total_size += 1 + 4;

    // required int32 rows = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());

    // required int32 cols = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorizontalViewParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.HorizontalViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HorizontalViewParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HorizontalViewParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.HorizontalViewParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.HorizontalViewParameter)
    MergeFrom(*source);
  }
}

void HorizontalViewParameter::MergeFrom(const HorizontalViewParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.HorizontalViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      lower_pitch_ = from.lower_pitch_;
    }
    if (cached_has_bits & 0x00000002u) {
      upper_pitch_ = from.upper_pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      rows_ = from.rows_;
    }
    if (cached_has_bits & 0x00000008u) {
      cols_ = from.cols_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HorizontalViewParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.HorizontalViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorizontalViewParameter::CopyFrom(const HorizontalViewParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.HorizontalViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorizontalViewParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void HorizontalViewParameter::Swap(HorizontalViewParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HorizontalViewParameter::InternalSwap(HorizontalViewParameter* other) {
  std::swap(lower_pitch_, other->lower_pitch_);
  std::swap(upper_pitch_, other->upper_pitch_);
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HorizontalViewParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HorizontalViewParameter

// required float lower_pitch = 1;
bool HorizontalViewParameter::has_lower_pitch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HorizontalViewParameter::set_has_lower_pitch() {
  _has_bits_[0] |= 0x00000001u;
}
void HorizontalViewParameter::clear_has_lower_pitch() {
  _has_bits_[0] &= ~0x00000001u;
}
void HorizontalViewParameter::clear_lower_pitch() {
  lower_pitch_ = 0;
  clear_has_lower_pitch();
}
float HorizontalViewParameter::lower_pitch() const {
  // @@protoc_insertion_point(field_get:smartseg.HorizontalViewParameter.lower_pitch)
  return lower_pitch_;
}
void HorizontalViewParameter::set_lower_pitch(float value) {
  set_has_lower_pitch();
  lower_pitch_ = value;
  // @@protoc_insertion_point(field_set:smartseg.HorizontalViewParameter.lower_pitch)
}

// required float upper_pitch = 2;
bool HorizontalViewParameter::has_upper_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HorizontalViewParameter::set_has_upper_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
void HorizontalViewParameter::clear_has_upper_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
void HorizontalViewParameter::clear_upper_pitch() {
  upper_pitch_ = 0;
  clear_has_upper_pitch();
}
float HorizontalViewParameter::upper_pitch() const {
  // @@protoc_insertion_point(field_get:smartseg.HorizontalViewParameter.upper_pitch)
  return upper_pitch_;
}
void HorizontalViewParameter::set_upper_pitch(float value) {
  set_has_upper_pitch();
  upper_pitch_ = value;
  // @@protoc_insertion_point(field_set:smartseg.HorizontalViewParameter.upper_pitch)
}

// required int32 rows = 3;
bool HorizontalViewParameter::has_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HorizontalViewParameter::set_has_rows() {
  _has_bits_[0] |= 0x00000004u;
}
void HorizontalViewParameter::clear_has_rows() {
  _has_bits_[0] &= ~0x00000004u;
}
void HorizontalViewParameter::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
::google::protobuf::int32 HorizontalViewParameter::rows() const {
  // @@protoc_insertion_point(field_get:smartseg.HorizontalViewParameter.rows)
  return rows_;
}
void HorizontalViewParameter::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:smartseg.HorizontalViewParameter.rows)
}

// required int32 cols = 4;
bool HorizontalViewParameter::has_cols() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HorizontalViewParameter::set_has_cols() {
  _has_bits_[0] |= 0x00000008u;
}
void HorizontalViewParameter::clear_has_cols() {
  _has_bits_[0] &= ~0x00000008u;
}
void HorizontalViewParameter::clear_cols() {
  cols_ = 0;
  clear_has_cols();
}
::google::protobuf::int32 HorizontalViewParameter::cols() const {
  // @@protoc_insertion_point(field_get:smartseg.HorizontalViewParameter.cols)
  return cols_;
}
void HorizontalViewParameter::set_cols(::google::protobuf::int32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:smartseg.HorizontalViewParameter.cols)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HorizontalViewExtractorParameter::HorizontalViewExtractorParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.HorizontalViewExtractorParameter)
}
HorizontalViewExtractorParameter::HorizontalViewExtractorParameter(const HorizontalViewExtractorParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smartseg.HorizontalViewExtractorParameter)
}

void HorizontalViewExtractorParameter::SharedCtor() {
  _cached_size_ = 0;
}

HorizontalViewExtractorParameter::~HorizontalViewExtractorParameter() {
  // @@protoc_insertion_point(destructor:smartseg.HorizontalViewExtractorParameter)
  SharedDtor();
}

void HorizontalViewExtractorParameter::SharedDtor() {
}

void HorizontalViewExtractorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorizontalViewExtractorParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HorizontalViewExtractorParameter& HorizontalViewExtractorParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

HorizontalViewExtractorParameter* HorizontalViewExtractorParameter::New(::google::protobuf::Arena* arena) const {
  HorizontalViewExtractorParameter* n = new HorizontalViewExtractorParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HorizontalViewExtractorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.HorizontalViewExtractorParameter)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HorizontalViewExtractorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.HorizontalViewExtractorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.HorizontalViewExtractorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.HorizontalViewExtractorParameter)
  return false;
#undef DO_
}

void HorizontalViewExtractorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.HorizontalViewExtractorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.HorizontalViewExtractorParameter)
}

::google::protobuf::uint8* HorizontalViewExtractorParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.HorizontalViewExtractorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.HorizontalViewExtractorParameter)
  return target;
}

size_t HorizontalViewExtractorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.HorizontalViewExtractorParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorizontalViewExtractorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.HorizontalViewExtractorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HorizontalViewExtractorParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HorizontalViewExtractorParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.HorizontalViewExtractorParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.HorizontalViewExtractorParameter)
    MergeFrom(*source);
  }
}

void HorizontalViewExtractorParameter::MergeFrom(const HorizontalViewExtractorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.HorizontalViewExtractorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HorizontalViewExtractorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.HorizontalViewExtractorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorizontalViewExtractorParameter::CopyFrom(const HorizontalViewExtractorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.HorizontalViewExtractorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorizontalViewExtractorParameter::IsInitialized() const {
  return true;
}

void HorizontalViewExtractorParameter::Swap(HorizontalViewExtractorParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HorizontalViewExtractorParameter::InternalSwap(HorizontalViewExtractorParameter* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HorizontalViewExtractorParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HorizontalViewExtractorParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SideViewParameter::kRangeFieldNumber;
const int SideViewParameter::kSplitsFieldNumber;
const int SideViewParameter::kSideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SideViewParameter::SideViewParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.SideViewParameter)
}
SideViewParameter::SideViewParameter(const SideViewParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_, &from.range_,
    reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&range_) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:smartseg.SideViewParameter)
}

void SideViewParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&range_, 0, reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&range_) + sizeof(side_));
}

SideViewParameter::~SideViewParameter() {
  // @@protoc_insertion_point(destructor:smartseg.SideViewParameter)
  SharedDtor();
}

void SideViewParameter::SharedDtor() {
}

void SideViewParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SideViewParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SideViewParameter& SideViewParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

SideViewParameter* SideViewParameter::New(::google::protobuf::Arena* arena) const {
  SideViewParameter* n = new SideViewParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SideViewParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.SideViewParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&range_, 0, reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&range_) + sizeof(side_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SideViewParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.SideViewParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 splits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_splits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 side = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.SideViewParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.SideViewParameter)
  return false;
#undef DO_
}

void SideViewParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.SideViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float range = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->range(), output);
  }

  // required int32 splits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->splits(), output);
  }

  // required int32 side = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->side(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.SideViewParameter)
}

::google::protobuf::uint8* SideViewParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.SideViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->range(), target);
  }

  // required int32 splits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->splits(), target);
  }

  // required int32 side = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->side(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.SideViewParameter)
  return target;
}

size_t SideViewParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.SideViewParameter)
  size_t total_size = 0;

  if (has_range()) {
    // required float range = 1;
    total_size += 1 + 4;
  }

  if (has_splits()) {
    // required int32 splits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->splits());
  }

  if (has_side()) {
    // required int32 side = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->side());
  }

  return total_size;
}
size_t SideViewParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.SideViewParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float range = 1;
    total_size += 1 + 4;

    // required int32 splits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->splits());

    // required int32 side = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->side());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SideViewParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.SideViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SideViewParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SideViewParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.SideViewParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.SideViewParameter)
    MergeFrom(*source);
  }
}

void SideViewParameter::MergeFrom(const SideViewParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.SideViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000002u) {
      splits_ = from.splits_;
    }
    if (cached_has_bits & 0x00000004u) {
      side_ = from.side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SideViewParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.SideViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SideViewParameter::CopyFrom(const SideViewParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.SideViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideViewParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SideViewParameter::Swap(SideViewParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SideViewParameter::InternalSwap(SideViewParameter* other) {
  std::swap(range_, other->range_);
  std::swap(splits_, other->splits_);
  std::swap(side_, other->side_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SideViewParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SideViewParameter

// required float range = 1;
bool SideViewParameter::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SideViewParameter::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
void SideViewParameter::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
void SideViewParameter::clear_range() {
  range_ = 0;
  clear_has_range();
}
float SideViewParameter::range() const {
  // @@protoc_insertion_point(field_get:smartseg.SideViewParameter.range)
  return range_;
}
void SideViewParameter::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SideViewParameter.range)
}

// required int32 splits = 2;
bool SideViewParameter::has_splits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SideViewParameter::set_has_splits() {
  _has_bits_[0] |= 0x00000002u;
}
void SideViewParameter::clear_has_splits() {
  _has_bits_[0] &= ~0x00000002u;
}
void SideViewParameter::clear_splits() {
  splits_ = 0;
  clear_has_splits();
}
::google::protobuf::int32 SideViewParameter::splits() const {
  // @@protoc_insertion_point(field_get:smartseg.SideViewParameter.splits)
  return splits_;
}
void SideViewParameter::set_splits(::google::protobuf::int32 value) {
  set_has_splits();
  splits_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SideViewParameter.splits)
}

// required int32 side = 3;
bool SideViewParameter::has_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SideViewParameter::set_has_side() {
  _has_bits_[0] |= 0x00000004u;
}
void SideViewParameter::clear_has_side() {
  _has_bits_[0] &= ~0x00000004u;
}
void SideViewParameter::clear_side() {
  side_ = 0;
  clear_has_side();
}
::google::protobuf::int32 SideViewParameter::side() const {
  // @@protoc_insertion_point(field_get:smartseg.SideViewParameter.side)
  return side_;
}
void SideViewParameter::set_side(::google::protobuf::int32 value) {
  set_has_side();
  side_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SideViewParameter.side)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SideViewExtractorParameter::SideViewExtractorParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.SideViewExtractorParameter)
}
SideViewExtractorParameter::SideViewExtractorParameter(const SideViewExtractorParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smartseg.SideViewExtractorParameter)
}

void SideViewExtractorParameter::SharedCtor() {
  _cached_size_ = 0;
}

SideViewExtractorParameter::~SideViewExtractorParameter() {
  // @@protoc_insertion_point(destructor:smartseg.SideViewExtractorParameter)
  SharedDtor();
}

void SideViewExtractorParameter::SharedDtor() {
}

void SideViewExtractorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SideViewExtractorParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SideViewExtractorParameter& SideViewExtractorParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

SideViewExtractorParameter* SideViewExtractorParameter::New(::google::protobuf::Arena* arena) const {
  SideViewExtractorParameter* n = new SideViewExtractorParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SideViewExtractorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.SideViewExtractorParameter)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SideViewExtractorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.SideViewExtractorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.SideViewExtractorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.SideViewExtractorParameter)
  return false;
#undef DO_
}

void SideViewExtractorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.SideViewExtractorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.SideViewExtractorParameter)
}

::google::protobuf::uint8* SideViewExtractorParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.SideViewExtractorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.SideViewExtractorParameter)
  return target;
}

size_t SideViewExtractorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.SideViewExtractorParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SideViewExtractorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.SideViewExtractorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SideViewExtractorParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SideViewExtractorParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.SideViewExtractorParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.SideViewExtractorParameter)
    MergeFrom(*source);
  }
}

void SideViewExtractorParameter::MergeFrom(const SideViewExtractorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.SideViewExtractorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SideViewExtractorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.SideViewExtractorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SideViewExtractorParameter::CopyFrom(const SideViewExtractorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.SideViewExtractorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideViewExtractorParameter::IsInitialized() const {
  return true;
}

void SideViewExtractorParameter::Swap(SideViewExtractorParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SideViewExtractorParameter::InternalSwap(SideViewExtractorParameter* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SideViewExtractorParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SideViewExtractorParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentorParameter::kTrainingModeFieldNumber;
const int SegmentorParameter::kMergeDiagonalGridsFieldNumber;
const int SegmentorParameter::kFindBestCutFieldNumber;
const int SegmentorParameter::kTopzThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentorParameter::SegmentorParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.SegmentorParameter)
}
SegmentorParameter::SegmentorParameter(const SegmentorParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&training_mode_, &from.training_mode_,
    reinterpret_cast<char*>(&topz_threshold_) -
    reinterpret_cast<char*>(&training_mode_) + sizeof(topz_threshold_));
  // @@protoc_insertion_point(copy_constructor:smartseg.SegmentorParameter)
}

void SegmentorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&training_mode_, 0, reinterpret_cast<char*>(&find_best_cut_) -
    reinterpret_cast<char*>(&training_mode_) + sizeof(find_best_cut_));
  topz_threshold_ = -1;
}

SegmentorParameter::~SegmentorParameter() {
  // @@protoc_insertion_point(destructor:smartseg.SegmentorParameter)
  SharedDtor();
}

void SegmentorParameter::SharedDtor() {
}

void SegmentorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentorParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SegmentorParameter& SegmentorParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

SegmentorParameter* SegmentorParameter::New(::google::protobuf::Arena* arena) const {
  SegmentorParameter* n = new SegmentorParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SegmentorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.SegmentorParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&training_mode_, 0, reinterpret_cast<char*>(&find_best_cut_) -
      reinterpret_cast<char*>(&training_mode_) + sizeof(find_best_cut_));
    topz_threshold_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SegmentorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.SegmentorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool training_mode = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_training_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &training_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool merge_diagonal_grids = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_merge_diagonal_grids();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &merge_diagonal_grids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool find_best_cut = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_find_best_cut();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &find_best_cut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float topz_threshold = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_topz_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &topz_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.SegmentorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.SegmentorParameter)
  return false;
#undef DO_
}

void SegmentorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.SegmentorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool training_mode = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->training_mode(), output);
  }

  // optional bool merge_diagonal_grids = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->merge_diagonal_grids(), output);
  }

  // optional bool find_best_cut = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->find_best_cut(), output);
  }

  // optional float topz_threshold = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->topz_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.SegmentorParameter)
}

::google::protobuf::uint8* SegmentorParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.SegmentorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool training_mode = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->training_mode(), target);
  }

  // optional bool merge_diagonal_grids = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->merge_diagonal_grids(), target);
  }

  // optional bool find_best_cut = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->find_best_cut(), target);
  }

  // optional float topz_threshold = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->topz_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.SegmentorParameter)
  return target;
}

size_t SegmentorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.SegmentorParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool training_mode = 1 [default = false];
    if (has_training_mode()) {
      total_size += 1 + 1;
    }

    // optional bool merge_diagonal_grids = 2 [default = false];
    if (has_merge_diagonal_grids()) {
      total_size += 1 + 1;
    }

    // optional bool find_best_cut = 3 [default = false];
    if (has_find_best_cut()) {
      total_size += 1 + 1;
    }

    // optional float topz_threshold = 4 [default = -1];
    if (has_topz_threshold()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.SegmentorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentorParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SegmentorParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.SegmentorParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.SegmentorParameter)
    MergeFrom(*source);
  }
}

void SegmentorParameter::MergeFrom(const SegmentorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.SegmentorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      training_mode_ = from.training_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      merge_diagonal_grids_ = from.merge_diagonal_grids_;
    }
    if (cached_has_bits & 0x00000004u) {
      find_best_cut_ = from.find_best_cut_;
    }
    if (cached_has_bits & 0x00000008u) {
      topz_threshold_ = from.topz_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SegmentorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.SegmentorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentorParameter::CopyFrom(const SegmentorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.SegmentorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentorParameter::IsInitialized() const {
  return true;
}

void SegmentorParameter::Swap(SegmentorParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentorParameter::InternalSwap(SegmentorParameter* other) {
  std::swap(training_mode_, other->training_mode_);
  std::swap(merge_diagonal_grids_, other->merge_diagonal_grids_);
  std::swap(find_best_cut_, other->find_best_cut_);
  std::swap(topz_threshold_, other->topz_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SegmentorParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SegmentorParameter

// optional bool training_mode = 1 [default = false];
bool SegmentorParameter::has_training_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SegmentorParameter::set_has_training_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void SegmentorParameter::clear_has_training_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void SegmentorParameter::clear_training_mode() {
  training_mode_ = false;
  clear_has_training_mode();
}
bool SegmentorParameter::training_mode() const {
  // @@protoc_insertion_point(field_get:smartseg.SegmentorParameter.training_mode)
  return training_mode_;
}
void SegmentorParameter::set_training_mode(bool value) {
  set_has_training_mode();
  training_mode_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SegmentorParameter.training_mode)
}

// optional bool merge_diagonal_grids = 2 [default = false];
bool SegmentorParameter::has_merge_diagonal_grids() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SegmentorParameter::set_has_merge_diagonal_grids() {
  _has_bits_[0] |= 0x00000002u;
}
void SegmentorParameter::clear_has_merge_diagonal_grids() {
  _has_bits_[0] &= ~0x00000002u;
}
void SegmentorParameter::clear_merge_diagonal_grids() {
  merge_diagonal_grids_ = false;
  clear_has_merge_diagonal_grids();
}
bool SegmentorParameter::merge_diagonal_grids() const {
  // @@protoc_insertion_point(field_get:smartseg.SegmentorParameter.merge_diagonal_grids)
  return merge_diagonal_grids_;
}
void SegmentorParameter::set_merge_diagonal_grids(bool value) {
  set_has_merge_diagonal_grids();
  merge_diagonal_grids_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SegmentorParameter.merge_diagonal_grids)
}

// optional bool find_best_cut = 3 [default = false];
bool SegmentorParameter::has_find_best_cut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SegmentorParameter::set_has_find_best_cut() {
  _has_bits_[0] |= 0x00000004u;
}
void SegmentorParameter::clear_has_find_best_cut() {
  _has_bits_[0] &= ~0x00000004u;
}
void SegmentorParameter::clear_find_best_cut() {
  find_best_cut_ = false;
  clear_has_find_best_cut();
}
bool SegmentorParameter::find_best_cut() const {
  // @@protoc_insertion_point(field_get:smartseg.SegmentorParameter.find_best_cut)
  return find_best_cut_;
}
void SegmentorParameter::set_find_best_cut(bool value) {
  set_has_find_best_cut();
  find_best_cut_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SegmentorParameter.find_best_cut)
}

// optional float topz_threshold = 4 [default = -1];
bool SegmentorParameter::has_topz_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SegmentorParameter::set_has_topz_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void SegmentorParameter::clear_has_topz_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void SegmentorParameter::clear_topz_threshold() {
  topz_threshold_ = -1;
  clear_has_topz_threshold();
}
float SegmentorParameter::topz_threshold() const {
  // @@protoc_insertion_point(field_get:smartseg.SegmentorParameter.topz_threshold)
  return topz_threshold_;
}
void SegmentorParameter::set_topz_threshold(float value) {
  set_has_topz_threshold();
  topz_threshold_ = value;
  // @@protoc_insertion_point(field_set:smartseg.SegmentorParameter.topz_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameTargetParameter::kStartupIterFieldNumber;
const int FrameTargetParameter::kMaxCenterNormFieldNumber;
const int FrameTargetParameter::kEqualObjectnessWeightFieldNumber;
const int FrameTargetParameter::kPointCenterFieldNumber;
const int FrameTargetParameter::kSampleGridCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameTargetParameter::FrameTargetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.FrameTargetParameter)
}
FrameTargetParameter::FrameTargetParameter(const FrameTargetParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startup_iter_, &from.startup_iter_,
    reinterpret_cast<char*>(&sample_grid_center_) -
    reinterpret_cast<char*>(&startup_iter_) + sizeof(sample_grid_center_));
  // @@protoc_insertion_point(copy_constructor:smartseg.FrameTargetParameter)
}

void FrameTargetParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&startup_iter_, 0, reinterpret_cast<char*>(&sample_grid_center_) -
    reinterpret_cast<char*>(&startup_iter_) + sizeof(sample_grid_center_));
}

FrameTargetParameter::~FrameTargetParameter() {
  // @@protoc_insertion_point(destructor:smartseg.FrameTargetParameter)
  SharedDtor();
}

void FrameTargetParameter::SharedDtor() {
}

void FrameTargetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameTargetParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameTargetParameter& FrameTargetParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameTargetParameter* FrameTargetParameter::New(::google::protobuf::Arena* arena) const {
  FrameTargetParameter* n = new FrameTargetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameTargetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.FrameTargetParameter)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&startup_iter_, 0, reinterpret_cast<char*>(&sample_grid_center_) -
      reinterpret_cast<char*>(&startup_iter_) + sizeof(sample_grid_center_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameTargetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.FrameTargetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startup_iter = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_startup_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startup_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_center_norm = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_max_center_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_center_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool equal_objectness_weight = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_equal_objectness_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &equal_objectness_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool point_center = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_point_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &point_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sample_grid_center = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sample_grid_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sample_grid_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.FrameTargetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.FrameTargetParameter)
  return false;
#undef DO_
}

void FrameTargetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.FrameTargetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 startup_iter = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startup_iter(), output);
  }

  // optional float max_center_norm = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_center_norm(), output);
  }

  // optional bool equal_objectness_weight = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->equal_objectness_weight(), output);
  }

  // optional bool point_center = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->point_center(), output);
  }

  // optional bool sample_grid_center = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sample_grid_center(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.FrameTargetParameter)
}

::google::protobuf::uint8* FrameTargetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.FrameTargetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 startup_iter = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startup_iter(), target);
  }

  // optional float max_center_norm = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_center_norm(), target);
  }

  // optional bool equal_objectness_weight = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->equal_objectness_weight(), target);
  }

  // optional bool point_center = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->point_center(), target);
  }

  // optional bool sample_grid_center = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sample_grid_center(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.FrameTargetParameter)
  return target;
}

size_t FrameTargetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.FrameTargetParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 startup_iter = 1 [default = 0];
    if (has_startup_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startup_iter());
    }

    // optional float max_center_norm = 2 [default = 0];
    if (has_max_center_norm()) {
      total_size += 1 + 4;
    }

    // optional bool equal_objectness_weight = 3 [default = false];
    if (has_equal_objectness_weight()) {
      total_size += 1 + 1;
    }

    // optional bool point_center = 4 [default = false];
    if (has_point_center()) {
      total_size += 1 + 1;
    }

    // optional bool sample_grid_center = 5 [default = false];
    if (has_sample_grid_center()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameTargetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.FrameTargetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameTargetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameTargetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.FrameTargetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.FrameTargetParameter)
    MergeFrom(*source);
  }
}

void FrameTargetParameter::MergeFrom(const FrameTargetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.FrameTargetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      startup_iter_ = from.startup_iter_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_center_norm_ = from.max_center_norm_;
    }
    if (cached_has_bits & 0x00000004u) {
      equal_objectness_weight_ = from.equal_objectness_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      point_center_ = from.point_center_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_grid_center_ = from.sample_grid_center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameTargetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.FrameTargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTargetParameter::CopyFrom(const FrameTargetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.FrameTargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTargetParameter::IsInitialized() const {
  return true;
}

void FrameTargetParameter::Swap(FrameTargetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameTargetParameter::InternalSwap(FrameTargetParameter* other) {
  std::swap(startup_iter_, other->startup_iter_);
  std::swap(max_center_norm_, other->max_center_norm_);
  std::swap(equal_objectness_weight_, other->equal_objectness_weight_);
  std::swap(point_center_, other->point_center_);
  std::swap(sample_grid_center_, other->sample_grid_center_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameTargetParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameTargetParameter

// optional int32 startup_iter = 1 [default = 0];
bool FrameTargetParameter::has_startup_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameTargetParameter::set_has_startup_iter() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameTargetParameter::clear_has_startup_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameTargetParameter::clear_startup_iter() {
  startup_iter_ = 0;
  clear_has_startup_iter();
}
::google::protobuf::int32 FrameTargetParameter::startup_iter() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameTargetParameter.startup_iter)
  return startup_iter_;
}
void FrameTargetParameter::set_startup_iter(::google::protobuf::int32 value) {
  set_has_startup_iter();
  startup_iter_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameTargetParameter.startup_iter)
}

// optional float max_center_norm = 2 [default = 0];
bool FrameTargetParameter::has_max_center_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameTargetParameter::set_has_max_center_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameTargetParameter::clear_has_max_center_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameTargetParameter::clear_max_center_norm() {
  max_center_norm_ = 0;
  clear_has_max_center_norm();
}
float FrameTargetParameter::max_center_norm() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameTargetParameter.max_center_norm)
  return max_center_norm_;
}
void FrameTargetParameter::set_max_center_norm(float value) {
  set_has_max_center_norm();
  max_center_norm_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameTargetParameter.max_center_norm)
}

// optional bool equal_objectness_weight = 3 [default = false];
bool FrameTargetParameter::has_equal_objectness_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameTargetParameter::set_has_equal_objectness_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameTargetParameter::clear_has_equal_objectness_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameTargetParameter::clear_equal_objectness_weight() {
  equal_objectness_weight_ = false;
  clear_has_equal_objectness_weight();
}
bool FrameTargetParameter::equal_objectness_weight() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameTargetParameter.equal_objectness_weight)
  return equal_objectness_weight_;
}
void FrameTargetParameter::set_equal_objectness_weight(bool value) {
  set_has_equal_objectness_weight();
  equal_objectness_weight_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameTargetParameter.equal_objectness_weight)
}

// optional bool point_center = 4 [default = false];
bool FrameTargetParameter::has_point_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrameTargetParameter::set_has_point_center() {
  _has_bits_[0] |= 0x00000008u;
}
void FrameTargetParameter::clear_has_point_center() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrameTargetParameter::clear_point_center() {
  point_center_ = false;
  clear_has_point_center();
}
bool FrameTargetParameter::point_center() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameTargetParameter.point_center)
  return point_center_;
}
void FrameTargetParameter::set_point_center(bool value) {
  set_has_point_center();
  point_center_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameTargetParameter.point_center)
}

// optional bool sample_grid_center = 5 [default = false];
bool FrameTargetParameter::has_sample_grid_center() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FrameTargetParameter::set_has_sample_grid_center() {
  _has_bits_[0] |= 0x00000010u;
}
void FrameTargetParameter::clear_has_sample_grid_center() {
  _has_bits_[0] &= ~0x00000010u;
}
void FrameTargetParameter::clear_sample_grid_center() {
  sample_grid_center_ = false;
  clear_has_sample_grid_center();
}
bool FrameTargetParameter::sample_grid_center() const {
  // @@protoc_insertion_point(field_get:smartseg.FrameTargetParameter.sample_grid_center)
  return sample_grid_center_;
}
void FrameTargetParameter::set_sample_grid_center(bool value) {
  set_has_sample_grid_center();
  sample_grid_center_ = value;
  // @@protoc_insertion_point(field_set:smartseg.FrameTargetParameter.sample_grid_center)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewPoolingParameter::ViewPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.ViewPoolingParameter)
}
ViewPoolingParameter::ViewPoolingParameter(const ViewPoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smartseg.ViewPoolingParameter)
}

void ViewPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
}

ViewPoolingParameter::~ViewPoolingParameter() {
  // @@protoc_insertion_point(destructor:smartseg.ViewPoolingParameter)
  SharedDtor();
}

void ViewPoolingParameter::SharedDtor() {
}

void ViewPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewPoolingParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ViewPoolingParameter& ViewPoolingParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

ViewPoolingParameter* ViewPoolingParameter::New(::google::protobuf::Arena* arena) const {
  ViewPoolingParameter* n = new ViewPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.ViewPoolingParameter)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ViewPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.ViewPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.ViewPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.ViewPoolingParameter)
  return false;
#undef DO_
}

void ViewPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.ViewPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.ViewPoolingParameter)
}

::google::protobuf::uint8* ViewPoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.ViewPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.ViewPoolingParameter)
  return target;
}

size_t ViewPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.ViewPoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.ViewPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewPoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.ViewPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.ViewPoolingParameter)
    MergeFrom(*source);
  }
}

void ViewPoolingParameter::MergeFrom(const ViewPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.ViewPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ViewPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.ViewPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewPoolingParameter::CopyFrom(const ViewPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.ViewPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewPoolingParameter::IsInitialized() const {
  return true;
}

void ViewPoolingParameter::Swap(ViewPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewPoolingParameter::InternalSwap(ViewPoolingParameter* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewPoolingParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewPoolingParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewUnpoolingParameter::ViewUnpoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.ViewUnpoolingParameter)
}
ViewUnpoolingParameter::ViewUnpoolingParameter(const ViewUnpoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smartseg.ViewUnpoolingParameter)
}

void ViewUnpoolingParameter::SharedCtor() {
  _cached_size_ = 0;
}

ViewUnpoolingParameter::~ViewUnpoolingParameter() {
  // @@protoc_insertion_point(destructor:smartseg.ViewUnpoolingParameter)
  SharedDtor();
}

void ViewUnpoolingParameter::SharedDtor() {
}

void ViewUnpoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewUnpoolingParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ViewUnpoolingParameter& ViewUnpoolingParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

ViewUnpoolingParameter* ViewUnpoolingParameter::New(::google::protobuf::Arena* arena) const {
  ViewUnpoolingParameter* n = new ViewUnpoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewUnpoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.ViewUnpoolingParameter)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ViewUnpoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.ViewUnpoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.ViewUnpoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.ViewUnpoolingParameter)
  return false;
#undef DO_
}

void ViewUnpoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.ViewUnpoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.ViewUnpoolingParameter)
}

::google::protobuf::uint8* ViewUnpoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.ViewUnpoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.ViewUnpoolingParameter)
  return target;
}

size_t ViewUnpoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.ViewUnpoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewUnpoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.ViewUnpoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewUnpoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewUnpoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.ViewUnpoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.ViewUnpoolingParameter)
    MergeFrom(*source);
  }
}

void ViewUnpoolingParameter::MergeFrom(const ViewUnpoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.ViewUnpoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ViewUnpoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.ViewUnpoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewUnpoolingParameter::CopyFrom(const ViewUnpoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.ViewUnpoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewUnpoolingParameter::IsInitialized() const {
  return true;
}

void ViewUnpoolingParameter::Swap(ViewUnpoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewUnpoolingParameter::InternalSwap(ViewUnpoolingParameter* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewUnpoolingParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewUnpoolingParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointInterpolationParameter::PointInterpolationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.PointInterpolationParameter)
}
PointInterpolationParameter::PointInterpolationParameter(const PointInterpolationParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smartseg.PointInterpolationParameter)
}

void PointInterpolationParameter::SharedCtor() {
  _cached_size_ = 0;
}

PointInterpolationParameter::~PointInterpolationParameter() {
  // @@protoc_insertion_point(destructor:smartseg.PointInterpolationParameter)
  SharedDtor();
}

void PointInterpolationParameter::SharedDtor() {
}

void PointInterpolationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointInterpolationParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointInterpolationParameter& PointInterpolationParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointInterpolationParameter* PointInterpolationParameter::New(::google::protobuf::Arena* arena) const {
  PointInterpolationParameter* n = new PointInterpolationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointInterpolationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.PointInterpolationParameter)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointInterpolationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.PointInterpolationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.PointInterpolationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.PointInterpolationParameter)
  return false;
#undef DO_
}

void PointInterpolationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.PointInterpolationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.PointInterpolationParameter)
}

::google::protobuf::uint8* PointInterpolationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.PointInterpolationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.PointInterpolationParameter)
  return target;
}

size_t PointInterpolationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.PointInterpolationParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointInterpolationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.PointInterpolationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PointInterpolationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointInterpolationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.PointInterpolationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.PointInterpolationParameter)
    MergeFrom(*source);
  }
}

void PointInterpolationParameter::MergeFrom(const PointInterpolationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.PointInterpolationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PointInterpolationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.PointInterpolationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointInterpolationParameter::CopyFrom(const PointInterpolationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.PointInterpolationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointInterpolationParameter::IsInitialized() const {
  return true;
}

void PointInterpolationParameter::Swap(PointInterpolationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointInterpolationParameter::InternalSwap(PointInterpolationParameter* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointInterpolationParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointInterpolationParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlineNormParameter::kItersFieldNumber;
const int OnlineNormParameter::kMovingAverageFractionFieldNumber;
const int OnlineNormParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlineNormParameter::OnlineNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.OnlineNormParameter)
}
OnlineNormParameter::OnlineNormParameter(const OnlineNormParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iters_, &from.iters_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&iters_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:smartseg.OnlineNormParameter)
}

void OnlineNormParameter::SharedCtor() {
  _cached_size_ = 0;
  iters_ = 0;
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-05f;
}

OnlineNormParameter::~OnlineNormParameter() {
  // @@protoc_insertion_point(destructor:smartseg.OnlineNormParameter)
  SharedDtor();
}

void OnlineNormParameter::SharedDtor() {
}

void OnlineNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineNormParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnlineNormParameter& OnlineNormParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnlineNormParameter* OnlineNormParameter::New(::google::protobuf::Arena* arena) const {
  OnlineNormParameter* n = new OnlineNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnlineNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.OnlineNormParameter)
  if (_has_bits_[0 / 32] & 7u) {
    iters_ = 0;
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OnlineNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.OnlineNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float iters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_iters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_moving_average_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 3 [default = 1e-05];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.OnlineNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.OnlineNormParameter)
  return false;
#undef DO_
}

void OnlineNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.OnlineNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float iters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->iters(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.OnlineNormParameter)
}

::google::protobuf::uint8* OnlineNormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.OnlineNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float iters = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->iters(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.OnlineNormParameter)
  return target;
}

size_t OnlineNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.OnlineNormParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required float iters = 1;
  if (has_iters()) {
    total_size += 1 + 4;
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional float moving_average_fraction = 2 [default = 0.999];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.OnlineNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlineNormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnlineNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.OnlineNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.OnlineNormParameter)
    MergeFrom(*source);
  }
}

void OnlineNormParameter::MergeFrom(const OnlineNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.OnlineNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      iters_ = from.iters_;
    }
    if (cached_has_bits & 0x00000002u) {
      moving_average_fraction_ = from.moving_average_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OnlineNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.OnlineNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineNormParameter::CopyFrom(const OnlineNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.OnlineNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineNormParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OnlineNormParameter::Swap(OnlineNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlineNormParameter::InternalSwap(OnlineNormParameter* other) {
  std::swap(iters_, other->iters_);
  std::swap(moving_average_fraction_, other->moving_average_fraction_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnlineNormParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnlineNormParameter

// required float iters = 1;
bool OnlineNormParameter::has_iters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OnlineNormParameter::set_has_iters() {
  _has_bits_[0] |= 0x00000001u;
}
void OnlineNormParameter::clear_has_iters() {
  _has_bits_[0] &= ~0x00000001u;
}
void OnlineNormParameter::clear_iters() {
  iters_ = 0;
  clear_has_iters();
}
float OnlineNormParameter::iters() const {
  // @@protoc_insertion_point(field_get:smartseg.OnlineNormParameter.iters)
  return iters_;
}
void OnlineNormParameter::set_iters(float value) {
  set_has_iters();
  iters_ = value;
  // @@protoc_insertion_point(field_set:smartseg.OnlineNormParameter.iters)
}

// optional float moving_average_fraction = 2 [default = 0.999];
bool OnlineNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OnlineNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
void OnlineNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
void OnlineNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
float OnlineNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:smartseg.OnlineNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
void OnlineNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:smartseg.OnlineNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
bool OnlineNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OnlineNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void OnlineNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void OnlineNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
float OnlineNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:smartseg.OnlineNormParameter.eps)
  return eps_;
}
void OnlineNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:smartseg.OnlineNormParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DilationParameter::kMethodFieldNumber;
const int DilationParameter::kNonemptyChannelFieldNumber;
const int DilationParameter::kFeatureChannelFieldNumber;
const int DilationParameter::kStepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DilationParameter::DilationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:smartseg.DilationParameter)
}
DilationParameter::DilationParameter(const DilationParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&method_, &from.method_,
    reinterpret_cast<char*>(&steps_) -
    reinterpret_cast<char*>(&method_) + sizeof(steps_));
  // @@protoc_insertion_point(copy_constructor:smartseg.DilationParameter)
}

void DilationParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&method_, 0, reinterpret_cast<char*>(&steps_) -
    reinterpret_cast<char*>(&method_) + sizeof(steps_));
}

DilationParameter::~DilationParameter() {
  // @@protoc_insertion_point(destructor:smartseg.DilationParameter)
  SharedDtor();
}

void DilationParameter::SharedDtor() {
}

void DilationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DilationParameter::descriptor() {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DilationParameter& DilationParameter::default_instance() {
  protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

DilationParameter* DilationParameter::New(::google::protobuf::Arena* arena) const {
  DilationParameter* n = new DilationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DilationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:smartseg.DilationParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&method_, 0, reinterpret_cast<char*>(&steps_) -
      reinterpret_cast<char*>(&method_) + sizeof(steps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DilationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smartseg.DilationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .smartseg.DilationParameter.Method method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::smartseg::DilationParameter_Method_IsValid(value)) {
            set_method(static_cast< ::smartseg::DilationParameter_Method >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nonempty_channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nonempty_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonempty_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 feature_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_feature_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 steps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smartseg.DilationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smartseg.DilationParameter)
  return false;
#undef DO_
}

void DilationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smartseg.DilationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .smartseg.DilationParameter.Method method = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // required int32 nonempty_channel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nonempty_channel(), output);
  }

  // required int32 feature_channel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->feature_channel(), output);
  }

  // required int32 steps = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->steps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smartseg.DilationParameter)
}

::google::protobuf::uint8* DilationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartseg.DilationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .smartseg.DilationParameter.Method method = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // required int32 nonempty_channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nonempty_channel(), target);
  }

  // required int32 feature_channel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->feature_channel(), target);
  }

  // required int32 steps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->steps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartseg.DilationParameter)
  return target;
}

size_t DilationParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:smartseg.DilationParameter)
  size_t total_size = 0;

  if (has_method()) {
    // required .smartseg.DilationParameter.Method method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  if (has_nonempty_channel()) {
    // required int32 nonempty_channel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonempty_channel());
  }

  if (has_feature_channel()) {
    // required int32 feature_channel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_channel());
  }

  if (has_steps()) {
    // required int32 steps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steps());
  }

  return total_size;
}
size_t DilationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartseg.DilationParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .smartseg.DilationParameter.Method method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());

    // required int32 nonempty_channel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonempty_channel());

    // required int32 feature_channel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_channel());

    // required int32 steps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steps());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DilationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smartseg.DilationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DilationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DilationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smartseg.DilationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smartseg.DilationParameter)
    MergeFrom(*source);
  }
}

void DilationParameter::MergeFrom(const DilationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smartseg.DilationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000002u) {
      nonempty_channel_ = from.nonempty_channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      feature_channel_ = from.feature_channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      steps_ = from.steps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DilationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smartseg.DilationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DilationParameter::CopyFrom(const DilationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartseg.DilationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DilationParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DilationParameter::Swap(DilationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DilationParameter::InternalSwap(DilationParameter* other) {
  std::swap(method_, other->method_);
  std::swap(nonempty_channel_, other->nonempty_channel_);
  std::swap(feature_channel_, other->feature_channel_);
  std::swap(steps_, other->steps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DilationParameter::GetMetadata() const {
  protobuf_caffe_5fsmartseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_5fsmartseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DilationParameter

// required .smartseg.DilationParameter.Method method = 1;
bool DilationParameter::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DilationParameter::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
void DilationParameter::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void DilationParameter::clear_method() {
  method_ = 0;
  clear_has_method();
}
::smartseg::DilationParameter_Method DilationParameter::method() const {
  // @@protoc_insertion_point(field_get:smartseg.DilationParameter.method)
  return static_cast< ::smartseg::DilationParameter_Method >(method_);
}
void DilationParameter::set_method(::smartseg::DilationParameter_Method value) {
  assert(::smartseg::DilationParameter_Method_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:smartseg.DilationParameter.method)
}

// required int32 nonempty_channel = 2;
bool DilationParameter::has_nonempty_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DilationParameter::set_has_nonempty_channel() {
  _has_bits_[0] |= 0x00000002u;
}
void DilationParameter::clear_has_nonempty_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
void DilationParameter::clear_nonempty_channel() {
  nonempty_channel_ = 0;
  clear_has_nonempty_channel();
}
::google::protobuf::int32 DilationParameter::nonempty_channel() const {
  // @@protoc_insertion_point(field_get:smartseg.DilationParameter.nonempty_channel)
  return nonempty_channel_;
}
void DilationParameter::set_nonempty_channel(::google::protobuf::int32 value) {
  set_has_nonempty_channel();
  nonempty_channel_ = value;
  // @@protoc_insertion_point(field_set:smartseg.DilationParameter.nonempty_channel)
}

// required int32 feature_channel = 3;
bool DilationParameter::has_feature_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DilationParameter::set_has_feature_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void DilationParameter::clear_has_feature_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void DilationParameter::clear_feature_channel() {
  feature_channel_ = 0;
  clear_has_feature_channel();
}
::google::protobuf::int32 DilationParameter::feature_channel() const {
  // @@protoc_insertion_point(field_get:smartseg.DilationParameter.feature_channel)
  return feature_channel_;
}
void DilationParameter::set_feature_channel(::google::protobuf::int32 value) {
  set_has_feature_channel();
  feature_channel_ = value;
  // @@protoc_insertion_point(field_set:smartseg.DilationParameter.feature_channel)
}

// required int32 steps = 4;
bool DilationParameter::has_steps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DilationParameter::set_has_steps() {
  _has_bits_[0] |= 0x00000008u;
}
void DilationParameter::clear_has_steps() {
  _has_bits_[0] &= ~0x00000008u;
}
void DilationParameter::clear_steps() {
  steps_ = 0;
  clear_has_steps();
}
::google::protobuf::int32 DilationParameter::steps() const {
  // @@protoc_insertion_point(field_get:smartseg.DilationParameter.steps)
  return steps_;
}
void DilationParameter::set_steps(::google::protobuf::int32 value) {
  set_has_steps();
  steps_ = value;
  // @@protoc_insertion_point(field_set:smartseg.DilationParameter.steps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace smartseg

// @@protoc_insertion_point(global_scope)
