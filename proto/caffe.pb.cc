// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {
class BlobShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobShape> {
} _BlobShape_default_instance_;
class BlobProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobProto> {
} _BlobProto_default_instance_;
class BlobProtoVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobProtoVector> {
} _BlobProtoVector_default_instance_;
class DatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Datum> {
} _Datum_default_instance_;
class FillerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FillerParameter> {
} _FillerParameter_default_instance_;
class NetParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetParameter> {
} _NetParameter_default_instance_;
class SolverParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverParameter> {
} _SolverParameter_default_instance_;
class SolverStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverState> {
} _SolverState_default_instance_;
class NetStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetState> {
} _NetState_default_instance_;
class NetStateRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetStateRule> {
} _NetStateRule_default_instance_;
class ParamSpecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParamSpec> {
} _ParamSpec_default_instance_;
class LayerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LayerParameter> {
} _LayerParameter_default_instance_;
class ExpandlabelParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExpandlabelParameter> {
} _ExpandlabelParameter_default_instance_;
class RepeatChannelParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RepeatChannelParameter> {
} _RepeatChannelParameter_default_instance_;
class PermuteParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PermuteParameter> {
} _PermuteParameter_default_instance_;
class NormalizedBBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NormalizedBBox> {
} _NormalizedBBox_default_instance_;
class RegionOutputParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegionOutputParameter> {
} _RegionOutputParameter_default_instance_;
class NonMaximumSuppressionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NonMaximumSuppressionParameter> {
} _NonMaximumSuppressionParameter_default_instance_;
class RegionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegionParameter> {
} _RegionParameter_default_instance_;
class AnchorBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnchorBox> {
} _AnchorBox_default_instance_;
class ReorgParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorgParameter> {
} _ReorgParameter_default_instance_;
class BirdviewParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BirdviewParameter> {
} _BirdviewParameter_default_instance_;
class CylinderViewParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CylinderViewParameter> {
} _CylinderViewParameter_default_instance_;
class BinaryDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BinaryDataParameter> {
} _BinaryDataParameter_default_instance_;
class LabelMapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelMapItem> {
} _LabelMapItem_default_instance_;
class LabelMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelMap> {
} _LabelMap_default_instance_;
class SliceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Slice> {
} _Slice_default_instance_;
class ImageLabelDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageLabelDataParameter> {
} _ImageLabelDataParameter_default_instance_;
class ImageDataArbitraryParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageDataArbitraryParameter> {
} _ImageDataArbitraryParameter_default_instance_;
class ManipulateLossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManipulateLossParameter> {
} _ManipulateLossParameter_default_instance_;
class TransformationParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransformationParameter> {
} _TransformationParameter_default_instance_;
class LossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LossParameter> {
} _LossParameter_default_instance_;
class AccuracyParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccuracyParameter> {
} _AccuracyParameter_default_instance_;
class ArgMaxParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ArgMaxParameter> {
} _ArgMaxParameter_default_instance_;
class ConcatParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConcatParameter> {
} _ConcatParameter_default_instance_;
class BatchNormParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchNormParameter> {
} _BatchNormParameter_default_instance_;
class BiasParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BiasParameter> {
} _BiasParameter_default_instance_;
class ContrastiveLossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContrastiveLossParameter> {
} _ContrastiveLossParameter_default_instance_;
class ConvolutionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionParameter> {
} _ConvolutionParameter_default_instance_;
class DataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataParameter> {
} _DataParameter_default_instance_;
class DropoutParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropoutParameter> {
} _DropoutParameter_default_instance_;
class DummyDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DummyDataParameter> {
} _DummyDataParameter_default_instance_;
class EltwiseParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EltwiseParameter> {
} _EltwiseParameter_default_instance_;
class ELUParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ELUParameter> {
} _ELUParameter_default_instance_;
class EmbedParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmbedParameter> {
} _EmbedParameter_default_instance_;
class ExpParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExpParameter> {
} _ExpParameter_default_instance_;
class FlattenParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlattenParameter> {
} _FlattenParameter_default_instance_;
class HDF5DataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HDF5DataParameter> {
} _HDF5DataParameter_default_instance_;
class HDF5OutputParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HDF5OutputParameter> {
} _HDF5OutputParameter_default_instance_;
class HingeLossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HingeLossParameter> {
} _HingeLossParameter_default_instance_;
class ImageDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageDataParameter> {
} _ImageDataParameter_default_instance_;
class InfogainLossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfogainLossParameter> {
} _InfogainLossParameter_default_instance_;
class InnerProductParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InnerProductParameter> {
} _InnerProductParameter_default_instance_;
class InputParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InputParameter> {
} _InputParameter_default_instance_;
class LogParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogParameter> {
} _LogParameter_default_instance_;
class LRNParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LRNParameter> {
} _LRNParameter_default_instance_;
class MemoryDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryDataParameter> {
} _MemoryDataParameter_default_instance_;
class MVNParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVNParameter> {
} _MVNParameter_default_instance_;
class PoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PoolingParameter> {
} _PoolingParameter_default_instance_;
class PowerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PowerParameter> {
} _PowerParameter_default_instance_;
class PythonParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PythonParameter> {
} _PythonParameter_default_instance_;
class ReductionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReductionParameter> {
} _ReductionParameter_default_instance_;
class ReLUParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReLUParameter> {
} _ReLUParameter_default_instance_;
class ReshapeParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReshapeParameter> {
} _ReshapeParameter_default_instance_;
class ROIPoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROIPoolingParameter> {
} _ROIPoolingParameter_default_instance_;
class ScaleParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScaleParameter> {
} _ScaleParameter_default_instance_;
class SigmoidParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SigmoidParameter> {
} _SigmoidParameter_default_instance_;
class SliceParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SliceParameter> {
} _SliceParameter_default_instance_;
class SoftmaxParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParameter> {
} _SoftmaxParameter_default_instance_;
class TanHParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TanHParameter> {
} _TanHParameter_default_instance_;
class TileParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TileParameter> {
} _TileParameter_default_instance_;
class ThresholdParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ThresholdParameter> {
} _ThresholdParameter_default_instance_;
class WindowDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WindowDataParameter> {
} _WindowDataParameter_default_instance_;
class SPPParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SPPParameter> {
} _SPPParameter_default_instance_;
class V1LayerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<V1LayerParameter> {
} _V1LayerParameter_default_instance_;
class V0LayerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<V0LayerParameter> {
} _V0LayerParameter_default_instance_;
class PReLUParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PReLUParameter> {
} _PReLUParameter_default_instance_;
class ResizeParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeParameter> {
} _ResizeParameter_default_instance_;
class LabelRelatedDropoutParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelRelatedDropoutParam> {
} _LabelRelatedDropoutParam_default_instance_;
class InceptionColumnParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InceptionColumnParameter> {
} _InceptionColumnParameter_default_instance_;
class InceptionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InceptionParameter> {
} _InceptionParameter_default_instance_;
class ElementHingeLossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ElementHingeLossParameter> {
} _ElementHingeLossParameter_default_instance_;
class BlockPackingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockPackingParameter> {
} _BlockPackingParameter_default_instance_;
class PyramidDataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PyramidDataParameter> {
} _PyramidDataParameter_default_instance_;
class NMSParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NMSParameter> {
} _NMSParameter_default_instance_;
class DetectionOutputParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DetectionOutputParameter> {
} _DetectionOutputParameter_default_instance_;
class ROIDataParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROIDataParam> {
} _ROIDataParam_default_instance_;
class ROI2HeatMapParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROI2HeatMapParam> {
} _ROI2HeatMapParam_default_instance_;
class ROIRefineParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROIRefineParam> {
} _ROIRefineParam_default_instance_;
class ROIShowParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROIShowParam> {
} _ROIShowParam_default_instance_;
class PreviousStageParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreviousStageParameter> {
} _PreviousStageParameter_default_instance_;
class CropParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CropParameter> {
} _CropParameter_default_instance_;
class ResampleParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResampleParameter> {
} _ResampleParameter_default_instance_;
class GenerateAnchorParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenerateAnchorParameter> {
} _GenerateAnchorParameter_default_instance_;
class NMSSSDParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NMSSSDParameter> {
} _NMSSSDParameter_default_instance_;
class KPTSParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KPTSParameter> {
} _KPTSParameter_default_instance_;
class ATRSParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ATRSParameter> {
} _ATRSParameter_default_instance_;
class FTRSParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FTRSParameter> {
} _FTRSParameter_default_instance_;
class SPMPParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SPMPParameter> {
} _SPMPParameter_default_instance_;
class Cam3dParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cam3dParameter> {
} _Cam3dParameter_default_instance_;
class DetectionOutputSSDParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DetectionOutputSSDParameter> {
} _DetectionOutputSSDParameter_default_instance_;
class BBoxRegParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BBoxRegParameter> {
} _BBoxRegParameter_default_instance_;
class RegParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegParameter> {
} _RegParameter_default_instance_;
class ImageDistortParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageDistortParameter> {
} _ImageDistortParameter_default_instance_;
class PSROIPoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PSROIPoolingParameter> {
} _PSROIPoolingParameter_default_instance_;
class DFMBPSROIPoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DFMBPSROIPoolingParameter> {
} _DFMBPSROIPoolingParameter_default_instance_;
class ProposalImgScaleToCamCoordsParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProposalImgScaleToCamCoordsParameter> {
} _ProposalImgScaleToCamCoordsParameter_default_instance_;
class DeformableConvolutionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeformableConvolutionParameter> {
} _DeformableConvolutionParameter_default_instance_;

namespace protobuf_caffe_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[108];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[39];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, blobs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, sparse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, variance_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, num_groups_),
  0,
  1,
  2,
  7,
  3,
  8,
  6,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layers_),
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_compute_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, average_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, lr_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, regularization_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clip_gradients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, print_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, rms_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_after_train_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, previous_stage_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, param_update_interval_),
  3,
  7,
  0,
  ~0u,
  6,
  ~0u,
  8,
  ~0u,
  ~0u,
  10,
  21,
  30,
  11,
  12,
  33,
  13,
  35,
  1,
  14,
  15,
  16,
  17,
  4,
  18,
  ~0u,
  34,
  26,
  19,
  2,
  22,
  36,
  29,
  20,
  28,
  5,
  32,
  37,
  25,
  23,
  31,
  24,
  9,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, current_step_),
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, stage_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, min_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, max_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, not_stage_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, share_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, propagate_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, include_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exclude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, argmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, contrastive_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dummy_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, elu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, embed_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flatten_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hinge_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infogain_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, log_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, memory_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mvn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, power_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, prelu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, python_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reduction_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, roi_pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scale_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sigmoid_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, slice_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tanh_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, threshold_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tile_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, window_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_config_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_frame_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_frame_sequence_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_blob_visualize_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_plan_view_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_plan_view_extractor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_horizontal_view_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_horizontal_view_extractor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_side_view_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_side_view_extractor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_segmentor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_frame_target_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_online_norm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_view_pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_view_unpooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_point_interpolation_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, smartseg_dilation_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, fcn_image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, resize_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_related_dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inception_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, element_hinge_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pyramid_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, detection_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, roi_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, roi_2_heatmap_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, roi_show_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, roi_refine_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, deformable_convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_arbitrary_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, expandlabel_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, manipulate_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_label_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, binary_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, cylinder_view_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bird_view_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, repeat_channel_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, region_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reorg_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, region_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, permute_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, resample_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_every_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, detection_output_ssd_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_distort_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bbox_reg_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, psroi_pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dfmb_psroi_pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reg_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, proposal_img_scale_to_cam_coords_param_),
  0,
  1,
  ~0u,
  ~0u,
  97,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  41,
  43,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  42,
  39,
  13,
  37,
  14,
  15,
  16,
  17,
  18,
  19,
  45,
  36,
  20,
  21,
  22,
  23,
  24,
  33,
  32,
  38,
  25,
  35,
  96,
  44,
  26,
  27,
  34,
  28,
  29,
  30,
  40,
  31,
  51,
  52,
  60,
  53,
  54,
  56,
  55,
  57,
  66,
  67,
  58,
  59,
  61,
  62,
  63,
  64,
  65,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  47,
  48,
  49,
  46,
  50,
  98,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandlabelParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandlabelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandlabelParameter, maxlabel_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatChannelParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatChannelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatChannelParameter, num_repeat_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermuteParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermuteParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermuteParameter, order_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, xmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, ymax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, difficult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, num_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, nms_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, keep_top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, confidence_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOutputParameter, anchorbox_),
  1,
  0,
  3,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonMaximumSuppressionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonMaximumSuppressionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonMaximumSuppressionParameter, nms_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonMaximumSuppressionParameter, top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonMaximumSuppressionParameter, eta_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, anchorbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, thresholds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, object_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, noobject_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, class_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, coord_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, rescore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, num_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, bias_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionParameter, adjust_anchor_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorBox, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorBox, h_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, stride_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_max_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_mean_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_log_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_top_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_mean_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_nonempty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_first_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_second_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_height_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, use_dense_feat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, point_cloud_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdviewParameter, height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, ntheta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, nphi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, otheta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, ophi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, dtheta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderViewParameter, dphi_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, use_disturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, ignore_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, pad_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, use_instance_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, num_instance_feat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, root_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, pre_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, view_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, label_map_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDataParameter, do_classify_),
  0,
  3,
  7,
  8,
  4,
  5,
  9,
  6,
  1,
  10,
  12,
  2,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMapItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMapItem, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMapItem, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMapItem, display_name_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelMap, item_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, offset_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, rand_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, min_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, max_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, label_slice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLabelDataParameter, padding_),
  0,
  5,
  2,
  3,
  4,
  6,
  7,
  1,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, meanfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, use_disturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, useflip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, usemovedisturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, label_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, label_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, need_split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, left_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, right_roi_),
  0,
  2,
  14,
  15,
  16,
  5,
  7,
  17,
  8,
  9,
  18,
  1,
  6,
  12,
  10,
  11,
  19,
  13,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_balancesample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, ignore_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_fullzeroignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, bg_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, uniform_droprate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_perchannel_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, drop_singleclasschannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, print_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_unionchannel_balance_),
  1,
  0,
  2,
  7,
  8,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_gray_),
  5,
  2,
  1,
  0,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, ignore_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalize_per_positive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, label_bottom_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, smooth_),
  0,
  3,
  1,
  4,
  5,
  6,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, ignore_label_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, out_max_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, axis_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, concat_dim_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, use_global_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, moving_average_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, use_instance_norm_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, num_axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, filler_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, legacy_version_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, dilation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, force_nd_im2col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, dfmb_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, mask_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, analysis_num_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_h_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_w_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, print_weight_bias_statistics_),
  2,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  13,
  0,
  1,
  9,
  14,
  10,
  15,
  16,
  17,
  ~0u,
  ~0u,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, backend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, force_encoded_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, prefetch_),
  0,
  2,
  4,
  7,
  8,
  1,
  3,
  5,
  6,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, data_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, width_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, stable_prod_grad_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, alpha_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, input_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_filler_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, shift_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, end_axis_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, shuffle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, file_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, norm_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, is_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, root_folder_),
  0,
  11,
  4,
  5,
  7,
  8,
  9,
  10,
  1,
  3,
  6,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, source_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, axis_),
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, shape_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, shift_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, norm_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, engine_),
  2,
  3,
  4,
  0,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, width_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, normalize_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, across_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, eps_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, global_pooling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, cmp_out_shape_floor_as_conv_),
  0,
  2,
  7,
  8,
  1,
  3,
  4,
  12,
  5,
  6,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, shift_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, param_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, share_in_parallel_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, coeff_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, negative_slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, engine_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, num_axes_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, pooled_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, pooled_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, spatial_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, pad_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, use_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, sqrt_sample_loc_num_per_bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIPoolingParameter, position_sensitive_),
  0,
  1,
  8,
  2,
  3,
  4,
  5,
  9,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, num_axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_filler_),
  3,
  4,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, engine_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_dim_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, axis_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, engine_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, tiles_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, threshold_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, bg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, context_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, cache_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, root_folder_),
  0,
  9,
  1,
  4,
  5,
  6,
  10,
  11,
  12,
  8,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pyramid_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, engine_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, include_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exclude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blob_share_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, accuracy_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, argmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, concat_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, contrastive_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dummy_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, eltwise_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hinge_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, infogain_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, inner_product_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, lrn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, memory_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, mvn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, power_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, sigmoid_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, slice_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, tanh_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, threshold_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, window_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, transform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, crop_parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, image_data_arbitrary_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, expandlabel_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, deformable_convolution_param_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  36,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  20,
  16,
  2,
  29,
  3,
  4,
  5,
  19,
  17,
  30,
  6,
  7,
  21,
  8,
  9,
  10,
  11,
  15,
  24,
  12,
  14,
  22,
  27,
  28,
  23,
  26,
  18,
  13,
  25,
  31,
  1,
  32,
  34,
  35,
  33,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, biasterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, kernelsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, dropout_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, local_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, meanfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, batchsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, cropsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_bg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_context_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_crop_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, shuffle_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, concat_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, hdf5_output_param_),
  0,
  1,
  8,
  23,
  5,
  6,
  9,
  10,
  24,
  25,
  11,
  26,
  27,
  28,
  29,
  31,
  2,
  30,
  3,
  12,
  13,
  15,
  ~0u,
  ~0u,
  ~0u,
  17,
  32,
  33,
  34,
  18,
  4,
  19,
  20,
  21,
  14,
  16,
  22,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, channel_shared_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, is_pyramid_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, out_height_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, out_width_scale_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, negative_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, value_masked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, hard_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, ignore_largest_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, min_neg_nums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRelatedDropoutParam, per_image_),
  5,
  0,
  6,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionColumnParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionColumnParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionColumnParameter, convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionColumnParameter, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionColumnParameter, column_name_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, need_relu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, relu_at_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionParameter, inception_column_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, scale_loss_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, max_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, max_block_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, roi_star_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPackingParameter, roi_height_percent_),
  4,
  1,
  2,
  5,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, image_list_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, image_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, scale_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, scale_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, scale_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, scale_from_annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, block_packing_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, mean_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, mean_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, mean_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, max_block_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, mean2_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, mean2_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, mean2_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, is_img_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, use_video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, video_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, list_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, rgb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, pic_print_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, show_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, resize_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyramidDataParameter, scales_),
  0,
  1,
  20,
  21,
  22,
  15,
  4,
  8,
  9,
  5,
  6,
  7,
  23,
  16,
  10,
  11,
  12,
  17,
  18,
  2,
  3,
  19,
  24,
  13,
  14,
  25,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParameter, need_nms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParameter, overlap_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParameter, top_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParameter, add_score_),
  2,
  3,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, nms_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, channel_per_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, class_name_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, refine_out_of_map_bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, all_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, mean_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, mean_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, mean_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, class_inds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, dim_inds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, pars_inds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, angle_inds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, pts8_inds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, box2d_inds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, group_veh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, new_class_thr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, new_class_overlap_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputParameter, shallow_track_step_),
  0,
  5,
  6,
  ~0u,
  7,
  8,
  1,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, pos_iou_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, neg_iou_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, need_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, neg_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, hard_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDataParam, hard_threshold_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, map_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, map_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, map_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI2HeatMapParam, label_type_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIRefineParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIRefineParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIRefineParam, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIRefineParam, label_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, is_input_heatmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, heatmap_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, mean_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, mean_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIShowParam, mean_b_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviousStageParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviousStageParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviousStageParameter, net_prototxt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviousStageParameter, net_param_file_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, crop_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, crop_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, print_info_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResampleParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResampleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResampleParameter, antialias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResampleParameter, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResampleParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResampleParameter, type_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, base_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, ratios_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, scales_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, anchor_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, anchor_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, anchor_x1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, anchor_y1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, anchor_x2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, anchor_y2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateAnchorParameter, zero_anchor_center_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, need_nms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, overlap_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, top_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, add_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, max_candidate_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, use_soft_nms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, nms_among_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, voting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSSSDParameter, vote_iou_),
  2,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_exist_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_reg_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_reg_as_classify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_classify_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_classify_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_reg_norm_idx_st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_st_for_each_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_ed_for_each_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPTSParameter, kpts_classify_pad_ratio_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATRSParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATRSParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATRSParameter, atrs_reg_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATRSParameter, atrs_reg_norm_idx_st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATRSParameter, atrs_norm_type_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRSParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRSParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRSParameter, ftrs_bottom_idx_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, spmp_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, spmp_class_aware_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, spmp_label_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, spmp_label_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMPParameter, spmp_pad_ratio_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam3dParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam3dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam3dParameter, cam3d_bottom_idx_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, nms_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, channel_per_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, class_name_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, refine_out_of_map_bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, class_indexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, threshold_objectness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, proposal_min_sqrt_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, proposal_max_sqrt_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, bg_as_one_of_softmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, use_target_type_rcnn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, im_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, im_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, rpn_proposal_output_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, regress_agnostic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, gen_anchor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, allow_border_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, allow_border_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, bbox_size_add_one_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, read_width_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, read_height_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, read_height_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, min_size_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, min_size_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, min_size_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, kpts_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, atrs_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, ftrs_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, spmp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionOutputSSDParameter, cam3d_param_),
  1,
  ~0u,
  17,
  0,
  18,
  9,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  ~0u,
  10,
  19,
  12,
  13,
  11,
  20,
  2,
  22,
  23,
  21,
  24,
  25,
  14,
  26,
  16,
  15,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxRegParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxRegParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxRegParameter, bbox_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxRegParameter, bbox_std_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegParameter, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegParameter, std_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, pre_mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, new_mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, pre_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, new_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, distort_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDistortParameter, noise_param_),
  ~0u,
  ~0u,
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, pad_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, output_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSROIPoolingParameter, group_size_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, heat_map_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, heat_map_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, pad_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, output_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, trans_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, sample_per_part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, group_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, group_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, pooled_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, pooled_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, part_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFMBPSROIPoolingParameter, part_width_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, sub_class_num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, sub_class_bottom_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, prj_h_norm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, has_size3d_and_orien3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, orien_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cls_ids_zero_size3d_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cls_ids_zero_size3d_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cls_ids_zero_orien3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cmp_pts_corner_3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cmp_pts_corner_2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, ctr_2d_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, ctr_2d_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, prj_h_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, prj_h_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, real_h_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, real_h_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, real_w_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, real_w_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, real_l_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, real_l_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, sin_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, sin_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cos_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cos_stds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cam_info_idx_st_in_im_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, im_width_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, im_height_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cords_offset_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, cords_offset_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposalImgScaleToCamCoordsParameter, bbox_size_add_one_),
  0,
  ~0u,
  ~0u,
  8,
  1,
  9,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  10,
  11,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, dilation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, kernel_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, kernel_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableConvolutionParameter, force_nd_im2col_),
  2,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  13,
  0,
  1,
  9,
  11,
  10,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(BlobShape)},
  { 7, 21, sizeof(BlobProto)},
  { 30, 36, sizeof(BlobProtoVector)},
  { 37, 49, sizeof(Datum)},
  { 56, 70, sizeof(FillerParameter)},
  { 79, 93, sizeof(NetParameter)},
  { 102, 150, sizeof(SolverParameter)},
  { 193, 202, sizeof(SolverState)},
  { 206, 214, sizeof(NetState)},
  { 217, 227, sizeof(NetStateRule)},
  { 232, 241, sizeof(ParamSpec)},
  { 245, 357, sizeof(LayerParameter)},
  { 464, 470, sizeof(ExpandlabelParameter)},
  { 471, 477, sizeof(RepeatChannelParameter)},
  { 478, 484, sizeof(PermuteParameter)},
  { 485, 498, sizeof(NormalizedBBox)},
  { 506, 516, sizeof(RegionOutputParameter)},
  { 521, 529, sizeof(NonMaximumSuppressionParameter)},
  { 532, 550, sizeof(RegionParameter)},
  { 563, 570, sizeof(AnchorBox)},
  { 572, 578, sizeof(ReorgParameter)},
  { 579, 599, sizeof(BirdviewParameter)},
  { 614, 625, sizeof(CylinderViewParameter)},
  { 631, 649, sizeof(BinaryDataParameter)},
  { 662, 670, sizeof(LabelMapItem)},
  { 673, 679, sizeof(LabelMap)},
  { 680, 688, sizeof(Slice)},
  { 691, 705, sizeof(ImageLabelDataParameter)},
  { 714, 739, sizeof(ImageDataArbitraryParameter)},
  { 759, 773, sizeof(ManipulateLossParameter)},
  { 782, 794, sizeof(TransformationParameter)},
  { 801, 813, sizeof(LossParameter)},
  { 820, 828, sizeof(AccuracyParameter)},
  { 831, 839, sizeof(ArgMaxParameter)},
  { 842, 849, sizeof(ConcatParameter)},
  { 851, 860, sizeof(BatchNormParameter)},
  { 864, 872, sizeof(BiasParameter)},
  { 875, 882, sizeof(ContrastiveLossParameter)},
  { 884, 913, sizeof(ConvolutionParameter)},
  { 937, 952, sizeof(DataParameter)},
  { 962, 968, sizeof(DropoutParameter)},
  { 969, 980, sizeof(DummyDataParameter)},
  { 986, 994, sizeof(EltwiseParameter)},
  { 997, 1003, sizeof(ELUParameter)},
  { 1004, 1014, sizeof(EmbedParameter)},
  { 1019, 1027, sizeof(ExpParameter)},
  { 1030, 1037, sizeof(FlattenParameter)},
  { 1039, 1047, sizeof(HDF5DataParameter)},
  { 1050, 1056, sizeof(HDF5OutputParameter)},
  { 1057, 1063, sizeof(HingeLossParameter)},
  { 1064, 1081, sizeof(ImageDataParameter)},
  { 1093, 1099, sizeof(InfogainLossParameter)},
  { 1100, 1110, sizeof(InnerProductParameter)},
  { 1115, 1121, sizeof(InputParameter)},
  { 1122, 1130, sizeof(LogParameter)},
  { 1133, 1144, sizeof(LRNParameter)},
  { 1150, 1159, sizeof(MemoryDataParameter)},
  { 1163, 1171, sizeof(MVNParameter)},
  { 1174, 1192, sizeof(PoolingParameter)},
  { 1205, 1213, sizeof(PowerParameter)},
  { 1216, 1225, sizeof(PythonParameter)},
  { 1229, 1237, sizeof(ReductionParameter)},
  { 1240, 1247, sizeof(ReLUParameter)},
  { 1249, 1257, sizeof(ReshapeParameter)},
  { 1260, 1275, sizeof(ROIPoolingParameter)},
  { 1285, 1295, sizeof(ScaleParameter)},
  { 1300, 1306, sizeof(SigmoidParameter)},
  { 1307, 1315, sizeof(SliceParameter)},
  { 1318, 1325, sizeof(SoftmaxParameter)},
  { 1327, 1333, sizeof(TanHParameter)},
  { 1334, 1341, sizeof(TileParameter)},
  { 1343, 1349, sizeof(ThresholdParameter)},
  { 1350, 1368, sizeof(WindowDataParameter)},
  { 1381, 1389, sizeof(SPPParameter)},
  { 1392, 1444, sizeof(V1LayerParameter)},
  { 1491, 1534, sizeof(V0LayerParameter)},
  { 1572, 1579, sizeof(PReLUParameter)},
  { 1581, 1591, sizeof(ResizeParameter)},
  { 1596, 1608, sizeof(LabelRelatedDropoutParam)},
  { 1615, 1623, sizeof(InceptionColumnParameter)},
  { 1626, 1637, sizeof(InceptionParameter)},
  { 1643, 1650, sizeof(ElementHingeLossParameter)},
  { 1652, 1663, sizeof(BlockPackingParameter)},
  { 1669, 1701, sizeof(PyramidDataParameter)},
  { 1728, 1737, sizeof(NMSParameter)},
  { 1741, 1767, sizeof(DetectionOutputParameter)},
  { 1788, 1800, sizeof(ROIDataParam)},
  { 1807, 1817, sizeof(ROI2HeatMapParam)},
  { 1822, 1829, sizeof(ROIRefineParam)},
  { 1831, 1843, sizeof(ROIShowParam)},
  { 1850, 1857, sizeof(PreviousStageParameter)},
  { 1859, 1868, sizeof(CropParameter)},
  { 1872, 1881, sizeof(ResampleParameter)},
  { 1885, 1900, sizeof(GenerateAnchorParameter)},
  { 1910, 1924, sizeof(NMSSSDParameter)},
  { 1933, 1947, sizeof(KPTSParameter)},
  { 1956, 1964, sizeof(ATRSParameter)},
  { 1967, 1973, sizeof(FTRSParameter)},
  { 1974, 1984, sizeof(SPMPParameter)},
  { 1989, 1995, sizeof(Cam3dParameter)},
  { 1996, 2034, sizeof(DetectionOutputSSDParameter)},
  { 2067, 2074, sizeof(BBoxRegParameter)},
  { 2076, 2083, sizeof(RegParameter)},
  { 2085, 2096, sizeof(ImageDistortParameter)},
  { 2102, 2112, sizeof(PSROIPoolingParameter)},
  { 2117, 2134, sizeof(DFMBPSROIPoolingParameter)},
  { 2146, 2182, sizeof(ProposalImgScaleToCamCoordsParameter)},
  { 2213, 2236, sizeof(DeformableConvolutionParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProtoVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Datum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FillerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetStateRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParamSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExpandlabelParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RepeatChannelParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PermuteParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NormalizedBBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionOutputParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NonMaximumSuppressionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnchorBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReorgParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BirdviewParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CylinderViewParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BinaryDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelMapItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Slice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageLabelDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageDataArbitraryParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManipulateLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransformationParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccuracyParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ArgMaxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConcatParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchNormParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BiasParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContrastiveLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropoutParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DummyDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EltwiseParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ELUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbedParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExpParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlattenParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HDF5DataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HDF5OutputParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HingeLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfogainLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InnerProductParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LRNParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVNParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PowerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PythonParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReductionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReLUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReshapeParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROIPoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScaleParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SigmoidParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SliceParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TanHParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TileParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThresholdParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindowDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SPPParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_V1LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_V0LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PReLUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelRelatedDropoutParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InceptionColumnParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InceptionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ElementHingeLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockPackingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PyramidDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NMSParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectionOutputParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROIDataParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROI2HeatMapParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROIRefineParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROIShowParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreviousStageParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CropParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResampleParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenerateAnchorParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NMSSSDParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KPTSParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ATRSParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FTRSParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SPMPParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cam3dParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectionOutputSSDParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BBoxRegParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageDistortParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PSROIPoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DFMBPSROIPoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProposalImgScaleToCamCoordsParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeformableConvolutionParameter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "caffe.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 108);
}

}  // namespace

void TableStruct::Shutdown() {
  _BlobShape_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BlobProto_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BlobProtoVector_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Datum_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FillerParameter_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  FillerParameter::_default_type_.Shutdown();
  _NetParameter_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SolverParameter_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  SolverParameter::_default_regularization_type_.Shutdown();
  SolverParameter::_default_type_.Shutdown();
  _SolverState_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _NetState_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _NetStateRule_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ParamSpec_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _LayerParameter_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ExpandlabelParameter_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RepeatChannelParameter_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _PermuteParameter_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _NormalizedBBox_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RegionOutputParameter_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _NonMaximumSuppressionParameter_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _RegionParameter_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _AnchorBox_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ReorgParameter_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _BirdviewParameter_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CylinderViewParameter_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _BinaryDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _LabelMapItem_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _LabelMap_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _Slice_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _ImageLabelDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ImageDataArbitraryParameter_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ManipulateLossParameter_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _TransformationParameter_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _LossParameter_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _AccuracyParameter_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ArgMaxParameter_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _ConcatParameter_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _BatchNormParameter_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _BiasParameter_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _ContrastiveLossParameter_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _ConvolutionParameter_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _DataParameter_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _DropoutParameter_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _DummyDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _EltwiseParameter_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _ELUParameter_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _EmbedParameter_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _ExpParameter_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _FlattenParameter_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _HDF5DataParameter_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _HDF5OutputParameter_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _HingeLossParameter_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _ImageDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _InfogainLossParameter_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _InnerProductParameter_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _InputParameter_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _LogParameter_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _LRNParameter_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _MemoryDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _MVNParameter_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _PoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _PowerParameter_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _PythonParameter_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _ReductionParameter_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _ReLUParameter_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _ReshapeParameter_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _ROIPoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _ScaleParameter_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _SigmoidParameter_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _SliceParameter_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _SoftmaxParameter_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _TanHParameter_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _TileParameter_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _ThresholdParameter_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _WindowDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  WindowDataParameter::_default_crop_mode_.Shutdown();
  _SPPParameter_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _V1LayerParameter_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _V0LayerParameter_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  V0LayerParameter::_default_det_crop_mode_.Shutdown();
  _PReLUParameter_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _ResizeParameter_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _LabelRelatedDropoutParam_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _InceptionColumnParameter_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _InceptionParameter_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _ElementHingeLossParameter_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _BlockPackingParameter_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _PyramidDataParameter_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _NMSParameter_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _DetectionOutputParameter_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _ROIDataParam_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _ROI2HeatMapParam_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _ROIRefineParam_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _ROIShowParam_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _PreviousStageParameter_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _CropParameter_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _ResampleParameter_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _GenerateAnchorParameter_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _NMSSSDParameter_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _KPTSParameter_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _ATRSParameter_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _FTRSParameter_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _SPMPParameter_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _Cam3dParameter_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _DetectionOutputSSDParameter_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _BBoxRegParameter_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _RegParameter_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _ImageDistortParameter_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _PSROIPoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _DFMBPSROIPoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _ProposalImgScaleToCamCoordsParameter_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _DeformableConvolutionParameter_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::caffe_fcn_data_layer::protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::InitDefaults();
  ::smartseg::protobuf_caffe_5fsmartseg_2eproto::InitDefaults();
  _BlobShape_default_instance_.DefaultConstruct();
  _BlobProto_default_instance_.DefaultConstruct();
  _BlobProtoVector_default_instance_.DefaultConstruct();
  _Datum_default_instance_.DefaultConstruct();
  FillerParameter::_default_type_.DefaultConstruct();
  *FillerParameter::_default_type_.get_mutable() = ::std::string("constant", 8);
  _FillerParameter_default_instance_.DefaultConstruct();
  _NetParameter_default_instance_.DefaultConstruct();
  SolverParameter::_default_regularization_type_.DefaultConstruct();
  *SolverParameter::_default_regularization_type_.get_mutable() = ::std::string("L2", 2);
  SolverParameter::_default_type_.DefaultConstruct();
  *SolverParameter::_default_type_.get_mutable() = ::std::string("SGD", 3);
  _SolverParameter_default_instance_.DefaultConstruct();
  _SolverState_default_instance_.DefaultConstruct();
  _NetState_default_instance_.DefaultConstruct();
  _NetStateRule_default_instance_.DefaultConstruct();
  _ParamSpec_default_instance_.DefaultConstruct();
  _LayerParameter_default_instance_.DefaultConstruct();
  _ExpandlabelParameter_default_instance_.DefaultConstruct();
  _RepeatChannelParameter_default_instance_.DefaultConstruct();
  _PermuteParameter_default_instance_.DefaultConstruct();
  _NormalizedBBox_default_instance_.DefaultConstruct();
  _RegionOutputParameter_default_instance_.DefaultConstruct();
  _NonMaximumSuppressionParameter_default_instance_.DefaultConstruct();
  _RegionParameter_default_instance_.DefaultConstruct();
  _AnchorBox_default_instance_.DefaultConstruct();
  _ReorgParameter_default_instance_.DefaultConstruct();
  _BirdviewParameter_default_instance_.DefaultConstruct();
  _CylinderViewParameter_default_instance_.DefaultConstruct();
  _BinaryDataParameter_default_instance_.DefaultConstruct();
  _LabelMapItem_default_instance_.DefaultConstruct();
  _LabelMap_default_instance_.DefaultConstruct();
  _Slice_default_instance_.DefaultConstruct();
  _ImageLabelDataParameter_default_instance_.DefaultConstruct();
  _ImageDataArbitraryParameter_default_instance_.DefaultConstruct();
  _ManipulateLossParameter_default_instance_.DefaultConstruct();
  _TransformationParameter_default_instance_.DefaultConstruct();
  _LossParameter_default_instance_.DefaultConstruct();
  _AccuracyParameter_default_instance_.DefaultConstruct();
  _ArgMaxParameter_default_instance_.DefaultConstruct();
  _ConcatParameter_default_instance_.DefaultConstruct();
  _BatchNormParameter_default_instance_.DefaultConstruct();
  _BiasParameter_default_instance_.DefaultConstruct();
  _ContrastiveLossParameter_default_instance_.DefaultConstruct();
  _ConvolutionParameter_default_instance_.DefaultConstruct();
  _DataParameter_default_instance_.DefaultConstruct();
  _DropoutParameter_default_instance_.DefaultConstruct();
  _DummyDataParameter_default_instance_.DefaultConstruct();
  _EltwiseParameter_default_instance_.DefaultConstruct();
  _ELUParameter_default_instance_.DefaultConstruct();
  _EmbedParameter_default_instance_.DefaultConstruct();
  _ExpParameter_default_instance_.DefaultConstruct();
  _FlattenParameter_default_instance_.DefaultConstruct();
  _HDF5DataParameter_default_instance_.DefaultConstruct();
  _HDF5OutputParameter_default_instance_.DefaultConstruct();
  _HingeLossParameter_default_instance_.DefaultConstruct();
  _ImageDataParameter_default_instance_.DefaultConstruct();
  _InfogainLossParameter_default_instance_.DefaultConstruct();
  _InnerProductParameter_default_instance_.DefaultConstruct();
  _InputParameter_default_instance_.DefaultConstruct();
  _LogParameter_default_instance_.DefaultConstruct();
  _LRNParameter_default_instance_.DefaultConstruct();
  _MemoryDataParameter_default_instance_.DefaultConstruct();
  _MVNParameter_default_instance_.DefaultConstruct();
  _PoolingParameter_default_instance_.DefaultConstruct();
  _PowerParameter_default_instance_.DefaultConstruct();
  _PythonParameter_default_instance_.DefaultConstruct();
  _ReductionParameter_default_instance_.DefaultConstruct();
  _ReLUParameter_default_instance_.DefaultConstruct();
  _ReshapeParameter_default_instance_.DefaultConstruct();
  _ROIPoolingParameter_default_instance_.DefaultConstruct();
  _ScaleParameter_default_instance_.DefaultConstruct();
  _SigmoidParameter_default_instance_.DefaultConstruct();
  _SliceParameter_default_instance_.DefaultConstruct();
  _SoftmaxParameter_default_instance_.DefaultConstruct();
  _TanHParameter_default_instance_.DefaultConstruct();
  _TileParameter_default_instance_.DefaultConstruct();
  _ThresholdParameter_default_instance_.DefaultConstruct();
  WindowDataParameter::_default_crop_mode_.DefaultConstruct();
  *WindowDataParameter::_default_crop_mode_.get_mutable() = ::std::string("warp", 4);
  _WindowDataParameter_default_instance_.DefaultConstruct();
  _SPPParameter_default_instance_.DefaultConstruct();
  _V1LayerParameter_default_instance_.DefaultConstruct();
  V0LayerParameter::_default_det_crop_mode_.DefaultConstruct();
  *V0LayerParameter::_default_det_crop_mode_.get_mutable() = ::std::string("warp", 4);
  _V0LayerParameter_default_instance_.DefaultConstruct();
  _PReLUParameter_default_instance_.DefaultConstruct();
  _ResizeParameter_default_instance_.DefaultConstruct();
  _LabelRelatedDropoutParam_default_instance_.DefaultConstruct();
  _InceptionColumnParameter_default_instance_.DefaultConstruct();
  _InceptionParameter_default_instance_.DefaultConstruct();
  _ElementHingeLossParameter_default_instance_.DefaultConstruct();
  _BlockPackingParameter_default_instance_.DefaultConstruct();
  _PyramidDataParameter_default_instance_.DefaultConstruct();
  _NMSParameter_default_instance_.DefaultConstruct();
  _DetectionOutputParameter_default_instance_.DefaultConstruct();
  _ROIDataParam_default_instance_.DefaultConstruct();
  _ROI2HeatMapParam_default_instance_.DefaultConstruct();
  _ROIRefineParam_default_instance_.DefaultConstruct();
  _ROIShowParam_default_instance_.DefaultConstruct();
  _PreviousStageParameter_default_instance_.DefaultConstruct();
  _CropParameter_default_instance_.DefaultConstruct();
  _ResampleParameter_default_instance_.DefaultConstruct();
  _GenerateAnchorParameter_default_instance_.DefaultConstruct();
  _NMSSSDParameter_default_instance_.DefaultConstruct();
  _KPTSParameter_default_instance_.DefaultConstruct();
  _ATRSParameter_default_instance_.DefaultConstruct();
  _FTRSParameter_default_instance_.DefaultConstruct();
  _SPMPParameter_default_instance_.DefaultConstruct();
  _Cam3dParameter_default_instance_.DefaultConstruct();
  _DetectionOutputSSDParameter_default_instance_.DefaultConstruct();
  _BBoxRegParameter_default_instance_.DefaultConstruct();
  _RegParameter_default_instance_.DefaultConstruct();
  _ImageDistortParameter_default_instance_.DefaultConstruct();
  _PSROIPoolingParameter_default_instance_.DefaultConstruct();
  _DFMBPSROIPoolingParameter_default_instance_.DefaultConstruct();
  _ProposalImgScaleToCamCoordsParameter_default_instance_.DefaultConstruct();
  _DeformableConvolutionParameter_default_instance_.DefaultConstruct();
  _BlobProto_default_instance_.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
  _NetParameter_default_instance_.get_mutable()->state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->train_net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->train_state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->previous_stage_param_ = const_cast< ::caffe::PreviousStageParameter*>(
      ::caffe::PreviousStageParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
      ::caffe::ArgMaxParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(
      ::caffe::BatchNormParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->bias_param_ = const_cast< ::caffe::BiasParameter*>(
      ::caffe::BiasParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
      ::caffe::ContrastiveLossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
      ::caffe::DummyDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->elu_param_ = const_cast< ::caffe::ELUParameter*>(
      ::caffe::ELUParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->embed_param_ = const_cast< ::caffe::EmbedParameter*>(
      ::caffe::EmbedParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->exp_param_ = const_cast< ::caffe::ExpParameter*>(
      ::caffe::ExpParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->flatten_param_ = const_cast< ::caffe::FlattenParameter*>(
      ::caffe::FlattenParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
      ::caffe::HDF5DataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
      ::caffe::HingeLossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
      ::caffe::ImageDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
      ::caffe::InfogainLossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->input_param_ = const_cast< ::caffe::InputParameter*>(
      ::caffe::InputParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->log_param_ = const_cast< ::caffe::LogParameter*>(
      ::caffe::LogParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->lrn_param_ = const_cast< ::caffe::LRNParameter*>(
      ::caffe::LRNParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
      ::caffe::MemoryDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->mvn_param_ = const_cast< ::caffe::MVNParameter*>(
      ::caffe::MVNParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->power_param_ = const_cast< ::caffe::PowerParameter*>(
      ::caffe::PowerParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->prelu_param_ = const_cast< ::caffe::PReLUParameter*>(
      ::caffe::PReLUParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->python_param_ = const_cast< ::caffe::PythonParameter*>(
      ::caffe::PythonParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->reduction_param_ = const_cast< ::caffe::ReductionParameter*>(
      ::caffe::ReductionParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->reshape_param_ = const_cast< ::caffe::ReshapeParameter*>(
      ::caffe::ReshapeParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->roi_pooling_param_ = const_cast< ::caffe::ROIPoolingParameter*>(
      ::caffe::ROIPoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->scale_param_ = const_cast< ::caffe::ScaleParameter*>(
      ::caffe::ScaleParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
      ::caffe::SigmoidParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
      ::caffe::SoftmaxParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->spp_param_ = const_cast< ::caffe::SPPParameter*>(
      ::caffe::SPPParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->slice_param_ = const_cast< ::caffe::SliceParameter*>(
      ::caffe::SliceParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->tanh_param_ = const_cast< ::caffe::TanHParameter*>(
      ::caffe::TanHParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
      ::caffe::ThresholdParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->tile_param_ = const_cast< ::caffe::TileParameter*>(
      ::caffe::TileParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
      ::caffe::WindowDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_config_param_ = const_cast< ::smartseg::ConfigParameter*>(
      ::smartseg::ConfigParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_frame_data_param_ = const_cast< ::smartseg::FrameDataParameter*>(
      ::smartseg::FrameDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_frame_sequence_data_param_ = const_cast< ::smartseg::FrameSequenceDataParameter*>(
      ::smartseg::FrameSequenceDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_blob_visualize_param_ = const_cast< ::smartseg::BlobVisualizeParameter*>(
      ::smartseg::BlobVisualizeParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_plan_view_param_ = const_cast< ::smartseg::PlanViewParameter*>(
      ::smartseg::PlanViewParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_plan_view_extractor_param_ = const_cast< ::smartseg::PlanViewExtractorParameter*>(
      ::smartseg::PlanViewExtractorParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_horizontal_view_param_ = const_cast< ::smartseg::HorizontalViewParameter*>(
      ::smartseg::HorizontalViewParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_horizontal_view_extractor_param_ = const_cast< ::smartseg::HorizontalViewExtractorParameter*>(
      ::smartseg::HorizontalViewExtractorParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_side_view_param_ = const_cast< ::smartseg::SideViewParameter*>(
      ::smartseg::SideViewParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_side_view_extractor_param_ = const_cast< ::smartseg::SideViewExtractorParameter*>(
      ::smartseg::SideViewExtractorParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_segmentor_param_ = const_cast< ::smartseg::SegmentorParameter*>(
      ::smartseg::SegmentorParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_frame_target_param_ = const_cast< ::smartseg::FrameTargetParameter*>(
      ::smartseg::FrameTargetParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_online_norm_param_ = const_cast< ::smartseg::OnlineNormParameter*>(
      ::smartseg::OnlineNormParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_view_pooling_param_ = const_cast< ::smartseg::ViewPoolingParameter*>(
      ::smartseg::ViewPoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_view_unpooling_param_ = const_cast< ::smartseg::ViewUnpoolingParameter*>(
      ::smartseg::ViewUnpoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_point_interpolation_param_ = const_cast< ::smartseg::PointInterpolationParameter*>(
      ::smartseg::PointInterpolationParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->smartseg_dilation_param_ = const_cast< ::smartseg::DilationParameter*>(
      ::smartseg::DilationParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->fcn_image_data_param_ = const_cast< ::caffe_fcn_data_layer::FCNImageDataParameter*>(
      ::caffe_fcn_data_layer::FCNImageDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->resize_param_ = const_cast< ::caffe::ResizeParameter*>(
      ::caffe::ResizeParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->label_related_dropout_param_ = const_cast< ::caffe::LabelRelatedDropoutParam*>(
      ::caffe::LabelRelatedDropoutParam::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->inception_param_ = const_cast< ::caffe::InceptionParameter*>(
      ::caffe::InceptionParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->element_hinge_loss_param_ = const_cast< ::caffe::ElementHingeLossParameter*>(
      ::caffe::ElementHingeLossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->pyramid_data_param_ = const_cast< ::caffe::PyramidDataParameter*>(
      ::caffe::PyramidDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->detection_output_param_ = const_cast< ::caffe::DetectionOutputParameter*>(
      ::caffe::DetectionOutputParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->roi_data_param_ = const_cast< ::caffe::ROIDataParam*>(
      ::caffe::ROIDataParam::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->roi_2_heatmap_param_ = const_cast< ::caffe::ROI2HeatMapParam*>(
      ::caffe::ROI2HeatMapParam::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->roi_show_param_ = const_cast< ::caffe::ROIShowParam*>(
      ::caffe::ROIShowParam::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->roi_refine_param_ = const_cast< ::caffe::ROIRefineParam*>(
      ::caffe::ROIRefineParam::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->crop_param_ = const_cast< ::caffe::CropParameter*>(
      ::caffe::CropParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->deformable_convolution_param_ = const_cast< ::caffe::DeformableConvolutionParameter*>(
      ::caffe::DeformableConvolutionParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->image_data_arbitrary_param_ = const_cast< ::caffe::ImageDataArbitraryParameter*>(
      ::caffe::ImageDataArbitraryParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->expandlabel_param_ = const_cast< ::caffe::ExpandlabelParameter*>(
      ::caffe::ExpandlabelParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->manipulate_loss_param_ = const_cast< ::caffe::ManipulateLossParameter*>(
      ::caffe::ManipulateLossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->image_label_data_param_ = const_cast< ::caffe::ImageLabelDataParameter*>(
      ::caffe::ImageLabelDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->binary_data_param_ = const_cast< ::caffe::BinaryDataParameter*>(
      ::caffe::BinaryDataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->cylinder_view_param_ = const_cast< ::caffe::CylinderViewParameter*>(
      ::caffe::CylinderViewParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->bird_view_param_ = const_cast< ::caffe::BirdviewParameter*>(
      ::caffe::BirdviewParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->repeat_channel_param_ = const_cast< ::caffe::RepeatChannelParameter*>(
      ::caffe::RepeatChannelParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->region_param_ = const_cast< ::caffe::RegionParameter*>(
      ::caffe::RegionParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->reorg_param_ = const_cast< ::caffe::ReorgParameter*>(
      ::caffe::ReorgParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->region_output_param_ = const_cast< ::caffe::RegionOutputParameter*>(
      ::caffe::RegionOutputParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->permute_param_ = const_cast< ::caffe::PermuteParameter*>(
      ::caffe::PermuteParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->resample_param_ = const_cast< ::caffe::ResampleParameter*>(
      ::caffe::ResampleParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->detection_output_ssd_param_ = const_cast< ::caffe::DetectionOutputSSDParameter*>(
      ::caffe::DetectionOutputSSDParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->image_distort_param_ = const_cast< ::caffe::ImageDistortParameter*>(
      ::caffe::ImageDistortParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->bbox_reg_param_ = const_cast< ::caffe::BBoxRegParameter*>(
      ::caffe::BBoxRegParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->psroi_pooling_param_ = const_cast< ::caffe::PSROIPoolingParameter*>(
      ::caffe::PSROIPoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->dfmb_psroi_pooling_param_ = const_cast< ::caffe::DFMBPSROIPoolingParameter*>(
      ::caffe::DFMBPSROIPoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->reg_param_ = const_cast< ::caffe::RegParameter*>(
      ::caffe::RegParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->proposal_img_scale_to_cam_coords_param_ = const_cast< ::caffe::ProposalImgScaleToCamCoordsParameter*>(
      ::caffe::ProposalImgScaleToCamCoordsParameter::internal_default_instance());
  _RegionOutputParameter_default_instance_.get_mutable()->nms_param_ = const_cast< ::caffe::NonMaximumSuppressionParameter*>(
      ::caffe::NonMaximumSuppressionParameter::internal_default_instance());
  _ImageLabelDataParameter_default_instance_.get_mutable()->label_slice_ = const_cast< ::caffe::Slice*>(
      ::caffe::Slice::internal_default_instance());
  _BiasParameter_default_instance_.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ConvolutionParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ConvolutionParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _EmbedParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _EmbedParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InnerProductParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InnerProductParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ReshapeParameter_default_instance_.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
  _ScaleParameter_default_instance_.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ScaleParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
      ::caffe::ArgMaxParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
      ::caffe::ContrastiveLossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
      ::caffe::DummyDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->exp_param_ = const_cast< ::caffe::ExpParameter*>(
      ::caffe::ExpParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
      ::caffe::HDF5DataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
      ::caffe::HingeLossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
      ::caffe::ImageDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
      ::caffe::InfogainLossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->lrn_param_ = const_cast< ::caffe::LRNParameter*>(
      ::caffe::LRNParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
      ::caffe::MemoryDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->mvn_param_ = const_cast< ::caffe::MVNParameter*>(
      ::caffe::MVNParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->power_param_ = const_cast< ::caffe::PowerParameter*>(
      ::caffe::PowerParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
      ::caffe::SigmoidParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
      ::caffe::SoftmaxParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->slice_param_ = const_cast< ::caffe::SliceParameter*>(
      ::caffe::SliceParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->tanh_param_ = const_cast< ::caffe::TanHParameter*>(
      ::caffe::TanHParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
      ::caffe::ThresholdParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
      ::caffe::WindowDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->layer_ = const_cast< ::caffe::V0LayerParameter*>(
      ::caffe::V0LayerParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->crop_parameter_ = const_cast< ::caffe::CropParameter*>(
      ::caffe::CropParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->image_data_arbitrary_param_ = const_cast< ::caffe::ImageDataArbitraryParameter*>(
      ::caffe::ImageDataArbitraryParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->expandlabel_param_ = const_cast< ::caffe::ExpandlabelParameter*>(
      ::caffe::ExpandlabelParameter::internal_default_instance());
  _V1LayerParameter_default_instance_.get_mutable()->deformable_convolution_param_ = const_cast< ::caffe::DeformableConvolutionParameter*>(
      ::caffe::DeformableConvolutionParameter::internal_default_instance());
  _V0LayerParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _V0LayerParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _V0LayerParameter_default_instance_.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  _PReLUParameter_default_instance_.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InceptionColumnParameter_default_instance_.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  _InceptionParameter_default_instance_.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  _InceptionParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InceptionParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _PyramidDataParameter_default_instance_.get_mutable()->block_packing_param_ = const_cast< ::caffe::BlockPackingParameter*>(
      ::caffe::BlockPackingParameter::internal_default_instance());
  _DetectionOutputParameter_default_instance_.get_mutable()->nms_param_ = const_cast< ::caffe::NMSParameter*>(
      ::caffe::NMSParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->nms_param_ = const_cast< ::caffe::NMSSSDParameter*>(
      ::caffe::NMSSSDParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->gen_anchor_param_ = const_cast< ::caffe::GenerateAnchorParameter*>(
      ::caffe::GenerateAnchorParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->kpts_param_ = const_cast< ::caffe::KPTSParameter*>(
      ::caffe::KPTSParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->atrs_param_ = const_cast< ::caffe::ATRSParameter*>(
      ::caffe::ATRSParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->ftrs_param_ = const_cast< ::caffe::FTRSParameter*>(
      ::caffe::FTRSParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->spmp_param_ = const_cast< ::caffe::SPMPParameter*>(
      ::caffe::SPMPParameter::internal_default_instance());
  _DetectionOutputSSDParameter_default_instance_.get_mutable()->cam3d_param_ = const_cast< ::caffe::Cam3dParameter*>(
      ::caffe::Cam3dParameter::internal_default_instance());
  _ImageDistortParameter_default_instance_.get_mutable()->distort_param_ = const_cast< ::caffe_fcn_data_layer::DistortionParameter*>(
      ::caffe_fcn_data_layer::DistortionParameter::internal_default_instance());
  _ImageDistortParameter_default_instance_.get_mutable()->noise_param_ = const_cast< ::caffe_fcn_data_layer::NoiseParameter*>(
      ::caffe_fcn_data_layer::NoiseParameter::internal_default_instance());
  _DeformableConvolutionParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _DeformableConvolutionParameter_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013caffe.proto\022\005caffe\032\032caffe_fcn_data_lay"
      "er.proto\032\024caffe_smartseg.proto\"\034\n\tBlobSh"
      "ape\022\017\n\003dim\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto\022\037\n\005sh"
      "ape\030\007 \001(\0132\020.caffe.BlobShape\022\020\n\004data\030\005 \003("
      "\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022\027\n\013double_data\030\010"
      " \003(\001B\002\020\001\022\027\n\013double_diff\030\t \003(\001B\002\020\001\022\016\n\003num"
      "\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006height"
      "\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\"2\n\017BlobProto"
      "Vector\022\037\n\005blobs\030\001 \003(\0132\020.caffe.BlobProto\""
      "\201\001\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 "
      "\001(\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005labe"
      "l\030\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007encoded\030\007"
      " \001(\010:\005false\"\236\002\n\017FillerParameter\022\026\n\004type\030"
      "\001 \001(\t:\010constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min"
      "\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:"
      "\0010\022\016\n\003std\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1\022B"
      "\n\rvariance_norm\030\010 \001(\0162#.caffe.FillerPara"
      "meter.VarianceNorm:\006FAN_IN\022\022\n\nnum_groups"
      "\030\t \001(\005\"4\n\014VarianceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007FA"
      "N_OUT\020\001\022\013\n\007AVERAGE\020\002\"\216\002\n\014NetParameter\022\014\n"
      "\004name\030\001 \001(\t\022\r\n\005input\030\003 \003(\t\022%\n\013input_shap"
      "e\030\010 \003(\0132\020.caffe.BlobShape\022\021\n\tinput_dim\030\004"
      " \003(\005\022\035\n\016force_backward\030\005 \001(\010:\005false\022\036\n\005s"
      "tate\030\006 \001(\0132\017.caffe.NetState\022\031\n\ndebug_inf"
      "o\030\007 \001(\010:\005false\022$\n\005layer\030d \003(\0132\025.caffe.La"
      "yerParameter\022\'\n\006layers\030\002 \003(\0132\027.caffe.V1L"
      "ayerParameter\"\226\013\n\017SolverParameter\022\013\n\003net"
      "\030\030 \001(\t\022&\n\tnet_param\030\031 \001(\0132\023.caffe.NetPar"
      "ameter\022\021\n\ttrain_net\030\001 \001(\t\022\020\n\010test_net\030\002 "
      "\003(\t\022,\n\017train_net_param\030\025 \001(\0132\023.caffe.Net"
      "Parameter\022+\n\016test_net_param\030\026 \003(\0132\023.caff"
      "e.NetParameter\022$\n\013train_state\030\032 \001(\0132\017.ca"
      "ffe.NetState\022#\n\ntest_state\030\033 \003(\0132\017.caffe"
      ".NetState\022\021\n\ttest_iter\030\003 \003(\005\022\030\n\rtest_int"
      "erval\030\004 \001(\005:\0010\022 \n\021test_compute_loss\030\023 \001("
      "\010:\005false\022!\n\023test_initialization\030  \001(\010:\004t"
      "rue\022\017\n\007base_lr\030\005 \001(\002\022\017\n\007display\030\006 \001(\005\022\027\n"
      "\014average_loss\030! \001(\005:\0011\022\020\n\010max_iter\030\007 \001(\005"
      "\022\024\n\titer_size\030$ \001(\005:\0011\022\021\n\tlr_policy\030\010 \001("
      "\t\022\r\n\005gamma\030\t \001(\002\022\r\n\005power\030\n \001(\002\022\020\n\010momen"
      "tum\030\013 \001(\002\022\024\n\014weight_decay\030\014 \001(\002\022\037\n\023regul"
      "arization_type\030\035 \001(\t:\002L2\022\020\n\010stepsize\030\r \001"
      "(\005\022\021\n\tstepvalue\030\" \003(\005\022\032\n\016clip_gradients\030"
      "# \001(\002:\002-1\022\027\n\013print_param\030\253\004 \001(\005:\0010\022\023\n\010sn"
      "apshot\030\016 \001(\005:\0010\022\027\n\017snapshot_prefix\030\017 \001(\t"
      "\022\034\n\rsnapshot_diff\030\020 \001(\010:\005false\022K\n\017snapsh"
      "ot_format\030% \001(\0162%.caffe.SolverParameter."
      "SnapshotFormat:\013BINARYPROTO\022;\n\013solver_mo"
      "de\030\021 \001(\0162!.caffe.SolverParameter.SolverM"
      "ode:\003GPU\022\024\n\tdevice_id\030\022 \001(\005:\0010\022\027\n\013random"
      "_seed\030\024 \001(\003:\002-1\022\021\n\004type\030( \001(\t:\003SGD\022\024\n\005de"
      "lta\030\037 \001(\002:\0051e-08\022\030\n\tmomentum2\030\' \001(\002:\0050.9"
      "99\022\021\n\trms_decay\030& \001(\002\022\031\n\ndebug_info\030\027 \001("
      "\010:\005false\022\"\n\024snapshot_after_train\030\034 \001(\010:\004"
      "true\022;\n\013solver_type\030\036 \001(\0162!.caffe.Solver"
      "Parameter.SolverType:\003SGD\022<\n\024previous_st"
      "age_param\030\271\027 \001(\0132\035.caffe.PreviousStagePa"
      "rameter\022!\n\025param_update_interval\030\272\027 \001(\r:"
      "\0011\"+\n\016SnapshotFormat\022\010\n\004HDF5\020\000\022\017\n\013BINARY"
      "PROTO\020\001\"\036\n\nSolverMode\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\""
      "U\n\nSolverType\022\007\n\003SGD\020\000\022\014\n\010NESTEROV\020\001\022\013\n\007"
      "ADAGRAD\020\002\022\013\n\007RMSPROP\020\003\022\014\n\010ADADELTA\020\004\022\010\n\004"
      "ADAM\020\005\"l\n\013SolverState\022\014\n\004iter\030\001 \001(\005\022\023\n\013l"
      "earned_net\030\002 \001(\t\022!\n\007history\030\003 \003(\0132\020.caff"
      "e.BlobProto\022\027\n\014current_step\030\004 \001(\005:\0010\"N\n\010"
      "NetState\022!\n\005phase\030\001 \001(\0162\014.caffe.Phase:\004T"
      "EST\022\020\n\005level\030\002 \001(\005:\0010\022\r\n\005stage\030\003 \003(\t\"s\n\014"
      "NetStateRule\022\033\n\005phase\030\001 \001(\0162\014.caffe.Phas"
      "e\022\021\n\tmin_level\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005\022"
      "\r\n\005stage\030\004 \003(\t\022\021\n\tnot_stage\030\005 \003(\t\"\243\001\n\tPa"
      "ramSpec\022\014\n\004name\030\001 \001(\t\0221\n\nshare_mode\030\002 \001("
      "\0162\035.caffe.ParamSpec.DimCheckMode\022\022\n\007lr_m"
      "ult\030\003 \001(\002:\0011\022\025\n\ndecay_mult\030\004 \001(\002:\0011\"*\n\014D"
      "imCheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\""
      "\275,\n\016LayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type"
      "\030\002 \001(\t\022\016\n\006bottom\030\003 \003(\t\022\013\n\003top\030\004 \003(\t\022\033\n\005p"
      "hase\030\n \001(\0162\014.caffe.Phase\022\023\n\013loss_weight\030"
      "\005 \003(\002\022\037\n\005param\030\006 \003(\0132\020.caffe.ParamSpec\022\037"
      "\n\005blobs\030\007 \003(\0132\020.caffe.BlobProto\022\026\n\016propa"
      "gate_down\030\013 \003(\010\022$\n\007include\030\010 \003(\0132\023.caffe"
      ".NetStateRule\022$\n\007exclude\030\t \003(\0132\023.caffe.N"
      "etStateRule\0227\n\017transform_param\030d \001(\0132\036.c"
      "affe.TransformationParameter\022(\n\nloss_par"
      "am\030e \001(\0132\024.caffe.LossParameter\0220\n\016accura"
      "cy_param\030f \001(\0132\030.caffe.AccuracyParameter"
      "\022,\n\014argmax_param\030g \001(\0132\026.caffe.ArgMaxPar"
      "ameter\0224\n\020batch_norm_param\030\213\001 \001(\0132\031.caff"
      "e.BatchNormParameter\022)\n\nbias_param\030\215\001 \001("
      "\0132\024.caffe.BiasParameter\022,\n\014concat_param\030"
      "h \001(\0132\026.caffe.ConcatParameter\022\?\n\026contras"
      "tive_loss_param\030i \001(\0132\037.caffe.Contrastiv"
      "eLossParameter\0226\n\021convolution_param\030j \001("
      "\0132\033.caffe.ConvolutionParameter\022(\n\ndata_p"
      "aram\030k \001(\0132\024.caffe.DataParameter\022.\n\rdrop"
      "out_param\030l \001(\0132\027.caffe.DropoutParameter"
      "\0223\n\020dummy_data_param\030m \001(\0132\031.caffe.Dummy"
      "DataParameter\022.\n\reltwise_param\030n \001(\0132\027.c"
      "affe.EltwiseParameter\022\'\n\telu_param\030\214\001 \001("
      "\0132\023.caffe.ELUParameter\022+\n\013embed_param\030\211\001"
      " \001(\0132\025.caffe.EmbedParameter\022&\n\texp_param"
      "\030o \001(\0132\023.caffe.ExpParameter\022/\n\rflatten_p"
      "aram\030\207\001 \001(\0132\027.caffe.FlattenParameter\0221\n\017"
      "hdf5_data_param\030p \001(\0132\030.caffe.HDF5DataPa"
      "rameter\0225\n\021hdf5_output_param\030q \001(\0132\032.caf"
      "fe.HDF5OutputParameter\0223\n\020hinge_loss_par"
      "am\030r \001(\0132\031.caffe.HingeLossParameter\0223\n\020i"
      "mage_data_param\030s \001(\0132\031.caffe.ImageDataP"
      "arameter\0229\n\023infogain_loss_param\030t \001(\0132\034."
      "caffe.InfogainLossParameter\0229\n\023inner_pro"
      "duct_param\030u \001(\0132\034.caffe.InnerProductPar"
      "ameter\022+\n\013input_param\030\217\001 \001(\0132\025.caffe.Inp"
      "utParameter\022\'\n\tlog_param\030\206\001 \001(\0132\023.caffe."
      "LogParameter\022&\n\tlrn_param\030v \001(\0132\023.caffe."
      "LRNParameter\0225\n\021memory_data_param\030w \001(\0132"
      "\032.caffe.MemoryDataParameter\022&\n\tmvn_param"
      "\030x \001(\0132\023.caffe.MVNParameter\022.\n\rpooling_p"
      "aram\030y \001(\0132\027.caffe.PoolingParameter\022*\n\013p"
      "ower_param\030z \001(\0132\025.caffe.PowerParameter\022"
      "+\n\013prelu_param\030\203\001 \001(\0132\025.caffe.PReLUParam"
      "eter\022-\n\014python_param\030\202\001 \001(\0132\026.caffe.Pyth"
      "onParameter\0223\n\017reduction_param\030\210\001 \001(\0132\031."
      "caffe.ReductionParameter\022(\n\nrelu_param\030{"
      " \001(\0132\024.caffe.ReLUParameter\022/\n\rreshape_pa"
      "ram\030\205\001 \001(\0132\027.caffe.ReshapeParameter\0228\n\021r"
      "oi_pooling_param\030\327\307\370\003 \001(\0132\032.caffe.ROIPoo"
      "lingParameter\022+\n\013scale_param\030\216\001 \001(\0132\025.ca"
      "ffe.ScaleParameter\022.\n\rsigmoid_param\030| \001("
      "\0132\027.caffe.SigmoidParameter\022.\n\rsoftmax_pa"
      "ram\030} \001(\0132\027.caffe.SoftmaxParameter\022\'\n\tsp"
      "p_param\030\204\001 \001(\0132\023.caffe.SPPParameter\022*\n\013s"
      "lice_param\030~ \001(\0132\025.caffe.SliceParameter\022"
      "(\n\ntanh_param\030\177 \001(\0132\024.caffe.TanHParamete"
      "r\0223\n\017threshold_param\030\200\001 \001(\0132\031.caffe.Thre"
      "sholdParameter\022)\n\ntile_param\030\212\001 \001(\0132\024.ca"
      "ffe.TileParameter\0226\n\021window_data_param\030\201"
      "\001 \001(\0132\032.caffe.WindowDataParameter\0229\n\025sma"
      "rtseg_config_param\030\320\017 \001(\0132\031.smartseg.Con"
      "figParameter\022@\n\031smartseg_frame_data_para"
      "m\030\321\017 \001(\0132\034.smartseg.FrameDataParameter\022Q"
      "\n\"smartseg_frame_sequence_data_param\030\331\017 "
      "\001(\0132$.smartseg.FrameSequenceDataParamete"
      "r\022H\n\035smartseg_blob_visualize_param\030\322\017 \001("
      "\0132 .smartseg.BlobVisualizeParameter\022>\n\030s"
      "martseg_plan_view_param\030\323\017 \001(\0132\033.smartse"
      "g.PlanViewParameter\022Q\n\"smartseg_plan_vie"
      "w_extractor_param\030\325\017 \001(\0132$.smartseg.Plan"
      "ViewExtractorParameter\022J\n\036smartseg_horiz"
      "ontal_view_param\030\324\017 \001(\0132!.smartseg.Horiz"
      "ontalViewParameter\022]\n(smartseg_horizonta"
      "l_view_extractor_param\030\326\017 \001(\0132*.smartseg"
      ".HorizontalViewExtractorParameter\022>\n\030sma"
      "rtseg_side_view_param\030\337\017 \001(\0132\033.smartseg."
      "SideViewParameter\022Q\n\"smartseg_side_view_"
      "extractor_param\030\340\017 \001(\0132$.smartseg.SideVi"
      "ewExtractorParameter\022\?\n\030smartseg_segment"
      "or_param\030\327\017 \001(\0132\034.smartseg.SegmentorPara"
      "meter\022D\n\033smartseg_frame_target_param\030\330\017 "
      "\001(\0132\036.smartseg.FrameTargetParameter\022B\n\032s"
      "martseg_online_norm_param\030\332\017 \001(\0132\035.smart"
      "seg.OnlineNormParameter\022D\n\033smartseg_view"
      "_pooling_param\030\333\017 \001(\0132\036.smartseg.ViewPoo"
      "lingParameter\022H\n\035smartseg_view_unpooling"
      "_param\030\334\017 \001(\0132 .smartseg.ViewUnpoolingPa"
      "rameter\022R\n\"smartseg_point_interpolation_"
      "param\030\335\017 \001(\0132%.smartseg.PointInterpolati"
      "onParameter\022=\n\027smartseg_dilation_param\030\336"
      "\017 \001(\0132\033.smartseg.DilationParameter\022J\n\024fc"
      "n_image_data_param\030\270\027 \001(\0132+.caffe_fcn_da"
      "ta_layer.FCNImageDataParameter\022-\n\014resize"
      "_param\030\271\027 \001(\0132\026.caffe.ResizeParameter\022E\n"
      "\033label_related_dropout_param\030\272\027 \001(\0132\037.ca"
      "ffe.LabelRelatedDropoutParam\0223\n\017inceptio"
      "n_param\030\273\027 \001(\0132\031.caffe.InceptionParamete"
      "r\022C\n\030element_hinge_loss_param\030\274\027 \001(\0132 .c"
      "affe.ElementHingeLossParameter\0228\n\022pyrami"
      "d_data_param\030\275\027 \001(\0132\033.caffe.PyramidDataP"
      "arameter\022@\n\026detection_output_param\030\276\027 \001("
      "\0132\037.caffe.DetectionOutputParameter\022,\n\016ro"
      "i_data_param\030\277\027 \001(\0132\023.caffe.ROIDataParam"
      "\0225\n\023roi_2_heatmap_param\030\300\027 \001(\0132\027.caffe.R"
      "OI2HeatMapParam\022,\n\016roi_show_param\030\301\027 \001(\013"
      "2\023.caffe.ROIShowParam\0220\n\020roi_refine_para"
      "m\030\302\027 \001(\0132\025.caffe.ROIRefineParam\022)\n\ncrop_"
      "param\030\303\027 \001(\0132\024.caffe.CropParameter\022L\n\034de"
      "formable_convolution_param\030\210\' \001(\0132%.caff"
      "e.DeformableConvolutionParameter\022G\n\032imag"
      "e_data_arbitrary_param\030\211\' \001(\0132\".caffe.Im"
      "ageDataArbitraryParameter\0227\n\021expandlabel"
      "_param\030\212\' \001(\0132\033.caffe.ExpandlabelParamet"
      "er\022>\n\025manipulate_loss_param\030\214\' \001(\0132\036.caf"
      "fe.ManipulateLossParameter\022\?\n\026image_labe"
      "l_data_param\030\215\' \001(\0132\036.caffe.ImageLabelDa"
      "taParameter\0226\n\021binary_data_param\030\216\' \001(\0132"
      "\032.caffe.BinaryDataParameter\022:\n\023cylinder_"
      "view_param\030\217\' \001(\0132\034.caffe.CylinderViewPa"
      "rameter\0222\n\017bird_view_param\030\220\' \001(\0132\030.caff"
      "e.BirdviewParameter\022<\n\024repeat_channel_pa"
      "ram\030\221\' \001(\0132\035.caffe.RepeatChannelParamete"
      "r\022-\n\014region_param\030\254\002 \001(\0132\026.caffe.RegionP"
      "arameter\022+\n\013reorg_param\030\255\002 \001(\0132\025.caffe.R"
      "eorgParameter\022:\n\023region_output_param\030\266\002 "
      "\001(\0132\034.caffe.RegionOutputParameter\022/\n\rper"
      "mute_param\030\312\001 \001(\0132\027.caffe.PermuteParamet"
      "er\0221\n\016resample_param\030\350\007 \001(\0132\030.caffe.Resa"
      "mpleParameter\022!\n\022reshape_every_iter\030\351\007 \001"
      "(\010:\004true\022G\n\032detection_output_ssd_param\030\241"
      "\037 \001(\0132\".caffe.DetectionOutputSSDParamete"
      "r\022:\n\023image_distort_param\030\250\037 \001(\0132\034.caffe."
      "ImageDistortParameter\0220\n\016bbox_reg_param\030"
      "\262\037 \001(\0132\027.caffe.BBoxRegParameter\022:\n\023psroi"
      "_pooling_param\030\263\037 \001(\0132\034.caffe.PSROIPooli"
      "ngParameter\022C\n\030dfmb_psroi_pooling_param\030"
      "\264\037 \001(\0132 .caffe.DFMBPSROIPoolingParameter"
      "\022\'\n\treg_param\030\267\037 \001(\0132\023.caffe.RegParamete"
      "r\022\\\n&proposal_img_scale_to_cam_coords_pa"
      "ram\030\277\037 \001(\0132+.caffe.ProposalImgScaleToCam"
      "CoordsParameter\"+\n\024ExpandlabelParameter\022"
      "\023\n\010maxlabel\030\001 \001(\r:\0010\"/\n\026RepeatChannelPar"
      "ameter\022\025\n\nnum_repeat\030\001 \001(\r:\0011\"!\n\020Permute"
      "Parameter\022\r\n\005order\030\001 \003(\r\"\207\001\n\016NormalizedB"
      "Box\022\014\n\004xmin\030\001 \001(\002\022\014\n\004ymin\030\002 \001(\002\022\014\n\004xmax\030"
      "\003 \001(\002\022\014\n\004ymax\030\004 \001(\002\022\r\n\005label\030\005 \001(\005\022\021\n\tdi"
      "fficult\030\006 \001(\010\022\r\n\005score\030\007 \001(\002\022\014\n\004size\030\010 \001"
      "(\002\"\301\001\n\025RegionOutputParameter\022\023\n\013num_clas"
      "ses\030\001 \001(\r\0228\n\tnms_param\030\002 \001(\0132%.caffe.Non"
      "MaximumSuppressionParameter\022\026\n\nkeep_top_"
      "k\030\003 \001(\005:\002-1\022\034\n\024confidence_threshold\030\004 \001("
      "\002\022#\n\tanchorbox\030\005 \003(\0132\020.caffe.AnchorBox\"["
      "\n\036NonMaximumSuppressionParameter\022\032\n\rnms_"
      "threshold\030\001 \001(\002:\0030.3\022\r\n\005top_k\030\002 \001(\005\022\016\n\003e"
      "ta\030\003 \001(\002:\0011\"\252\002\n\017RegionParameter\022#\n\tancho"
      "rbox\030\001 \003(\0132\020.caffe.AnchorBox\022\022\n\nthreshol"
      "ds\030\002 \003(\002\022\024\n\014object_scale\030\003 \001(\r\022\026\n\016noobje"
      "ct_scale\030\004 \001(\r\022\023\n\013class_scale\030\005 \001(\r\022\023\n\013c"
      "oord_scale\030\006 \001(\r\022\016\n\006jitter\030\007 \001(\002\022\014\n\004bias"
      "\030\010 \001(\002\022\017\n\007rescore\030\t \001(\010\022\023\n\013num_classes\030\n"
      " \001(\r\022\022\n\nbias_match\030\013 \001(\010\022\021\n\tthreshold\030\014 "
      "\001(\002\022\033\n\radjust_anchor\030\r \001(\010:\004true\"!\n\tAnch"
      "orBox\022\t\n\001w\030\001 \001(\002\022\t\n\001h\030\002 \001(\002\" \n\016ReorgPara"
      "meter\022\016\n\006stride\030\001 \001(\r\"\311\003\n\021BirdviewParame"
      "ter\022\035\n\016use_max_height\030\001 \001(\010:\005false\022\036\n\017us"
      "e_mean_height\030\002 \001(\010:\005false\022\034\n\ruse_log_co"
      "unt\030\003 \001(\010:\005false\022\034\n\ruse_direction\030\004 \001(\010:"
      "\005false\022 \n\021use_top_intensity\030\005 \001(\010:\005false"
      "\022!\n\022use_mean_intensity\030\006 \001(\010:\005false\022\033\n\014u"
      "se_distance\030\007 \001(\010:\005false\022\033\n\014use_nonempty"
      "\030\010 \001(\010:\005false\022\036\n\017use_first_order\030\t \001(\010:\005"
      "false\022\037\n\020use_second_order\030\n \001(\010:\005false\022 "
      "\n\021use_height_filter\030\016 \001(\010:\005false\022\035\n\016use_"
      "dense_feat\030\017 \001(\010:\005false\022\031\n\021point_cloud_r"
      "ange\030\020 \001(\r\022\r\n\005width\030\021 \001(\r\022\016\n\006height\030\022 \001("
      "\r\"q\n\025CylinderViewParameter\022\016\n\006ntheta\030\001 \001"
      "(\r\022\014\n\004nphi\030\002 \001(\r\022\016\n\006otheta\030\003 \001(\002\022\014\n\004ophi"
      "\030\004 \001(\002\022\016\n\006dtheta\030\005 \001(\002\022\014\n\004dphi\030\006 \001(\002\"\264\003\n"
      "\023BinaryDataParameter\022\016\n\006source\030\001 \001(\t\022\022\n\n"
      "batch_size\030\002 \001(\r\022\026\n\007shuffle\030\003 \001(\010:\005false"
      "\022\032\n\013use_disturb\030\004 \001(\010:\005false\022\027\n\014ignore_l"
      "abel\030\005 \001(\r:\0010\022\023\n\010pad_size\030\006 \001(\r:\0010\022!\n\022us"
      "e_instance_level\030\007 \001(\010:\005false\022\034\n\021num_ins"
      "tance_feat\030\010 \001(\r:\0010\022\025\n\013root_folder\030\014 \001(\t"
      ":\000\022\027\n\010pre_load\030\024 \001(\010:\005false\022@\n\tview_type"
      "\030\025 \001(\0162#.caffe.BinaryDataParameter.ViewT"
      "ype:\010Cylinder\022\026\n\016label_map_file\030\026 \001(\t\022\032\n"
      "\013do_classify\030\027 \001(\010:\005false\"0\n\010ViewType\022\010\n"
      "\004None\020\000\022\014\n\010Cylinder\020\001\022\014\n\010Birdview\020\002\"A\n\014L"
      "abelMapItem\022\014\n\004name\030\001 \001(\t\022\r\n\005label\030\002 \001(\005"
      "\022\024\n\014display_name\030\003 \001(\t\"-\n\010LabelMap\022!\n\004it"
      "em\030\001 \003(\0132\023.caffe.LabelMapItem\"4\n\005Slice\022\013"
      "\n\003dim\030\001 \003(\r\022\016\n\006stride\030\002 \003(\r\022\016\n\006offset\030\003 "
      "\003(\r\"\274\002\n\027ImageLabelDataParameter\022\016\n\006sourc"
      "e\030\001 \001(\t\022\025\n\nbatch_size\030\003 \001(\r:\0011\022\024\n\trand_s"
      "kip\030\004 \001(\r:\0010\022\026\n\007shuffle\030\005 \001(\010:\005false\022\031\n\n"
      "rand_scale\030\006 \001(\010:\005false\022\024\n\tmin_scale\030\007 \001"
      "(\002:\0011\022\024\n\tmax_scale\030\010 \001(\002:\0011\022!\n\013label_sli"
      "ce\030\n \001(\0132\014.caffe.Slice\022@\n\007padding\030\r \001(\0162"
      "&.caffe.ImageLabelDataParameter.Padding:"
      "\007REFLECT\" \n\007Padding\022\010\n\004ZERO\020\000\022\013\n\007REFLECT"
      "\020\001\"\345\003\n\033ImageDataArbitraryParameter\022\016\n\006so"
      "urce\030\001 \001(\t\022\020\n\010meanfile\030\r \001(\t\022\032\n\013use_dist"
      "urb\030\016 \001(\010:\005false\022\026\n\007useflip\030\017 \001(\010:\005false"
      "\022\035\n\016usemovedisturb\030\020 \001(\010:\005false\022\022\n\nbatch"
      "_size\030\004 \001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010\022\026\n\007shu"
      "ffle\030\010 \001(\010:\005false\022\026\n\013data_height\030\t \001(\r:\001"
      "0\022\025\n\ndata_width\030\n \001(\r:\0010\022\025\n\ndata_scale\030\002"
      " \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_size\030"
      "\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\027\n\014label"
      "_height\030\013 \001(\r:\0010\022\026\n\013label_width\030\014 \001(\r:\0010"
      "\022\030\n\rdata_channels\030\021 \001(\r:\0013\022\031\n\nneed_split"
      "\030\022 \001(\010:\005false\022\020\n\010left_roi\030\023 \001(\t\022\021\n\tright"
      "_roi\030\024 \001(\t\"\273\002\n\027ManipulateLossParameter\022 "
      "\n\021use_balancesample\030\001 \001(\010:\005false\022\026\n\014igno"
      "re_value\030\002 \001(\t:\000\022!\n\022use_fullzeroignore\030\003"
      " \001(\010:\005false\022\023\n\010bg_ratio\030\004 \001(\002:\0011\022\033\n\020unif"
      "orm_droprate\030\005 \001(\002:\0011\022%\n\026use_perchannel_"
      "balance\030\006 \001(\010:\005false\022&\n\027drop_singleclass"
      "channel\030\007 \001(\010:\005false\022\031\n\nprint_info\030\010 \001(\010"
      ":\005false\022\'\n\030use_unionchannel_balance\030\t \001("
      "\010:\005false\"\266\001\n\027TransformationParameter\022\020\n\005"
      "scale\030\001 \001(\002:\0011\022\025\n\006mirror\030\002 \001(\010:\005false\022\024\n"
      "\tcrop_size\030\003 \001(\r:\0010\022\021\n\tmean_file\030\004 \001(\t\022\022"
      "\n\nmean_value\030\005 \003(\002\022\032\n\013force_color\030\006 \001(\010:"
      "\005false\022\031\n\nforce_gray\030\007 \001(\010:\005false\"\255\002\n\rLo"
      "ssParameter\022\024\n\014ignore_label\030\001 \001(\005\022D\n\rnor"
      "malization\030\003 \001(\0162&.caffe.LossParameter.N"
      "ormalizationMode:\005VALID\022\021\n\tnormalize\030\002 \001"
      "(\010\022$\n\026normalize_per_positive\030d \001(\010:\004true"
      "\022\032\n\017label_bottom_id\030e \001(\r:\0011\022\020\n\005scale\030f "
      "\001(\002:\0011\022\025\n\006smooth\030g \001(\010:\005false\"B\n\021Normali"
      "zationMode\022\010\n\004FULL\020\000\022\t\n\005VALID\020\001\022\016\n\nBATCH"
      "_SIZE\020\002\022\010\n\004NONE\020\003\"L\n\021AccuracyParameter\022\020"
      "\n\005top_k\030\001 \001(\r:\0011\022\017\n\004axis\030\002 \001(\005:\0011\022\024\n\014ign"
      "ore_label\030\003 \001(\005\"M\n\017ArgMaxParameter\022\032\n\013ou"
      "t_max_val\030\001 \001(\010:\005false\022\020\n\005top_k\030\002 \001(\r:\0011"
      "\022\014\n\004axis\030\003 \001(\005\"9\n\017ConcatParameter\022\017\n\004axi"
      "s\030\002 \001(\005:\0011\022\025\n\nconcat_dim\030\001 \001(\r:\0011\"\214\001\n\022Ba"
      "tchNormParameter\022\030\n\020use_global_stats\030\001 \001"
      "(\010\022&\n\027moving_average_fraction\030\002 \001(\002:\0050.9"
      "99\022\022\n\003eps\030\003 \001(\002:\0051e-05\022 \n\021use_instance_n"
      "orm\030\004 \001(\010:\005false\"]\n\rBiasParameter\022\017\n\004axi"
      "s\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022&\n\006fille"
      "r\030\003 \001(\0132\026.caffe.FillerParameter\"L\n\030Contr"
      "astiveLossParameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035"
      "\n\016legacy_version\030\002 \001(\010:\005false\"\263\005\n\024Convol"
      "utionParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbi"
      "as_term\030\002 \001(\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kern"
      "el_size\030\004 \003(\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilatio"
      "n\030\022 \003(\r\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r"
      ":\0010\022\020\n\010kernel_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022"
      "\020\n\010stride_h\030\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005g"
      "roup\030\005 \001(\r:\0011\022-\n\rweight_filler\030\007 \001(\0132\026.c"
      "affe.FillerParameter\022+\n\013bias_filler\030\010 \001("
      "\0132\026.caffe.FillerParameter\022;\n\006engine\030\017 \001("
      "\0162\".caffe.ConvolutionParameter.Engine:\007D"
      "EFAULT\022\017\n\004axis\030\020 \001(\005:\0011\022\036\n\017force_nd_im2c"
      "ol\030\021 \001(\010:\005false\022\034\n\017dfmb_bottom_idx\030\351\007 \001("
      "\005:\002-1\022\034\n\017mask_bottom_idx\030\352\007 \001(\005:\002-1\022\036\n\022a"
      "nalysis_num_group\030\353\007 \001(\r:\0011\022\030\n\017kernel_h_"
      "offset\030\354\007 \003(\r\022\030\n\017kernel_w_offset\030\355\007 \003(\r\022"
      "%\n\034print_weight_bias_statistics\030\356\007 \001(\010\"+"
      "\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDN"
      "N\020\002\"\244\002\n\rDataParameter\022\016\n\006source\030\001 \001(\t\022\022\n"
      "\nbatch_size\030\004 \001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010\022"
      "1\n\007backend\030\010 \001(\0162\027.caffe.DataParameter.D"
      "B:\007LEVELDB\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_fil"
      "e\030\003 \001(\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030"
      "\006 \001(\010:\005false\022\"\n\023force_encoded_color\030\t \001("
      "\010:\005false\022\023\n\010prefetch\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007L"
      "EVELDB\020\000\022\010\n\004LMDB\020\001\".\n\020DropoutParameter\022\032"
      "\n\rdropout_ratio\030\001 \001(\002:\0030.5\"\240\001\n\022DummyData"
      "Parameter\022+\n\013data_filler\030\001 \003(\0132\026.caffe.F"
      "illerParameter\022\037\n\005shape\030\006 \003(\0132\020.caffe.Bl"
      "obShape\022\013\n\003num\030\002 \003(\r\022\020\n\010channels\030\003 \003(\r\022\016"
      "\n\006height\030\004 \003(\r\022\r\n\005width\030\005 \003(\r\"\245\001\n\020Eltwis"
      "eParameter\0229\n\toperation\030\001 \001(\0162!.caffe.El"
      "twiseParameter.EltwiseOp:\003SUM\022\r\n\005coeff\030\002"
      " \003(\002\022\036\n\020stable_prod_grad\030\003 \001(\010:\004true\"\'\n\t"
      "EltwiseOp\022\010\n\004PROD\020\000\022\007\n\003SUM\020\001\022\007\n\003MAX\020\002\" \n"
      "\014ELUParameter\022\020\n\005alpha\030\001 \001(\002:\0011\"\254\001\n\016Embe"
      "dParameter\022\022\n\nnum_output\030\001 \001(\r\022\021\n\tinput_"
      "dim\030\002 \001(\r\022\027\n\tbias_term\030\003 \001(\010:\004true\022-\n\rwe"
      "ight_filler\030\004 \001(\0132\026.caffe.FillerParamete"
      "r\022+\n\013bias_filler\030\005 \001(\0132\026.caffe.FillerPar"
      "ameter\"D\n\014ExpParameter\022\020\n\004base\030\001 \001(\002:\002-1"
      "\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"9\n\020"
      "FlattenParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\024\n\010end"
      "_axis\030\002 \001(\005:\002-1\"O\n\021HDF5DataParameter\022\016\n\006"
      "source\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\022\026\n\007shuf"
      "fle\030\003 \001(\010:\005false\"(\n\023HDF5OutputParameter\022"
      "\021\n\tfile_name\030\001 \001(\t\"^\n\022HingeLossParameter"
      "\0220\n\004norm\030\001 \001(\0162\036.caffe.HingeLossParamete"
      "r.Norm:\002L1\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L2\020\002\"\227\002\n\022I"
      "mageDataParameter\022\016\n\006source\030\001 \001(\t\022\025\n\nbat"
      "ch_size\030\004 \001(\r:\0011\022\024\n\trand_skip\030\007 \001(\r:\0010\022\026"
      "\n\007shuffle\030\010 \001(\010:\005false\022\025\n\nnew_height\030\t \001"
      "(\r:\0010\022\024\n\tnew_width\030\n \001(\r:\0010\022\026\n\010is_color\030"
      "\013 \001(\010:\004true\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_fi"
      "le\030\003 \001(\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror"
      "\030\006 \001(\010:\005false\022\025\n\013root_folder\030\014 \001(\t:\000\"\'\n\025"
      "InfogainLossParameter\022\016\n\006source\030\001 \001(\t\"\261\001"
      "\n\025InnerProductParameter\022\022\n\nnum_output\030\001 "
      "\001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022-\n\rweight_f"
      "iller\030\003 \001(\0132\026.caffe.FillerParameter\022+\n\013b"
      "ias_filler\030\004 \001(\0132\026.caffe.FillerParameter"
      "\022\017\n\004axis\030\005 \001(\005:\0011\"1\n\016InputParameter\022\037\n\005s"
      "hape\030\001 \003(\0132\020.caffe.BlobShape\"D\n\014LogParam"
      "eter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011"
      "\022\020\n\005shift\030\003 \001(\002:\0010\"\270\002\n\014LRNParameter\022\025\n\nl"
      "ocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002:\0011\022\022\n\004"
      "beta\030\003 \001(\002:\0040.75\022D\n\013norm_region\030\004 \001(\0162\036."
      "caffe.LRNParameter.NormRegion:\017ACROSS_CH"
      "ANNELS\022\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030\006 \001(\0162\032.c"
      "affe.LRNParameter.Engine:\007DEFAULT\"5\n\nNor"
      "mRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016WITHIN_C"
      "HANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE"
      "\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataParameter\022\022\n\n"
      "batch_size\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r\022\016\n\006he"
      "ight\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"d\n\014MVNParamete"
      "r\022 \n\022normalize_variance\030\001 \001(\010:\004true\022\036\n\017a"
      "cross_channels\030\002 \001(\010:\005false\022\022\n\003eps\030\003 \001(\002"
      ":\0051e-09\"\316\003\n\020PoolingParameter\0225\n\004pool\030\001 \001"
      "(\0162\".caffe.PoolingParameter.PoolMethod:\003"
      "MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n"
      "\005pad_w\030\n \001(\r:\0010\022\023\n\013kernel_size\030\002 \001(\r\022\020\n\010"
      "kernel_h\030\005 \001(\r\022\020\n\010kernel_w\030\006 \001(\r\022\021\n\006stri"
      "de\030\003 \001(\r:\0011\022\020\n\010stride_h\030\007 \001(\r\022\020\n\010stride_"
      "w\030\010 \001(\r\0227\n\006engine\030\013 \001(\0162\036.caffe.PoolingP"
      "arameter.Engine:\007DEFAULT\022\035\n\016global_pooli"
      "ng\030\014 \001(\010:\005false\022*\n\033cmp_out_shape_floor_a"
      "s_conv\030\r \001(\010:\005false\".\n\nPoolMethod\022\007\n\003MAX"
      "\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n"
      "\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"F\n\016Powe"
      "rParameter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005scale\030\002 "
      "\001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"g\n\017PythonParame"
      "ter\022\016\n\006module\030\001 \001(\t\022\r\n\005layer\030\002 \001(\t\022\023\n\tpa"
      "ram_str\030\003 \001(\t:\000\022 \n\021share_in_parallel\030\004 \001"
      "(\010:\005false\"\255\001\n\022ReductionParameter\022=\n\toper"
      "ation\030\001 \001(\0162%.caffe.ReductionParameter.R"
      "eductionOp:\003SUM\022\017\n\004axis\030\002 \001(\005:\0010\022\020\n\005coef"
      "f\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007\n\003SUM\020\001\022\010\n\004AS"
      "UM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\215\001\n\rReLUParame"
      "ter\022\031\n\016negative_slope\030\001 \001(\002:\0010\0224\n\006engine"
      "\030\002 \001(\0162\033.caffe.ReLUParameter.Engine:\007DEF"
      "AULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t"
      "\n\005CUDNN\020\002\"Z\n\020ReshapeParameter\022\037\n\005shape\030\001"
      " \001(\0132\020.caffe.BlobShape\022\017\n\004axis\030\002 \001(\005:\0010\022"
      "\024\n\010num_axes\030\003 \001(\005:\002-1\"\331\002\n\023ROIPoolingPara"
      "meter\022\023\n\010pooled_h\030\001 \001(\r:\0010\022\023\n\010pooled_w\030\002"
      " \001(\r:\0010\022\030\n\rspatial_scale\030\003 \001(\002:\0011\022\022\n\nhea"
      "t_map_a\030\004 \001(\002\022\025\n\nheat_map_b\030\005 \001(\002:\0010\022\024\n\t"
      "pad_ratio\030\006 \001(\002:\0010\022\030\n\tuse_floor\030\007 \001(\010:\005f"
      "alse\022&\n\033sqrt_sample_loc_num_per_bin\030\010 \001("
      "\r:\0012\0228\n\004pool\030\t \001(\0162%.caffe.ROIPoolingPar"
      "ameter.PoolMethod:\003AVE\022!\n\022position_sensi"
      "tive\030\n \001(\010:\005false\"\036\n\nPoolMethod\022\007\n\003MAX\020\000"
      "\022\007\n\003AVE\020\001\"\245\001\n\016ScaleParameter\022\017\n\004axis\030\001 \001"
      "(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001"
      "(\0132\026.caffe.FillerParameter\022\030\n\tbias_term\030"
      "\004 \001(\010:\005false\022+\n\013bias_filler\030\005 \001(\0132\026.caff"
      "e.FillerParameter\"x\n\020SigmoidParameter\0227\n"
      "\006engine\030\001 \001(\0162\036.caffe.SigmoidParameter.E"
      "ngine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n"
      "\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"L\n\016SliceParameter\022\017\n"
      "\004axis\030\003 \001(\005:\0011\022\023\n\013slice_point\030\002 \003(\r\022\024\n\ts"
      "lice_dim\030\001 \001(\r:\0011\"\211\001\n\020SoftmaxParameter\0227"
      "\n\006engine\030\001 \001(\0162\036.caffe.SoftmaxParameter."
      "Engine:\007DEFAULT\022\017\n\004axis\030\002 \001(\005:\0011\"+\n\006Engi"
      "ne\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"r\n"
      "\rTanHParameter\0224\n\006engine\030\001 \001(\0162\033.caffe.T"
      "anHParameter.Engine:\007DEFAULT\"+\n\006Engine\022\013"
      "\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"/\n\rTil"
      "eParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\r\n\005tiles\030\002 \001"
      "(\005\"*\n\022ThresholdParameter\022\024\n\tthreshold\030\001 "
      "\001(\002:\0010\"\301\002\n\023WindowDataParameter\022\016\n\006source"
      "\030\001 \001(\t\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 "
      "\001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001"
      "(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\031\n\014fg_thres"
      "hold\030\007 \001(\002:\0030.5\022\031\n\014bg_threshold\030\010 \001(\002:\0030"
      ".5\022\031\n\013fg_fraction\030\t \001(\002:\0040.25\022\026\n\013context"
      "_pad\030\n \001(\r:\0010\022\027\n\tcrop_mode\030\013 \001(\t:\004warp\022\033"
      "\n\014cache_images\030\014 \001(\010:\005false\022\025\n\013root_fold"
      "er\030\r \001(\t:\000\"\353\001\n\014SPPParameter\022\026\n\016pyramid_h"
      "eight\030\001 \001(\r\0221\n\004pool\030\002 \001(\0162\036.caffe.SPPPar"
      "ameter.PoolMethod:\003MAX\0223\n\006engine\030\006 \001(\0162\032"
      ".caffe.SPPParameter.Engine:\007DEFAULT\".\n\nP"
      "oolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTI"
      "C\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n"
      "\005CUDNN\020\002\"\245\026\n\020V1LayerParameter\022\016\n\006bottom\030"
      "\002 \003(\t\022\013\n\003top\030\003 \003(\t\022\014\n\004name\030\004 \001(\t\022$\n\007incl"
      "ude\030  \003(\0132\023.caffe.NetStateRule\022$\n\007exclud"
      "e\030! \003(\0132\023.caffe.NetStateRule\022/\n\004type\030\005 \001"
      "(\0162!.caffe.V1LayerParameter.LayerType\022\037\n"
      "\005blobs\030\006 \003(\0132\020.caffe.BlobProto\022\016\n\005param\030"
      "\351\007 \003(\t\022>\n\017blob_share_mode\030\352\007 \003(\0162$.caffe"
      ".V1LayerParameter.DimCheckMode\022\020\n\010blobs_"
      "lr\030\007 \003(\002\022\024\n\014weight_decay\030\010 \003(\002\022\023\n\013loss_w"
      "eight\030# \003(\002\0220\n\016accuracy_param\030\033 \001(\0132\030.ca"
      "ffe.AccuracyParameter\022,\n\014argmax_param\030\027 "
      "\001(\0132\026.caffe.ArgMaxParameter\022,\n\014concat_pa"
      "ram\030\t \001(\0132\026.caffe.ConcatParameter\022\?\n\026con"
      "trastive_loss_param\030( \001(\0132\037.caffe.Contra"
      "stiveLossParameter\0226\n\021convolution_param\030"
      "\n \001(\0132\033.caffe.ConvolutionParameter\022(\n\nda"
      "ta_param\030\013 \001(\0132\024.caffe.DataParameter\022.\n\r"
      "dropout_param\030\014 \001(\0132\027.caffe.DropoutParam"
      "eter\0223\n\020dummy_data_param\030\032 \001(\0132\031.caffe.D"
      "ummyDataParameter\022.\n\reltwise_param\030\030 \001(\013"
      "2\027.caffe.EltwiseParameter\022&\n\texp_param\030)"
      " \001(\0132\023.caffe.ExpParameter\0221\n\017hdf5_data_p"
      "aram\030\r \001(\0132\030.caffe.HDF5DataParameter\0225\n\021"
      "hdf5_output_param\030\016 \001(\0132\032.caffe.HDF5Outp"
      "utParameter\0223\n\020hinge_loss_param\030\035 \001(\0132\031."
      "caffe.HingeLossParameter\0223\n\020image_data_p"
      "aram\030\017 \001(\0132\031.caffe.ImageDataParameter\0229\n"
      "\023infogain_loss_param\030\020 \001(\0132\034.caffe.Infog"
      "ainLossParameter\0229\n\023inner_product_param\030"
      "\021 \001(\0132\034.caffe.InnerProductParameter\022&\n\tl"
      "rn_param\030\022 \001(\0132\023.caffe.LRNParameter\0225\n\021m"
      "emory_data_param\030\026 \001(\0132\032.caffe.MemoryDat"
      "aParameter\022&\n\tmvn_param\030\" \001(\0132\023.caffe.MV"
      "NParameter\022.\n\rpooling_param\030\023 \001(\0132\027.caff"
      "e.PoolingParameter\022*\n\013power_param\030\025 \001(\0132"
      "\025.caffe.PowerParameter\022(\n\nrelu_param\030\036 \001"
      "(\0132\024.caffe.ReLUParameter\022.\n\rsigmoid_para"
      "m\030& \001(\0132\027.caffe.SigmoidParameter\022.\n\rsoft"
      "max_param\030\' \001(\0132\027.caffe.SoftmaxParameter"
      "\022*\n\013slice_param\030\037 \001(\0132\025.caffe.SliceParam"
      "eter\022(\n\ntanh_param\030% \001(\0132\024.caffe.TanHPar"
      "ameter\0222\n\017threshold_param\030\031 \001(\0132\031.caffe."
      "ThresholdParameter\0225\n\021window_data_param\030"
      "\024 \001(\0132\032.caffe.WindowDataParameter\0227\n\017tra"
      "nsform_param\030$ \001(\0132\036.caffe.Transformatio"
      "nParameter\022(\n\nloss_param\030* \001(\0132\024.caffe.L"
      "ossParameter\022&\n\005layer\030\001 \001(\0132\027.caffe.V0La"
      "yerParameter\022,\n\016crop_parameter\0302 \001(\0132\024.c"
      "affe.CropParameter\022G\n\032image_data_arbitra"
      "ry_param\030\211\' \001(\0132\".caffe.ImageDataArbitra"
      "ryParameter\0227\n\021expandlabel_param\030\212\' \001(\0132"
      "\033.caffe.ExpandlabelParameter\022K\n\034deformab"
      "le_convolution_param\0308 \001(\0132%.caffe.Defor"
      "mableConvolutionParameter\"\240\005\n\tLayerType\022"
      "\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACCURACY\020\001\022\n\n\006A"
      "RGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020\003\022\024\n\020CONTRAS"
      "TIVE_LOSS\020%\022\017\n\013CONVOLUTION\020\004\022\010\n\004DATA\020\005\022\021"
      "\n\rDECONVOLUTION\020\'\022\013\n\007DROPOUT\020\006\022\016\n\nDUMMY_"
      "DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013\n\007ELTWISE\020\031\022"
      "\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_DATA\020\t\022\017\n\013"
      "HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n\n\006IM2COL\020"
      "\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_LOSS\020\r\022\021\n\r"
      "INNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEMORY_DATA\020"
      "\035\022\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020\020\022\007\n\003MVN\020"
      "\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n\004RELU\020\022\022\013\n\007S"
      "IGMOID\020\023\022\036\n\032SIGMOID_CROSS_ENTROPY_LOSS\020\033"
      "\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020\n\014SOFTMAX_LO"
      "SS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010\n\004TANH\020\027\022\017\n\013"
      "WINDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037\022\031\n\024IMAGE_DA"
      "TA_ARBITRARY\020\211\'\022\020\n\013EXPANDLABEL\020\212\'\022\031\n\025DEF"
      "ORMABLECONVOLUTION\0207\"*\n\014DimCheckMode\022\n\n\006"
      "STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\375\007\n\020V0LayerPara"
      "meter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\022\n\nnum"
      "_output\030\003 \001(\r\022\026\n\010biasterm\030\004 \001(\010:\004true\022-\n"
      "\rweight_filler\030\005 \001(\0132\026.caffe.FillerParam"
      "eter\022+\n\013bias_filler\030\006 \001(\0132\026.caffe.Filler"
      "Parameter\022\016\n\003pad\030\007 \001(\r:\0010\022\022\n\nkernelsize\030"
      "\010 \001(\r\022\020\n\005group\030\t \001(\r:\0011\022\021\n\006stride\030\n \001(\r:"
      "\0011\0225\n\004pool\030\013 \001(\0162\".caffe.V0LayerParamete"
      "r.PoolMethod:\003MAX\022\032\n\rdropout_ratio\030\014 \001(\002"
      ":\0030.5\022\025\n\nlocal_size\030\r \001(\r:\0015\022\020\n\005alpha\030\016 "
      "\001(\002:\0011\022\022\n\004beta\030\017 \001(\002:\0040.75\022\014\n\001k\030\026 \001(\002:\0011"
      "\022\016\n\006source\030\020 \001(\t\022\020\n\005scale\030\021 \001(\002:\0011\022\020\n\010me"
      "anfile\030\022 \001(\t\022\021\n\tbatchsize\030\023 \001(\r\022\023\n\010crops"
      "ize\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001(\010:\005false\022\037\n\005b"
      "lobs\0302 \003(\0132\020.caffe.BlobProto\022\020\n\010blobs_lr"
      "\0303 \003(\002\022\024\n\014weight_decay\0304 \003(\002\022\024\n\trand_ski"
      "p\0305 \001(\r:\0010\022\035\n\020det_fg_threshold\0306 \001(\002:\0030."
      "5\022\035\n\020det_bg_threshold\0307 \001(\002:\0030.5\022\035\n\017det_"
      "fg_fraction\0308 \001(\002:\0040.25\022\032\n\017det_context_p"
      "ad\030: \001(\r:\0010\022\033\n\rdet_crop_mode\030; \001(\t:\004warp"
      "\022\022\n\007new_num\030< \001(\005:\0010\022\027\n\014new_channels\030= \001"
      "(\005:\0010\022\025\n\nnew_height\030> \001(\005:\0010\022\024\n\tnew_widt"
      "h\030\? \001(\005:\0010\022\035\n\016shuffle_images\030@ \001(\010:\005fals"
      "e\022\025\n\nconcat_dim\030A \001(\r:\0011\0226\n\021hdf5_output_"
      "param\030\351\007 \001(\0132\032.caffe.HDF5OutputParameter"
      "\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOC"
      "HASTIC\020\002\"W\n\016PReLUParameter\022&\n\006filler\030\001 \001"
      "(\0132\026.caffe.FillerParameter\022\035\n\016channel_sh"
      "ared\030\002 \001(\010:\005false\"\203\001\n\017ResizeParameter\022\016\n"
      "\006height\030\001 \001(\r\022\r\n\005width\030\002 \001(\r\022\036\n\017is_pyram"
      "id_test\030\003 \001(\010:\005false\022\030\n\020out_height_scale"
      "\030\004 \001(\002\022\027\n\017out_width_scale\030\005 \001(\002\"\314\001\n\030Labe"
      "lRelatedDropoutParam\022\033\n\016negative_ratio\030\001"
      " \001(\002:\0030.5\022\027\n\014value_masked\030\003 \001(\002:\0010\022\027\n\nha"
      "rd_ratio\030\004 \001(\002:\0030.5\022\021\n\006margin\030\005 \001(\r:\0013\022\033"
      "\n\020ignore_largest_n\030\006 \001(\r:\0010\022\027\n\014min_neg_n"
      "ums\030\007 \001(\r:\0010\022\030\n\tper_image\030\010 \001(\010:\005false\"\227"
      "\001\n\030InceptionColumnParameter\0226\n\021convoluti"
      "on_param\030\001 \003(\0132\033.caffe.ConvolutionParame"
      "ter\022.\n\rpooling_param\030\002 \001(\0132\027.caffe.Pooli"
      "ngParameter\022\023\n\013column_name\030\003 \001(\t\"\211\002\n\022Inc"
      "eptionParameter\022(\n\nrelu_param\030\001 \001(\0132\024.ca"
      "ffe.ReLUParameter\022-\n\rweight_filler\030\002 \001(\013"
      "2\026.caffe.FillerParameter\022+\n\013bias_filler\030"
      "\003 \001(\0132\026.caffe.FillerParameter\022\027\n\tneed_re"
      "lu\030\005 \001(\010:\004true\022\031\n\013relu_at_top\030\006 \001(\010:\004tru"
      "e\0229\n\020inception_column\030\007 \003(\0132\037.caffe.Ince"
      "ptionColumnParameter\"\207\001\n\031ElementHingeLos"
      "sParameter\0227\n\004norm\030\001 \001(\0162%.caffe.Element"
      "HingeLossParameter.Norm:\002L2\022\031\n\nscale_los"
      "s\030\002 \001(\010:\005false\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L2\020\002\"\253"
      "\001\n\025BlockPackingParameter\022\025\n\nmax_stride\030\006"
      " \001(\r:\0018\022\020\n\005pad_h\030\007 \001(\r:\0010\022\020\n\005pad_w\030\010 \001(\r"
      ":\0010\022\033\n\016max_block_size\030\t \001(\r:\003500\022\033\n\020roi_"
      "star_percent\030\n \001(\002:\0010\022\035\n\022roi_height_perc"
      "ent\030\013 \001(\002:\0011\"\243\005\n\024PyramidDataParameter\022\027\n"
      "\017image_list_file\030\001 \001(\t\022\024\n\014image_folder\030\002"
      " \001(\t\022\027\n\013scale_start\030\003 \001(\002:\002-2\022\024\n\tscale_e"
      "nd\030\004 \001(\002:\0011\022\027\n\nscale_step\030\005 \001(\002:\0030.3\022$\n\025"
      "scale_from_annotation\030\016 \001(\010:\005false\0229\n\023bl"
      "ock_packing_param\030\006 \001(\0132\034.caffe.BlockPac"
      "kingParameter\022\025\n\nheat_map_a\030\n \001(\r:\0010\022\025\n\n"
      "heat_map_b\030\013 \001(\r:\0010\022\021\n\006mean_r\030\007 \001(\002:\0010\022\021"
      "\n\006mean_g\030\010 \001(\002:\0010\022\021\n\006mean_b\030\t \001(\002:\0010\022\030\n\r"
      "max_block_num\030\014 \001(\r:\0014\022\026\n\007shuffle\030\r \001(\010:"
      "\005false\022\022\n\007mean2_r\030\025 \001(\002:\0010\022\022\n\007mean2_g\030\026 "
      "\001(\002:\0010\022\022\n\007mean2_b\030\027 \001(\002:\0010\022\032\n\013is_img_pai"
      "r\030\030 \001(\010:\005false\022\030\n\tuse_video\030s \001(\010:\005false"
      "\022\022\n\nvideo_file\030t \001(\t\022\021\n\tlist_file\030u \001(\t\022"
      "\021\n\006device\030v \001(\r:\0010\022\021\n\003rgb\030w \001(\010:\004true\022\030\n"
      "\tpic_print\030x \001(\010:\005false\022\030\n\tshow_time\030y \001"
      "(\010:\005false\022\027\n\014resize_scale\030z \001(\002:\0011\022\016\n\006sc"
      "ales\030\034 \003(\002\"p\n\014NMSParameter\022\026\n\010need_nms\030\001"
      " \001(\010:\004true\022\032\n\roverlap_ratio\030\002 \001(\002:\0030.5\022\022"
      "\n\005top_n\030\003 \001(\r:\003100\022\030\n\tadd_score\030\004 \001(\010:\005f"
      "alse\"\213\004\n\030DetectionOutputParameter\022&\n\tnms"
      "_param\030\001 \001(\0132\023.caffe.NMSParameter\022\026\n\tthr"
      "eshold\030\002 \001(\002:\0030.5\022\034\n\021channel_per_scale\030\003"
      " \001(\r:\0015\022\027\n\017class_name_list\030\004 \003(\t\022\024\n\tnum_"
      "class\030\005 \001(\r:\0011\022$\n\026refine_out_of_map_bbox"
      "\030\006 \001(\010:\004true\022\026\n\007all_pos\030\007 \001(\010:\005false\022\017\n\004"
      "step\030\t \001(\r:\0011\022\016\n\006mean_w\030\n \003(\002\022\016\n\006mean_h\030"
      "\013 \003(\002\022\016\n\006mean_l\030\014 \003(\002\022\022\n\nclass_inds\030\r \003("
      "\r\022\020\n\010dim_inds\030\016 \003(\r\022\021\n\tpars_inds\030\017 \003(\r\022\022"
      "\n\nangle_inds\030\020 \003(\r\022\021\n\tpts8_inds\030\021 \003(\r\022\022\n"
      "\nbox2d_inds\030\022 \003(\r\022\030\n\tgroup_veh\030\023 \001(\010:\005fa"
      "lse\022\025\n\rnew_class_thr\030\024 \003(\002\022\037\n\027new_class_"
      "overlap_ratio\030\025 \003(\002\022\035\n\022shallow_track_ste"
      "p\030\026 \001(\r:\0010\"\306\001\n\014ROIDataParam\022\032\n\rpos_iou_r"
      "atio\030\001 \001(\002:\0030.7\022\032\n\rneg_iou_ratio\030\002 \001(\002:\003"
      "0.5\022\024\n\tnum_class\030\003 \001(\r:\0011\022\033\n\014need_balanc"
      "e\030\004 \001(\010:\005false\022\027\n\tneg_ratio\030\005 \001(\002:\0040.75\022"
      "\025\n\nhard_ratio\030\006 \001(\002:\0011\022\033\n\016hard_threshold"
      "\030\007 \001(\002:\0030.1\"\305\001\n\020ROI2HeatMapParam\022\024\n\tnum_"
      "class\030\001 \001(\r:\0011\022\r\n\005map_w\030\002 \001(\r\022\r\n\005map_h\030\003"
      " \001(\r\022\017\n\007map_num\030\004 \001(\r\022=\n\nlabel_type\030\005 \001("
      "\0162!.caffe.ROI2HeatMapParam.LabelType:\006NP"
      "lus1\"-\n\tLabelType\022\n\n\006OneDim\020\000\022\n\n\006NPlus1\020"
      "\001\022\010\n\004NDim\020\002\"\222\001\n\016ROIRefineParam\022\024\n\tnum_cl"
      "ass\030\001 \001(\r:\0011\022;\n\nlabel_type\030\005 \001(\0162\037.caffe"
      ".ROIRefineParam.LabelType:\006NPlus1\"-\n\tLab"
      "elType\022\n\n\006OneDim\020\000\022\n\n\006NPlus1\020\001\022\010\n\004NDim\020\002"
      "\"\256\001\n\014ROIShowParam\022\037\n\020is_input_heatmap\030\001 "
      "\001(\010:\005false\022\034\n\021heatmap_threshold\030\002 \001(\002:\0010"
      "\022\022\n\nheat_map_a\030\005 \001(\r\022\022\n\nheat_map_b\030\006 \001(\r"
      "\022\021\n\006mean_r\030\007 \001(\002:\0010\022\021\n\006mean_g\030\010 \001(\002:\0010\022\021"
      "\n\006mean_b\030\t \001(\002:\0010\"F\n\026PreviousStageParame"
      "ter\022\024\n\014net_prototxt\030\001 \001(\t\022\026\n\016net_param_f"
      "ile\030\002 \001(\t\"\241\001\n\rCropParameter\022/\n\004type\030\001 \001("
      "\0162\031.caffe.CropParameter.Type:\006CENTER\022\021\n\006"
      "crop_w\030\002 \001(\r:\0010\022\021\n\006crop_h\030\003 \001(\r:\0010\022\031\n\npr"
      "int_info\030\004 \001(\010:\005false\"\036\n\004Type\022\n\n\006CENTER\020"
      "\001\022\n\n\006RANDOM\020\002\"\306\001\n\021ResampleParameter\022\027\n\ta"
      "ntialias\030\004 \001(\010:\004true\022\r\n\005width\030\001 \001(\r\022\016\n\006h"
      "eight\030\002 \001(\r\022;\n\004type\030\003 \001(\0162%.caffe.Resamp"
      "leParameter.ResampleType:\006LINEAR\"<\n\014Resa"
      "mpleType\022\013\n\007NEAREST\020\001\022\n\n\006LINEAR\020\002\022\t\n\005CUB"
      "IC\020\003\022\010\n\004AREA\020\004\"\353\001\n\027GenerateAnchorParamet"
      "er\022\025\n\tbase_size\030\001 \001(\002:\00216\022\016\n\006ratios\030\002 \003("
      "\002\022\016\n\006scales\030\003 \003(\002\022\024\n\014anchor_width\030\004 \003(\002\022"
      "\025\n\ranchor_height\030\005 \003(\002\022\021\n\tanchor_x1\030\006 \003("
      "\002\022\021\n\tanchor_y1\030\007 \003(\002\022\021\n\tanchor_x2\030\010 \003(\002\022"
      "\021\n\tanchor_y2\030\t \003(\002\022 \n\022zero_anchor_center"
      "\030\n \001(\010:\004true\"\334\001\n\017NMSSSDParameter\022\026\n\010need"
      "_nms\030\001 \001(\010:\004true\022\025\n\roverlap_ratio\030\002 \003(\002\022"
      "\r\n\005top_n\030\003 \003(\r\022\030\n\tadd_score\030\004 \001(\010:\005false"
      "\022\027\n\017max_candidate_n\030\005 \003(\005\022\024\n\014use_soft_nm"
      "s\030\006 \003(\010\022 \n\021nms_among_classes\030\007 \001(\010:\005fals"
      "e\022\016\n\006voting\030\010 \003(\010\022\020\n\010vote_iou\030\t \003(\002\"\255\002\n\r"
      "KPTSParameter\022\035\n\025kpts_exist_bottom_idx\030\001"
      " \002(\r\022\033\n\023kpts_reg_bottom_idx\030\002 \002(\r\022#\n\024kpt"
      "s_reg_as_classify\030\003 \001(\010:\005false\022\033\n\023kpts_c"
      "lassify_width\030\004 \001(\r\022\034\n\024kpts_classify_hei"
      "ght\030\005 \001(\r\022\034\n\024kpts_reg_norm_idx_st\030\006 \001(\005\022"
      "\036\n\026kpts_st_for_each_class\030\007 \003(\005\022\036\n\026kpts_"
      "ed_for_each_class\030\010 \003(\005\022\"\n\027kpts_classify"
      "_pad_ratio\030\t \001(\002:\0010\"\315\001\n\rATRSParameter\022\033\n"
      "\023atrs_reg_bottom_idx\030\001 \002(\r\022\034\n\024atrs_reg_n"
      "orm_idx_st\030\002 \001(\005\0225\n\016atrs_norm_type\030\003 \003(\016"
      "2\035.caffe.ATRSParameter.NormType\"J\n\010NormT"
      "ype\022\010\n\004NONE\020\000\022\t\n\005WIDTH\020\001\022\n\n\006HEIGHT\020\002\022\r\n\t"
      "WIDTH_LOG\020\003\022\016\n\nHEIGHT_LOG\020\004\"(\n\rFTRSParam"
      "eter\022\027\n\017ftrs_bottom_idx\030\001 \002(\r\"\217\001\n\rSPMPPa"
      "rameter\022\027\n\017spmp_bottom_idx\030\001 \002(\r\022\030\n\020spmp"
      "_class_aware\030\002 \003(\010\022\030\n\020spmp_label_width\030\003"
      " \003(\r\022\031\n\021spmp_label_height\030\004 \003(\r\022\026\n\016spmp_"
      "pad_ratio\030\005 \003(\002\"*\n\016Cam3dParameter\022\030\n\020cam"
      "3d_bottom_idx\030\001 \002(\r\"\265\t\n\033DetectionOutputS"
      "SDParameter\022)\n\tnms_param\030\001 \001(\0132\026.caffe.N"
      "MSSSDParameter\022\021\n\tthreshold\030\002 \003(\002\022\034\n\021cha"
      "nnel_per_scale\030\003 \001(\r:\0015\022\027\n\017class_name_li"
      "st\030\004 \001(\t\022\024\n\tnum_class\030\005 \001(\r:\0011\022%\n\026refine"
      "_out_of_map_bbox\030\006 \001(\010:\005false\022\025\n\rclass_i"
      "ndexes\030\007 \003(\r\022\022\n\nheat_map_a\030\010 \003(\002\022\022\n\nheat"
      "_map_b\030\r \003(\002\022\037\n\024threshold_objectness\030\t \001"
      "(\002:\0010\022\036\n\026proposal_min_sqrt_area\030\n \003(\002\022\036\n"
      "\026proposal_max_sqrt_area\030\013 \003(\002\022#\n\024bg_as_o"
      "ne_of_softmax\030\014 \001(\010:\005false\022\"\n\024use_target"
      "_type_rcnn\030\016 \001(\010:\004true\022\023\n\010im_width\030\017 \001(\002"
      ":\0010\022\024\n\tim_height\030\020 \001(\002:\0010\022(\n\031rpn_proposa"
      "l_output_score\030\021 \001(\010:\005false\022\036\n\020regress_a"
      "gnostic\030\022 \001(\010:\004true\0228\n\020gen_anchor_param\030"
      "\023 \001(\0132\036.caffe.GenerateAnchorParameter\022\030\n"
      "\014allow_border\030\024 \001(\002:\002-1\022\036\n\022allow_border_"
      "ratio\030\025 \001(\002:\002-1\022\037\n\021bbox_size_add_one\030\026 \001"
      "(\010:\004true\022\033\n\020read_width_scale\030\035 \001(\002:\0011\022\034\n"
      "\021read_height_scale\030\036 \001(\002:\0011\022\035\n\022read_heig"
      "ht_offset\030\037 \001(\r:\0010\022\025\n\nmin_size_h\030  \001(\002:\001"
      "2\022\025\n\nmin_size_w\030! \001(\002:\0012\022Y\n\rmin_size_mod"
      "e\030\" \001(\01620.caffe.DetectionOutputSSDParame"
      "ter.MIN_SIZE_MODE:\020HEIGHT_AND_WIDTH\022(\n\nk"
      "pts_param\030# \001(\0132\024.caffe.KPTSParameter\022(\n"
      "\natrs_param\030$ \001(\0132\024.caffe.ATRSParameter\022"
      "(\n\nftrs_param\030% \001(\0132\024.caffe.FTRSParamete"
      "r\022(\n\nspmp_param\030& \001(\0132\024.caffe.SPMPParame"
      "ter\022*\n\013cam3d_param\030\' \001(\0132\025.caffe.Cam3dPa"
      "rameter\":\n\rMIN_SIZE_MODE\022\024\n\020HEIGHT_AND_W"
      "IDTH\020\000\022\023\n\017HEIGHT_OR_WIDTH\020\001\"7\n\020BBoxRegPa"
      "rameter\022\021\n\tbbox_mean\030\001 \003(\002\022\020\n\010bbox_std\030\002"
      " \003(\002\")\n\014RegParameter\022\014\n\004mean\030\001 \003(\002\022\013\n\003st"
      "d\030\002 \003(\002\"\355\001\n\025ImageDistortParameter\022\026\n\016pre"
      "_mean_value\030\001 \003(\002\022\026\n\016new_mean_value\030\002 \003("
      "\002\022\024\n\tpre_scale\030\003 \001(\002:\0011\022\021\n\tnew_scale\030\004 \001"
      "(\002\022@\n\rdistort_param\030\005 \001(\0132).caffe_fcn_da"
      "ta_layer.DistortionParameter\0229\n\013noise_pa"
      "ram\030\006 \001(\0132$.caffe_fcn_data_layer.NoisePa"
      "rameter\"\200\001\n\025PSROIPoolingParameter\022\022\n\nhea"
      "t_map_a\030\001 \002(\002\022\025\n\nheat_map_b\030\002 \001(\002:\0010\022\024\n\t"
      "pad_ratio\030\003 \001(\002:\0010\022\022\n\noutput_dim\030\004 \002(\005\022\022"
      "\n\ngroup_size\030\005 \002(\005\"\267\002\n\031DFMBPSROIPoolingP"
      "arameter\022\022\n\nheat_map_a\030\001 \002(\002\022\025\n\nheat_map"
      "_b\030\002 \001(\002:\0010\022\024\n\tpad_ratio\030\003 \001(\002:\0010\022\022\n\nout"
      "put_dim\030\004 \002(\r\022\026\n\ttrans_std\030\005 \001(\002:\0030.1\022\032\n"
      "\017sample_per_part\030\006 \001(\r:\0014\022\027\n\014group_heigh"
      "t\030\007 \001(\r:\0017\022\026\n\013group_width\030\010 \001(\r:\0017\022\030\n\rpo"
      "oled_height\030\t \001(\r:\0017\022\027\n\014pooled_width\030\n \001"
      "(\r:\0017\022\026\n\013part_height\030\013 \001(\r:\0017\022\025\n\npart_wi"
      "dth\030\014 \001(\r:\0017\"\200\010\n$ProposalImgScaleToCamCo"
      "ordsParameter\022\021\n\tnum_class\030\001 \002(\r\022\033\n\023sub_"
      "class_num_class\030\002 \003(\r\022\034\n\024sub_class_botto"
      "m_idx\030\003 \003(\005\022Y\n\017prj_h_norm_type\030\004 \001(\01624.c"
      "affe.ProposalImgScaleToCamCoordsParamete"
      "r.NormType:\nHEIGHT_LOG\022%\n\026has_size3d_and"
      "_orien3d\030\005 \001(\010:\005false\022N\n\norien_type\030\006 \001("
      "\01625.caffe.ProposalImgScaleToCamCoordsPar"
      "ameter.OrienType:\003PI2\022\035\n\025cls_ids_zero_si"
      "ze3d_w\030\007 \003(\r\022\035\n\025cls_ids_zero_size3d_l\030\010 "
      "\003(\r\022\034\n\024cls_ids_zero_orien3d\030\t \003(\r\022 \n\021cmp"
      "_pts_corner_3d\030\n \001(\010:\005false\022 \n\021cmp_pts_c"
      "orner_2d\030\013 \001(\010:\005false\022\024\n\014ctr_2d_means\030\014 "
      "\003(\002\022\023\n\013ctr_2d_stds\030\r \003(\002\022\023\n\013prj_h_means\030"
      "\016 \003(\002\022\022\n\nprj_h_stds\030\017 \003(\002\022\024\n\014real_h_mean"
      "s\030\020 \003(\002\022\023\n\013real_h_stds\030\021 \003(\002\022\024\n\014real_w_m"
      "eans\030\022 \003(\002\022\023\n\013real_w_stds\030\023 \003(\002\022\024\n\014real_"
      "l_means\030\024 \003(\002\022\023\n\013real_l_stds\030\025 \003(\002\022\021\n\tsi"
      "n_means\030\026 \003(\002\022\020\n\010sin_stds\030\027 \003(\002\022\021\n\tcos_m"
      "eans\030\030 \003(\002\022\020\n\010cos_stds\030\031 \003(\002\022%\n\032cam_info"
      "_idx_st_in_im_info\030\032 \001(\r:\0010\022\031\n\016im_width_"
      "scale\030\033 \001(\002:\0011\022\032\n\017im_height_scale\030\034 \001(\002:"
      "\0011\022\031\n\016cords_offset_x\030\035 \001(\002:\0010\022\031\n\016cords_o"
      "ffset_y\030\036 \001(\002:\0010\022\037\n\021bbox_size_add_one\030\037 "
      "\001(\010:\004true\"&\n\010NormType\022\n\n\006HEIGHT\020\000\022\016\n\nHEI"
      "GHT_LOG\020\001\"\034\n\tOrienType\022\006\n\002PI\020\000\022\007\n\003PI2\020\001\""
      "\220\004\n\036DeformableConvolutionParameter\022\022\n\nnu"
      "m_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022"
      "\013\n\003pad\030\003 \003(\r\022\023\n\013kernel_size\030\004 \003(\r\022\016\n\006str"
      "ide\030\006 \003(\r\022\020\n\010dilation\030\022 \003(\r\022\020\n\005pad_h\030\t \001"
      "(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n\010kernel_h\030\013 \001("
      "\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010stride_h\030\r \001(\r\022\020\n"
      "\010stride_w\030\016 \001(\r\022\020\n\005group\030\005 \001(\r:\0011\022-\n\rwei"
      "ght_filler\030\007 \001(\0132\026.caffe.FillerParameter"
      "\022+\n\013bias_filler\030\010 \001(\0132\026.caffe.FillerPara"
      "meter\022E\n\006engine\030\017 \001(\0162,.caffe.Deformable"
      "ConvolutionParameter.Engine:\007DEFAULT\022\017\n\004"
      "axis\030\020 \001(\005:\0011\022\036\n\017force_nd_im2col\030\021 \001(\010:\005"
      "false\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022"
      "\t\n\005CUDNN\020\002*\034\n\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001"
      "*-\n\tLabelType\022\n\n\006OneDim\020\000\022\n\n\006NPlus1\020\001\022\010\n"
      "\004NDim\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 31007);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe.proto", &protobuf_RegisterTypes);
  ::caffe_fcn_data_layer::protobuf_caffe_5ffcn_5fdata_5flayer_2eproto::AddDescriptors();
  ::smartseg::protobuf_caffe_5fsmartseg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_caffe_2eproto

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[0];
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FillerParameter_VarianceNorm FillerParameter::FAN_IN;
const FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
const FillerParameter_VarianceNorm FillerParameter::AVERAGE;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
const int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[1];
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SnapshotFormat SolverParameter::HDF5;
const SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
const int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[2];
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverMode SolverParameter::CPU;
const SolverParameter_SolverMode SolverParameter::GPU;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[3];
}
bool SolverParameter_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverType SolverParameter::SGD;
const SolverParameter_SolverType SolverParameter::NESTEROV;
const SolverParameter_SolverType SolverParameter::ADAGRAD;
const SolverParameter_SolverType SolverParameter::RMSPROP;
const SolverParameter_SolverType SolverParameter::ADADELTA;
const SolverParameter_SolverType SolverParameter::ADAM;
const SolverParameter_SolverType SolverParameter::SolverType_MIN;
const SolverParameter_SolverType SolverParameter::SolverType_MAX;
const int SolverParameter::SolverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[4];
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BinaryDataParameter_ViewType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[5];
}
bool BinaryDataParameter_ViewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BinaryDataParameter_ViewType BinaryDataParameter::None;
const BinaryDataParameter_ViewType BinaryDataParameter::Cylinder;
const BinaryDataParameter_ViewType BinaryDataParameter::Birdview;
const BinaryDataParameter_ViewType BinaryDataParameter::ViewType_MIN;
const BinaryDataParameter_ViewType BinaryDataParameter::ViewType_MAX;
const int BinaryDataParameter::ViewType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageLabelDataParameter_Padding_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[6];
}
bool ImageLabelDataParameter_Padding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageLabelDataParameter_Padding ImageLabelDataParameter::ZERO;
const ImageLabelDataParameter_Padding ImageLabelDataParameter::REFLECT;
const ImageLabelDataParameter_Padding ImageLabelDataParameter::Padding_MIN;
const ImageLabelDataParameter_Padding ImageLabelDataParameter::Padding_MAX;
const int ImageLabelDataParameter::Padding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[7];
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LossParameter_NormalizationMode LossParameter::FULL;
const LossParameter_NormalizationMode LossParameter::VALID;
const LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
const LossParameter_NormalizationMode LossParameter::NONE;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
const int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[8];
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
const ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
const int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[9];
}
bool DataParameter_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_DB DataParameter::LEVELDB;
const DataParameter_DB DataParameter::LMDB;
const DataParameter_DB DataParameter::DB_MIN;
const DataParameter_DB DataParameter::DB_MAX;
const int DataParameter::DB_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[10];
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
const EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
const int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[11];
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HingeLossParameter_Norm HingeLossParameter::L1;
const HingeLossParameter_Norm HingeLossParameter::L2;
const HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
const HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
const int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[12];
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[13];
}
bool LRNParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_Engine LRNParameter::DEFAULT;
const LRNParameter_Engine LRNParameter::CAFFE;
const LRNParameter_Engine LRNParameter::CUDNN;
const LRNParameter_Engine LRNParameter::Engine_MIN;
const LRNParameter_Engine LRNParameter::Engine_MAX;
const int LRNParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[14];
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[15];
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_Engine PoolingParameter::DEFAULT;
const PoolingParameter_Engine PoolingParameter::CAFFE;
const PoolingParameter_Engine PoolingParameter::CUDNN;
const PoolingParameter_Engine PoolingParameter::Engine_MIN;
const PoolingParameter_Engine PoolingParameter::Engine_MAX;
const int PoolingParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[16];
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReductionParameter_ReductionOp ReductionParameter::SUM;
const ReductionParameter_ReductionOp ReductionParameter::ASUM;
const ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
const ReductionParameter_ReductionOp ReductionParameter::MEAN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
const int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[17];
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReLUParameter_Engine ReLUParameter::DEFAULT;
const ReLUParameter_Engine ReLUParameter::CAFFE;
const ReLUParameter_Engine ReLUParameter::CUDNN;
const ReLUParameter_Engine ReLUParameter::Engine_MIN;
const ReLUParameter_Engine ReLUParameter::Engine_MAX;
const int ReLUParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ROIPoolingParameter_PoolMethod_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[18];
}
bool ROIPoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ROIPoolingParameter_PoolMethod ROIPoolingParameter::MAX;
const ROIPoolingParameter_PoolMethod ROIPoolingParameter::AVE;
const ROIPoolingParameter_PoolMethod ROIPoolingParameter::PoolMethod_MIN;
const ROIPoolingParameter_PoolMethod ROIPoolingParameter::PoolMethod_MAX;
const int ROIPoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[19];
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SigmoidParameter_Engine SigmoidParameter::DEFAULT;
const SigmoidParameter_Engine SigmoidParameter::CAFFE;
const SigmoidParameter_Engine SigmoidParameter::CUDNN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
const int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[20];
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
const SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
const int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[21];
}
bool TanHParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TanHParameter_Engine TanHParameter::DEFAULT;
const TanHParameter_Engine TanHParameter::CAFFE;
const TanHParameter_Engine TanHParameter::CUDNN;
const TanHParameter_Engine TanHParameter::Engine_MIN;
const TanHParameter_Engine TanHParameter::Engine_MAX;
const int TanHParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[22];
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_PoolMethod SPPParameter::MAX;
const SPPParameter_PoolMethod SPPParameter::AVE;
const SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
const int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[23];
}
bool SPPParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_Engine SPPParameter::DEFAULT;
const SPPParameter_Engine SPPParameter::CAFFE;
const SPPParameter_Engine SPPParameter::CUDNN;
const SPPParameter_Engine SPPParameter::Engine_MIN;
const SPPParameter_Engine SPPParameter::Engine_MAX;
const int SPPParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[24];
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 55:
    case 5001:
    case 5002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_LayerType V1LayerParameter::NONE;
const V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
const V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
const V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
const V1LayerParameter_LayerType V1LayerParameter::BNLL;
const V1LayerParameter_LayerType V1LayerParameter::CONCAT;
const V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DATA;
const V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
const V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
const V1LayerParameter_LayerType V1LayerParameter::EXP;
const V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
const V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::IM2COL;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
const V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
const V1LayerParameter_LayerType V1LayerParameter::LRN;
const V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::MVN;
const V1LayerParameter_LayerType V1LayerParameter::POOLING;
const V1LayerParameter_LayerType V1LayerParameter::POWER;
const V1LayerParameter_LayerType V1LayerParameter::RELU;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SILENCE;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SPLIT;
const V1LayerParameter_LayerType V1LayerParameter::SLICE;
const V1LayerParameter_LayerType V1LayerParameter::TANH;
const V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
const V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA_ARBITRARY;
const V1LayerParameter_LayerType V1LayerParameter::EXPANDLABEL;
const V1LayerParameter_LayerType V1LayerParameter::DEFORMABLECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
const int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[25];
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
const int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[26];
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V0LayerParameter_PoolMethod V0LayerParameter::MAX;
const V0LayerParameter_PoolMethod V0LayerParameter::AVE;
const V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
const int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ElementHingeLossParameter_Norm_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[27];
}
bool ElementHingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ElementHingeLossParameter_Norm ElementHingeLossParameter::L1;
const ElementHingeLossParameter_Norm ElementHingeLossParameter::L2;
const ElementHingeLossParameter_Norm ElementHingeLossParameter::Norm_MIN;
const ElementHingeLossParameter_Norm ElementHingeLossParameter::Norm_MAX;
const int ElementHingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ROI2HeatMapParam_LabelType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[28];
}
bool ROI2HeatMapParam_LabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ROI2HeatMapParam_LabelType ROI2HeatMapParam::OneDim;
const ROI2HeatMapParam_LabelType ROI2HeatMapParam::NPlus1;
const ROI2HeatMapParam_LabelType ROI2HeatMapParam::NDim;
const ROI2HeatMapParam_LabelType ROI2HeatMapParam::LabelType_MIN;
const ROI2HeatMapParam_LabelType ROI2HeatMapParam::LabelType_MAX;
const int ROI2HeatMapParam::LabelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ROIRefineParam_LabelType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[29];
}
bool ROIRefineParam_LabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ROIRefineParam_LabelType ROIRefineParam::OneDim;
const ROIRefineParam_LabelType ROIRefineParam::NPlus1;
const ROIRefineParam_LabelType ROIRefineParam::NDim;
const ROIRefineParam_LabelType ROIRefineParam::LabelType_MIN;
const ROIRefineParam_LabelType ROIRefineParam::LabelType_MAX;
const int ROIRefineParam::LabelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CropParameter_Type_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[30];
}
bool CropParameter_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CropParameter_Type CropParameter::CENTER;
const CropParameter_Type CropParameter::RANDOM;
const CropParameter_Type CropParameter::Type_MIN;
const CropParameter_Type CropParameter::Type_MAX;
const int CropParameter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResampleParameter_ResampleType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[31];
}
bool ResampleParameter_ResampleType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResampleParameter_ResampleType ResampleParameter::NEAREST;
const ResampleParameter_ResampleType ResampleParameter::LINEAR;
const ResampleParameter_ResampleType ResampleParameter::CUBIC;
const ResampleParameter_ResampleType ResampleParameter::AREA;
const ResampleParameter_ResampleType ResampleParameter::ResampleType_MIN;
const ResampleParameter_ResampleType ResampleParameter::ResampleType_MAX;
const int ResampleParameter::ResampleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ATRSParameter_NormType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[32];
}
bool ATRSParameter_NormType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ATRSParameter_NormType ATRSParameter::NONE;
const ATRSParameter_NormType ATRSParameter::WIDTH;
const ATRSParameter_NormType ATRSParameter::HEIGHT;
const ATRSParameter_NormType ATRSParameter::WIDTH_LOG;
const ATRSParameter_NormType ATRSParameter::HEIGHT_LOG;
const ATRSParameter_NormType ATRSParameter::NormType_MIN;
const ATRSParameter_NormType ATRSParameter::NormType_MAX;
const int ATRSParameter::NormType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[33];
}
bool DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::HEIGHT_AND_WIDTH;
const DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::HEIGHT_OR_WIDTH;
const DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::MIN_SIZE_MODE_MIN;
const DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::MIN_SIZE_MODE_MAX;
const int DetectionOutputSSDParameter::MIN_SIZE_MODE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProposalImgScaleToCamCoordsParameter_NormType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[34];
}
bool ProposalImgScaleToCamCoordsParameter_NormType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter::HEIGHT;
const ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter::HEIGHT_LOG;
const ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter::NormType_MIN;
const ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter::NormType_MAX;
const int ProposalImgScaleToCamCoordsParameter::NormType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProposalImgScaleToCamCoordsParameter_OrienType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[35];
}
bool ProposalImgScaleToCamCoordsParameter_OrienType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter::PI;
const ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter::PI2;
const ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter::OrienType_MIN;
const ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter::OrienType_MAX;
const int ProposalImgScaleToCamCoordsParameter::OrienType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DeformableConvolutionParameter_Engine_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[36];
}
bool DeformableConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter::DEFAULT;
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter::CAFFE;
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter::CUDNN;
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter::Engine_MIN;
const DeformableConvolutionParameter_Engine DeformableConvolutionParameter::Engine_MAX;
const int DeformableConvolutionParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[37];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LabelType_descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_enum_descriptors[38];
}
bool LabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobShape& BlobShape::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
  BlobShape* n = new BlobShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
  dim_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0, n = this->dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
  dim_.InternalSwap(&other->dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
int BlobShape::dim_size() const {
  return dim_.size();
}
void BlobShape::clear_dim() {
  dim_.Clear();
}
::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_),
      diff_(from.diff_),
      double_data_(from.double_data_),
      double_diff_(from.double_diff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::caffe::BlobShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shape_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&shape_) + sizeof(width_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProto& BlobProto::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  if (has_shape()) {
    GOOGLE_DCHECK(shape_ != NULL);
    shape_->::caffe::BlobShape::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&num_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&num_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(45u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(53u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BlobShape shape = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_data = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(65u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_diff = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_diff())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(73u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74u, input, this->mutable_double_diff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->diff().data(), this->diff_size(), output);
  }

  // optional .caffe.BlobShape shape = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->shape_, output);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->double_data().data(), this->double_data_size(), output);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_diff_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->double_diff().data(), this->double_diff_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff_, target);
  }

  // optional .caffe.BlobShape shape = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->shape_, deterministic, target);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data_, target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_diff_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_diff_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float data = 5 [packed = true];
  {
    unsigned int count = this->data_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    unsigned int count = this->diff_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    unsigned int count = this->double_data_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    unsigned int count = this->double_diff_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.BlobShape shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  data_.InternalSwap(&other->data_);
  diff_.InternalSwap(&other->diff_);
  double_data_.InternalSwap(&other->double_data_);
  double_diff_.InternalSwap(&other->double_diff_);
  std::swap(shape_, other->shape_);
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// optional .caffe.BlobShape shape = 7;
bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
int BlobProto::data_size() const {
  return data_.size();
}
void BlobProto::clear_data() {
  data_.Clear();
}
float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
int BlobProto::diff_size() const {
  return diff_.size();
}
void BlobProto::clear_diff() {
  diff_.Clear();
}
float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
int BlobProto::double_data_size() const {
  return double_data_.size();
}
void BlobProto::clear_double_data() {
  double_data_.Clear();
}
double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProtoVector::BlobProtoVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProtoVector)
}
BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blobs_(from.blobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
  _cached_size_ = 0;
}

BlobProtoVector::~BlobProtoVector() {
  // @@protoc_insertion_point(destructor:caffe.BlobProtoVector)
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
}

void BlobProtoVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobProtoVector* BlobProtoVector::New(::google::protobuf::Arena* arena) const {
  BlobProtoVector* n = new BlobProtoVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProtoVector)
  blobs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProtoVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProtoVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobProto blobs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProtoVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProtoVector)
  return false;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProtoVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProtoVector)
}

::google::protobuf::uint8* BlobProtoVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProtoVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->blobs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProtoVector)
  return target;
}

size_t BlobProtoVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProtoVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.BlobProto blobs = 1;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProtoVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProtoVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProtoVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProtoVector)
    MergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {
  return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
  blobs_.InternalSwap(&other->blobs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Datum)
}
Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_data_(from.float_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&channels_, &from.channels_,
    reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
  // @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:caffe.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Datum& Datum::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Datum)
  float_data_.Clear();
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
      reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_float_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_encoded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0, n = this->float_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->float_data_, target);

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Datum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float float_data = 6;
  {
    unsigned int count = this->float_data_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_data_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_data_.MergeFrom(from.float_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoded_ = from.encoded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  float_data_.InternalSwap(&other->float_data_);
  data_.Swap(&other->data_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(label_, other->label_);
  std::swap(encoded_, other->encoded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional int32 channels = 1;
bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena();
}
void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
#if LANG_CXX11
void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
#endif
void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
int Datum::float_data_size() const {
  return float_data_.size();
}
void Datum::clear_float_data() {
  float_data_.Clear();
}
float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> FillerParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kSparseFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
const int FillerParameter::kNumGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
  }
  ::memcpy(&value_, &from.value_,
    reinterpret_cast<char*>(&std_) -
    reinterpret_cast<char*>(&value_) + sizeof(std_));
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  ::memset(&value_, 0, reinterpret_cast<char*>(&num_groups_) -
    reinterpret_cast<char*>(&value_) + sizeof(num_groups_));
  sparse_ = -1;
  max_ = 1;
  std_ = 1;
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(&FillerParameter::_default_type_.get());
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FillerParameter& FillerParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
  FillerParameter* n = new FillerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&FillerParameter::_default_type_.get()));
    (*type_.UnsafeRawStringPointer())->assign(*&FillerParameter::_default_type_.get());
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&value_, 0, reinterpret_cast<char*>(&num_groups_) -
      reinterpret_cast<char*>(&value_) + sizeof(num_groups_));
    sparse_ = -1;
    max_ = 1;
  }
  std_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float std = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sparse = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sparse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FillerParameter_VarianceNorm_IsValid(value)) {
            set_variance_norm(static_cast< ::caffe::FillerParameter_VarianceNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_groups = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_num_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "constant"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional float min = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }

  // optional float max = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // optional float mean = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  // optional float std = 6 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }

  // optional int32 sparse = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->variance_norm(), output);
  }

  // optional int32 num_groups = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_groups(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "constant"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional float min = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }

  // optional float max = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->variance_norm(), target);
  }

  // optional int32 num_groups = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_groups(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    if (has_variance_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->variance_norm());
    }

    // optional int32 num_groups = 9;
    if (has_num_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_groups());
    }

    // optional int32 sparse = 7 [default = -1];
    if (has_sparse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparse());
    }

    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  // optional float std = 6 [default = 1];
  if (has_std()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FillerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000010u) {
      variance_norm_ = from.variance_norm_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_groups_ = from.num_groups_;
    }
    if (cached_has_bits & 0x00000040u) {
      sparse_ = from.sparse_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_std(from.std());
  }
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
  type_.Swap(&other->type_);
  std::swap(value_, other->value_);
  std::swap(min_, other->min_);
  std::swap(mean_, other->mean_);
  std::swap(variance_norm_, other->variance_norm_);
  std::swap(num_groups_, other->num_groups_);
  std::swap(sparse_, other->sparse_);
  std::swap(max_, other->max_);
  std::swap(std_, other->std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1 [default = "constant"];
bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&FillerParameter::_default_type_.get());
  clear_has_type();
}
const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &FillerParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&FillerParameter::_default_type_.get());
}
::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&FillerParameter::_default_type_.get());
}
void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000080u;
}
void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000080u;
}
void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000100u;
}
void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000100u;
}
void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000010u;
}
void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

// optional int32 num_groups = 9;
bool FillerParameter::has_num_groups() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillerParameter::set_has_num_groups() {
  _has_bits_[0] |= 0x00000020u;
}
void FillerParameter::clear_has_num_groups() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillerParameter::clear_num_groups() {
  num_groups_ = 0;
  clear_has_num_groups();
}
::google::protobuf::int32 FillerParameter::num_groups() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.num_groups)
  return num_groups_;
}
void FillerParameter::set_num_groups(::google::protobuf::int32 value) {
  set_has_num_groups();
  num_groups_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.num_groups)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layers_(from.layers_),
      input_(from.input_),
      input_dim_(from.input_dim_),
      input_shape_(from.input_shape_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_state()) {
    state_ = new ::caffe::NetState(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&force_backward_, &from.force_backward_,
    reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&force_backward_) + sizeof(debug_info_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&state_) + sizeof(debug_info_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete state_;
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetParameter& NetParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
  layers_.Clear();
  input_.Clear();
  input_dim_.Clear();
  input_shape_.Clear();
  layer_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_state()) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->::caffe::NetState::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&force_backward_, 0, reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&force_backward_) + sizeof(debug_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.V1LayerParameter layers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_dim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_input_dim())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_force_backward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.LayerParameter layer = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0, n = this->input_dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->input_dim(i), output);
  }

  // optional bool force_backward = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }

  // optional .caffe.NetState state = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->state_, output);
  }

  // optional bool debug_info = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_shape(i), output);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->layers(i), deterministic, target);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated int32 input_dim = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->input_dim_, target);

  // optional bool force_backward = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }

  // optional .caffe.NetState state = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->state_, deterministic, target);
  }

  // optional bool debug_info = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->input_shape(i), deterministic, target);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->layer(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.V1LayerParameter layers = 2;
  {
    unsigned int count = this->layers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layers(i));
    }
  }

  // repeated string input = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0, n = this->input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_dim_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->input_dim_size());
    total_size += data_size;
  }

  // repeated .caffe.BlobShape input_shape = 8;
  {
    unsigned int count = this->input_shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_shape(i));
    }
  }

  // repeated .caffe.LayerParameter layer = 100;
  {
    unsigned int count = this->layer_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.NetState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }

    // optional bool debug_info = 7 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  input_.MergeFrom(from.input_);
  input_dim_.MergeFrom(from.input_dim_);
  input_shape_.MergeFrom(from.input_shape_);
  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_state()->::caffe::NetState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000004u) {
      force_backward_ = from.force_backward_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_info_ = from.debug_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  layers_.InternalSwap(&other->layers_);
  input_.InternalSwap(&other->input_);
  input_dim_.InternalSwap(&other->input_dim_);
  input_shape_.InternalSwap(&other->input_shape_);
  layer_.InternalSwap(&other->layer_);
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  std::swap(force_backward_, other->force_backward_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
int NetParameter::input_size() const {
  return input_.size();
}
void NetParameter::clear_input() {
  input_.Clear();
}
const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetParameter::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#if LANG_CXX11
void NetParameter::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#endif
void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
int NetParameter::layers_size() const {
  return layers_.size();
}
void NetParameter::clear_layers() {
  layers_.Clear();
}
const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_regularization_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTrainNetParamFieldNumber;
const int SolverParameter::kTestNetParamFieldNumber;
const int SolverParameter::kTrainStateFieldNumber;
const int SolverParameter::kTestStateFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestComputeLossFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kAverageLossFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kStepvalueFieldNumber;
const int SolverParameter::kClipGradientsFieldNumber;
const int SolverParameter::kPrintParamFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSnapshotFormatFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kRandomSeedFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kDeltaFieldNumber;
const int SolverParameter::kMomentum2FieldNumber;
const int SolverParameter::kRmsDecayFieldNumber;
const int SolverParameter::kDebugInfoFieldNumber;
const int SolverParameter::kSnapshotAfterTrainFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
const int SolverParameter::kPreviousStageParamFieldNumber;
const int SolverParameter::kParamUpdateIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverParameter)
}
SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      test_net_(from.test_net_),
      test_iter_(from.test_iter_),
      test_net_param_(from.test_net_param_),
      test_state_(from.test_state_),
      stepvalue_(from.stepvalue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_train_net()) {
    train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
  }
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lr_policy()) {
    lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
  }
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snapshot_prefix()) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net()) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  regularization_type_.UnsafeSetDefault(&SolverParameter::_default_regularization_type_.get());
  if (from.has_regularization_type()) {
    regularization_type_.AssignWithDefault(&SolverParameter::_default_regularization_type_.get(), from.regularization_type_);
  }
  type_.UnsafeSetDefault(&SolverParameter::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&SolverParameter::_default_type_.get(), from.type_);
  }
  if (from.has_train_net_param()) {
    train_net_param_ = new ::caffe::NetParameter(*from.train_net_param_);
  } else {
    train_net_param_ = NULL;
  }
  if (from.has_net_param()) {
    net_param_ = new ::caffe::NetParameter(*from.net_param_);
  } else {
    net_param_ = NULL;
  }
  if (from.has_train_state()) {
    train_state_ = new ::caffe::NetState(*from.train_state_);
  } else {
    train_state_ = NULL;
  }
  if (from.has_previous_stage_param()) {
    previous_stage_param_ = new ::caffe::PreviousStageParameter(*from.previous_stage_param_);
  } else {
    previous_stage_param_ = NULL;
  }
  ::memcpy(&test_interval_, &from.test_interval_,
    reinterpret_cast<char*>(&momentum2_) -
    reinterpret_cast<char*>(&test_interval_) + sizeof(momentum2_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.UnsafeSetDefault(&SolverParameter::_default_regularization_type_.get());
  type_.UnsafeSetDefault(&SolverParameter::_default_type_.get());
  ::memset(&train_net_param_, 0, reinterpret_cast<char*>(&print_param_) -
    reinterpret_cast<char*>(&train_net_param_) + sizeof(print_param_));
  param_update_interval_ = 1u;
  random_seed_ = GOOGLE_LONGLONG(-1);
  solver_mode_ = 1;
  test_initialization_ = true;
  snapshot_after_train_ = true;
  delta_ = 1e-08f;
  average_loss_ = 1;
  clip_gradients_ = -1;
  iter_size_ = 1;
  snapshot_format_ = 1;
  momentum2_ = 0.999f;
  _cached_size_ = 0;
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:caffe.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  train_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(&SolverParameter::_default_regularization_type_.get());
  type_.DestroyNoArena(&SolverParameter::_default_type_.get());
  if (this != internal_default_instance()) {
    delete train_net_param_;
  }
  if (this != internal_default_instance()) {
    delete net_param_;
  }
  if (this != internal_default_instance()) {
    delete train_state_;
  }
  if (this != internal_default_instance()) {
    delete previous_stage_param_;
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverParameter& SolverParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
  SolverParameter* n = new SolverParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverParameter)
  test_net_.Clear();
  test_iter_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  stepvalue_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_train_net()) {
      GOOGLE_DCHECK(!train_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*train_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_lr_policy()) {
      GOOGLE_DCHECK(!lr_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lr_policy_.UnsafeRawStringPointer())->clear();
    }
    if (has_snapshot_prefix()) {
      GOOGLE_DCHECK(!snapshot_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snapshot_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_net()) {
      GOOGLE_DCHECK(!net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*net_.UnsafeRawStringPointer())->clear();
    }
    if (has_regularization_type()) {
      GOOGLE_DCHECK(!regularization_type_.IsDefault(&SolverParameter::_default_regularization_type_.get()));
      (*regularization_type_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_regularization_type_.get());
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&SolverParameter::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_type_.get());
    }
    if (has_train_net_param()) {
      GOOGLE_DCHECK(train_net_param_ != NULL);
      train_net_param_->::caffe::NetParameter::Clear();
    }
    if (has_net_param()) {
      GOOGLE_DCHECK(net_param_ != NULL);
      net_param_->::caffe::NetParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_train_state()) {
      GOOGLE_DCHECK(train_state_ != NULL);
      train_state_->::caffe::NetState::Clear();
    }
    if (has_previous_stage_param()) {
      GOOGLE_DCHECK(previous_stage_param_ != NULL);
      previous_stage_param_->::caffe::PreviousStageParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 64512u) {
    ::memset(&test_interval_, 0, reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&test_interval_) + sizeof(power_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&momentum_, 0, reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&momentum_) + sizeof(debug_info_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&solver_type_, 0, reinterpret_cast<char*>(&print_param_) -
      reinterpret_cast<char*>(&solver_type_) + sizeof(print_param_));
    param_update_interval_ = 1u;
    random_seed_ = GOOGLE_LONGLONG(-1);
    solver_mode_ = 1;
    test_initialization_ = true;
    snapshot_after_train_ = true;
  }
  if (_has_bits_[32 / 32] & 63u) {
    delta_ = 1e-08f;
    average_loss_ = 1;
    clip_gradients_ = -1;
    iter_size_ = 1;
    snapshot_format_ = 1;
    momentum2_ = 0.999f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(24016u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_net().data(), this->train_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.train_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string test_net = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net(this->test_net_size() - 1).data(),
            this->test_net(this->test_net_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.test_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 test_iter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_test_iter())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_test_iter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 test_interval = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_test_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float base_lr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_base_lr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lr_policy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.lr_policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float power = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_decay = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_weight_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stepsize = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_stepsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 snapshot = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snapshot_prefix = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snapshot_diff = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_snapshot_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverMode_IsValid(value)) {
            set_solver_mode(static_cast< ::caffe::SolverParameter_SolverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 device_id = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_compute_loss = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_test_compute_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_compute_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 random_seed = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter train_net_param = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetParameter test_net_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string net = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter net_param = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState train_state = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetState test_state = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snapshot_after_train = 28 [default = true];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_snapshot_after_train();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_after_train_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string regularization_type = 29 [default = "L2"];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularization_type().data(), this->regularization_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.regularization_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::caffe::SolverParameter_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta = 31 [default = 1e-08];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_initialization = 32 [default = true];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_test_initialization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 average_loss = 33 [default = 1];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_average_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stepvalue = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272u, input, this->mutable_stepvalue())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(274u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float clip_gradients = 35 [default = -1];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(285u)) {
          set_has_clip_gradients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_gradients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iter_size = 36 [default = 1];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_iter_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SnapshotFormat_IsValid(value)) {
            set_snapshot_format(static_cast< ::caffe::SolverParameter_SnapshotFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rms_decay = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(309u)) {
          set_has_rms_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rms_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum2 = 39 [default = 0.999];
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(317u)) {
          set_has_momentum2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 40 [default = "SGD"];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 print_param = 555 [default = 0];
      case 555: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(4440u)) {
          set_has_print_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PreviousStageParameter previous_stage_param = 3001;
      case 3001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previous_stage_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 param_update_interval = 3002 [default = 1];
      case 3002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24016u)) {
          set_has_param_update_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_net = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_net(), output);
  }

  // repeated string test_net = 2;
  for (int i = 0, n = this->test_net_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(i), output);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0, n = this->test_iter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->test_iter(i), output);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
  }

  // optional float base_lr = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
  }

  // optional int32 display = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
  }

  // optional int32 max_iter = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
  }

  // optional string lr_policy = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lr_policy(), output);
  }

  // optional float gamma = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
  }

  // optional float power = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
  }

  // optional float momentum = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
  }

  // optional float weight_decay = 12;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
  }

  // optional int32 stepsize = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->snapshot_prefix(), output);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->solver_mode(), output);
  }

  // optional int32 device_id = 18 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->test_compute_loss(), output);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->random_seed(), output);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->train_net_param_, output);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0, n = this->test_net_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->test_net_param(i), output);
  }

  // optional bool debug_info = 23 [default = false];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->debug_info(), output);
  }

  // optional string net = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->net(), output);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->net_param_, output);
  }

  // optional .caffe.NetState train_state = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->train_state_, output);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->test_state(i), output);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->snapshot_after_train(), output);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->regularization_type(), output);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->solver_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float delta = 31 [default = 1e-08];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->delta(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool test_initialization = 32 [default = true];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 average_loss = 33 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->average_loss(), output);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0, n = this->stepvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->stepvalue(i), output);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->clip_gradients(), output);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->iter_size(), output);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->snapshot_format(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float rms_decay = 38;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->rms_decay(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float momentum2 = 39 [default = 0.999];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->momentum2(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string type = 40 [default = "SGD"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->type(), output);
  }

  // optional int32 print_param = 555 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(555, this->print_param(), output);
  }

  // optional .caffe.PreviousStageParameter previous_stage_param = 3001;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3001, *this->previous_stage_param_, output);
  }

  // optional uint32 param_update_interval = 3002 [default = 1];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3002, this->param_update_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_net = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0, n = this->test_net_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_net(i), target);
  }

  // repeated int32 test_iter = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->test_iter_, target);

  // optional int32 test_interval = 4 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
  }

  // optional float base_lr = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
  }

  // optional int32 display = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
  }

  // optional int32 max_iter = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
  }

  // optional string lr_policy = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lr_policy(), target);
  }

  // optional float gamma = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
  }

  // optional float power = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
  }

  // optional float momentum = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
  }

  // optional float weight_decay = 12;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
  }

  // optional int32 stepsize = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->solver_mode(), target);
  }

  // optional int32 device_id = 18 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->test_compute_loss(), target);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->random_seed(), target);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->train_net_param_, deterministic, target);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0, n = this->test_net_param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->test_net_param(i), deterministic, target);
  }

  // optional bool debug_info = 23 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->debug_info(), target);
  }

  // optional string net = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->net(), target);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->net_param_, deterministic, target);
  }

  // optional .caffe.NetState train_state = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->train_state_, deterministic, target);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->test_state(i), deterministic, target);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->snapshot_after_train(), target);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->regularization_type(), target);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->solver_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float delta = 31 [default = 1e-08];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->delta(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool test_initialization = 32 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 average_loss = 33 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->average_loss(), target);
  }

  // repeated int32 stepvalue = 34;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(34, this->stepvalue_, target);

  // optional float clip_gradients = 35 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->clip_gradients(), target);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->iter_size(), target);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->snapshot_format(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float rms_decay = 38;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->rms_decay(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float momentum2 = 39 [default = 0.999];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->momentum2(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string type = 40 [default = "SGD"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->type(), target);
  }

  // optional int32 print_param = 555 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(555, this->print_param(), target);
  }

  // optional .caffe.PreviousStageParameter previous_stage_param = 3001;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3001, *this->previous_stage_param_, deterministic, target);
  }

  // optional uint32 param_update_interval = 3002 [default = 1];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3002, this->param_update_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
  return target;
}

size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string test_net = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->test_net_size());
  for (int i = 0, n = this->test_net_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_net(i));
  }

  // repeated int32 test_iter = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->test_iter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->test_iter_size());
    total_size += data_size;
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  {
    unsigned int count = this->test_net_param_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_net_param(i));
    }
  }

  // repeated .caffe.NetState test_state = 27;
  {
    unsigned int count = this->test_state_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_state(i));
    }
  }

  // repeated int32 stepvalue = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stepvalue_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->stepvalue_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string train_net = 1;
    if (has_train_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_net());
    }

    // optional string lr_policy = 8;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional string snapshot_prefix = 15;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional string net = 24;
    if (has_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional string regularization_type = 29 [default = "L2"];
    if (has_regularization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularization_type());
    }

    // optional string type = 40 [default = "SGD"];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.NetParameter train_net_param = 21;
    if (has_train_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_net_param_);
    }

    // optional .caffe.NetParameter net_param = 25;
    if (has_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.NetState train_state = 26;
    if (has_train_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_state_);
    }

    // optional .caffe.PreviousStageParameter previous_stage_param = 3001;
    if (has_previous_stage_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->previous_stage_param_);
    }

    // optional int32 test_interval = 4 [default = 0];
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

    // optional float base_lr = 5;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }

    // optional int32 display = 6;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 max_iter = 7;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 10;
    if (has_power()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float momentum = 11;
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 12;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional int32 stepsize = 13;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

    // optional int32 snapshot = 14 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

    // optional int32 device_id = 18 [default = 0];
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }

    // optional bool test_compute_loss = 19 [default = false];
    if (has_test_compute_loss()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_diff = 16 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }

    // optional bool debug_info = 23 [default = false];
    if (has_debug_info()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    if (has_solver_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

    // optional float rms_decay = 38;
    if (has_rms_decay()) {
      total_size += 2 + 4;
    }

    // optional int32 print_param = 555 [default = 0];
    if (has_print_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_param());
    }

    // optional uint32 param_update_interval = 3002 [default = 1];
    if (has_param_update_interval()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_update_interval());
    }

    // optional int64 random_seed = 20 [default = -1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->random_seed());
    }

    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    if (has_solver_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
    }

    // optional bool test_initialization = 32 [default = true];
    if (has_test_initialization()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    if (has_snapshot_after_train()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional float delta = 31 [default = 1e-08];
    if (has_delta()) {
      total_size += 2 + 4;
    }

    // optional int32 average_loss = 33 [default = 1];
    if (has_average_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

    // optional float clip_gradients = 35 [default = -1];
    if (has_clip_gradients()) {
      total_size += 2 + 4;
    }

    // optional int32 iter_size = 36 [default = 1];
    if (has_iter_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter_size());
    }

    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    if (has_snapshot_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_format());
    }

    // optional float momentum2 = 39 [default = 0.999];
    if (has_momentum2()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverParameter)
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_net_.MergeFrom(from.test_net_);
  test_iter_.MergeFrom(from.test_iter_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  stepvalue_.MergeFrom(from.stepvalue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_train_net();
      train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_lr_policy();
      lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_snapshot_prefix();
      snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_net();
      net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_regularization_type();
      regularization_type_.AssignWithDefault(&SolverParameter::_default_regularization_type_.get(), from.regularization_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_type();
      type_.AssignWithDefault(&SolverParameter::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_train_net_param()->::caffe::NetParameter::MergeFrom(from.train_net_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_previous_stage_param()->::caffe::PreviousStageParameter::MergeFrom(from.previous_stage_param());
    }
    if (cached_has_bits & 0x00000400u) {
      test_interval_ = from.test_interval_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_lr_ = from.base_lr_;
    }
    if (cached_has_bits & 0x00001000u) {
      display_ = from.display_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00004000u) {
      gamma_ = from.gamma_;
    }
    if (cached_has_bits & 0x00008000u) {
      power_ = from.power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      momentum_ = from.momentum_;
    }
    if (cached_has_bits & 0x00020000u) {
      weight_decay_ = from.weight_decay_;
    }
    if (cached_has_bits & 0x00040000u) {
      stepsize_ = from.stepsize_;
    }
    if (cached_has_bits & 0x00080000u) {
      snapshot_ = from.snapshot_;
    }
    if (cached_has_bits & 0x00100000u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      test_compute_loss_ = from.test_compute_loss_;
    }
    if (cached_has_bits & 0x00400000u) {
      snapshot_diff_ = from.snapshot_diff_;
    }
    if (cached_has_bits & 0x00800000u) {
      debug_info_ = from.debug_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      solver_type_ = from.solver_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      rms_decay_ = from.rms_decay_;
    }
    if (cached_has_bits & 0x04000000u) {
      print_param_ = from.print_param_;
    }
    if (cached_has_bits & 0x08000000u) {
      param_update_interval_ = from.param_update_interval_;
    }
    if (cached_has_bits & 0x10000000u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x20000000u) {
      solver_mode_ = from.solver_mode_;
    }
    if (cached_has_bits & 0x40000000u) {
      test_initialization_ = from.test_initialization_;
    }
    if (cached_has_bits & 0x80000000u) {
      snapshot_after_train_ = from.snapshot_after_train_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      average_loss_ = from.average_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      clip_gradients_ = from.clip_gradients_;
    }
    if (cached_has_bits & 0x00000008u) {
      iter_size_ = from.iter_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      snapshot_format_ = from.snapshot_format_;
    }
    if (cached_has_bits & 0x00000020u) {
      momentum2_ = from.momentum2_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->test_net_param())) return false;
  if (has_train_net_param()) {
    if (!this->train_net_param_->IsInitialized()) return false;
  }
  if (has_net_param()) {
    if (!this->net_param_->IsInitialized()) return false;
  }
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
  test_net_.InternalSwap(&other->test_net_);
  test_iter_.InternalSwap(&other->test_iter_);
  test_net_param_.InternalSwap(&other->test_net_param_);
  test_state_.InternalSwap(&other->test_state_);
  stepvalue_.InternalSwap(&other->stepvalue_);
  train_net_.Swap(&other->train_net_);
  lr_policy_.Swap(&other->lr_policy_);
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  net_.Swap(&other->net_);
  regularization_type_.Swap(&other->regularization_type_);
  type_.Swap(&other->type_);
  std::swap(train_net_param_, other->train_net_param_);
  std::swap(net_param_, other->net_param_);
  std::swap(train_state_, other->train_state_);
  std::swap(previous_stage_param_, other->previous_stage_param_);
  std::swap(test_interval_, other->test_interval_);
  std::swap(base_lr_, other->base_lr_);
  std::swap(display_, other->display_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(momentum_, other->momentum_);
  std::swap(weight_decay_, other->weight_decay_);
  std::swap(stepsize_, other->stepsize_);
  std::swap(snapshot_, other->snapshot_);
  std::swap(device_id_, other->device_id_);
  std::swap(test_compute_loss_, other->test_compute_loss_);
  std::swap(snapshot_diff_, other->snapshot_diff_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(solver_type_, other->solver_type_);
  std::swap(rms_decay_, other->rms_decay_);
  std::swap(print_param_, other->print_param_);
  std::swap(param_update_interval_, other->param_update_interval_);
  std::swap(random_seed_, other->random_seed_);
  std::swap(solver_mode_, other->solver_mode_);
  std::swap(test_initialization_, other->test_initialization_);
  std::swap(snapshot_after_train_, other->snapshot_after_train_);
  std::swap(delta_, other->delta_);
  std::swap(average_loss_, other->average_loss_);
  std::swap(clip_gradients_, other->clip_gradients_);
  std::swap(iter_size_, other->iter_size_);
  std::swap(snapshot_format_, other->snapshot_format_);
  std::swap(momentum2_, other->momentum2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional string net = 24;
bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena();
}
void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
#if LANG_CXX11
void SolverParameter::set_net(::std::string&& value) {
  set_has_net();
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.net)
}
#endif
void SolverParameter::set_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000080u;
}
void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena();
}
void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
#if LANG_CXX11
void SolverParameter::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.train_net)
}
#endif
void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
int SolverParameter::test_net_size() const {
  return test_net_.size();
}
void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SolverParameter::set_test_net(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(std::move(value));
}
#endif
void SolverParameter::set_test_net(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#if LANG_CXX11
void SolverParameter::add_test_net(::std::string&& value) {
  test_net_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#endif
void SolverParameter::add_test_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000040u;
}
void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000100u;
}
void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000100u;
}
void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
int SolverParameter::test_state_size() const {
  return test_state_.size();
}
void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000400u;
}
void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000400u;
}
void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00200000u;
}
void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00200000u;
}
void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x40000000u;
}
void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x40000000u;
}
void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00000800u;
}
void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000800u;
}
void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00001000u;
}
void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00001000u;
}
void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
bool SolverParameter::has_average_loss() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void SolverParameter::set_has_average_loss() {
  _has_bits_[1] |= 0x00000002u;
}
void SolverParameter::clear_has_average_loss() {
  _has_bits_[1] &= ~0x00000002u;
}
void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00002000u;
}
void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00002000u;
}
void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
bool SolverParameter::has_iter_size() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void SolverParameter::set_has_iter_size() {
  _has_bits_[1] |= 0x00000008u;
}
void SolverParameter::clear_has_iter_size() {
  _has_bits_[1] &= ~0x00000008u;
}
void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena();
}
void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
#if LANG_CXX11
void SolverParameter::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.lr_policy)
}
#endif
void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00004000u;
}
void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00004000u;
}
void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00008000u;
}
void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00008000u;
}
void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00010000u;
}
void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00010000u;
}
void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00020000u;
}
void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00020000u;
}
void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&SolverParameter::_default_regularization_type_.get());
  clear_has_regularization_type();
}
const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena();
}
void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
#if LANG_CXX11
void SolverParameter::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &SolverParameter::_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.regularization_type)
}
#endif
void SolverParameter::set_regularization_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&SolverParameter::_default_regularization_type_.get());
}
::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(&SolverParameter::_default_regularization_type_.get());
}
void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&SolverParameter::_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00040000u;
}
void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00040000u;
}
void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void SolverParameter::set_has_clip_gradients() {
  _has_bits_[1] |= 0x00000004u;
}
void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[1] &= ~0x00000004u;
}
void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 print_param = 555 [default = 0];
bool SolverParameter::has_print_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SolverParameter::set_has_print_param() {
  _has_bits_[0] |= 0x04000000u;
}
void SolverParameter::clear_has_print_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void SolverParameter::clear_print_param() {
  print_param_ = 0;
  clear_has_print_param();
}
::google::protobuf::int32 SolverParameter::print_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.print_param)
  return print_param_;
}
void SolverParameter::set_print_param(::google::protobuf::int32 value) {
  set_has_print_param();
  print_param_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.print_param)
}

// optional int32 snapshot = 14 [default = 0];
bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x00080000u;
}
void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00080000u;
}
void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
#if LANG_CXX11
void SolverParameter::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
#endif
void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00400000u;
}
void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00400000u;
}
void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000010u;
}
void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000010u;
}
void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x20000000u;
}
void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x20000000u;
}
void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00100000u;
}
void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
bool SolverParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SolverParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x10000000u;
}
void SolverParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x10000000u;
}
void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
bool SolverParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SolverParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SolverParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(&SolverParameter::_default_type_.get());
  clear_has_type();
}
const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena();
}
void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
#if LANG_CXX11
void SolverParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &SolverParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.type)
}
#endif
void SolverParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(&SolverParameter::_default_type_.get());
}
::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&SolverParameter::_default_type_.get());
}
void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&SolverParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000001u;
}
void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000001u;
}
void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000020u;
}
void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000020u;
}
void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38;
bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SolverParameter::set_has_rms_decay() {
  _has_bits_[0] |= 0x02000000u;
}
void SolverParameter::clear_has_rms_decay() {
  _has_bits_[0] &= ~0x02000000u;
}
void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0;
  clear_has_rms_decay();
}
float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
bool SolverParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SolverParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00800000u;
}
void SolverParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00800000u;
}
void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x80000000u;
}
void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x80000000u;
}
void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
bool SolverParameter::has_solver_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SolverParameter::set_has_solver_type() {
  _has_bits_[0] |= 0x01000000u;
}
void SolverParameter::clear_has_solver_type() {
  _has_bits_[0] &= ~0x01000000u;
}
void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional .caffe.PreviousStageParameter previous_stage_param = 3001;
bool SolverParameter::has_previous_stage_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SolverParameter::set_has_previous_stage_param() {
  _has_bits_[0] |= 0x00000200u;
}
void SolverParameter::clear_has_previous_stage_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void SolverParameter::clear_previous_stage_param() {
  if (previous_stage_param_ != NULL) previous_stage_param_->::caffe::PreviousStageParameter::Clear();
  clear_has_previous_stage_param();
}
const ::caffe::PreviousStageParameter& SolverParameter::previous_stage_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.previous_stage_param)
  return previous_stage_param_ != NULL ? *previous_stage_param_
                         : *::caffe::PreviousStageParameter::internal_default_instance();
}
::caffe::PreviousStageParameter* SolverParameter::mutable_previous_stage_param() {
  set_has_previous_stage_param();
  if (previous_stage_param_ == NULL) {
    previous_stage_param_ = new ::caffe::PreviousStageParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.previous_stage_param)
  return previous_stage_param_;
}
::caffe::PreviousStageParameter* SolverParameter::release_previous_stage_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.previous_stage_param)
  clear_has_previous_stage_param();
  ::caffe::PreviousStageParameter* temp = previous_stage_param_;
  previous_stage_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_previous_stage_param(::caffe::PreviousStageParameter* previous_stage_param) {
  delete previous_stage_param_;
  previous_stage_param_ = previous_stage_param;
  if (previous_stage_param) {
    set_has_previous_stage_param();
  } else {
    clear_has_previous_stage_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.previous_stage_param)
}

// optional uint32 param_update_interval = 3002 [default = 1];
bool SolverParameter::has_param_update_interval() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SolverParameter::set_has_param_update_interval() {
  _has_bits_[0] |= 0x08000000u;
}
void SolverParameter::clear_has_param_update_interval() {
  _has_bits_[0] &= ~0x08000000u;
}
void SolverParameter::clear_param_update_interval() {
  param_update_interval_ = 1u;
  clear_has_param_update_interval();
}
::google::protobuf::uint32 SolverParameter::param_update_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.param_update_interval)
  return param_update_interval_;
}
void SolverParameter::set_param_update_interval(::google::protobuf::uint32 value) {
  set_has_param_update_interval();
  param_update_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.param_update_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}
SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_learned_net()) {
    learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
  }
  ::memcpy(&iter_, &from.iter_,
    reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iter_, 0, reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverState& SolverState::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
  SolverState* n = new SolverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
  history_.Clear();
  if (has_learned_net()) {
    GOOGLE_DCHECK(!learned_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*learned_net_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&iter_, 0, reinterpret_cast<char*>(&current_step_) -
      reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.learned_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto history = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_step = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_current_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 iter = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0, n = this->history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(i), output);
  }

  // optional int32 current_step = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 iter = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0, n = this->history_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->history(i), deterministic, target);
  }

  // optional int32 current_step = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.BlobProto history = 3;
  {
    unsigned int count = this->history_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

    // optional int32 current_step = 4 [default = 0];
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_learned_net();
      learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (cached_has_bits & 0x00000002u) {
      iter_ = from.iter_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_step_ = from.current_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
  history_.InternalSwap(&other->history_);
  learned_net_.Swap(&other->learned_net_);
  std::swap(iter_, other->iter_);
  std::swap(current_step_, other->current_step_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverState

// optional int32 iter = 1;
bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
int SolverState::history_size() const {
  return history_.size();
}
void SolverState::clear_history() {
  history_.Clear();
}
const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}
NetState::NetState(const NetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stage_(from.stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&level_) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  phase_ = 1;
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetState& NetState::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetState* NetState::New(::google::protobuf::Arena* arena) const {
  NetState* n = new NetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
  stage_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    level_ = 0;
    phase_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1 [default = TEST];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetState.stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string stage = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .caffe.Phase phase = 1 [default = TEST];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  const NetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {
  return true;
}

void NetState::Swap(NetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
  stage_.InternalSwap(&other->stage_);
  std::swap(level_, other->level_);
  std::swap(phase_, other->phase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
int NetState::stage_size() const {
  return stage_.size();
}
void NetState::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetState::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#if LANG_CXX11
void NetState::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#endif
void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetStateRule::kPhaseFieldNumber;
const int NetStateRule::kMinLevelFieldNumber;
const int NetStateRule::kMaxLevelFieldNumber;
const int NetStateRule::kStageFieldNumber;
const int NetStateRule::kNotStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetStateRule::NetStateRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetStateRule)
}
NetStateRule::NetStateRule(const NetStateRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stage_(from.stage_),
      not_stage_(from.not_stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&phase_) + sizeof(max_level_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetStateRule)
}

void NetStateRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&phase_, 0, reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&phase_) + sizeof(max_level_));
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:caffe.NetStateRule)
  SharedDtor();
}

void NetStateRule::SharedDtor() {
}

void NetStateRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStateRule::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetStateRule& NetStateRule::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetStateRule* NetStateRule::New(::google::protobuf::Arena* arena) const {
  NetStateRule* n = new NetStateRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetStateRule)
  stage_.Clear();
  not_stage_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&phase_, 0, reinterpret_cast<char*>(&max_level_) -
      reinterpret_cast<char*>(&phase_) + sizeof(max_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetStateRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetStateRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_min_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string not_stage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_stage(this->not_stage_size() - 1).data(),
            this->not_stage(this->not_stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.not_stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetStateRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetStateRule)
  return false;
#undef DO_
}

void NetStateRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetStateRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // repeated string stage = 4;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stage(i), output);
  }

  // repeated string not_stage = 5;
  for (int i = 0, n = this->not_stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->not_stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetStateRule)
}

::google::protobuf::uint8* NetStateRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetStateRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->stage(i), target);
  }

  // repeated string not_stage = 5;
  for (int i = 0, n = this->not_stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->not_stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetStateRule)
  return target;
}

size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetStateRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string stage = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_stage_size());
  for (int i = 0, n = this->not_stage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_stage(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.Phase phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStateRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  const NetStateRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetStateRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetStateRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetStateRule)
    MergeFrom(*source);
  }
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  not_stage_.MergeFrom(from.not_stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_level_ = from.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_level_ = from.max_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetStateRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {
  return true;
}

void NetStateRule::Swap(NetStateRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetStateRule::InternalSwap(NetStateRule* other) {
  stage_.InternalSwap(&other->stage_);
  not_stage_.InternalSwap(&other->not_stage_);
  std::swap(phase_, other->phase_);
  std::swap(min_level_, other->min_level_);
  std::swap(max_level_, other->max_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetStateRule::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetStateRule

// optional .caffe.Phase phase = 1;
bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
int NetStateRule::stage_size() const {
  return stage_.size();
}
void NetStateRule::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetStateRule::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#if LANG_CXX11
void NetStateRule::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#endif
void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetStateRule::set_not_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(std::move(value));
}
#endif
void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#if LANG_CXX11
void NetStateRule::add_not_stage(::std::string&& value) {
  not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#endif
void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&share_mode_, &from.share_mode_,
    reinterpret_cast<char*>(&decay_mult_) -
    reinterpret_cast<char*>(&share_mode_) + sizeof(decay_mult_));
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParamSpec& ParamSpec::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ParamSpec.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
            set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lr_mult = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_lr_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decay_mult = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_decay_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_mode(), output);
  }

  // optional float lr_mult = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
  }

  // optional float decay_mult = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (has_share_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      share_mode_ = from.share_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lr_mult_ = from.lr_mult_;
    }
    if (cached_has_bits & 0x00000008u) {
      decay_mult_ = from.decay_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  name_.Swap(&other->name_);
  std::swap(share_mode_, other->share_mode_);
  std::swap(lr_mult_, other->lr_mult_);
  std::swap(decay_mult_, other->decay_mult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional string name = 1;
bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena();
}
void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
#if LANG_CXX11
void ParamSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ParamSpec.name)
}
#endif
void ParamSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kPropagateDownFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kExcludeFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kArgmaxParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kBiasParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kContrastiveLossParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kDummyDataParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kEluParamFieldNumber;
const int LayerParameter::kEmbedParamFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kFlattenParamFieldNumber;
const int LayerParameter::kHdf5DataParamFieldNumber;
const int LayerParameter::kHdf5OutputParamFieldNumber;
const int LayerParameter::kHingeLossParamFieldNumber;
const int LayerParameter::kImageDataParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kLogParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kMemoryDataParamFieldNumber;
const int LayerParameter::kMvnParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPreluParamFieldNumber;
const int LayerParameter::kPythonParamFieldNumber;
const int LayerParameter::kReductionParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kRoiPoolingParamFieldNumber;
const int LayerParameter::kScaleParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kSppParamFieldNumber;
const int LayerParameter::kSliceParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
const int LayerParameter::kThresholdParamFieldNumber;
const int LayerParameter::kTileParamFieldNumber;
const int LayerParameter::kWindowDataParamFieldNumber;
const int LayerParameter::kSmartsegConfigParamFieldNumber;
const int LayerParameter::kSmartsegFrameDataParamFieldNumber;
const int LayerParameter::kSmartsegFrameSequenceDataParamFieldNumber;
const int LayerParameter::kSmartsegBlobVisualizeParamFieldNumber;
const int LayerParameter::kSmartsegPlanViewParamFieldNumber;
const int LayerParameter::kSmartsegPlanViewExtractorParamFieldNumber;
const int LayerParameter::kSmartsegHorizontalViewParamFieldNumber;
const int LayerParameter::kSmartsegHorizontalViewExtractorParamFieldNumber;
const int LayerParameter::kSmartsegSideViewParamFieldNumber;
const int LayerParameter::kSmartsegSideViewExtractorParamFieldNumber;
const int LayerParameter::kSmartsegSegmentorParamFieldNumber;
const int LayerParameter::kSmartsegFrameTargetParamFieldNumber;
const int LayerParameter::kSmartsegOnlineNormParamFieldNumber;
const int LayerParameter::kSmartsegViewPoolingParamFieldNumber;
const int LayerParameter::kSmartsegViewUnpoolingParamFieldNumber;
const int LayerParameter::kSmartsegPointInterpolationParamFieldNumber;
const int LayerParameter::kSmartsegDilationParamFieldNumber;
const int LayerParameter::kFcnImageDataParamFieldNumber;
const int LayerParameter::kResizeParamFieldNumber;
const int LayerParameter::kLabelRelatedDropoutParamFieldNumber;
const int LayerParameter::kInceptionParamFieldNumber;
const int LayerParameter::kElementHingeLossParamFieldNumber;
const int LayerParameter::kPyramidDataParamFieldNumber;
const int LayerParameter::kDetectionOutputParamFieldNumber;
const int LayerParameter::kRoiDataParamFieldNumber;
const int LayerParameter::kRoi2HeatmapParamFieldNumber;
const int LayerParameter::kRoiShowParamFieldNumber;
const int LayerParameter::kRoiRefineParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kDeformableConvolutionParamFieldNumber;
const int LayerParameter::kImageDataArbitraryParamFieldNumber;
const int LayerParameter::kExpandlabelParamFieldNumber;
const int LayerParameter::kManipulateLossParamFieldNumber;
const int LayerParameter::kImageLabelDataParamFieldNumber;
const int LayerParameter::kBinaryDataParamFieldNumber;
const int LayerParameter::kCylinderViewParamFieldNumber;
const int LayerParameter::kBirdViewParamFieldNumber;
const int LayerParameter::kRepeatChannelParamFieldNumber;
const int LayerParameter::kRegionParamFieldNumber;
const int LayerParameter::kReorgParamFieldNumber;
const int LayerParameter::kRegionOutputParamFieldNumber;
const int LayerParameter::kPermuteParamFieldNumber;
const int LayerParameter::kResampleParamFieldNumber;
const int LayerParameter::kReshapeEveryIterFieldNumber;
const int LayerParameter::kDetectionOutputSsdParamFieldNumber;
const int LayerParameter::kImageDistortParamFieldNumber;
const int LayerParameter::kBboxRegParamFieldNumber;
const int LayerParameter::kPsroiPoolingParamFieldNumber;
const int LayerParameter::kDfmbPsroiPoolingParamFieldNumber;
const int LayerParameter::kRegParamFieldNumber;
const int LayerParameter::kProposalImgScaleToCamCoordsParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bottom_(from.bottom_),
      top_(from.top_),
      loss_weight_(from.loss_weight_),
      param_(from.param_),
      blobs_(from.blobs_),
      include_(from.include_),
      exclude_(from.exclude_),
      propagate_down_(from.propagate_down_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_transform_param()) {
    transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  if (from.has_accuracy_param()) {
    accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = NULL;
  }
  if (from.has_argmax_param()) {
    argmax_param_ = new ::caffe::ArgMaxParameter(*from.argmax_param_);
  } else {
    argmax_param_ = NULL;
  }
  if (from.has_concat_param()) {
    concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = NULL;
  }
  if (from.has_contrastive_loss_param()) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter(*from.contrastive_loss_param_);
  } else {
    contrastive_loss_param_ = NULL;
  }
  if (from.has_convolution_param()) {
    convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = NULL;
  }
  if (from.has_data_param()) {
    data_param_ = new ::caffe::DataParameter(*from.data_param_);
  } else {
    data_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_dummy_data_param()) {
    dummy_data_param_ = new ::caffe::DummyDataParameter(*from.dummy_data_param_);
  } else {
    dummy_data_param_ = NULL;
  }
  if (from.has_eltwise_param()) {
    eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = NULL;
  }
  if (from.has_exp_param()) {
    exp_param_ = new ::caffe::ExpParameter(*from.exp_param_);
  } else {
    exp_param_ = NULL;
  }
  if (from.has_hdf5_data_param()) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter(*from.hdf5_data_param_);
  } else {
    hdf5_data_param_ = NULL;
  }
  if (from.has_hdf5_output_param()) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = NULL;
  }
  if (from.has_hinge_loss_param()) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter(*from.hinge_loss_param_);
  } else {
    hinge_loss_param_ = NULL;
  }
  if (from.has_image_data_param()) {
    image_data_param_ = new ::caffe::ImageDataParameter(*from.image_data_param_);
  } else {
    image_data_param_ = NULL;
  }
  if (from.has_infogain_loss_param()) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter(*from.infogain_loss_param_);
  } else {
    infogain_loss_param_ = NULL;
  }
  if (from.has_inner_product_param()) {
    inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = NULL;
  }
  if (from.has_lrn_param()) {
    lrn_param_ = new ::caffe::LRNParameter(*from.lrn_param_);
  } else {
    lrn_param_ = NULL;
  }
  if (from.has_memory_data_param()) {
    memory_data_param_ = new ::caffe::MemoryDataParameter(*from.memory_data_param_);
  } else {
    memory_data_param_ = NULL;
  }
  if (from.has_mvn_param()) {
    mvn_param_ = new ::caffe::MVNParameter(*from.mvn_param_);
  } else {
    mvn_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_power_param()) {
    power_param_ = new ::caffe::PowerParameter(*from.power_param_);
  } else {
    power_param_ = NULL;
  }
  if (from.has_relu_param()) {
    relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_sigmoid_param()) {
    sigmoid_param_ = new ::caffe::SigmoidParameter(*from.sigmoid_param_);
  } else {
    sigmoid_param_ = NULL;
  }
  if (from.has_softmax_param()) {
    softmax_param_ = new ::caffe::SoftmaxParameter(*from.softmax_param_);
  } else {
    softmax_param_ = NULL;
  }
  if (from.has_slice_param()) {
    slice_param_ = new ::caffe::SliceParameter(*from.slice_param_);
  } else {
    slice_param_ = NULL;
  }
  if (from.has_tanh_param()) {
    tanh_param_ = new ::caffe::TanHParameter(*from.tanh_param_);
  } else {
    tanh_param_ = NULL;
  }
  if (from.has_threshold_param()) {
    threshold_param_ = new ::caffe::ThresholdParameter(*from.threshold_param_);
  } else {
    threshold_param_ = NULL;
  }
  if (from.has_window_data_param()) {
    window_data_param_ = new ::caffe::WindowDataParameter(*from.window_data_param_);
  } else {
    window_data_param_ = NULL;
  }
  if (from.has_python_param()) {
    python_param_ = new ::caffe::PythonParameter(*from.python_param_);
  } else {
    python_param_ = NULL;
  }
  if (from.has_prelu_param()) {
    prelu_param_ = new ::caffe::PReLUParameter(*from.prelu_param_);
  } else {
    prelu_param_ = NULL;
  }
  if (from.has_spp_param()) {
    spp_param_ = new ::caffe::SPPParameter(*from.spp_param_);
  } else {
    spp_param_ = NULL;
  }
  if (from.has_reshape_param()) {
    reshape_param_ = new ::caffe::ReshapeParameter(*from.reshape_param_);
  } else {
    reshape_param_ = NULL;
  }
  if (from.has_log_param()) {
    log_param_ = new ::caffe::LogParameter(*from.log_param_);
  } else {
    log_param_ = NULL;
  }
  if (from.has_flatten_param()) {
    flatten_param_ = new ::caffe::FlattenParameter(*from.flatten_param_);
  } else {
    flatten_param_ = NULL;
  }
  if (from.has_reduction_param()) {
    reduction_param_ = new ::caffe::ReductionParameter(*from.reduction_param_);
  } else {
    reduction_param_ = NULL;
  }
  if (from.has_embed_param()) {
    embed_param_ = new ::caffe::EmbedParameter(*from.embed_param_);
  } else {
    embed_param_ = NULL;
  }
  if (from.has_tile_param()) {
    tile_param_ = new ::caffe::TileParameter(*from.tile_param_);
  } else {
    tile_param_ = NULL;
  }
  if (from.has_batch_norm_param()) {
    batch_norm_param_ = new ::caffe::BatchNormParameter(*from.batch_norm_param_);
  } else {
    batch_norm_param_ = NULL;
  }
  if (from.has_elu_param()) {
    elu_param_ = new ::caffe::ELUParameter(*from.elu_param_);
  } else {
    elu_param_ = NULL;
  }
  if (from.has_bias_param()) {
    bias_param_ = new ::caffe::BiasParameter(*from.bias_param_);
  } else {
    bias_param_ = NULL;
  }
  if (from.has_scale_param()) {
    scale_param_ = new ::caffe::ScaleParameter(*from.scale_param_);
  } else {
    scale_param_ = NULL;
  }
  if (from.has_input_param()) {
    input_param_ = new ::caffe::InputParameter(*from.input_param_);
  } else {
    input_param_ = NULL;
  }
  if (from.has_permute_param()) {
    permute_param_ = new ::caffe::PermuteParameter(*from.permute_param_);
  } else {
    permute_param_ = NULL;
  }
  if (from.has_region_param()) {
    region_param_ = new ::caffe::RegionParameter(*from.region_param_);
  } else {
    region_param_ = NULL;
  }
  if (from.has_reorg_param()) {
    reorg_param_ = new ::caffe::ReorgParameter(*from.reorg_param_);
  } else {
    reorg_param_ = NULL;
  }
  if (from.has_region_output_param()) {
    region_output_param_ = new ::caffe::RegionOutputParameter(*from.region_output_param_);
  } else {
    region_output_param_ = NULL;
  }
  if (from.has_resample_param()) {
    resample_param_ = new ::caffe::ResampleParameter(*from.resample_param_);
  } else {
    resample_param_ = NULL;
  }
  if (from.has_smartseg_config_param()) {
    smartseg_config_param_ = new ::smartseg::ConfigParameter(*from.smartseg_config_param_);
  } else {
    smartseg_config_param_ = NULL;
  }
  if (from.has_smartseg_frame_data_param()) {
    smartseg_frame_data_param_ = new ::smartseg::FrameDataParameter(*from.smartseg_frame_data_param_);
  } else {
    smartseg_frame_data_param_ = NULL;
  }
  if (from.has_smartseg_blob_visualize_param()) {
    smartseg_blob_visualize_param_ = new ::smartseg::BlobVisualizeParameter(*from.smartseg_blob_visualize_param_);
  } else {
    smartseg_blob_visualize_param_ = NULL;
  }
  if (from.has_smartseg_plan_view_param()) {
    smartseg_plan_view_param_ = new ::smartseg::PlanViewParameter(*from.smartseg_plan_view_param_);
  } else {
    smartseg_plan_view_param_ = NULL;
  }
  if (from.has_smartseg_horizontal_view_param()) {
    smartseg_horizontal_view_param_ = new ::smartseg::HorizontalViewParameter(*from.smartseg_horizontal_view_param_);
  } else {
    smartseg_horizontal_view_param_ = NULL;
  }
  if (from.has_smartseg_plan_view_extractor_param()) {
    smartseg_plan_view_extractor_param_ = new ::smartseg::PlanViewExtractorParameter(*from.smartseg_plan_view_extractor_param_);
  } else {
    smartseg_plan_view_extractor_param_ = NULL;
  }
  if (from.has_smartseg_horizontal_view_extractor_param()) {
    smartseg_horizontal_view_extractor_param_ = new ::smartseg::HorizontalViewExtractorParameter(*from.smartseg_horizontal_view_extractor_param_);
  } else {
    smartseg_horizontal_view_extractor_param_ = NULL;
  }
  if (from.has_smartseg_segmentor_param()) {
    smartseg_segmentor_param_ = new ::smartseg::SegmentorParameter(*from.smartseg_segmentor_param_);
  } else {
    smartseg_segmentor_param_ = NULL;
  }
  if (from.has_smartseg_frame_target_param()) {
    smartseg_frame_target_param_ = new ::smartseg::FrameTargetParameter(*from.smartseg_frame_target_param_);
  } else {
    smartseg_frame_target_param_ = NULL;
  }
  if (from.has_smartseg_frame_sequence_data_param()) {
    smartseg_frame_sequence_data_param_ = new ::smartseg::FrameSequenceDataParameter(*from.smartseg_frame_sequence_data_param_);
  } else {
    smartseg_frame_sequence_data_param_ = NULL;
  }
  if (from.has_smartseg_online_norm_param()) {
    smartseg_online_norm_param_ = new ::smartseg::OnlineNormParameter(*from.smartseg_online_norm_param_);
  } else {
    smartseg_online_norm_param_ = NULL;
  }
  if (from.has_smartseg_view_pooling_param()) {
    smartseg_view_pooling_param_ = new ::smartseg::ViewPoolingParameter(*from.smartseg_view_pooling_param_);
  } else {
    smartseg_view_pooling_param_ = NULL;
  }
  if (from.has_smartseg_view_unpooling_param()) {
    smartseg_view_unpooling_param_ = new ::smartseg::ViewUnpoolingParameter(*from.smartseg_view_unpooling_param_);
  } else {
    smartseg_view_unpooling_param_ = NULL;
  }
  if (from.has_smartseg_point_interpolation_param()) {
    smartseg_point_interpolation_param_ = new ::smartseg::PointInterpolationParameter(*from.smartseg_point_interpolation_param_);
  } else {
    smartseg_point_interpolation_param_ = NULL;
  }
  if (from.has_smartseg_dilation_param()) {
    smartseg_dilation_param_ = new ::smartseg::DilationParameter(*from.smartseg_dilation_param_);
  } else {
    smartseg_dilation_param_ = NULL;
  }
  if (from.has_smartseg_side_view_param()) {
    smartseg_side_view_param_ = new ::smartseg::SideViewParameter(*from.smartseg_side_view_param_);
  } else {
    smartseg_side_view_param_ = NULL;
  }
  if (from.has_smartseg_side_view_extractor_param()) {
    smartseg_side_view_extractor_param_ = new ::smartseg::SideViewExtractorParameter(*from.smartseg_side_view_extractor_param_);
  } else {
    smartseg_side_view_extractor_param_ = NULL;
  }
  if (from.has_fcn_image_data_param()) {
    fcn_image_data_param_ = new ::caffe_fcn_data_layer::FCNImageDataParameter(*from.fcn_image_data_param_);
  } else {
    fcn_image_data_param_ = NULL;
  }
  if (from.has_resize_param()) {
    resize_param_ = new ::caffe::ResizeParameter(*from.resize_param_);
  } else {
    resize_param_ = NULL;
  }
  if (from.has_label_related_dropout_param()) {
    label_related_dropout_param_ = new ::caffe::LabelRelatedDropoutParam(*from.label_related_dropout_param_);
  } else {
    label_related_dropout_param_ = NULL;
  }
  if (from.has_inception_param()) {
    inception_param_ = new ::caffe::InceptionParameter(*from.inception_param_);
  } else {
    inception_param_ = NULL;
  }
  if (from.has_element_hinge_loss_param()) {
    element_hinge_loss_param_ = new ::caffe::ElementHingeLossParameter(*from.element_hinge_loss_param_);
  } else {
    element_hinge_loss_param_ = NULL;
  }
  if (from.has_pyramid_data_param()) {
    pyramid_data_param_ = new ::caffe::PyramidDataParameter(*from.pyramid_data_param_);
  } else {
    pyramid_data_param_ = NULL;
  }
  if (from.has_detection_output_param()) {
    detection_output_param_ = new ::caffe::DetectionOutputParameter(*from.detection_output_param_);
  } else {
    detection_output_param_ = NULL;
  }
  if (from.has_roi_data_param()) {
    roi_data_param_ = new ::caffe::ROIDataParam(*from.roi_data_param_);
  } else {
    roi_data_param_ = NULL;
  }
  if (from.has_roi_2_heatmap_param()) {
    roi_2_heatmap_param_ = new ::caffe::ROI2HeatMapParam(*from.roi_2_heatmap_param_);
  } else {
    roi_2_heatmap_param_ = NULL;
  }
  if (from.has_roi_show_param()) {
    roi_show_param_ = new ::caffe::ROIShowParam(*from.roi_show_param_);
  } else {
    roi_show_param_ = NULL;
  }
  if (from.has_roi_refine_param()) {
    roi_refine_param_ = new ::caffe::ROIRefineParam(*from.roi_refine_param_);
  } else {
    roi_refine_param_ = NULL;
  }
  if (from.has_crop_param()) {
    crop_param_ = new ::caffe::CropParameter(*from.crop_param_);
  } else {
    crop_param_ = NULL;
  }
  if (from.has_detection_output_ssd_param()) {
    detection_output_ssd_param_ = new ::caffe::DetectionOutputSSDParameter(*from.detection_output_ssd_param_);
  } else {
    detection_output_ssd_param_ = NULL;
  }
  if (from.has_image_distort_param()) {
    image_distort_param_ = new ::caffe::ImageDistortParameter(*from.image_distort_param_);
  } else {
    image_distort_param_ = NULL;
  }
  if (from.has_bbox_reg_param()) {
    bbox_reg_param_ = new ::caffe::BBoxRegParameter(*from.bbox_reg_param_);
  } else {
    bbox_reg_param_ = NULL;
  }
  if (from.has_psroi_pooling_param()) {
    psroi_pooling_param_ = new ::caffe::PSROIPoolingParameter(*from.psroi_pooling_param_);
  } else {
    psroi_pooling_param_ = NULL;
  }
  if (from.has_dfmb_psroi_pooling_param()) {
    dfmb_psroi_pooling_param_ = new ::caffe::DFMBPSROIPoolingParameter(*from.dfmb_psroi_pooling_param_);
  } else {
    dfmb_psroi_pooling_param_ = NULL;
  }
  if (from.has_reg_param()) {
    reg_param_ = new ::caffe::RegParameter(*from.reg_param_);
  } else {
    reg_param_ = NULL;
  }
  if (from.has_proposal_img_scale_to_cam_coords_param()) {
    proposal_img_scale_to_cam_coords_param_ = new ::caffe::ProposalImgScaleToCamCoordsParameter(*from.proposal_img_scale_to_cam_coords_param_);
  } else {
    proposal_img_scale_to_cam_coords_param_ = NULL;
  }
  if (from.has_deformable_convolution_param()) {
    deformable_convolution_param_ = new ::caffe::DeformableConvolutionParameter(*from.deformable_convolution_param_);
  } else {
    deformable_convolution_param_ = NULL;
  }
  if (from.has_image_data_arbitrary_param()) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter(*from.image_data_arbitrary_param_);
  } else {
    image_data_arbitrary_param_ = NULL;
  }
  if (from.has_expandlabel_param()) {
    expandlabel_param_ = new ::caffe::ExpandlabelParameter(*from.expandlabel_param_);
  } else {
    expandlabel_param_ = NULL;
  }
  if (from.has_manipulate_loss_param()) {
    manipulate_loss_param_ = new ::caffe::ManipulateLossParameter(*from.manipulate_loss_param_);
  } else {
    manipulate_loss_param_ = NULL;
  }
  if (from.has_image_label_data_param()) {
    image_label_data_param_ = new ::caffe::ImageLabelDataParameter(*from.image_label_data_param_);
  } else {
    image_label_data_param_ = NULL;
  }
  if (from.has_binary_data_param()) {
    binary_data_param_ = new ::caffe::BinaryDataParameter(*from.binary_data_param_);
  } else {
    binary_data_param_ = NULL;
  }
  if (from.has_cylinder_view_param()) {
    cylinder_view_param_ = new ::caffe::CylinderViewParameter(*from.cylinder_view_param_);
  } else {
    cylinder_view_param_ = NULL;
  }
  if (from.has_bird_view_param()) {
    bird_view_param_ = new ::caffe::BirdviewParameter(*from.bird_view_param_);
  } else {
    bird_view_param_ = NULL;
  }
  if (from.has_repeat_channel_param()) {
    repeat_channel_param_ = new ::caffe::RepeatChannelParameter(*from.repeat_channel_param_);
  } else {
    repeat_channel_param_ = NULL;
  }
  if (from.has_roi_pooling_param()) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter(*from.roi_pooling_param_);
  } else {
    roi_pooling_param_ = NULL;
  }
  ::memcpy(&phase_, &from.phase_,
    reinterpret_cast<char*>(&reshape_every_iter_) -
    reinterpret_cast<char*>(&phase_) + sizeof(reshape_every_iter_));
  // @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transform_param_, 0, reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&transform_param_) + sizeof(phase_));
  reshape_every_iter_ = true;
  _cached_size_ = 0;
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete transform_param_;
  }
  if (this != internal_default_instance()) {
    delete loss_param_;
  }
  if (this != internal_default_instance()) {
    delete accuracy_param_;
  }
  if (this != internal_default_instance()) {
    delete argmax_param_;
  }
  if (this != internal_default_instance()) {
    delete concat_param_;
  }
  if (this != internal_default_instance()) {
    delete contrastive_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete convolution_param_;
  }
  if (this != internal_default_instance()) {
    delete data_param_;
  }
  if (this != internal_default_instance()) {
    delete dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete dummy_data_param_;
  }
  if (this != internal_default_instance()) {
    delete eltwise_param_;
  }
  if (this != internal_default_instance()) {
    delete exp_param_;
  }
  if (this != internal_default_instance()) {
    delete hdf5_data_param_;
  }
  if (this != internal_default_instance()) {
    delete hdf5_output_param_;
  }
  if (this != internal_default_instance()) {
    delete hinge_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete image_data_param_;
  }
  if (this != internal_default_instance()) {
    delete infogain_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete inner_product_param_;
  }
  if (this != internal_default_instance()) {
    delete lrn_param_;
  }
  if (this != internal_default_instance()) {
    delete memory_data_param_;
  }
  if (this != internal_default_instance()) {
    delete mvn_param_;
  }
  if (this != internal_default_instance()) {
    delete pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete power_param_;
  }
  if (this != internal_default_instance()) {
    delete relu_param_;
  }
  if (this != internal_default_instance()) {
    delete sigmoid_param_;
  }
  if (this != internal_default_instance()) {
    delete softmax_param_;
  }
  if (this != internal_default_instance()) {
    delete slice_param_;
  }
  if (this != internal_default_instance()) {
    delete tanh_param_;
  }
  if (this != internal_default_instance()) {
    delete threshold_param_;
  }
  if (this != internal_default_instance()) {
    delete window_data_param_;
  }
  if (this != internal_default_instance()) {
    delete python_param_;
  }
  if (this != internal_default_instance()) {
    delete prelu_param_;
  }
  if (this != internal_default_instance()) {
    delete spp_param_;
  }
  if (this != internal_default_instance()) {
    delete reshape_param_;
  }
  if (this != internal_default_instance()) {
    delete log_param_;
  }
  if (this != internal_default_instance()) {
    delete flatten_param_;
  }
  if (this != internal_default_instance()) {
    delete reduction_param_;
  }
  if (this != internal_default_instance()) {
    delete embed_param_;
  }
  if (this != internal_default_instance()) {
    delete tile_param_;
  }
  if (this != internal_default_instance()) {
    delete batch_norm_param_;
  }
  if (this != internal_default_instance()) {
    delete elu_param_;
  }
  if (this != internal_default_instance()) {
    delete bias_param_;
  }
  if (this != internal_default_instance()) {
    delete scale_param_;
  }
  if (this != internal_default_instance()) {
    delete input_param_;
  }
  if (this != internal_default_instance()) {
    delete permute_param_;
  }
  if (this != internal_default_instance()) {
    delete region_param_;
  }
  if (this != internal_default_instance()) {
    delete reorg_param_;
  }
  if (this != internal_default_instance()) {
    delete region_output_param_;
  }
  if (this != internal_default_instance()) {
    delete resample_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_config_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_frame_data_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_blob_visualize_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_plan_view_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_horizontal_view_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_plan_view_extractor_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_horizontal_view_extractor_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_segmentor_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_frame_target_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_frame_sequence_data_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_online_norm_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_view_pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_view_unpooling_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_point_interpolation_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_dilation_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_side_view_param_;
  }
  if (this != internal_default_instance()) {
    delete smartseg_side_view_extractor_param_;
  }
  if (this != internal_default_instance()) {
    delete fcn_image_data_param_;
  }
  if (this != internal_default_instance()) {
    delete resize_param_;
  }
  if (this != internal_default_instance()) {
    delete label_related_dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete inception_param_;
  }
  if (this != internal_default_instance()) {
    delete element_hinge_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete pyramid_data_param_;
  }
  if (this != internal_default_instance()) {
    delete detection_output_param_;
  }
  if (this != internal_default_instance()) {
    delete roi_data_param_;
  }
  if (this != internal_default_instance()) {
    delete roi_2_heatmap_param_;
  }
  if (this != internal_default_instance()) {
    delete roi_show_param_;
  }
  if (this != internal_default_instance()) {
    delete roi_refine_param_;
  }
  if (this != internal_default_instance()) {
    delete crop_param_;
  }
  if (this != internal_default_instance()) {
    delete detection_output_ssd_param_;
  }
  if (this != internal_default_instance()) {
    delete image_distort_param_;
  }
  if (this != internal_default_instance()) {
    delete bbox_reg_param_;
  }
  if (this != internal_default_instance()) {
    delete psroi_pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete dfmb_psroi_pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete reg_param_;
  }
  if (this != internal_default_instance()) {
    delete proposal_img_scale_to_cam_coords_param_;
  }
  if (this != internal_default_instance()) {
    delete deformable_convolution_param_;
  }
  if (this != internal_default_instance()) {
    delete image_data_arbitrary_param_;
  }
  if (this != internal_default_instance()) {
    delete expandlabel_param_;
  }
  if (this != internal_default_instance()) {
    delete manipulate_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete image_label_data_param_;
  }
  if (this != internal_default_instance()) {
    delete binary_data_param_;
  }
  if (this != internal_default_instance()) {
    delete cylinder_view_param_;
  }
  if (this != internal_default_instance()) {
    delete bird_view_param_;
  }
  if (this != internal_default_instance()) {
    delete repeat_channel_param_;
  }
  if (this != internal_default_instance()) {
    delete roi_pooling_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LayerParameter& LayerParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerParameter)
  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  include_.Clear();
  exclude_.Clear();
  propagate_down_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_transform_param()) {
      GOOGLE_DCHECK(transform_param_ != NULL);
      transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      GOOGLE_DCHECK(loss_param_ != NULL);
      loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_accuracy_param()) {
      GOOGLE_DCHECK(accuracy_param_ != NULL);
      accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      GOOGLE_DCHECK(argmax_param_ != NULL);
      argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_concat_param()) {
      GOOGLE_DCHECK(concat_param_ != NULL);
      concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      GOOGLE_DCHECK(contrastive_loss_param_ != NULL);
      contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_convolution_param()) {
      GOOGLE_DCHECK(convolution_param_ != NULL);
      convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_data_param()) {
      GOOGLE_DCHECK(data_param_ != NULL);
      data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      GOOGLE_DCHECK(dropout_param_ != NULL);
      dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      GOOGLE_DCHECK(dummy_data_param_ != NULL);
      dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (has_eltwise_param()) {
      GOOGLE_DCHECK(eltwise_param_ != NULL);
      eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_exp_param()) {
      GOOGLE_DCHECK(exp_param_ != NULL);
      exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      GOOGLE_DCHECK(hdf5_data_param_ != NULL);
      hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      GOOGLE_DCHECK(hdf5_output_param_ != NULL);
      hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_hinge_loss_param()) {
      GOOGLE_DCHECK(hinge_loss_param_ != NULL);
      hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (has_image_data_param()) {
      GOOGLE_DCHECK(image_data_param_ != NULL);
      image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      GOOGLE_DCHECK(infogain_loss_param_ != NULL);
      infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      GOOGLE_DCHECK(inner_product_param_ != NULL);
      inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      GOOGLE_DCHECK(lrn_param_ != NULL);
      lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      GOOGLE_DCHECK(memory_data_param_ != NULL);
      memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      GOOGLE_DCHECK(mvn_param_ != NULL);
      mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (has_pooling_param()) {
      GOOGLE_DCHECK(pooling_param_ != NULL);
      pooling_param_->::caffe::PoolingParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_power_param()) {
      GOOGLE_DCHECK(power_param_ != NULL);
      power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_relu_param()) {
      GOOGLE_DCHECK(relu_param_ != NULL);
      relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (has_sigmoid_param()) {
      GOOGLE_DCHECK(sigmoid_param_ != NULL);
      sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      GOOGLE_DCHECK(softmax_param_ != NULL);
      softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_slice_param()) {
      GOOGLE_DCHECK(slice_param_ != NULL);
      slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      GOOGLE_DCHECK(tanh_param_ != NULL);
      tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      GOOGLE_DCHECK(threshold_param_ != NULL);
      threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (has_window_data_param()) {
      GOOGLE_DCHECK(window_data_param_ != NULL);
      window_data_param_->::caffe::WindowDataParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_python_param()) {
      GOOGLE_DCHECK(python_param_ != NULL);
      python_param_->::caffe::PythonParameter::Clear();
    }
    if (has_prelu_param()) {
      GOOGLE_DCHECK(prelu_param_ != NULL);
      prelu_param_->::caffe::PReLUParameter::Clear();
    }
    if (has_spp_param()) {
      GOOGLE_DCHECK(spp_param_ != NULL);
      spp_param_->::caffe::SPPParameter::Clear();
    }
    if (has_reshape_param()) {
      GOOGLE_DCHECK(reshape_param_ != NULL);
      reshape_param_->::caffe::ReshapeParameter::Clear();
    }
    if (has_log_param()) {
      GOOGLE_DCHECK(log_param_ != NULL);
      log_param_->::caffe::LogParameter::Clear();
    }
    if (has_flatten_param()) {
      GOOGLE_DCHECK(flatten_param_ != NULL);
      flatten_param_->::caffe::FlattenParameter::Clear();
    }
    if (has_reduction_param()) {
      GOOGLE_DCHECK(reduction_param_ != NULL);
      reduction_param_->::caffe::ReductionParameter::Clear();
    }
    if (has_embed_param()) {
      GOOGLE_DCHECK(embed_param_ != NULL);
      embed_param_->::caffe::EmbedParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280u) {
    if (has_tile_param()) {
      GOOGLE_DCHECK(tile_param_ != NULL);
      tile_param_->::caffe::TileParameter::Clear();
    }
    if (has_batch_norm_param()) {
      GOOGLE_DCHECK(batch_norm_param_ != NULL);
      batch_norm_param_->::caffe::BatchNormParameter::Clear();
    }
    if (has_elu_param()) {
      GOOGLE_DCHECK(elu_param_ != NULL);
      elu_param_->::caffe::ELUParameter::Clear();
    }
    if (has_bias_param()) {
      GOOGLE_DCHECK(bias_param_ != NULL);
      bias_param_->::caffe::BiasParameter::Clear();
    }
    if (has_scale_param()) {
      GOOGLE_DCHECK(scale_param_ != NULL);
      scale_param_->::caffe::ScaleParameter::Clear();
    }
    if (has_input_param()) {
      GOOGLE_DCHECK(input_param_ != NULL);
      input_param_->::caffe::InputParameter::Clear();
    }
    if (has_permute_param()) {
      GOOGLE_DCHECK(permute_param_ != NULL);
      permute_param_->::caffe::PermuteParameter::Clear();
    }
    if (has_region_param()) {
      GOOGLE_DCHECK(region_param_ != NULL);
      region_param_->::caffe::RegionParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    if (has_reorg_param()) {
      GOOGLE_DCHECK(reorg_param_ != NULL);
      reorg_param_->::caffe::ReorgParameter::Clear();
    }
    if (has_region_output_param()) {
      GOOGLE_DCHECK(region_output_param_ != NULL);
      region_output_param_->::caffe::RegionOutputParameter::Clear();
    }
    if (has_resample_param()) {
      GOOGLE_DCHECK(resample_param_ != NULL);
      resample_param_->::caffe::ResampleParameter::Clear();
    }
    if (has_smartseg_config_param()) {
      GOOGLE_DCHECK(smartseg_config_param_ != NULL);
      smartseg_config_param_->::smartseg::ConfigParameter::Clear();
    }
    if (has_smartseg_frame_data_param()) {
      GOOGLE_DCHECK(smartseg_frame_data_param_ != NULL);
      smartseg_frame_data_param_->::smartseg::FrameDataParameter::Clear();
    }
    if (has_smartseg_blob_visualize_param()) {
      GOOGLE_DCHECK(smartseg_blob_visualize_param_ != NULL);
      smartseg_blob_visualize_param_->::smartseg::BlobVisualizeParameter::Clear();
    }
    if (has_smartseg_plan_view_param()) {
      GOOGLE_DCHECK(smartseg_plan_view_param_ != NULL);
      smartseg_plan_view_param_->::smartseg::PlanViewParameter::Clear();
    }
    if (has_smartseg_horizontal_view_param()) {
      GOOGLE_DCHECK(smartseg_horizontal_view_param_ != NULL);
      smartseg_horizontal_view_param_->::smartseg::HorizontalViewParameter::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    if (has_smartseg_plan_view_extractor_param()) {
      GOOGLE_DCHECK(smartseg_plan_view_extractor_param_ != NULL);
      smartseg_plan_view_extractor_param_->::smartseg::PlanViewExtractorParameter::Clear();
    }
    if (has_smartseg_horizontal_view_extractor_param()) {
      GOOGLE_DCHECK(smartseg_horizontal_view_extractor_param_ != NULL);
      smartseg_horizontal_view_extractor_param_->::smartseg::HorizontalViewExtractorParameter::Clear();
    }
    if (has_smartseg_segmentor_param()) {
      GOOGLE_DCHECK(smartseg_segmentor_param_ != NULL);
      smartseg_segmentor_param_->::smartseg::SegmentorParameter::Clear();
    }
    if (has_smartseg_frame_target_param()) {
      GOOGLE_DCHECK(smartseg_frame_target_param_ != NULL);
      smartseg_frame_target_param_->::smartseg::FrameTargetParameter::Clear();
    }
    if (has_smartseg_frame_sequence_data_param()) {
      GOOGLE_DCHECK(smartseg_frame_sequence_data_param_ != NULL);
      smartseg_frame_sequence_data_param_->::smartseg::FrameSequenceDataParameter::Clear();
    }
    if (has_smartseg_online_norm_param()) {
      GOOGLE_DCHECK(smartseg_online_norm_param_ != NULL);
      smartseg_online_norm_param_->::smartseg::OnlineNormParameter::Clear();
    }
    if (has_smartseg_view_pooling_param()) {
      GOOGLE_DCHECK(smartseg_view_pooling_param_ != NULL);
      smartseg_view_pooling_param_->::smartseg::ViewPoolingParameter::Clear();
    }
    if (has_smartseg_view_unpooling_param()) {
      GOOGLE_DCHECK(smartseg_view_unpooling_param_ != NULL);
      smartseg_view_unpooling_param_->::smartseg::ViewUnpoolingParameter::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255u) {
    if (has_smartseg_point_interpolation_param()) {
      GOOGLE_DCHECK(smartseg_point_interpolation_param_ != NULL);
      smartseg_point_interpolation_param_->::smartseg::PointInterpolationParameter::Clear();
    }
    if (has_smartseg_dilation_param()) {
      GOOGLE_DCHECK(smartseg_dilation_param_ != NULL);
      smartseg_dilation_param_->::smartseg::DilationParameter::Clear();
    }
    if (has_smartseg_side_view_param()) {
      GOOGLE_DCHECK(smartseg_side_view_param_ != NULL);
      smartseg_side_view_param_->::smartseg::SideViewParameter::Clear();
    }
    if (has_smartseg_side_view_extractor_param()) {
      GOOGLE_DCHECK(smartseg_side_view_extractor_param_ != NULL);
      smartseg_side_view_extractor_param_->::smartseg::SideViewExtractorParameter::Clear();
    }
    if (has_fcn_image_data_param()) {
      GOOGLE_DCHECK(fcn_image_data_param_ != NULL);
      fcn_image_data_param_->::caffe_fcn_data_layer::FCNImageDataParameter::Clear();
    }
    if (has_resize_param()) {
      GOOGLE_DCHECK(resize_param_ != NULL);
      resize_param_->::caffe::ResizeParameter::Clear();
    }
    if (has_label_related_dropout_param()) {
      GOOGLE_DCHECK(label_related_dropout_param_ != NULL);
      label_related_dropout_param_->::caffe::LabelRelatedDropoutParam::Clear();
    }
    if (has_inception_param()) {
      GOOGLE_DCHECK(inception_param_ != NULL);
      inception_param_->::caffe::InceptionParameter::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280u) {
    if (has_element_hinge_loss_param()) {
      GOOGLE_DCHECK(element_hinge_loss_param_ != NULL);
      element_hinge_loss_param_->::caffe::ElementHingeLossParameter::Clear();
    }
    if (has_pyramid_data_param()) {
      GOOGLE_DCHECK(pyramid_data_param_ != NULL);
      pyramid_data_param_->::caffe::PyramidDataParameter::Clear();
    }
    if (has_detection_output_param()) {
      GOOGLE_DCHECK(detection_output_param_ != NULL);
      detection_output_param_->::caffe::DetectionOutputParameter::Clear();
    }
    if (has_roi_data_param()) {
      GOOGLE_DCHECK(roi_data_param_ != NULL);
      roi_data_param_->::caffe::ROIDataParam::Clear();
    }
    if (has_roi_2_heatmap_param()) {
      GOOGLE_DCHECK(roi_2_heatmap_param_ != NULL);
      roi_2_heatmap_param_->::caffe::ROI2HeatMapParam::Clear();
    }
    if (has_roi_show_param()) {
      GOOGLE_DCHECK(roi_show_param_ != NULL);
      roi_show_param_->::caffe::ROIShowParam::Clear();
    }
    if (has_roi_refine_param()) {
      GOOGLE_DCHECK(roi_refine_param_ != NULL);
      roi_refine_param_->::caffe::ROIRefineParam::Clear();
    }
    if (has_crop_param()) {
      GOOGLE_DCHECK(crop_param_ != NULL);
      crop_param_->::caffe::CropParameter::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680u) {
    if (has_detection_output_ssd_param()) {
      GOOGLE_DCHECK(detection_output_ssd_param_ != NULL);
      detection_output_ssd_param_->::caffe::DetectionOutputSSDParameter::Clear();
    }
    if (has_image_distort_param()) {
      GOOGLE_DCHECK(image_distort_param_ != NULL);
      image_distort_param_->::caffe::ImageDistortParameter::Clear();
    }
    if (has_bbox_reg_param()) {
      GOOGLE_DCHECK(bbox_reg_param_ != NULL);
      bbox_reg_param_->::caffe::BBoxRegParameter::Clear();
    }
    if (has_psroi_pooling_param()) {
      GOOGLE_DCHECK(psroi_pooling_param_ != NULL);
      psroi_pooling_param_->::caffe::PSROIPoolingParameter::Clear();
    }
    if (has_dfmb_psroi_pooling_param()) {
      GOOGLE_DCHECK(dfmb_psroi_pooling_param_ != NULL);
      dfmb_psroi_pooling_param_->::caffe::DFMBPSROIPoolingParameter::Clear();
    }
    if (has_reg_param()) {
      GOOGLE_DCHECK(reg_param_ != NULL);
      reg_param_->::caffe::RegParameter::Clear();
    }
    if (has_proposal_img_scale_to_cam_coords_param()) {
      GOOGLE_DCHECK(proposal_img_scale_to_cam_coords_param_ != NULL);
      proposal_img_scale_to_cam_coords_param_->::caffe::ProposalImgScaleToCamCoordsParameter::Clear();
    }
    if (has_deformable_convolution_param()) {
      GOOGLE_DCHECK(deformable_convolution_param_ != NULL);
      deformable_convolution_param_->::caffe::DeformableConvolutionParameter::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 4278190080u) {
    if (has_image_data_arbitrary_param()) {
      GOOGLE_DCHECK(image_data_arbitrary_param_ != NULL);
      image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
    }
    if (has_expandlabel_param()) {
      GOOGLE_DCHECK(expandlabel_param_ != NULL);
      expandlabel_param_->::caffe::ExpandlabelParameter::Clear();
    }
    if (has_manipulate_loss_param()) {
      GOOGLE_DCHECK(manipulate_loss_param_ != NULL);
      manipulate_loss_param_->::caffe::ManipulateLossParameter::Clear();
    }
    if (has_image_label_data_param()) {
      GOOGLE_DCHECK(image_label_data_param_ != NULL);
      image_label_data_param_->::caffe::ImageLabelDataParameter::Clear();
    }
    if (has_binary_data_param()) {
      GOOGLE_DCHECK(binary_data_param_ != NULL);
      binary_data_param_->::caffe::BinaryDataParameter::Clear();
    }
    if (has_cylinder_view_param()) {
      GOOGLE_DCHECK(cylinder_view_param_ != NULL);
      cylinder_view_param_->::caffe::CylinderViewParameter::Clear();
    }
    if (has_bird_view_param()) {
      GOOGLE_DCHECK(bird_view_param_ != NULL);
      bird_view_param_->::caffe::BirdviewParameter::Clear();
    }
    if (has_repeat_channel_param()) {
      GOOGLE_DCHECK(repeat_channel_param_ != NULL);
      repeat_channel_param_->::caffe::RepeatChannelParameter::Clear();
    }
  }
  if (has_roi_pooling_param()) {
    GOOGLE_DCHECK(roi_pooling_param_ != NULL);
    roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
  }
  if (_has_bits_[96 / 32] & 6u) {
    phase_ = 0;
    reshape_every_iter_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(66133690u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float loss_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_loss_weight())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.ParamSpec param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto blobs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule include = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule exclude = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.Phase phase = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool propagate_down = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88u, input, this->mutable_propagate_down())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_propagate_down())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter loss_param = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(842u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(850u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter data_param = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(858u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(866u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(874u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(882u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ExpParameter exp_param = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(890u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(898u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(906u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(914u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(922u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(930u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(938u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(946u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(954u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(962u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(970u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PowerParameter power_param = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(978u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(986u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 124;
      case 124: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(994u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 125;
      case 125: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SliceParameter slice_param = 126;
      case 126: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 127;
      case 127: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 128;
      case 128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 129;
      case 129: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1034u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PythonParameter python_param = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PReLUParameter prelu_param = 131;
      case 131: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1050u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPPParameter spp_param = 132;
      case 132: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1058u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReshapeParameter reshape_param = 133;
      case 133: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1066u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LogParameter log_param = 134;
      case 134: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1074u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FlattenParameter flatten_param = 135;
      case 135: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1082u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flatten_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReductionParameter reduction_param = 136;
      case 136: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1090u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduction_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EmbedParameter embed_param = 137;
      case 137: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1098u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embed_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TileParameter tile_param = 138;
      case 138: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 139;
      case 139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ELUParameter elu_param = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BiasParameter bias_param = 141;
      case 141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ScaleParameter scale_param = 142;
      case 142: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InputParameter input_param = 143;
      case 143: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PermuteParameter permute_param = 202;
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1618u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permute_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.RegionParameter region_param = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReorgParameter reorg_param = 301;
      case 301: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reorg_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.RegionOutputParameter region_output_param = 310;
      case 310: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2482u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ResampleParameter resample_param = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resample_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reshape_every_iter = 1001 [default = true];
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8008u)) {
          set_has_reshape_every_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reshape_every_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.ConfigParameter smartseg_config_param = 2000;
      case 2000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_config_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
      case 2001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_frame_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
      case 2002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_blob_visualize_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
      case 2003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_plan_view_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
      case 2004: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16034u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_horizontal_view_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
      case 2005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_plan_view_extractor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
      case 2006: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16050u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_horizontal_view_extractor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
      case 2007: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16058u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_segmentor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
      case 2008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16066u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_frame_target_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
      case 2009: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16074u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_frame_sequence_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
      case 2010: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16082u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_online_norm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
      case 2011: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16090u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_view_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
      case 2012: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16098u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_view_unpooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
      case 2013: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_point_interpolation_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
      case 2014: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_dilation_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
      case 2015: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_side_view_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
      case 2016: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartseg_side_view_extractor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
      case 3000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcn_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ResizeParameter resize_param = 3001;
      case 3001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resize_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
      case 3002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_related_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InceptionParameter inception_param = 3003;
      case 3003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inception_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
      case 3004: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24034u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
      case 3005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyramid_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DetectionOutputParameter detection_output_param = 3006;
      case 3006: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24050u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detection_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROIDataParam roi_data_param = 3007;
      case 3007: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24058u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
      case 3008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24066u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_2_heatmap_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROIShowParam roi_show_param = 3009;
      case 3009: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24074u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_show_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROIRefineParam roi_refine_param = 3010;
      case 3010: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24082u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_refine_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.CropParameter crop_param = 3011;
      case 3011: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24090u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
      case 4001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detection_output_ssd_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDistortParameter image_distort_param = 4008;
      case 4008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32066u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_distort_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
      case 4018: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox_reg_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
      case 4019: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psroi_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
      case 4020: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dfmb_psroi_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.RegParameter reg_param = 4023;
      case 4023: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
      case 4031: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposal_img_scale_to_cam_coords_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
      case 5000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deformable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
      case 5001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_arbitrary_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
      case 5002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expandlabel_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
      case 5004: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40034u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manipulate_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
      case 5005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_label_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BinaryDataParameter binary_data_param = 5006;
      case 5006: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40050u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binary_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
      case 5007: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40058u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cylinder_view_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BirdviewParameter bird_view_param = 5008;
      case 5008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40066u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bird_view_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
      case 5009: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40074u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeat_channel_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
      case 8266711: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66133690u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // repeated float loss_weight = 5;
  for (int i = 0, n = this->loss_weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->loss_weight(i), output);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blobs(i), output);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->exclude(i), output);
  }

  cached_has_bits = _has_bits_[3];
  // optional .caffe.Phase phase = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->phase(), output);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0, n = this->propagate_down_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->propagate_down(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TransformationParameter transform_param = 100;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->transform_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->loss_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->accuracy_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->argmax_param_, output);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->concat_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *this->dropout_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->dummy_data_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->eltwise_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->exp_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->hdf5_output_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->lrn_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, *this->memory_data_param_, output);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, *this->mvn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, *this->pooling_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, *this->power_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, *this->relu_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, *this->softmax_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, *this->slice_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, *this->tanh_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, *this->threshold_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, *this->window_data_param_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.PythonParameter python_param = 130;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->python_param_, output);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->prelu_param_, output);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->spp_param_, output);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, *this->reshape_param_, output);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, *this->log_param_, output);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->flatten_param_, output);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->reduction_param_, output);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->embed_param_, output);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138, *this->tile_param_, output);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, *this->batch_norm_param_, output);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, *this->elu_param_, output);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, *this->bias_param_, output);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, *this->scale_param_, output);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, *this->input_param_, output);
  }

  // optional .caffe.PermuteParameter permute_param = 202;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, *this->permute_param_, output);
  }

  // optional .caffe.RegionParameter region_param = 300;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, *this->region_param_, output);
  }

  // optional .caffe.ReorgParameter reorg_param = 301;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, *this->reorg_param_, output);
  }

  // optional .caffe.RegionOutputParameter region_output_param = 310;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      310, *this->region_output_param_, output);
  }

  // optional .caffe.ResampleParameter resample_param = 1000;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *this->resample_param_, output);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool reshape_every_iter = 1001 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1001, this->reshape_every_iter(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .smartseg.ConfigParameter smartseg_config_param = 2000;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2000, *this->smartseg_config_param_, output);
  }

  // optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2001, *this->smartseg_frame_data_param_, output);
  }

  // optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2002, *this->smartseg_blob_visualize_param_, output);
  }

  // optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2003, *this->smartseg_plan_view_param_, output);
  }

  // optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2004, *this->smartseg_horizontal_view_param_, output);
  }

  // optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2005, *this->smartseg_plan_view_extractor_param_, output);
  }

  // optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2006, *this->smartseg_horizontal_view_extractor_param_, output);
  }

  // optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2007, *this->smartseg_segmentor_param_, output);
  }

  // optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2008, *this->smartseg_frame_target_param_, output);
  }

  // optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2009, *this->smartseg_frame_sequence_data_param_, output);
  }

  // optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2010, *this->smartseg_online_norm_param_, output);
  }

  // optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2011, *this->smartseg_view_pooling_param_, output);
  }

  // optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2012, *this->smartseg_view_unpooling_param_, output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2013, *this->smartseg_point_interpolation_param_, output);
  }

  // optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2014, *this->smartseg_dilation_param_, output);
  }

  // optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2015, *this->smartseg_side_view_param_, output);
  }

  // optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2016, *this->smartseg_side_view_extractor_param_, output);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3000, *this->fcn_image_data_param_, output);
  }

  // optional .caffe.ResizeParameter resize_param = 3001;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3001, *this->resize_param_, output);
  }

  // optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3002, *this->label_related_dropout_param_, output);
  }

  // optional .caffe.InceptionParameter inception_param = 3003;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3003, *this->inception_param_, output);
  }

  // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3004, *this->element_hinge_loss_param_, output);
  }

  // optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3005, *this->pyramid_data_param_, output);
  }

  // optional .caffe.DetectionOutputParameter detection_output_param = 3006;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3006, *this->detection_output_param_, output);
  }

  // optional .caffe.ROIDataParam roi_data_param = 3007;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3007, *this->roi_data_param_, output);
  }

  // optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3008, *this->roi_2_heatmap_param_, output);
  }

  // optional .caffe.ROIShowParam roi_show_param = 3009;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3009, *this->roi_show_param_, output);
  }

  // optional .caffe.ROIRefineParam roi_refine_param = 3010;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3010, *this->roi_refine_param_, output);
  }

  // optional .caffe.CropParameter crop_param = 3011;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3011, *this->crop_param_, output);
  }

  // optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4001, *this->detection_output_ssd_param_, output);
  }

  // optional .caffe.ImageDistortParameter image_distort_param = 4008;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4008, *this->image_distort_param_, output);
  }

  // optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4018, *this->bbox_reg_param_, output);
  }

  // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4019, *this->psroi_pooling_param_, output);
  }

  // optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4020, *this->dfmb_psroi_pooling_param_, output);
  }

  // optional .caffe.RegParameter reg_param = 4023;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4023, *this->reg_param_, output);
  }

  // optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4031, *this->proposal_img_scale_to_cam_coords_param_, output);
  }

  // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5000, *this->deformable_convolution_param_, output);
  }

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5001, *this->image_data_arbitrary_param_, output);
  }

  // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5002, *this->expandlabel_param_, output);
  }

  // optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5004, *this->manipulate_loss_param_, output);
  }

  // optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5005, *this->image_label_data_param_, output);
  }

  // optional .caffe.BinaryDataParameter binary_data_param = 5006;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5006, *this->binary_data_param_, output);
  }

  // optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5007, *this->cylinder_view_param_, output);
  }

  // optional .caffe.BirdviewParameter bird_view_param = 5008;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5008, *this->bird_view_param_, output);
  }

  // optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5009, *this->repeat_channel_param_, output);
  }

  cached_has_bits = _has_bits_[3];
  // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8266711, *this->roi_pooling_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // repeated float loss_weight = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->loss_weight_, target);

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->param(i), deterministic, target);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->blobs(i), deterministic, target);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->include(i), deterministic, target);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->exclude(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[3];
  // optional .caffe.Phase phase = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->phase(), target);
  }

  // repeated bool propagate_down = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(11, this->propagate_down_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TransformationParameter transform_param = 100;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->transform_param_, deterministic, target);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->loss_param_, deterministic, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->accuracy_param_, deterministic, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->argmax_param_, deterministic, target);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->concat_param_, deterministic, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->contrastive_loss_param_, deterministic, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->convolution_param_, deterministic, target);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->data_param_, deterministic, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        108, *this->dropout_param_, deterministic, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        109, *this->dummy_data_param_, deterministic, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        110, *this->eltwise_param_, deterministic, target);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        111, *this->exp_param_, deterministic, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *this->hdf5_data_param_, deterministic, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        113, *this->hdf5_output_param_, deterministic, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        114, *this->hinge_loss_param_, deterministic, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        115, *this->image_data_param_, deterministic, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        116, *this->infogain_loss_param_, deterministic, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        117, *this->inner_product_param_, deterministic, target);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        118, *this->lrn_param_, deterministic, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        119, *this->memory_data_param_, deterministic, target);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        120, *this->mvn_param_, deterministic, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        121, *this->pooling_param_, deterministic, target);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        122, *this->power_param_, deterministic, target);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        123, *this->relu_param_, deterministic, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        124, *this->sigmoid_param_, deterministic, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        125, *this->softmax_param_, deterministic, target);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        126, *this->slice_param_, deterministic, target);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        127, *this->tanh_param_, deterministic, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        128, *this->threshold_param_, deterministic, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        129, *this->window_data_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.PythonParameter python_param = 130;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        130, *this->python_param_, deterministic, target);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        131, *this->prelu_param_, deterministic, target);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        132, *this->spp_param_, deterministic, target);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        133, *this->reshape_param_, deterministic, target);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        134, *this->log_param_, deterministic, target);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        135, *this->flatten_param_, deterministic, target);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        136, *this->reduction_param_, deterministic, target);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        137, *this->embed_param_, deterministic, target);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        138, *this->tile_param_, deterministic, target);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        139, *this->batch_norm_param_, deterministic, target);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        140, *this->elu_param_, deterministic, target);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        141, *this->bias_param_, deterministic, target);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        142, *this->scale_param_, deterministic, target);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        143, *this->input_param_, deterministic, target);
  }

  // optional .caffe.PermuteParameter permute_param = 202;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        202, *this->permute_param_, deterministic, target);
  }

  // optional .caffe.RegionParameter region_param = 300;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        300, *this->region_param_, deterministic, target);
  }

  // optional .caffe.ReorgParameter reorg_param = 301;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        301, *this->reorg_param_, deterministic, target);
  }

  // optional .caffe.RegionOutputParameter region_output_param = 310;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        310, *this->region_output_param_, deterministic, target);
  }

  // optional .caffe.ResampleParameter resample_param = 1000;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, *this->resample_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool reshape_every_iter = 1001 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1001, this->reshape_every_iter(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .smartseg.ConfigParameter smartseg_config_param = 2000;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2000, *this->smartseg_config_param_, deterministic, target);
  }

  // optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2001, *this->smartseg_frame_data_param_, deterministic, target);
  }

  // optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2002, *this->smartseg_blob_visualize_param_, deterministic, target);
  }

  // optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2003, *this->smartseg_plan_view_param_, deterministic, target);
  }

  // optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2004, *this->smartseg_horizontal_view_param_, deterministic, target);
  }

  // optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2005, *this->smartseg_plan_view_extractor_param_, deterministic, target);
  }

  // optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2006, *this->smartseg_horizontal_view_extractor_param_, deterministic, target);
  }

  // optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2007, *this->smartseg_segmentor_param_, deterministic, target);
  }

  // optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2008, *this->smartseg_frame_target_param_, deterministic, target);
  }

  // optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2009, *this->smartseg_frame_sequence_data_param_, deterministic, target);
  }

  // optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2010, *this->smartseg_online_norm_param_, deterministic, target);
  }

  // optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2011, *this->smartseg_view_pooling_param_, deterministic, target);
  }

  // optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2012, *this->smartseg_view_unpooling_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2013, *this->smartseg_point_interpolation_param_, deterministic, target);
  }

  // optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2014, *this->smartseg_dilation_param_, deterministic, target);
  }

  // optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2015, *this->smartseg_side_view_param_, deterministic, target);
  }

  // optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2016, *this->smartseg_side_view_extractor_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3000, *this->fcn_image_data_param_, deterministic, target);
  }

  // optional .caffe.ResizeParameter resize_param = 3001;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3001, *this->resize_param_, deterministic, target);
  }

  // optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3002, *this->label_related_dropout_param_, deterministic, target);
  }

  // optional .caffe.InceptionParameter inception_param = 3003;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3003, *this->inception_param_, deterministic, target);
  }

  // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3004, *this->element_hinge_loss_param_, deterministic, target);
  }

  // optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3005, *this->pyramid_data_param_, deterministic, target);
  }

  // optional .caffe.DetectionOutputParameter detection_output_param = 3006;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3006, *this->detection_output_param_, deterministic, target);
  }

  // optional .caffe.ROIDataParam roi_data_param = 3007;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3007, *this->roi_data_param_, deterministic, target);
  }

  // optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3008, *this->roi_2_heatmap_param_, deterministic, target);
  }

  // optional .caffe.ROIShowParam roi_show_param = 3009;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3009, *this->roi_show_param_, deterministic, target);
  }

  // optional .caffe.ROIRefineParam roi_refine_param = 3010;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3010, *this->roi_refine_param_, deterministic, target);
  }

  // optional .caffe.CropParameter crop_param = 3011;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3011, *this->crop_param_, deterministic, target);
  }

  // optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4001, *this->detection_output_ssd_param_, deterministic, target);
  }

  // optional .caffe.ImageDistortParameter image_distort_param = 4008;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4008, *this->image_distort_param_, deterministic, target);
  }

  // optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4018, *this->bbox_reg_param_, deterministic, target);
  }

  // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4019, *this->psroi_pooling_param_, deterministic, target);
  }

  // optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4020, *this->dfmb_psroi_pooling_param_, deterministic, target);
  }

  // optional .caffe.RegParameter reg_param = 4023;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4023, *this->reg_param_, deterministic, target);
  }

  // optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4031, *this->proposal_img_scale_to_cam_coords_param_, deterministic, target);
  }

  // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5000, *this->deformable_convolution_param_, deterministic, target);
  }

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5001, *this->image_data_arbitrary_param_, deterministic, target);
  }

  // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5002, *this->expandlabel_param_, deterministic, target);
  }

  // optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5004, *this->manipulate_loss_param_, deterministic, target);
  }

  // optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5005, *this->image_label_data_param_, deterministic, target);
  }

  // optional .caffe.BinaryDataParameter binary_data_param = 5006;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5006, *this->binary_data_param_, deterministic, target);
  }

  // optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5007, *this->cylinder_view_param_, deterministic, target);
  }

  // optional .caffe.BirdviewParameter bird_view_param = 5008;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5008, *this->bird_view_param_, deterministic, target);
  }

  // optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5009, *this->repeat_channel_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[3];
  // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8266711, *this->roi_pooling_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string bottom = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0, n = this->top_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated float loss_weight = 5;
  {
    unsigned int count = this->loss_weight_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->loss_weight_size());
    total_size += data_size;
  }

  // repeated .caffe.ParamSpec param = 6;
  {
    unsigned int count = this->param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  // repeated .caffe.BlobProto blobs = 7;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated .caffe.NetStateRule include = 8;
  {
    unsigned int count = this->include_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->include(i));
    }
  }

  // repeated .caffe.NetStateRule exclude = 9;
  {
    unsigned int count = this->exclude_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exclude(i));
    }
  }

  // repeated bool propagate_down = 11;
  {
    unsigned int count = this->propagate_down_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->propagate_down_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.TransformationParameter transform_param = 100;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.LossParameter loss_param = 101;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 104;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.ConvolutionParameter convolution_param = 106;
    if (has_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.DataParameter data_param = 107;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 108;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 110;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ExpParameter exp_param = 111;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    if (has_hdf5_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

    // optional .caffe.ImageDataParameter image_data_param = 115;
    if (has_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 118;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

    // optional .caffe.MVNParameter mvn_param = 120;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 121;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.PowerParameter power_param = 122;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 123;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.SliceParameter slice_param = 126;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 127;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 128;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 129;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.PythonParameter python_param = 130;
    if (has_python_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->python_param_);
    }

    // optional .caffe.PReLUParameter prelu_param = 131;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prelu_param_);
    }

    // optional .caffe.SPPParameter spp_param = 132;
    if (has_spp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spp_param_);
    }

    // optional .caffe.ReshapeParameter reshape_param = 133;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshape_param_);
    }

    // optional .caffe.LogParameter log_param = 134;
    if (has_log_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->log_param_);
    }

    // optional .caffe.FlattenParameter flatten_param = 135;
    if (has_flatten_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flatten_param_);
    }

    // optional .caffe.ReductionParameter reduction_param = 136;
    if (has_reduction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reduction_param_);
    }

    // optional .caffe.EmbedParameter embed_param = 137;
    if (has_embed_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->embed_param_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .caffe.TileParameter tile_param = 138;
    if (has_tile_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tile_param_);
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_norm_param_);
    }

    // optional .caffe.ELUParameter elu_param = 140;
    if (has_elu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->elu_param_);
    }

    // optional .caffe.BiasParameter bias_param = 141;
    if (has_bias_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_param_);
    }

    // optional .caffe.ScaleParameter scale_param = 142;
    if (has_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_param_);
    }

    // optional .caffe.InputParameter input_param = 143;
    if (has_input_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->input_param_);
    }

    // optional .caffe.PermuteParameter permute_param = 202;
    if (has_permute_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->permute_param_);
    }

    // optional .caffe.RegionParameter region_param = 300;
    if (has_region_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_param_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional .caffe.ReorgParameter reorg_param = 301;
    if (has_reorg_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reorg_param_);
    }

    // optional .caffe.RegionOutputParameter region_output_param = 310;
    if (has_region_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_output_param_);
    }

    // optional .caffe.ResampleParameter resample_param = 1000;
    if (has_resample_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resample_param_);
    }

    // optional .smartseg.ConfigParameter smartseg_config_param = 2000;
    if (has_smartseg_config_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_config_param_);
    }

    // optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
    if (has_smartseg_frame_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_frame_data_param_);
    }

    // optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
    if (has_smartseg_blob_visualize_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_blob_visualize_param_);
    }

    // optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
    if (has_smartseg_plan_view_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_plan_view_param_);
    }

    // optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
    if (has_smartseg_horizontal_view_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_horizontal_view_param_);
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
    if (has_smartseg_plan_view_extractor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_plan_view_extractor_param_);
    }

    // optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
    if (has_smartseg_horizontal_view_extractor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_horizontal_view_extractor_param_);
    }

    // optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
    if (has_smartseg_segmentor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_segmentor_param_);
    }

    // optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
    if (has_smartseg_frame_target_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_frame_target_param_);
    }

    // optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
    if (has_smartseg_frame_sequence_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_frame_sequence_data_param_);
    }

    // optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
    if (has_smartseg_online_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_online_norm_param_);
    }

    // optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
    if (has_smartseg_view_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_view_pooling_param_);
    }

    // optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
    if (has_smartseg_view_unpooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_view_unpooling_param_);
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
    if (has_smartseg_point_interpolation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_point_interpolation_param_);
    }

    // optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
    if (has_smartseg_dilation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_dilation_param_);
    }

    // optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
    if (has_smartseg_side_view_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_side_view_param_);
    }

    // optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
    if (has_smartseg_side_view_extractor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smartseg_side_view_extractor_param_);
    }

    // optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
    if (has_fcn_image_data_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fcn_image_data_param_);
    }

    // optional .caffe.ResizeParameter resize_param = 3001;
    if (has_resize_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resize_param_);
    }

    // optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
    if (has_label_related_dropout_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_related_dropout_param_);
    }

    // optional .caffe.InceptionParameter inception_param = 3003;
    if (has_inception_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inception_param_);
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
    if (has_element_hinge_loss_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->element_hinge_loss_param_);
    }

    // optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
    if (has_pyramid_data_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pyramid_data_param_);
    }

    // optional .caffe.DetectionOutputParameter detection_output_param = 3006;
    if (has_detection_output_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detection_output_param_);
    }

    // optional .caffe.ROIDataParam roi_data_param = 3007;
    if (has_roi_data_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_data_param_);
    }

    // optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
    if (has_roi_2_heatmap_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_2_heatmap_param_);
    }

    // optional .caffe.ROIShowParam roi_show_param = 3009;
    if (has_roi_show_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_show_param_);
    }

    // optional .caffe.ROIRefineParam roi_refine_param = 3010;
    if (has_roi_refine_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_refine_param_);
    }

    // optional .caffe.CropParameter crop_param = 3011;
    if (has_crop_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crop_param_);
    }

  }
  if (_has_bits_[80 / 32] & 16711680u) {
    // optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
    if (has_detection_output_ssd_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detection_output_ssd_param_);
    }

    // optional .caffe.ImageDistortParameter image_distort_param = 4008;
    if (has_image_distort_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_distort_param_);
    }

    // optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
    if (has_bbox_reg_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_reg_param_);
    }

    // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
    if (has_psroi_pooling_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->psroi_pooling_param_);
    }

    // optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
    if (has_dfmb_psroi_pooling_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dfmb_psroi_pooling_param_);
    }

    // optional .caffe.RegParameter reg_param = 4023;
    if (has_reg_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reg_param_);
    }

    // optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
    if (has_proposal_img_scale_to_cam_coords_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->proposal_img_scale_to_cam_coords_param_);
    }

    // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
    if (has_deformable_convolution_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deformable_convolution_param_);
    }

  }
  if (_has_bits_[88 / 32] & 4278190080u) {
    // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
    if (has_image_data_arbitrary_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_arbitrary_param_);
    }

    // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
    if (has_expandlabel_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->expandlabel_param_);
    }

    // optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
    if (has_manipulate_loss_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->manipulate_loss_param_);
    }

    // optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
    if (has_image_label_data_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_label_data_param_);
    }

    // optional .caffe.BinaryDataParameter binary_data_param = 5006;
    if (has_binary_data_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->binary_data_param_);
    }

    // optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
    if (has_cylinder_view_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cylinder_view_param_);
    }

    // optional .caffe.BirdviewParameter bird_view_param = 5008;
    if (has_bird_view_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bird_view_param_);
    }

    // optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
    if (has_repeat_channel_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->repeat_channel_param_);
    }

  }
  if (_has_bits_[96 / 32] & 7u) {
    // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
    if (has_roi_pooling_param()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_pooling_param_);
    }

    // optional .caffe.Phase phase = 10;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional bool reshape_every_iter = 1001 [default = true];
    if (has_reshape_every_iter()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  propagate_down_.MergeFrom(from.propagate_down_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_python_param()->::caffe::PythonParameter::MergeFrom(from.python_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_spp_param()->::caffe::SPPParameter::MergeFrom(from.spp_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reshape_param()->::caffe::ReshapeParameter::MergeFrom(from.reshape_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_log_param()->::caffe::LogParameter::MergeFrom(from.log_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_flatten_param()->::caffe::FlattenParameter::MergeFrom(from.flatten_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_reduction_param()->::caffe::ReductionParameter::MergeFrom(from.reduction_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_embed_param()->::caffe::EmbedParameter::MergeFrom(from.embed_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_tile_param()->::caffe::TileParameter::MergeFrom(from.tile_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_elu_param()->::caffe::ELUParameter::MergeFrom(from.elu_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_bias_param()->::caffe::BiasParameter::MergeFrom(from.bias_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_scale_param()->::caffe::ScaleParameter::MergeFrom(from.scale_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_input_param()->::caffe::InputParameter::MergeFrom(from.input_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_permute_param()->::caffe::PermuteParameter::MergeFrom(from.permute_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_region_param()->::caffe::RegionParameter::MergeFrom(from.region_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_reorg_param()->::caffe::ReorgParameter::MergeFrom(from.reorg_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_region_output_param()->::caffe::RegionOutputParameter::MergeFrom(from.region_output_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_resample_param()->::caffe::ResampleParameter::MergeFrom(from.resample_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_smartseg_config_param()->::smartseg::ConfigParameter::MergeFrom(from.smartseg_config_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_smartseg_frame_data_param()->::smartseg::FrameDataParameter::MergeFrom(from.smartseg_frame_data_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_smartseg_blob_visualize_param()->::smartseg::BlobVisualizeParameter::MergeFrom(from.smartseg_blob_visualize_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_smartseg_plan_view_param()->::smartseg::PlanViewParameter::MergeFrom(from.smartseg_plan_view_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_smartseg_horizontal_view_param()->::smartseg::HorizontalViewParameter::MergeFrom(from.smartseg_horizontal_view_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_smartseg_plan_view_extractor_param()->::smartseg::PlanViewExtractorParameter::MergeFrom(from.smartseg_plan_view_extractor_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_smartseg_horizontal_view_extractor_param()->::smartseg::HorizontalViewExtractorParameter::MergeFrom(from.smartseg_horizontal_view_extractor_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_smartseg_segmentor_param()->::smartseg::SegmentorParameter::MergeFrom(from.smartseg_segmentor_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_smartseg_frame_target_param()->::smartseg::FrameTargetParameter::MergeFrom(from.smartseg_frame_target_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_smartseg_frame_sequence_data_param()->::smartseg::FrameSequenceDataParameter::MergeFrom(from.smartseg_frame_sequence_data_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_smartseg_online_norm_param()->::smartseg::OnlineNormParameter::MergeFrom(from.smartseg_online_norm_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_smartseg_view_pooling_param()->::smartseg::ViewPoolingParameter::MergeFrom(from.smartseg_view_pooling_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_smartseg_view_unpooling_param()->::smartseg::ViewUnpoolingParameter::MergeFrom(from.smartseg_view_unpooling_param());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_smartseg_point_interpolation_param()->::smartseg::PointInterpolationParameter::MergeFrom(from.smartseg_point_interpolation_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_smartseg_dilation_param()->::smartseg::DilationParameter::MergeFrom(from.smartseg_dilation_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_smartseg_side_view_param()->::smartseg::SideViewParameter::MergeFrom(from.smartseg_side_view_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_smartseg_side_view_extractor_param()->::smartseg::SideViewExtractorParameter::MergeFrom(from.smartseg_side_view_extractor_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fcn_image_data_param()->::caffe_fcn_data_layer::FCNImageDataParameter::MergeFrom(from.fcn_image_data_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_resize_param()->::caffe::ResizeParameter::MergeFrom(from.resize_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_label_related_dropout_param()->::caffe::LabelRelatedDropoutParam::MergeFrom(from.label_related_dropout_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_inception_param()->::caffe::InceptionParameter::MergeFrom(from.inception_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_element_hinge_loss_param()->::caffe::ElementHingeLossParameter::MergeFrom(from.element_hinge_loss_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_pyramid_data_param()->::caffe::PyramidDataParameter::MergeFrom(from.pyramid_data_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_detection_output_param()->::caffe::DetectionOutputParameter::MergeFrom(from.detection_output_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_roi_data_param()->::caffe::ROIDataParam::MergeFrom(from.roi_data_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_roi_2_heatmap_param()->::caffe::ROI2HeatMapParam::MergeFrom(from.roi_2_heatmap_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_roi_show_param()->::caffe::ROIShowParam::MergeFrom(from.roi_show_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_roi_refine_param()->::caffe::ROIRefineParam::MergeFrom(from.roi_refine_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_crop_param()->::caffe::CropParameter::MergeFrom(from.crop_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_detection_output_ssd_param()->::caffe::DetectionOutputSSDParameter::MergeFrom(from.detection_output_ssd_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_image_distort_param()->::caffe::ImageDistortParameter::MergeFrom(from.image_distort_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_bbox_reg_param()->::caffe::BBoxRegParameter::MergeFrom(from.bbox_reg_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_psroi_pooling_param()->::caffe::PSROIPoolingParameter::MergeFrom(from.psroi_pooling_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_dfmb_psroi_pooling_param()->::caffe::DFMBPSROIPoolingParameter::MergeFrom(from.dfmb_psroi_pooling_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_reg_param()->::caffe::RegParameter::MergeFrom(from.reg_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_proposal_img_scale_to_cam_coords_param()->::caffe::ProposalImgScaleToCamCoordsParameter::MergeFrom(from.proposal_img_scale_to_cam_coords_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_deformable_convolution_param()->::caffe::DeformableConvolutionParameter::MergeFrom(from.deformable_convolution_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_image_data_arbitrary_param()->::caffe::ImageDataArbitraryParameter::MergeFrom(from.image_data_arbitrary_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_expandlabel_param()->::caffe::ExpandlabelParameter::MergeFrom(from.expandlabel_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_manipulate_loss_param()->::caffe::ManipulateLossParameter::MergeFrom(from.manipulate_loss_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_image_label_data_param()->::caffe::ImageLabelDataParameter::MergeFrom(from.image_label_data_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_binary_data_param()->::caffe::BinaryDataParameter::MergeFrom(from.binary_data_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_cylinder_view_param()->::caffe::CylinderViewParameter::MergeFrom(from.cylinder_view_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_bird_view_param()->::caffe::BirdviewParameter::MergeFrom(from.bird_view_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_repeat_channel_param()->::caffe::RepeatChannelParameter::MergeFrom(from.repeat_channel_param());
    }
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_roi_pooling_param()->::caffe::ROIPoolingParameter::MergeFrom(from.roi_pooling_param());
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000004u) {
      reshape_every_iter_ = from.reshape_every_iter_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  if (has_smartseg_frame_data_param()) {
    if (!this->smartseg_frame_data_param_->IsInitialized()) return false;
  }
  if (has_smartseg_blob_visualize_param()) {
    if (!this->smartseg_blob_visualize_param_->IsInitialized()) return false;
  }
  if (has_smartseg_plan_view_param()) {
    if (!this->smartseg_plan_view_param_->IsInitialized()) return false;
  }
  if (has_smartseg_horizontal_view_param()) {
    if (!this->smartseg_horizontal_view_param_->IsInitialized()) return false;
  }
  if (has_smartseg_plan_view_extractor_param()) {
    if (!this->smartseg_plan_view_extractor_param_->IsInitialized()) return false;
  }
  if (has_smartseg_frame_sequence_data_param()) {
    if (!this->smartseg_frame_sequence_data_param_->IsInitialized()) return false;
  }
  if (has_smartseg_online_norm_param()) {
    if (!this->smartseg_online_norm_param_->IsInitialized()) return false;
  }
  if (has_smartseg_dilation_param()) {
    if (!this->smartseg_dilation_param_->IsInitialized()) return false;
  }
  if (has_smartseg_side_view_param()) {
    if (!this->smartseg_side_view_param_->IsInitialized()) return false;
  }
  if (has_detection_output_ssd_param()) {
    if (!this->detection_output_ssd_param_->IsInitialized()) return false;
  }
  if (has_psroi_pooling_param()) {
    if (!this->psroi_pooling_param_->IsInitialized()) return false;
  }
  if (has_dfmb_psroi_pooling_param()) {
    if (!this->dfmb_psroi_pooling_param_->IsInitialized()) return false;
  }
  if (has_proposal_img_scale_to_cam_coords_param()) {
    if (!this->proposal_img_scale_to_cam_coords_param_->IsInitialized()) return false;
  }
  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blobs_.InternalSwap(&other->blobs_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  propagate_down_.InternalSwap(&other->propagate_down_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(argmax_param_, other->argmax_param_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(dummy_data_param_, other->dummy_data_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(exp_param_, other->exp_param_);
  std::swap(hdf5_data_param_, other->hdf5_data_param_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(hinge_loss_param_, other->hinge_loss_param_);
  std::swap(image_data_param_, other->image_data_param_);
  std::swap(infogain_loss_param_, other->infogain_loss_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(lrn_param_, other->lrn_param_);
  std::swap(memory_data_param_, other->memory_data_param_);
  std::swap(mvn_param_, other->mvn_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(power_param_, other->power_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(sigmoid_param_, other->sigmoid_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(slice_param_, other->slice_param_);
  std::swap(tanh_param_, other->tanh_param_);
  std::swap(threshold_param_, other->threshold_param_);
  std::swap(window_data_param_, other->window_data_param_);
  std::swap(python_param_, other->python_param_);
  std::swap(prelu_param_, other->prelu_param_);
  std::swap(spp_param_, other->spp_param_);
  std::swap(reshape_param_, other->reshape_param_);
  std::swap(log_param_, other->log_param_);
  std::swap(flatten_param_, other->flatten_param_);
  std::swap(reduction_param_, other->reduction_param_);
  std::swap(embed_param_, other->embed_param_);
  std::swap(tile_param_, other->tile_param_);
  std::swap(batch_norm_param_, other->batch_norm_param_);
  std::swap(elu_param_, other->elu_param_);
  std::swap(bias_param_, other->bias_param_);
  std::swap(scale_param_, other->scale_param_);
  std::swap(input_param_, other->input_param_);
  std::swap(permute_param_, other->permute_param_);
  std::swap(region_param_, other->region_param_);
  std::swap(reorg_param_, other->reorg_param_);
  std::swap(region_output_param_, other->region_output_param_);
  std::swap(resample_param_, other->resample_param_);
  std::swap(smartseg_config_param_, other->smartseg_config_param_);
  std::swap(smartseg_frame_data_param_, other->smartseg_frame_data_param_);
  std::swap(smartseg_blob_visualize_param_, other->smartseg_blob_visualize_param_);
  std::swap(smartseg_plan_view_param_, other->smartseg_plan_view_param_);
  std::swap(smartseg_horizontal_view_param_, other->smartseg_horizontal_view_param_);
  std::swap(smartseg_plan_view_extractor_param_, other->smartseg_plan_view_extractor_param_);
  std::swap(smartseg_horizontal_view_extractor_param_, other->smartseg_horizontal_view_extractor_param_);
  std::swap(smartseg_segmentor_param_, other->smartseg_segmentor_param_);
  std::swap(smartseg_frame_target_param_, other->smartseg_frame_target_param_);
  std::swap(smartseg_frame_sequence_data_param_, other->smartseg_frame_sequence_data_param_);
  std::swap(smartseg_online_norm_param_, other->smartseg_online_norm_param_);
  std::swap(smartseg_view_pooling_param_, other->smartseg_view_pooling_param_);
  std::swap(smartseg_view_unpooling_param_, other->smartseg_view_unpooling_param_);
  std::swap(smartseg_point_interpolation_param_, other->smartseg_point_interpolation_param_);
  std::swap(smartseg_dilation_param_, other->smartseg_dilation_param_);
  std::swap(smartseg_side_view_param_, other->smartseg_side_view_param_);
  std::swap(smartseg_side_view_extractor_param_, other->smartseg_side_view_extractor_param_);
  std::swap(fcn_image_data_param_, other->fcn_image_data_param_);
  std::swap(resize_param_, other->resize_param_);
  std::swap(label_related_dropout_param_, other->label_related_dropout_param_);
  std::swap(inception_param_, other->inception_param_);
  std::swap(element_hinge_loss_param_, other->element_hinge_loss_param_);
  std::swap(pyramid_data_param_, other->pyramid_data_param_);
  std::swap(detection_output_param_, other->detection_output_param_);
  std::swap(roi_data_param_, other->roi_data_param_);
  std::swap(roi_2_heatmap_param_, other->roi_2_heatmap_param_);
  std::swap(roi_show_param_, other->roi_show_param_);
  std::swap(roi_refine_param_, other->roi_refine_param_);
  std::swap(crop_param_, other->crop_param_);
  std::swap(detection_output_ssd_param_, other->detection_output_ssd_param_);
  std::swap(image_distort_param_, other->image_distort_param_);
  std::swap(bbox_reg_param_, other->bbox_reg_param_);
  std::swap(psroi_pooling_param_, other->psroi_pooling_param_);
  std::swap(dfmb_psroi_pooling_param_, other->dfmb_psroi_pooling_param_);
  std::swap(reg_param_, other->reg_param_);
  std::swap(proposal_img_scale_to_cam_coords_param_, other->proposal_img_scale_to_cam_coords_param_);
  std::swap(deformable_convolution_param_, other->deformable_convolution_param_);
  std::swap(image_data_arbitrary_param_, other->image_data_arbitrary_param_);
  std::swap(expandlabel_param_, other->expandlabel_param_);
  std::swap(manipulate_loss_param_, other->manipulate_loss_param_);
  std::swap(image_label_data_param_, other->image_label_data_param_);
  std::swap(binary_data_param_, other->binary_data_param_);
  std::swap(cylinder_view_param_, other->cylinder_view_param_);
  std::swap(bird_view_param_, other->bird_view_param_);
  std::swap(repeat_channel_param_, other->repeat_channel_param_);
  std::swap(roi_pooling_param_, other->roi_pooling_param_);
  std::swap(phase_, other->phase_);
  std::swap(reshape_every_iter_, other->reshape_every_iter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  std::swap(_has_bits_[3], other->_has_bits_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string name = 1;
bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena();
}
void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
#if LANG_CXX11
void LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.type)
}
#endif
void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
int LayerParameter::bottom_size() const {
  return bottom_.size();
}
void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#if LANG_CXX11
void LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#endif
void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
int LayerParameter::top_size() const {
  return top_.size();
}
void LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#if LANG_CXX11
void LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#endif
void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
bool LayerParameter::has_phase() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
void LayerParameter::set_has_phase() {
  _has_bits_[3] |= 0x00000002u;
}
void LayerParameter::clear_has_phase() {
  _has_bits_[3] &= ~0x00000002u;
}
void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
int LayerParameter::param_size() const {
  return param_.size();
}
void LayerParameter::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
int LayerParameter::blobs_size() const {
  return blobs_.size();
}
void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
int LayerParameter::include_size() const {
  return include_.size();
}
void LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
int LayerParameter::exclude_size() const {
  return exclude_.size();
}
void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00000020u;
}
void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[1] |= 0x00000200u;
}
void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[1] &= ~0x00000200u;
}
void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_
                         : *::caffe::BatchNormParameter::internal_default_instance();
}
::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
bool LayerParameter::has_bias_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void LayerParameter::set_has_bias_param() {
  _has_bits_[1] |= 0x00000800u;
}
void LayerParameter::clear_has_bias_param() {
  _has_bits_[1] &= ~0x00000800u;
}
void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_
                         : *::caffe::BiasParameter::internal_default_instance();
}
::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000040u;
}
void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00000080u;
}
void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
}
void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 107;
bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000200u;
}
void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000400u;
}
void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000400u;
}
void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
bool LayerParameter::has_elu_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void LayerParameter::set_has_elu_param() {
  _has_bits_[1] |= 0x00000400u;
}
void LayerParameter::clear_has_elu_param() {
  _has_bits_[1] &= ~0x00000400u;
}
void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_
                         : *::caffe::ELUParameter::internal_default_instance();
}
::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
bool LayerParameter::has_embed_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void LayerParameter::set_has_embed_param() {
  _has_bits_[1] |= 0x00000080u;
}
void LayerParameter::clear_has_embed_param() {
  _has_bits_[1] &= ~0x00000080u;
}
void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_
                         : *::caffe::EmbedParameter::internal_default_instance();
}
::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void LayerParameter::set_has_flatten_param() {
  _has_bits_[1] |= 0x00000020u;
}
void LayerParameter::clear_has_flatten_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_
                         : *::caffe::FlattenParameter::internal_default_instance();
}
::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00080000u;
}
void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00002000u;
}
void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00002000u;
}
void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_
                         : *::caffe::InputParameter::internal_default_instance();
}
::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_
                         : *::caffe::LogParameter::internal_default_instance();
}
::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00100000u;
}
void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x00400000u;
}
void LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00800000u;
}
void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
bool LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x01000000u;
}
void LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000002u;
}
void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_
                         : *::caffe::PReLUParameter::internal_default_instance();
}
::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00000001u;
}
void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00000001u;
}
void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_
                         : *::caffe::PythonParameter::internal_default_instance();
}
::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00000040u;
}
void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00000040u;
}
void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_
                         : *::caffe::ReductionParameter::internal_default_instance();
}
::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x02000000u;
}
void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00000008u;
}
void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_
                         : *::caffe::ReshapeParameter::internal_default_instance();
}
::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[3] |= 0x00000001u;
}
void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[3] &= ~0x00000001u;
}
void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
const ::caffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_
                         : *::caffe::ROIPoolingParameter::internal_default_instance();
}
::caffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
::caffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_pooling_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00001000u;
}
void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00001000u;
}
void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_
                         : *::caffe::ScaleParameter::internal_default_instance();
}
::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x04000000u;
}
void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x08000000u;
}
void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00000004u;
}
void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_
                         : *::caffe::SPPParameter::internal_default_instance();
}
::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
bool LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x10000000u;
}
void LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x20000000u;
}
void LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x40000000u;
}
void LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x00000100u;
}
void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x00000100u;
}
void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_
                         : *::caffe::TileParameter::internal_default_instance();
}
::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x80000000u;
}
void LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .smartseg.ConfigParameter smartseg_config_param = 2000;
bool LayerParameter::has_smartseg_config_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void LayerParameter::set_has_smartseg_config_param() {
  _has_bits_[1] |= 0x00080000u;
}
void LayerParameter::clear_has_smartseg_config_param() {
  _has_bits_[1] &= ~0x00080000u;
}
void LayerParameter::clear_smartseg_config_param() {
  if (smartseg_config_param_ != NULL) smartseg_config_param_->::smartseg::ConfigParameter::Clear();
  clear_has_smartseg_config_param();
}
const ::smartseg::ConfigParameter& LayerParameter::smartseg_config_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_config_param)
  return smartseg_config_param_ != NULL ? *smartseg_config_param_
                         : *::smartseg::ConfigParameter::internal_default_instance();
}
::smartseg::ConfigParameter* LayerParameter::mutable_smartseg_config_param() {
  set_has_smartseg_config_param();
  if (smartseg_config_param_ == NULL) {
    smartseg_config_param_ = new ::smartseg::ConfigParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_config_param)
  return smartseg_config_param_;
}
::smartseg::ConfigParameter* LayerParameter::release_smartseg_config_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_config_param)
  clear_has_smartseg_config_param();
  ::smartseg::ConfigParameter* temp = smartseg_config_param_;
  smartseg_config_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_config_param(::smartseg::ConfigParameter* smartseg_config_param) {
  delete smartseg_config_param_;
  smartseg_config_param_ = smartseg_config_param;
  if (smartseg_config_param) {
    set_has_smartseg_config_param();
  } else {
    clear_has_smartseg_config_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_config_param)
}

// optional .smartseg.FrameDataParameter smartseg_frame_data_param = 2001;
bool LayerParameter::has_smartseg_frame_data_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void LayerParameter::set_has_smartseg_frame_data_param() {
  _has_bits_[1] |= 0x00100000u;
}
void LayerParameter::clear_has_smartseg_frame_data_param() {
  _has_bits_[1] &= ~0x00100000u;
}
void LayerParameter::clear_smartseg_frame_data_param() {
  if (smartseg_frame_data_param_ != NULL) smartseg_frame_data_param_->::smartseg::FrameDataParameter::Clear();
  clear_has_smartseg_frame_data_param();
}
const ::smartseg::FrameDataParameter& LayerParameter::smartseg_frame_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_frame_data_param)
  return smartseg_frame_data_param_ != NULL ? *smartseg_frame_data_param_
                         : *::smartseg::FrameDataParameter::internal_default_instance();
}
::smartseg::FrameDataParameter* LayerParameter::mutable_smartseg_frame_data_param() {
  set_has_smartseg_frame_data_param();
  if (smartseg_frame_data_param_ == NULL) {
    smartseg_frame_data_param_ = new ::smartseg::FrameDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_frame_data_param)
  return smartseg_frame_data_param_;
}
::smartseg::FrameDataParameter* LayerParameter::release_smartseg_frame_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_frame_data_param)
  clear_has_smartseg_frame_data_param();
  ::smartseg::FrameDataParameter* temp = smartseg_frame_data_param_;
  smartseg_frame_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_frame_data_param(::smartseg::FrameDataParameter* smartseg_frame_data_param) {
  delete smartseg_frame_data_param_;
  smartseg_frame_data_param_ = smartseg_frame_data_param;
  if (smartseg_frame_data_param) {
    set_has_smartseg_frame_data_param();
  } else {
    clear_has_smartseg_frame_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_frame_data_param)
}

// optional .smartseg.FrameSequenceDataParameter smartseg_frame_sequence_data_param = 2009;
bool LayerParameter::has_smartseg_frame_sequence_data_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void LayerParameter::set_has_smartseg_frame_sequence_data_param() {
  _has_bits_[1] |= 0x10000000u;
}
void LayerParameter::clear_has_smartseg_frame_sequence_data_param() {
  _has_bits_[1] &= ~0x10000000u;
}
void LayerParameter::clear_smartseg_frame_sequence_data_param() {
  if (smartseg_frame_sequence_data_param_ != NULL) smartseg_frame_sequence_data_param_->::smartseg::FrameSequenceDataParameter::Clear();
  clear_has_smartseg_frame_sequence_data_param();
}
const ::smartseg::FrameSequenceDataParameter& LayerParameter::smartseg_frame_sequence_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_frame_sequence_data_param)
  return smartseg_frame_sequence_data_param_ != NULL ? *smartseg_frame_sequence_data_param_
                         : *::smartseg::FrameSequenceDataParameter::internal_default_instance();
}
::smartseg::FrameSequenceDataParameter* LayerParameter::mutable_smartseg_frame_sequence_data_param() {
  set_has_smartseg_frame_sequence_data_param();
  if (smartseg_frame_sequence_data_param_ == NULL) {
    smartseg_frame_sequence_data_param_ = new ::smartseg::FrameSequenceDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_frame_sequence_data_param)
  return smartseg_frame_sequence_data_param_;
}
::smartseg::FrameSequenceDataParameter* LayerParameter::release_smartseg_frame_sequence_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_frame_sequence_data_param)
  clear_has_smartseg_frame_sequence_data_param();
  ::smartseg::FrameSequenceDataParameter* temp = smartseg_frame_sequence_data_param_;
  smartseg_frame_sequence_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_frame_sequence_data_param(::smartseg::FrameSequenceDataParameter* smartseg_frame_sequence_data_param) {
  delete smartseg_frame_sequence_data_param_;
  smartseg_frame_sequence_data_param_ = smartseg_frame_sequence_data_param;
  if (smartseg_frame_sequence_data_param) {
    set_has_smartseg_frame_sequence_data_param();
  } else {
    clear_has_smartseg_frame_sequence_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_frame_sequence_data_param)
}

// optional .smartseg.BlobVisualizeParameter smartseg_blob_visualize_param = 2002;
bool LayerParameter::has_smartseg_blob_visualize_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void LayerParameter::set_has_smartseg_blob_visualize_param() {
  _has_bits_[1] |= 0x00200000u;
}
void LayerParameter::clear_has_smartseg_blob_visualize_param() {
  _has_bits_[1] &= ~0x00200000u;
}
void LayerParameter::clear_smartseg_blob_visualize_param() {
  if (smartseg_blob_visualize_param_ != NULL) smartseg_blob_visualize_param_->::smartseg::BlobVisualizeParameter::Clear();
  clear_has_smartseg_blob_visualize_param();
}
const ::smartseg::BlobVisualizeParameter& LayerParameter::smartseg_blob_visualize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_blob_visualize_param)
  return smartseg_blob_visualize_param_ != NULL ? *smartseg_blob_visualize_param_
                         : *::smartseg::BlobVisualizeParameter::internal_default_instance();
}
::smartseg::BlobVisualizeParameter* LayerParameter::mutable_smartseg_blob_visualize_param() {
  set_has_smartseg_blob_visualize_param();
  if (smartseg_blob_visualize_param_ == NULL) {
    smartseg_blob_visualize_param_ = new ::smartseg::BlobVisualizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_blob_visualize_param)
  return smartseg_blob_visualize_param_;
}
::smartseg::BlobVisualizeParameter* LayerParameter::release_smartseg_blob_visualize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_blob_visualize_param)
  clear_has_smartseg_blob_visualize_param();
  ::smartseg::BlobVisualizeParameter* temp = smartseg_blob_visualize_param_;
  smartseg_blob_visualize_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_blob_visualize_param(::smartseg::BlobVisualizeParameter* smartseg_blob_visualize_param) {
  delete smartseg_blob_visualize_param_;
  smartseg_blob_visualize_param_ = smartseg_blob_visualize_param;
  if (smartseg_blob_visualize_param) {
    set_has_smartseg_blob_visualize_param();
  } else {
    clear_has_smartseg_blob_visualize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_blob_visualize_param)
}

// optional .smartseg.PlanViewParameter smartseg_plan_view_param = 2003;
bool LayerParameter::has_smartseg_plan_view_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void LayerParameter::set_has_smartseg_plan_view_param() {
  _has_bits_[1] |= 0x00400000u;
}
void LayerParameter::clear_has_smartseg_plan_view_param() {
  _has_bits_[1] &= ~0x00400000u;
}
void LayerParameter::clear_smartseg_plan_view_param() {
  if (smartseg_plan_view_param_ != NULL) smartseg_plan_view_param_->::smartseg::PlanViewParameter::Clear();
  clear_has_smartseg_plan_view_param();
}
const ::smartseg::PlanViewParameter& LayerParameter::smartseg_plan_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_plan_view_param)
  return smartseg_plan_view_param_ != NULL ? *smartseg_plan_view_param_
                         : *::smartseg::PlanViewParameter::internal_default_instance();
}
::smartseg::PlanViewParameter* LayerParameter::mutable_smartseg_plan_view_param() {
  set_has_smartseg_plan_view_param();
  if (smartseg_plan_view_param_ == NULL) {
    smartseg_plan_view_param_ = new ::smartseg::PlanViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_plan_view_param)
  return smartseg_plan_view_param_;
}
::smartseg::PlanViewParameter* LayerParameter::release_smartseg_plan_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_plan_view_param)
  clear_has_smartseg_plan_view_param();
  ::smartseg::PlanViewParameter* temp = smartseg_plan_view_param_;
  smartseg_plan_view_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_plan_view_param(::smartseg::PlanViewParameter* smartseg_plan_view_param) {
  delete smartseg_plan_view_param_;
  smartseg_plan_view_param_ = smartseg_plan_view_param;
  if (smartseg_plan_view_param) {
    set_has_smartseg_plan_view_param();
  } else {
    clear_has_smartseg_plan_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_plan_view_param)
}

// optional .smartseg.PlanViewExtractorParameter smartseg_plan_view_extractor_param = 2005;
bool LayerParameter::has_smartseg_plan_view_extractor_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void LayerParameter::set_has_smartseg_plan_view_extractor_param() {
  _has_bits_[1] |= 0x01000000u;
}
void LayerParameter::clear_has_smartseg_plan_view_extractor_param() {
  _has_bits_[1] &= ~0x01000000u;
}
void LayerParameter::clear_smartseg_plan_view_extractor_param() {
  if (smartseg_plan_view_extractor_param_ != NULL) smartseg_plan_view_extractor_param_->::smartseg::PlanViewExtractorParameter::Clear();
  clear_has_smartseg_plan_view_extractor_param();
}
const ::smartseg::PlanViewExtractorParameter& LayerParameter::smartseg_plan_view_extractor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_plan_view_extractor_param)
  return smartseg_plan_view_extractor_param_ != NULL ? *smartseg_plan_view_extractor_param_
                         : *::smartseg::PlanViewExtractorParameter::internal_default_instance();
}
::smartseg::PlanViewExtractorParameter* LayerParameter::mutable_smartseg_plan_view_extractor_param() {
  set_has_smartseg_plan_view_extractor_param();
  if (smartseg_plan_view_extractor_param_ == NULL) {
    smartseg_plan_view_extractor_param_ = new ::smartseg::PlanViewExtractorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_plan_view_extractor_param)
  return smartseg_plan_view_extractor_param_;
}
::smartseg::PlanViewExtractorParameter* LayerParameter::release_smartseg_plan_view_extractor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_plan_view_extractor_param)
  clear_has_smartseg_plan_view_extractor_param();
  ::smartseg::PlanViewExtractorParameter* temp = smartseg_plan_view_extractor_param_;
  smartseg_plan_view_extractor_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_plan_view_extractor_param(::smartseg::PlanViewExtractorParameter* smartseg_plan_view_extractor_param) {
  delete smartseg_plan_view_extractor_param_;
  smartseg_plan_view_extractor_param_ = smartseg_plan_view_extractor_param;
  if (smartseg_plan_view_extractor_param) {
    set_has_smartseg_plan_view_extractor_param();
  } else {
    clear_has_smartseg_plan_view_extractor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_plan_view_extractor_param)
}

// optional .smartseg.HorizontalViewParameter smartseg_horizontal_view_param = 2004;
bool LayerParameter::has_smartseg_horizontal_view_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void LayerParameter::set_has_smartseg_horizontal_view_param() {
  _has_bits_[1] |= 0x00800000u;
}
void LayerParameter::clear_has_smartseg_horizontal_view_param() {
  _has_bits_[1] &= ~0x00800000u;
}
void LayerParameter::clear_smartseg_horizontal_view_param() {
  if (smartseg_horizontal_view_param_ != NULL) smartseg_horizontal_view_param_->::smartseg::HorizontalViewParameter::Clear();
  clear_has_smartseg_horizontal_view_param();
}
const ::smartseg::HorizontalViewParameter& LayerParameter::smartseg_horizontal_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_horizontal_view_param)
  return smartseg_horizontal_view_param_ != NULL ? *smartseg_horizontal_view_param_
                         : *::smartseg::HorizontalViewParameter::internal_default_instance();
}
::smartseg::HorizontalViewParameter* LayerParameter::mutable_smartseg_horizontal_view_param() {
  set_has_smartseg_horizontal_view_param();
  if (smartseg_horizontal_view_param_ == NULL) {
    smartseg_horizontal_view_param_ = new ::smartseg::HorizontalViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_horizontal_view_param)
  return smartseg_horizontal_view_param_;
}
::smartseg::HorizontalViewParameter* LayerParameter::release_smartseg_horizontal_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_horizontal_view_param)
  clear_has_smartseg_horizontal_view_param();
  ::smartseg::HorizontalViewParameter* temp = smartseg_horizontal_view_param_;
  smartseg_horizontal_view_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_horizontal_view_param(::smartseg::HorizontalViewParameter* smartseg_horizontal_view_param) {
  delete smartseg_horizontal_view_param_;
  smartseg_horizontal_view_param_ = smartseg_horizontal_view_param;
  if (smartseg_horizontal_view_param) {
    set_has_smartseg_horizontal_view_param();
  } else {
    clear_has_smartseg_horizontal_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_horizontal_view_param)
}

// optional .smartseg.HorizontalViewExtractorParameter smartseg_horizontal_view_extractor_param = 2006;
bool LayerParameter::has_smartseg_horizontal_view_extractor_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void LayerParameter::set_has_smartseg_horizontal_view_extractor_param() {
  _has_bits_[1] |= 0x02000000u;
}
void LayerParameter::clear_has_smartseg_horizontal_view_extractor_param() {
  _has_bits_[1] &= ~0x02000000u;
}
void LayerParameter::clear_smartseg_horizontal_view_extractor_param() {
  if (smartseg_horizontal_view_extractor_param_ != NULL) smartseg_horizontal_view_extractor_param_->::smartseg::HorizontalViewExtractorParameter::Clear();
  clear_has_smartseg_horizontal_view_extractor_param();
}
const ::smartseg::HorizontalViewExtractorParameter& LayerParameter::smartseg_horizontal_view_extractor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
  return smartseg_horizontal_view_extractor_param_ != NULL ? *smartseg_horizontal_view_extractor_param_
                         : *::smartseg::HorizontalViewExtractorParameter::internal_default_instance();
}
::smartseg::HorizontalViewExtractorParameter* LayerParameter::mutable_smartseg_horizontal_view_extractor_param() {
  set_has_smartseg_horizontal_view_extractor_param();
  if (smartseg_horizontal_view_extractor_param_ == NULL) {
    smartseg_horizontal_view_extractor_param_ = new ::smartseg::HorizontalViewExtractorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
  return smartseg_horizontal_view_extractor_param_;
}
::smartseg::HorizontalViewExtractorParameter* LayerParameter::release_smartseg_horizontal_view_extractor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
  clear_has_smartseg_horizontal_view_extractor_param();
  ::smartseg::HorizontalViewExtractorParameter* temp = smartseg_horizontal_view_extractor_param_;
  smartseg_horizontal_view_extractor_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_horizontal_view_extractor_param(::smartseg::HorizontalViewExtractorParameter* smartseg_horizontal_view_extractor_param) {
  delete smartseg_horizontal_view_extractor_param_;
  smartseg_horizontal_view_extractor_param_ = smartseg_horizontal_view_extractor_param;
  if (smartseg_horizontal_view_extractor_param) {
    set_has_smartseg_horizontal_view_extractor_param();
  } else {
    clear_has_smartseg_horizontal_view_extractor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_horizontal_view_extractor_param)
}

// optional .smartseg.SideViewParameter smartseg_side_view_param = 2015;
bool LayerParameter::has_smartseg_side_view_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void LayerParameter::set_has_smartseg_side_view_param() {
  _has_bits_[2] |= 0x00000004u;
}
void LayerParameter::clear_has_smartseg_side_view_param() {
  _has_bits_[2] &= ~0x00000004u;
}
void LayerParameter::clear_smartseg_side_view_param() {
  if (smartseg_side_view_param_ != NULL) smartseg_side_view_param_->::smartseg::SideViewParameter::Clear();
  clear_has_smartseg_side_view_param();
}
const ::smartseg::SideViewParameter& LayerParameter::smartseg_side_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_side_view_param)
  return smartseg_side_view_param_ != NULL ? *smartseg_side_view_param_
                         : *::smartseg::SideViewParameter::internal_default_instance();
}
::smartseg::SideViewParameter* LayerParameter::mutable_smartseg_side_view_param() {
  set_has_smartseg_side_view_param();
  if (smartseg_side_view_param_ == NULL) {
    smartseg_side_view_param_ = new ::smartseg::SideViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_side_view_param)
  return smartseg_side_view_param_;
}
::smartseg::SideViewParameter* LayerParameter::release_smartseg_side_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_side_view_param)
  clear_has_smartseg_side_view_param();
  ::smartseg::SideViewParameter* temp = smartseg_side_view_param_;
  smartseg_side_view_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_side_view_param(::smartseg::SideViewParameter* smartseg_side_view_param) {
  delete smartseg_side_view_param_;
  smartseg_side_view_param_ = smartseg_side_view_param;
  if (smartseg_side_view_param) {
    set_has_smartseg_side_view_param();
  } else {
    clear_has_smartseg_side_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_side_view_param)
}

// optional .smartseg.SideViewExtractorParameter smartseg_side_view_extractor_param = 2016;
bool LayerParameter::has_smartseg_side_view_extractor_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void LayerParameter::set_has_smartseg_side_view_extractor_param() {
  _has_bits_[2] |= 0x00000008u;
}
void LayerParameter::clear_has_smartseg_side_view_extractor_param() {
  _has_bits_[2] &= ~0x00000008u;
}
void LayerParameter::clear_smartseg_side_view_extractor_param() {
  if (smartseg_side_view_extractor_param_ != NULL) smartseg_side_view_extractor_param_->::smartseg::SideViewExtractorParameter::Clear();
  clear_has_smartseg_side_view_extractor_param();
}
const ::smartseg::SideViewExtractorParameter& LayerParameter::smartseg_side_view_extractor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_side_view_extractor_param)
  return smartseg_side_view_extractor_param_ != NULL ? *smartseg_side_view_extractor_param_
                         : *::smartseg::SideViewExtractorParameter::internal_default_instance();
}
::smartseg::SideViewExtractorParameter* LayerParameter::mutable_smartseg_side_view_extractor_param() {
  set_has_smartseg_side_view_extractor_param();
  if (smartseg_side_view_extractor_param_ == NULL) {
    smartseg_side_view_extractor_param_ = new ::smartseg::SideViewExtractorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_side_view_extractor_param)
  return smartseg_side_view_extractor_param_;
}
::smartseg::SideViewExtractorParameter* LayerParameter::release_smartseg_side_view_extractor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_side_view_extractor_param)
  clear_has_smartseg_side_view_extractor_param();
  ::smartseg::SideViewExtractorParameter* temp = smartseg_side_view_extractor_param_;
  smartseg_side_view_extractor_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_side_view_extractor_param(::smartseg::SideViewExtractorParameter* smartseg_side_view_extractor_param) {
  delete smartseg_side_view_extractor_param_;
  smartseg_side_view_extractor_param_ = smartseg_side_view_extractor_param;
  if (smartseg_side_view_extractor_param) {
    set_has_smartseg_side_view_extractor_param();
  } else {
    clear_has_smartseg_side_view_extractor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_side_view_extractor_param)
}

// optional .smartseg.SegmentorParameter smartseg_segmentor_param = 2007;
bool LayerParameter::has_smartseg_segmentor_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void LayerParameter::set_has_smartseg_segmentor_param() {
  _has_bits_[1] |= 0x04000000u;
}
void LayerParameter::clear_has_smartseg_segmentor_param() {
  _has_bits_[1] &= ~0x04000000u;
}
void LayerParameter::clear_smartseg_segmentor_param() {
  if (smartseg_segmentor_param_ != NULL) smartseg_segmentor_param_->::smartseg::SegmentorParameter::Clear();
  clear_has_smartseg_segmentor_param();
}
const ::smartseg::SegmentorParameter& LayerParameter::smartseg_segmentor_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_segmentor_param)
  return smartseg_segmentor_param_ != NULL ? *smartseg_segmentor_param_
                         : *::smartseg::SegmentorParameter::internal_default_instance();
}
::smartseg::SegmentorParameter* LayerParameter::mutable_smartseg_segmentor_param() {
  set_has_smartseg_segmentor_param();
  if (smartseg_segmentor_param_ == NULL) {
    smartseg_segmentor_param_ = new ::smartseg::SegmentorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_segmentor_param)
  return smartseg_segmentor_param_;
}
::smartseg::SegmentorParameter* LayerParameter::release_smartseg_segmentor_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_segmentor_param)
  clear_has_smartseg_segmentor_param();
  ::smartseg::SegmentorParameter* temp = smartseg_segmentor_param_;
  smartseg_segmentor_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_segmentor_param(::smartseg::SegmentorParameter* smartseg_segmentor_param) {
  delete smartseg_segmentor_param_;
  smartseg_segmentor_param_ = smartseg_segmentor_param;
  if (smartseg_segmentor_param) {
    set_has_smartseg_segmentor_param();
  } else {
    clear_has_smartseg_segmentor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_segmentor_param)
}

// optional .smartseg.FrameTargetParameter smartseg_frame_target_param = 2008;
bool LayerParameter::has_smartseg_frame_target_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void LayerParameter::set_has_smartseg_frame_target_param() {
  _has_bits_[1] |= 0x08000000u;
}
void LayerParameter::clear_has_smartseg_frame_target_param() {
  _has_bits_[1] &= ~0x08000000u;
}
void LayerParameter::clear_smartseg_frame_target_param() {
  if (smartseg_frame_target_param_ != NULL) smartseg_frame_target_param_->::smartseg::FrameTargetParameter::Clear();
  clear_has_smartseg_frame_target_param();
}
const ::smartseg::FrameTargetParameter& LayerParameter::smartseg_frame_target_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_frame_target_param)
  return smartseg_frame_target_param_ != NULL ? *smartseg_frame_target_param_
                         : *::smartseg::FrameTargetParameter::internal_default_instance();
}
::smartseg::FrameTargetParameter* LayerParameter::mutable_smartseg_frame_target_param() {
  set_has_smartseg_frame_target_param();
  if (smartseg_frame_target_param_ == NULL) {
    smartseg_frame_target_param_ = new ::smartseg::FrameTargetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_frame_target_param)
  return smartseg_frame_target_param_;
}
::smartseg::FrameTargetParameter* LayerParameter::release_smartseg_frame_target_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_frame_target_param)
  clear_has_smartseg_frame_target_param();
  ::smartseg::FrameTargetParameter* temp = smartseg_frame_target_param_;
  smartseg_frame_target_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_frame_target_param(::smartseg::FrameTargetParameter* smartseg_frame_target_param) {
  delete smartseg_frame_target_param_;
  smartseg_frame_target_param_ = smartseg_frame_target_param;
  if (smartseg_frame_target_param) {
    set_has_smartseg_frame_target_param();
  } else {
    clear_has_smartseg_frame_target_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_frame_target_param)
}

// optional .smartseg.OnlineNormParameter smartseg_online_norm_param = 2010;
bool LayerParameter::has_smartseg_online_norm_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void LayerParameter::set_has_smartseg_online_norm_param() {
  _has_bits_[1] |= 0x20000000u;
}
void LayerParameter::clear_has_smartseg_online_norm_param() {
  _has_bits_[1] &= ~0x20000000u;
}
void LayerParameter::clear_smartseg_online_norm_param() {
  if (smartseg_online_norm_param_ != NULL) smartseg_online_norm_param_->::smartseg::OnlineNormParameter::Clear();
  clear_has_smartseg_online_norm_param();
}
const ::smartseg::OnlineNormParameter& LayerParameter::smartseg_online_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_online_norm_param)
  return smartseg_online_norm_param_ != NULL ? *smartseg_online_norm_param_
                         : *::smartseg::OnlineNormParameter::internal_default_instance();
}
::smartseg::OnlineNormParameter* LayerParameter::mutable_smartseg_online_norm_param() {
  set_has_smartseg_online_norm_param();
  if (smartseg_online_norm_param_ == NULL) {
    smartseg_online_norm_param_ = new ::smartseg::OnlineNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_online_norm_param)
  return smartseg_online_norm_param_;
}
::smartseg::OnlineNormParameter* LayerParameter::release_smartseg_online_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_online_norm_param)
  clear_has_smartseg_online_norm_param();
  ::smartseg::OnlineNormParameter* temp = smartseg_online_norm_param_;
  smartseg_online_norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_online_norm_param(::smartseg::OnlineNormParameter* smartseg_online_norm_param) {
  delete smartseg_online_norm_param_;
  smartseg_online_norm_param_ = smartseg_online_norm_param;
  if (smartseg_online_norm_param) {
    set_has_smartseg_online_norm_param();
  } else {
    clear_has_smartseg_online_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_online_norm_param)
}

// optional .smartseg.ViewPoolingParameter smartseg_view_pooling_param = 2011;
bool LayerParameter::has_smartseg_view_pooling_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void LayerParameter::set_has_smartseg_view_pooling_param() {
  _has_bits_[1] |= 0x40000000u;
}
void LayerParameter::clear_has_smartseg_view_pooling_param() {
  _has_bits_[1] &= ~0x40000000u;
}
void LayerParameter::clear_smartseg_view_pooling_param() {
  if (smartseg_view_pooling_param_ != NULL) smartseg_view_pooling_param_->::smartseg::ViewPoolingParameter::Clear();
  clear_has_smartseg_view_pooling_param();
}
const ::smartseg::ViewPoolingParameter& LayerParameter::smartseg_view_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_view_pooling_param)
  return smartseg_view_pooling_param_ != NULL ? *smartseg_view_pooling_param_
                         : *::smartseg::ViewPoolingParameter::internal_default_instance();
}
::smartseg::ViewPoolingParameter* LayerParameter::mutable_smartseg_view_pooling_param() {
  set_has_smartseg_view_pooling_param();
  if (smartseg_view_pooling_param_ == NULL) {
    smartseg_view_pooling_param_ = new ::smartseg::ViewPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_view_pooling_param)
  return smartseg_view_pooling_param_;
}
::smartseg::ViewPoolingParameter* LayerParameter::release_smartseg_view_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_view_pooling_param)
  clear_has_smartseg_view_pooling_param();
  ::smartseg::ViewPoolingParameter* temp = smartseg_view_pooling_param_;
  smartseg_view_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_view_pooling_param(::smartseg::ViewPoolingParameter* smartseg_view_pooling_param) {
  delete smartseg_view_pooling_param_;
  smartseg_view_pooling_param_ = smartseg_view_pooling_param;
  if (smartseg_view_pooling_param) {
    set_has_smartseg_view_pooling_param();
  } else {
    clear_has_smartseg_view_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_view_pooling_param)
}

// optional .smartseg.ViewUnpoolingParameter smartseg_view_unpooling_param = 2012;
bool LayerParameter::has_smartseg_view_unpooling_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void LayerParameter::set_has_smartseg_view_unpooling_param() {
  _has_bits_[1] |= 0x80000000u;
}
void LayerParameter::clear_has_smartseg_view_unpooling_param() {
  _has_bits_[1] &= ~0x80000000u;
}
void LayerParameter::clear_smartseg_view_unpooling_param() {
  if (smartseg_view_unpooling_param_ != NULL) smartseg_view_unpooling_param_->::smartseg::ViewUnpoolingParameter::Clear();
  clear_has_smartseg_view_unpooling_param();
}
const ::smartseg::ViewUnpoolingParameter& LayerParameter::smartseg_view_unpooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_view_unpooling_param)
  return smartseg_view_unpooling_param_ != NULL ? *smartseg_view_unpooling_param_
                         : *::smartseg::ViewUnpoolingParameter::internal_default_instance();
}
::smartseg::ViewUnpoolingParameter* LayerParameter::mutable_smartseg_view_unpooling_param() {
  set_has_smartseg_view_unpooling_param();
  if (smartseg_view_unpooling_param_ == NULL) {
    smartseg_view_unpooling_param_ = new ::smartseg::ViewUnpoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_view_unpooling_param)
  return smartseg_view_unpooling_param_;
}
::smartseg::ViewUnpoolingParameter* LayerParameter::release_smartseg_view_unpooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_view_unpooling_param)
  clear_has_smartseg_view_unpooling_param();
  ::smartseg::ViewUnpoolingParameter* temp = smartseg_view_unpooling_param_;
  smartseg_view_unpooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_view_unpooling_param(::smartseg::ViewUnpoolingParameter* smartseg_view_unpooling_param) {
  delete smartseg_view_unpooling_param_;
  smartseg_view_unpooling_param_ = smartseg_view_unpooling_param;
  if (smartseg_view_unpooling_param) {
    set_has_smartseg_view_unpooling_param();
  } else {
    clear_has_smartseg_view_unpooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_view_unpooling_param)
}

// optional .smartseg.PointInterpolationParameter smartseg_point_interpolation_param = 2013;
bool LayerParameter::has_smartseg_point_interpolation_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void LayerParameter::set_has_smartseg_point_interpolation_param() {
  _has_bits_[2] |= 0x00000001u;
}
void LayerParameter::clear_has_smartseg_point_interpolation_param() {
  _has_bits_[2] &= ~0x00000001u;
}
void LayerParameter::clear_smartseg_point_interpolation_param() {
  if (smartseg_point_interpolation_param_ != NULL) smartseg_point_interpolation_param_->::smartseg::PointInterpolationParameter::Clear();
  clear_has_smartseg_point_interpolation_param();
}
const ::smartseg::PointInterpolationParameter& LayerParameter::smartseg_point_interpolation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_point_interpolation_param)
  return smartseg_point_interpolation_param_ != NULL ? *smartseg_point_interpolation_param_
                         : *::smartseg::PointInterpolationParameter::internal_default_instance();
}
::smartseg::PointInterpolationParameter* LayerParameter::mutable_smartseg_point_interpolation_param() {
  set_has_smartseg_point_interpolation_param();
  if (smartseg_point_interpolation_param_ == NULL) {
    smartseg_point_interpolation_param_ = new ::smartseg::PointInterpolationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_point_interpolation_param)
  return smartseg_point_interpolation_param_;
}
::smartseg::PointInterpolationParameter* LayerParameter::release_smartseg_point_interpolation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_point_interpolation_param)
  clear_has_smartseg_point_interpolation_param();
  ::smartseg::PointInterpolationParameter* temp = smartseg_point_interpolation_param_;
  smartseg_point_interpolation_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_point_interpolation_param(::smartseg::PointInterpolationParameter* smartseg_point_interpolation_param) {
  delete smartseg_point_interpolation_param_;
  smartseg_point_interpolation_param_ = smartseg_point_interpolation_param;
  if (smartseg_point_interpolation_param) {
    set_has_smartseg_point_interpolation_param();
  } else {
    clear_has_smartseg_point_interpolation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_point_interpolation_param)
}

// optional .smartseg.DilationParameter smartseg_dilation_param = 2014;
bool LayerParameter::has_smartseg_dilation_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void LayerParameter::set_has_smartseg_dilation_param() {
  _has_bits_[2] |= 0x00000002u;
}
void LayerParameter::clear_has_smartseg_dilation_param() {
  _has_bits_[2] &= ~0x00000002u;
}
void LayerParameter::clear_smartseg_dilation_param() {
  if (smartseg_dilation_param_ != NULL) smartseg_dilation_param_->::smartseg::DilationParameter::Clear();
  clear_has_smartseg_dilation_param();
}
const ::smartseg::DilationParameter& LayerParameter::smartseg_dilation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smartseg_dilation_param)
  return smartseg_dilation_param_ != NULL ? *smartseg_dilation_param_
                         : *::smartseg::DilationParameter::internal_default_instance();
}
::smartseg::DilationParameter* LayerParameter::mutable_smartseg_dilation_param() {
  set_has_smartseg_dilation_param();
  if (smartseg_dilation_param_ == NULL) {
    smartseg_dilation_param_ = new ::smartseg::DilationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smartseg_dilation_param)
  return smartseg_dilation_param_;
}
::smartseg::DilationParameter* LayerParameter::release_smartseg_dilation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smartseg_dilation_param)
  clear_has_smartseg_dilation_param();
  ::smartseg::DilationParameter* temp = smartseg_dilation_param_;
  smartseg_dilation_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_smartseg_dilation_param(::smartseg::DilationParameter* smartseg_dilation_param) {
  delete smartseg_dilation_param_;
  smartseg_dilation_param_ = smartseg_dilation_param;
  if (smartseg_dilation_param) {
    set_has_smartseg_dilation_param();
  } else {
    clear_has_smartseg_dilation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smartseg_dilation_param)
}

// optional .caffe_fcn_data_layer.FCNImageDataParameter fcn_image_data_param = 3000;
bool LayerParameter::has_fcn_image_data_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void LayerParameter::set_has_fcn_image_data_param() {
  _has_bits_[2] |= 0x00000010u;
}
void LayerParameter::clear_has_fcn_image_data_param() {
  _has_bits_[2] &= ~0x00000010u;
}
void LayerParameter::clear_fcn_image_data_param() {
  if (fcn_image_data_param_ != NULL) fcn_image_data_param_->::caffe_fcn_data_layer::FCNImageDataParameter::Clear();
  clear_has_fcn_image_data_param();
}
const ::caffe_fcn_data_layer::FCNImageDataParameter& LayerParameter::fcn_image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.fcn_image_data_param)
  return fcn_image_data_param_ != NULL ? *fcn_image_data_param_
                         : *::caffe_fcn_data_layer::FCNImageDataParameter::internal_default_instance();
}
::caffe_fcn_data_layer::FCNImageDataParameter* LayerParameter::mutable_fcn_image_data_param() {
  set_has_fcn_image_data_param();
  if (fcn_image_data_param_ == NULL) {
    fcn_image_data_param_ = new ::caffe_fcn_data_layer::FCNImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.fcn_image_data_param)
  return fcn_image_data_param_;
}
::caffe_fcn_data_layer::FCNImageDataParameter* LayerParameter::release_fcn_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.fcn_image_data_param)
  clear_has_fcn_image_data_param();
  ::caffe_fcn_data_layer::FCNImageDataParameter* temp = fcn_image_data_param_;
  fcn_image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_fcn_image_data_param(::caffe_fcn_data_layer::FCNImageDataParameter* fcn_image_data_param) {
  delete fcn_image_data_param_;
  fcn_image_data_param_ = fcn_image_data_param;
  if (fcn_image_data_param) {
    set_has_fcn_image_data_param();
  } else {
    clear_has_fcn_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.fcn_image_data_param)
}

// optional .caffe.ResizeParameter resize_param = 3001;
bool LayerParameter::has_resize_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void LayerParameter::set_has_resize_param() {
  _has_bits_[2] |= 0x00000020u;
}
void LayerParameter::clear_has_resize_param() {
  _has_bits_[2] &= ~0x00000020u;
}
void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
const ::caffe::ResizeParameter& LayerParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_
                         : *::caffe::ResizeParameter::internal_default_instance();
}
::caffe::ResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) {
    resize_param_ = new ::caffe::ResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resize_param)
  return resize_param_;
}
::caffe::ResizeParameter* LayerParameter::release_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resize_param)
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resize_param)
}

// optional .caffe.LabelRelatedDropoutParam label_related_dropout_param = 3002;
bool LayerParameter::has_label_related_dropout_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void LayerParameter::set_has_label_related_dropout_param() {
  _has_bits_[2] |= 0x00000040u;
}
void LayerParameter::clear_has_label_related_dropout_param() {
  _has_bits_[2] &= ~0x00000040u;
}
void LayerParameter::clear_label_related_dropout_param() {
  if (label_related_dropout_param_ != NULL) label_related_dropout_param_->::caffe::LabelRelatedDropoutParam::Clear();
  clear_has_label_related_dropout_param();
}
const ::caffe::LabelRelatedDropoutParam& LayerParameter::label_related_dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_related_dropout_param)
  return label_related_dropout_param_ != NULL ? *label_related_dropout_param_
                         : *::caffe::LabelRelatedDropoutParam::internal_default_instance();
}
::caffe::LabelRelatedDropoutParam* LayerParameter::mutable_label_related_dropout_param() {
  set_has_label_related_dropout_param();
  if (label_related_dropout_param_ == NULL) {
    label_related_dropout_param_ = new ::caffe::LabelRelatedDropoutParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_related_dropout_param)
  return label_related_dropout_param_;
}
::caffe::LabelRelatedDropoutParam* LayerParameter::release_label_related_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_related_dropout_param)
  clear_has_label_related_dropout_param();
  ::caffe::LabelRelatedDropoutParam* temp = label_related_dropout_param_;
  label_related_dropout_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_related_dropout_param(::caffe::LabelRelatedDropoutParam* label_related_dropout_param) {
  delete label_related_dropout_param_;
  label_related_dropout_param_ = label_related_dropout_param;
  if (label_related_dropout_param) {
    set_has_label_related_dropout_param();
  } else {
    clear_has_label_related_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_related_dropout_param)
}

// optional .caffe.InceptionParameter inception_param = 3003;
bool LayerParameter::has_inception_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void LayerParameter::set_has_inception_param() {
  _has_bits_[2] |= 0x00000080u;
}
void LayerParameter::clear_has_inception_param() {
  _has_bits_[2] &= ~0x00000080u;
}
void LayerParameter::clear_inception_param() {
  if (inception_param_ != NULL) inception_param_->::caffe::InceptionParameter::Clear();
  clear_has_inception_param();
}
const ::caffe::InceptionParameter& LayerParameter::inception_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inception_param)
  return inception_param_ != NULL ? *inception_param_
                         : *::caffe::InceptionParameter::internal_default_instance();
}
::caffe::InceptionParameter* LayerParameter::mutable_inception_param() {
  set_has_inception_param();
  if (inception_param_ == NULL) {
    inception_param_ = new ::caffe::InceptionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inception_param)
  return inception_param_;
}
::caffe::InceptionParameter* LayerParameter::release_inception_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inception_param)
  clear_has_inception_param();
  ::caffe::InceptionParameter* temp = inception_param_;
  inception_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inception_param(::caffe::InceptionParameter* inception_param) {
  delete inception_param_;
  inception_param_ = inception_param;
  if (inception_param) {
    set_has_inception_param();
  } else {
    clear_has_inception_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inception_param)
}

// optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 3004;
bool LayerParameter::has_element_hinge_loss_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void LayerParameter::set_has_element_hinge_loss_param() {
  _has_bits_[2] |= 0x00000100u;
}
void LayerParameter::clear_has_element_hinge_loss_param() {
  _has_bits_[2] &= ~0x00000100u;
}
void LayerParameter::clear_element_hinge_loss_param() {
  if (element_hinge_loss_param_ != NULL) element_hinge_loss_param_->::caffe::ElementHingeLossParameter::Clear();
  clear_has_element_hinge_loss_param();
}
const ::caffe::ElementHingeLossParameter& LayerParameter::element_hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.element_hinge_loss_param)
  return element_hinge_loss_param_ != NULL ? *element_hinge_loss_param_
                         : *::caffe::ElementHingeLossParameter::internal_default_instance();
}
::caffe::ElementHingeLossParameter* LayerParameter::mutable_element_hinge_loss_param() {
  set_has_element_hinge_loss_param();
  if (element_hinge_loss_param_ == NULL) {
    element_hinge_loss_param_ = new ::caffe::ElementHingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.element_hinge_loss_param)
  return element_hinge_loss_param_;
}
::caffe::ElementHingeLossParameter* LayerParameter::release_element_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.element_hinge_loss_param)
  clear_has_element_hinge_loss_param();
  ::caffe::ElementHingeLossParameter* temp = element_hinge_loss_param_;
  element_hinge_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_element_hinge_loss_param(::caffe::ElementHingeLossParameter* element_hinge_loss_param) {
  delete element_hinge_loss_param_;
  element_hinge_loss_param_ = element_hinge_loss_param;
  if (element_hinge_loss_param) {
    set_has_element_hinge_loss_param();
  } else {
    clear_has_element_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.element_hinge_loss_param)
}

// optional .caffe.PyramidDataParameter pyramid_data_param = 3005;
bool LayerParameter::has_pyramid_data_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void LayerParameter::set_has_pyramid_data_param() {
  _has_bits_[2] |= 0x00000200u;
}
void LayerParameter::clear_has_pyramid_data_param() {
  _has_bits_[2] &= ~0x00000200u;
}
void LayerParameter::clear_pyramid_data_param() {
  if (pyramid_data_param_ != NULL) pyramid_data_param_->::caffe::PyramidDataParameter::Clear();
  clear_has_pyramid_data_param();
}
const ::caffe::PyramidDataParameter& LayerParameter::pyramid_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pyramid_data_param)
  return pyramid_data_param_ != NULL ? *pyramid_data_param_
                         : *::caffe::PyramidDataParameter::internal_default_instance();
}
::caffe::PyramidDataParameter* LayerParameter::mutable_pyramid_data_param() {
  set_has_pyramid_data_param();
  if (pyramid_data_param_ == NULL) {
    pyramid_data_param_ = new ::caffe::PyramidDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pyramid_data_param)
  return pyramid_data_param_;
}
::caffe::PyramidDataParameter* LayerParameter::release_pyramid_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pyramid_data_param)
  clear_has_pyramid_data_param();
  ::caffe::PyramidDataParameter* temp = pyramid_data_param_;
  pyramid_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pyramid_data_param(::caffe::PyramidDataParameter* pyramid_data_param) {
  delete pyramid_data_param_;
  pyramid_data_param_ = pyramid_data_param;
  if (pyramid_data_param) {
    set_has_pyramid_data_param();
  } else {
    clear_has_pyramid_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pyramid_data_param)
}

// optional .caffe.DetectionOutputParameter detection_output_param = 3006;
bool LayerParameter::has_detection_output_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void LayerParameter::set_has_detection_output_param() {
  _has_bits_[2] |= 0x00000400u;
}
void LayerParameter::clear_has_detection_output_param() {
  _has_bits_[2] &= ~0x00000400u;
}
void LayerParameter::clear_detection_output_param() {
  if (detection_output_param_ != NULL) detection_output_param_->::caffe::DetectionOutputParameter::Clear();
  clear_has_detection_output_param();
}
const ::caffe::DetectionOutputParameter& LayerParameter::detection_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_output_param)
  return detection_output_param_ != NULL ? *detection_output_param_
                         : *::caffe::DetectionOutputParameter::internal_default_instance();
}
::caffe::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() {
  set_has_detection_output_param();
  if (detection_output_param_ == NULL) {
    detection_output_param_ = new ::caffe::DetectionOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_output_param)
  return detection_output_param_;
}
::caffe::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_output_param)
  clear_has_detection_output_param();
  ::caffe::DetectionOutputParameter* temp = detection_output_param_;
  detection_output_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_detection_output_param(::caffe::DetectionOutputParameter* detection_output_param) {
  delete detection_output_param_;
  detection_output_param_ = detection_output_param;
  if (detection_output_param) {
    set_has_detection_output_param();
  } else {
    clear_has_detection_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_output_param)
}

// optional .caffe.ROIDataParam roi_data_param = 3007;
bool LayerParameter::has_roi_data_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void LayerParameter::set_has_roi_data_param() {
  _has_bits_[2] |= 0x00000800u;
}
void LayerParameter::clear_has_roi_data_param() {
  _has_bits_[2] &= ~0x00000800u;
}
void LayerParameter::clear_roi_data_param() {
  if (roi_data_param_ != NULL) roi_data_param_->::caffe::ROIDataParam::Clear();
  clear_has_roi_data_param();
}
const ::caffe::ROIDataParam& LayerParameter::roi_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_data_param)
  return roi_data_param_ != NULL ? *roi_data_param_
                         : *::caffe::ROIDataParam::internal_default_instance();
}
::caffe::ROIDataParam* LayerParameter::mutable_roi_data_param() {
  set_has_roi_data_param();
  if (roi_data_param_ == NULL) {
    roi_data_param_ = new ::caffe::ROIDataParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_data_param)
  return roi_data_param_;
}
::caffe::ROIDataParam* LayerParameter::release_roi_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_data_param)
  clear_has_roi_data_param();
  ::caffe::ROIDataParam* temp = roi_data_param_;
  roi_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_roi_data_param(::caffe::ROIDataParam* roi_data_param) {
  delete roi_data_param_;
  roi_data_param_ = roi_data_param;
  if (roi_data_param) {
    set_has_roi_data_param();
  } else {
    clear_has_roi_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_data_param)
}

// optional .caffe.ROI2HeatMapParam roi_2_heatmap_param = 3008;
bool LayerParameter::has_roi_2_heatmap_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void LayerParameter::set_has_roi_2_heatmap_param() {
  _has_bits_[2] |= 0x00001000u;
}
void LayerParameter::clear_has_roi_2_heatmap_param() {
  _has_bits_[2] &= ~0x00001000u;
}
void LayerParameter::clear_roi_2_heatmap_param() {
  if (roi_2_heatmap_param_ != NULL) roi_2_heatmap_param_->::caffe::ROI2HeatMapParam::Clear();
  clear_has_roi_2_heatmap_param();
}
const ::caffe::ROI2HeatMapParam& LayerParameter::roi_2_heatmap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_2_heatmap_param)
  return roi_2_heatmap_param_ != NULL ? *roi_2_heatmap_param_
                         : *::caffe::ROI2HeatMapParam::internal_default_instance();
}
::caffe::ROI2HeatMapParam* LayerParameter::mutable_roi_2_heatmap_param() {
  set_has_roi_2_heatmap_param();
  if (roi_2_heatmap_param_ == NULL) {
    roi_2_heatmap_param_ = new ::caffe::ROI2HeatMapParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_2_heatmap_param)
  return roi_2_heatmap_param_;
}
::caffe::ROI2HeatMapParam* LayerParameter::release_roi_2_heatmap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_2_heatmap_param)
  clear_has_roi_2_heatmap_param();
  ::caffe::ROI2HeatMapParam* temp = roi_2_heatmap_param_;
  roi_2_heatmap_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_roi_2_heatmap_param(::caffe::ROI2HeatMapParam* roi_2_heatmap_param) {
  delete roi_2_heatmap_param_;
  roi_2_heatmap_param_ = roi_2_heatmap_param;
  if (roi_2_heatmap_param) {
    set_has_roi_2_heatmap_param();
  } else {
    clear_has_roi_2_heatmap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_2_heatmap_param)
}

// optional .caffe.ROIShowParam roi_show_param = 3009;
bool LayerParameter::has_roi_show_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void LayerParameter::set_has_roi_show_param() {
  _has_bits_[2] |= 0x00002000u;
}
void LayerParameter::clear_has_roi_show_param() {
  _has_bits_[2] &= ~0x00002000u;
}
void LayerParameter::clear_roi_show_param() {
  if (roi_show_param_ != NULL) roi_show_param_->::caffe::ROIShowParam::Clear();
  clear_has_roi_show_param();
}
const ::caffe::ROIShowParam& LayerParameter::roi_show_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_show_param)
  return roi_show_param_ != NULL ? *roi_show_param_
                         : *::caffe::ROIShowParam::internal_default_instance();
}
::caffe::ROIShowParam* LayerParameter::mutable_roi_show_param() {
  set_has_roi_show_param();
  if (roi_show_param_ == NULL) {
    roi_show_param_ = new ::caffe::ROIShowParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_show_param)
  return roi_show_param_;
}
::caffe::ROIShowParam* LayerParameter::release_roi_show_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_show_param)
  clear_has_roi_show_param();
  ::caffe::ROIShowParam* temp = roi_show_param_;
  roi_show_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_roi_show_param(::caffe::ROIShowParam* roi_show_param) {
  delete roi_show_param_;
  roi_show_param_ = roi_show_param;
  if (roi_show_param) {
    set_has_roi_show_param();
  } else {
    clear_has_roi_show_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_show_param)
}

// optional .caffe.ROIRefineParam roi_refine_param = 3010;
bool LayerParameter::has_roi_refine_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void LayerParameter::set_has_roi_refine_param() {
  _has_bits_[2] |= 0x00004000u;
}
void LayerParameter::clear_has_roi_refine_param() {
  _has_bits_[2] &= ~0x00004000u;
}
void LayerParameter::clear_roi_refine_param() {
  if (roi_refine_param_ != NULL) roi_refine_param_->::caffe::ROIRefineParam::Clear();
  clear_has_roi_refine_param();
}
const ::caffe::ROIRefineParam& LayerParameter::roi_refine_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_refine_param)
  return roi_refine_param_ != NULL ? *roi_refine_param_
                         : *::caffe::ROIRefineParam::internal_default_instance();
}
::caffe::ROIRefineParam* LayerParameter::mutable_roi_refine_param() {
  set_has_roi_refine_param();
  if (roi_refine_param_ == NULL) {
    roi_refine_param_ = new ::caffe::ROIRefineParam;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_refine_param)
  return roi_refine_param_;
}
::caffe::ROIRefineParam* LayerParameter::release_roi_refine_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_refine_param)
  clear_has_roi_refine_param();
  ::caffe::ROIRefineParam* temp = roi_refine_param_;
  roi_refine_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_roi_refine_param(::caffe::ROIRefineParam* roi_refine_param) {
  delete roi_refine_param_;
  roi_refine_param_ = roi_refine_param;
  if (roi_refine_param) {
    set_has_roi_refine_param();
  } else {
    clear_has_roi_refine_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_refine_param)
}

// optional .caffe.CropParameter crop_param = 3011;
bool LayerParameter::has_crop_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void LayerParameter::set_has_crop_param() {
  _has_bits_[2] |= 0x00008000u;
}
void LayerParameter::clear_has_crop_param() {
  _has_bits_[2] &= ~0x00008000u;
}
void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_
                         : *::caffe::CropParameter::internal_default_instance();
}
::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 5000;
bool LayerParameter::has_deformable_convolution_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
void LayerParameter::set_has_deformable_convolution_param() {
  _has_bits_[2] |= 0x00800000u;
}
void LayerParameter::clear_has_deformable_convolution_param() {
  _has_bits_[2] &= ~0x00800000u;
}
void LayerParameter::clear_deformable_convolution_param() {
  if (deformable_convolution_param_ != NULL) deformable_convolution_param_->::caffe::DeformableConvolutionParameter::Clear();
  clear_has_deformable_convolution_param();
}
const ::caffe::DeformableConvolutionParameter& LayerParameter::deformable_convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_ != NULL ? *deformable_convolution_param_
                         : *::caffe::DeformableConvolutionParameter::internal_default_instance();
}
::caffe::DeformableConvolutionParameter* LayerParameter::mutable_deformable_convolution_param() {
  set_has_deformable_convolution_param();
  if (deformable_convolution_param_ == NULL) {
    deformable_convolution_param_ = new ::caffe::DeformableConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_;
}
::caffe::DeformableConvolutionParameter* LayerParameter::release_deformable_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.deformable_convolution_param)
  clear_has_deformable_convolution_param();
  ::caffe::DeformableConvolutionParameter* temp = deformable_convolution_param_;
  deformable_convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_deformable_convolution_param(::caffe::DeformableConvolutionParameter* deformable_convolution_param) {
  delete deformable_convolution_param_;
  deformable_convolution_param_ = deformable_convolution_param;
  if (deformable_convolution_param) {
    set_has_deformable_convolution_param();
  } else {
    clear_has_deformable_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.deformable_convolution_param)
}

// optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
bool LayerParameter::has_image_data_arbitrary_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
void LayerParameter::set_has_image_data_arbitrary_param() {
  _has_bits_[2] |= 0x01000000u;
}
void LayerParameter::clear_has_image_data_arbitrary_param() {
  _has_bits_[2] &= ~0x01000000u;
}
void LayerParameter::clear_image_data_arbitrary_param() {
  if (image_data_arbitrary_param_ != NULL) image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
  clear_has_image_data_arbitrary_param();
}
const ::caffe::ImageDataArbitraryParameter& LayerParameter::image_data_arbitrary_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_ != NULL ? *image_data_arbitrary_param_
                         : *::caffe::ImageDataArbitraryParameter::internal_default_instance();
}
::caffe::ImageDataArbitraryParameter* LayerParameter::mutable_image_data_arbitrary_param() {
  set_has_image_data_arbitrary_param();
  if (image_data_arbitrary_param_ == NULL) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_;
}
::caffe::ImageDataArbitraryParameter* LayerParameter::release_image_data_arbitrary_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_arbitrary_param)
  clear_has_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* temp = image_data_arbitrary_param_;
  image_data_arbitrary_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param) {
  delete image_data_arbitrary_param_;
  image_data_arbitrary_param_ = image_data_arbitrary_param;
  if (image_data_arbitrary_param) {
    set_has_image_data_arbitrary_param();
  } else {
    clear_has_image_data_arbitrary_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_arbitrary_param)
}

// optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
bool LayerParameter::has_expandlabel_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
void LayerParameter::set_has_expandlabel_param() {
  _has_bits_[2] |= 0x02000000u;
}
void LayerParameter::clear_has_expandlabel_param() {
  _has_bits_[2] &= ~0x02000000u;
}
void LayerParameter::clear_expandlabel_param() {
  if (expandlabel_param_ != NULL) expandlabel_param_->::caffe::ExpandlabelParameter::Clear();
  clear_has_expandlabel_param();
}
const ::caffe::ExpandlabelParameter& LayerParameter::expandlabel_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.expandlabel_param)
  return expandlabel_param_ != NULL ? *expandlabel_param_
                         : *::caffe::ExpandlabelParameter::internal_default_instance();
}
::caffe::ExpandlabelParameter* LayerParameter::mutable_expandlabel_param() {
  set_has_expandlabel_param();
  if (expandlabel_param_ == NULL) {
    expandlabel_param_ = new ::caffe::ExpandlabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.expandlabel_param)
  return expandlabel_param_;
}
::caffe::ExpandlabelParameter* LayerParameter::release_expandlabel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.expandlabel_param)
  clear_has_expandlabel_param();
  ::caffe::ExpandlabelParameter* temp = expandlabel_param_;
  expandlabel_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_expandlabel_param(::caffe::ExpandlabelParameter* expandlabel_param) {
  delete expandlabel_param_;
  expandlabel_param_ = expandlabel_param;
  if (expandlabel_param) {
    set_has_expandlabel_param();
  } else {
    clear_has_expandlabel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.expandlabel_param)
}

// optional .caffe.ManipulateLossParameter manipulate_loss_param = 5004;
bool LayerParameter::has_manipulate_loss_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
void LayerParameter::set_has_manipulate_loss_param() {
  _has_bits_[2] |= 0x04000000u;
}
void LayerParameter::clear_has_manipulate_loss_param() {
  _has_bits_[2] &= ~0x04000000u;
}
void LayerParameter::clear_manipulate_loss_param() {
  if (manipulate_loss_param_ != NULL) manipulate_loss_param_->::caffe::ManipulateLossParameter::Clear();
  clear_has_manipulate_loss_param();
}
const ::caffe::ManipulateLossParameter& LayerParameter::manipulate_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.manipulate_loss_param)
  return manipulate_loss_param_ != NULL ? *manipulate_loss_param_
                         : *::caffe::ManipulateLossParameter::internal_default_instance();
}
::caffe::ManipulateLossParameter* LayerParameter::mutable_manipulate_loss_param() {
  set_has_manipulate_loss_param();
  if (manipulate_loss_param_ == NULL) {
    manipulate_loss_param_ = new ::caffe::ManipulateLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.manipulate_loss_param)
  return manipulate_loss_param_;
}
::caffe::ManipulateLossParameter* LayerParameter::release_manipulate_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.manipulate_loss_param)
  clear_has_manipulate_loss_param();
  ::caffe::ManipulateLossParameter* temp = manipulate_loss_param_;
  manipulate_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_manipulate_loss_param(::caffe::ManipulateLossParameter* manipulate_loss_param) {
  delete manipulate_loss_param_;
  manipulate_loss_param_ = manipulate_loss_param;
  if (manipulate_loss_param) {
    set_has_manipulate_loss_param();
  } else {
    clear_has_manipulate_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.manipulate_loss_param)
}

// optional .caffe.ImageLabelDataParameter image_label_data_param = 5005;
bool LayerParameter::has_image_label_data_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
void LayerParameter::set_has_image_label_data_param() {
  _has_bits_[2] |= 0x08000000u;
}
void LayerParameter::clear_has_image_label_data_param() {
  _has_bits_[2] &= ~0x08000000u;
}
void LayerParameter::clear_image_label_data_param() {
  if (image_label_data_param_ != NULL) image_label_data_param_->::caffe::ImageLabelDataParameter::Clear();
  clear_has_image_label_data_param();
}
const ::caffe::ImageLabelDataParameter& LayerParameter::image_label_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_label_data_param)
  return image_label_data_param_ != NULL ? *image_label_data_param_
                         : *::caffe::ImageLabelDataParameter::internal_default_instance();
}
::caffe::ImageLabelDataParameter* LayerParameter::mutable_image_label_data_param() {
  set_has_image_label_data_param();
  if (image_label_data_param_ == NULL) {
    image_label_data_param_ = new ::caffe::ImageLabelDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_label_data_param)
  return image_label_data_param_;
}
::caffe::ImageLabelDataParameter* LayerParameter::release_image_label_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_label_data_param)
  clear_has_image_label_data_param();
  ::caffe::ImageLabelDataParameter* temp = image_label_data_param_;
  image_label_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_label_data_param(::caffe::ImageLabelDataParameter* image_label_data_param) {
  delete image_label_data_param_;
  image_label_data_param_ = image_label_data_param;
  if (image_label_data_param) {
    set_has_image_label_data_param();
  } else {
    clear_has_image_label_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_label_data_param)
}

// optional .caffe.BinaryDataParameter binary_data_param = 5006;
bool LayerParameter::has_binary_data_param() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
void LayerParameter::set_has_binary_data_param() {
  _has_bits_[2] |= 0x10000000u;
}
void LayerParameter::clear_has_binary_data_param() {
  _has_bits_[2] &= ~0x10000000u;
}
void LayerParameter::clear_binary_data_param() {
  if (binary_data_param_ != NULL) binary_data_param_->::caffe::BinaryDataParameter::Clear();
  clear_has_binary_data_param();
}
const ::caffe::BinaryDataParameter& LayerParameter::binary_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.binary_data_param)
  return binary_data_param_ != NULL ? *binary_data_param_
                         : *::caffe::BinaryDataParameter::internal_default_instance();
}
::caffe::BinaryDataParameter* LayerParameter::mutable_binary_data_param() {
  set_has_binary_data_param();
  if (binary_data_param_ == NULL) {
    binary_data_param_ = new ::caffe::BinaryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.binary_data_param)
  return binary_data_param_;
}
::caffe::BinaryDataParameter* LayerParameter::release_binary_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.binary_data_param)
  clear_has_binary_data_param();
  ::caffe::BinaryDataParameter* temp = binary_data_param_;
  binary_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_binary_data_param(::caffe::BinaryDataParameter* binary_data_param) {
  delete binary_data_param_;
  binary_data_param_ = binary_data_param;
  if (binary_data_param) {
    set_has_binary_data_param();
  } else {
    clear_has_binary_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.binary_data_param)
}

// optional .caffe.CylinderViewParameter cylinder_view_param = 5007;
bool LayerParameter::has_cylinder_view_param() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
void LayerParameter::set_has_cylinder_view_param() {
  _has_bits_[2] |= 0x20000000u;
}
void LayerParameter::clear_has_cylinder_view_param() {
  _has_bits_[2] &= ~0x20000000u;
}
void LayerParameter::clear_cylinder_view_param() {
  if (cylinder_view_param_ != NULL) cylinder_view_param_->::caffe::CylinderViewParameter::Clear();
  clear_has_cylinder_view_param();
}
const ::caffe::CylinderViewParameter& LayerParameter::cylinder_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.cylinder_view_param)
  return cylinder_view_param_ != NULL ? *cylinder_view_param_
                         : *::caffe::CylinderViewParameter::internal_default_instance();
}
::caffe::CylinderViewParameter* LayerParameter::mutable_cylinder_view_param() {
  set_has_cylinder_view_param();
  if (cylinder_view_param_ == NULL) {
    cylinder_view_param_ = new ::caffe::CylinderViewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.cylinder_view_param)
  return cylinder_view_param_;
}
::caffe::CylinderViewParameter* LayerParameter::release_cylinder_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.cylinder_view_param)
  clear_has_cylinder_view_param();
  ::caffe::CylinderViewParameter* temp = cylinder_view_param_;
  cylinder_view_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_cylinder_view_param(::caffe::CylinderViewParameter* cylinder_view_param) {
  delete cylinder_view_param_;
  cylinder_view_param_ = cylinder_view_param;
  if (cylinder_view_param) {
    set_has_cylinder_view_param();
  } else {
    clear_has_cylinder_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.cylinder_view_param)
}

// optional .caffe.BirdviewParameter bird_view_param = 5008;
bool LayerParameter::has_bird_view_param() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
void LayerParameter::set_has_bird_view_param() {
  _has_bits_[2] |= 0x40000000u;
}
void LayerParameter::clear_has_bird_view_param() {
  _has_bits_[2] &= ~0x40000000u;
}
void LayerParameter::clear_bird_view_param() {
  if (bird_view_param_ != NULL) bird_view_param_->::caffe::BirdviewParameter::Clear();
  clear_has_bird_view_param();
}
const ::caffe::BirdviewParameter& LayerParameter::bird_view_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bird_view_param)
  return bird_view_param_ != NULL ? *bird_view_param_
                         : *::caffe::BirdviewParameter::internal_default_instance();
}
::caffe::BirdviewParameter* LayerParameter::mutable_bird_view_param() {
  set_has_bird_view_param();
  if (bird_view_param_ == NULL) {
    bird_view_param_ = new ::caffe::BirdviewParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bird_view_param)
  return bird_view_param_;
}
::caffe::BirdviewParameter* LayerParameter::release_bird_view_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bird_view_param)
  clear_has_bird_view_param();
  ::caffe::BirdviewParameter* temp = bird_view_param_;
  bird_view_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bird_view_param(::caffe::BirdviewParameter* bird_view_param) {
  delete bird_view_param_;
  bird_view_param_ = bird_view_param;
  if (bird_view_param) {
    set_has_bird_view_param();
  } else {
    clear_has_bird_view_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bird_view_param)
}

// optional .caffe.RepeatChannelParameter repeat_channel_param = 5009;
bool LayerParameter::has_repeat_channel_param() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
void LayerParameter::set_has_repeat_channel_param() {
  _has_bits_[2] |= 0x80000000u;
}
void LayerParameter::clear_has_repeat_channel_param() {
  _has_bits_[2] &= ~0x80000000u;
}
void LayerParameter::clear_repeat_channel_param() {
  if (repeat_channel_param_ != NULL) repeat_channel_param_->::caffe::RepeatChannelParameter::Clear();
  clear_has_repeat_channel_param();
}
const ::caffe::RepeatChannelParameter& LayerParameter::repeat_channel_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.repeat_channel_param)
  return repeat_channel_param_ != NULL ? *repeat_channel_param_
                         : *::caffe::RepeatChannelParameter::internal_default_instance();
}
::caffe::RepeatChannelParameter* LayerParameter::mutable_repeat_channel_param() {
  set_has_repeat_channel_param();
  if (repeat_channel_param_ == NULL) {
    repeat_channel_param_ = new ::caffe::RepeatChannelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.repeat_channel_param)
  return repeat_channel_param_;
}
::caffe::RepeatChannelParameter* LayerParameter::release_repeat_channel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.repeat_channel_param)
  clear_has_repeat_channel_param();
  ::caffe::RepeatChannelParameter* temp = repeat_channel_param_;
  repeat_channel_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_repeat_channel_param(::caffe::RepeatChannelParameter* repeat_channel_param) {
  delete repeat_channel_param_;
  repeat_channel_param_ = repeat_channel_param;
  if (repeat_channel_param) {
    set_has_repeat_channel_param();
  } else {
    clear_has_repeat_channel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.repeat_channel_param)
}

// optional .caffe.RegionParameter region_param = 300;
bool LayerParameter::has_region_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void LayerParameter::set_has_region_param() {
  _has_bits_[1] |= 0x00008000u;
}
void LayerParameter::clear_has_region_param() {
  _has_bits_[1] &= ~0x00008000u;
}
void LayerParameter::clear_region_param() {
  if (region_param_ != NULL) region_param_->::caffe::RegionParameter::Clear();
  clear_has_region_param();
}
const ::caffe::RegionParameter& LayerParameter::region_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.region_param)
  return region_param_ != NULL ? *region_param_
                         : *::caffe::RegionParameter::internal_default_instance();
}
::caffe::RegionParameter* LayerParameter::mutable_region_param() {
  set_has_region_param();
  if (region_param_ == NULL) {
    region_param_ = new ::caffe::RegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.region_param)
  return region_param_;
}
::caffe::RegionParameter* LayerParameter::release_region_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.region_param)
  clear_has_region_param();
  ::caffe::RegionParameter* temp = region_param_;
  region_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_region_param(::caffe::RegionParameter* region_param) {
  delete region_param_;
  region_param_ = region_param;
  if (region_param) {
    set_has_region_param();
  } else {
    clear_has_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.region_param)
}

// optional .caffe.ReorgParameter reorg_param = 301;
bool LayerParameter::has_reorg_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void LayerParameter::set_has_reorg_param() {
  _has_bits_[1] |= 0x00010000u;
}
void LayerParameter::clear_has_reorg_param() {
  _has_bits_[1] &= ~0x00010000u;
}
void LayerParameter::clear_reorg_param() {
  if (reorg_param_ != NULL) reorg_param_->::caffe::ReorgParameter::Clear();
  clear_has_reorg_param();
}
const ::caffe::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reorg_param)
  return reorg_param_ != NULL ? *reorg_param_
                         : *::caffe::ReorgParameter::internal_default_instance();
}
::caffe::ReorgParameter* LayerParameter::mutable_reorg_param() {
  set_has_reorg_param();
  if (reorg_param_ == NULL) {
    reorg_param_ = new ::caffe::ReorgParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reorg_param)
  return reorg_param_;
}
::caffe::ReorgParameter* LayerParameter::release_reorg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reorg_param)
  clear_has_reorg_param();
  ::caffe::ReorgParameter* temp = reorg_param_;
  reorg_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param) {
  delete reorg_param_;
  reorg_param_ = reorg_param;
  if (reorg_param) {
    set_has_reorg_param();
  } else {
    clear_has_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reorg_param)
}

// optional .caffe.RegionOutputParameter region_output_param = 310;
bool LayerParameter::has_region_output_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void LayerParameter::set_has_region_output_param() {
  _has_bits_[1] |= 0x00020000u;
}
void LayerParameter::clear_has_region_output_param() {
  _has_bits_[1] &= ~0x00020000u;
}
void LayerParameter::clear_region_output_param() {
  if (region_output_param_ != NULL) region_output_param_->::caffe::RegionOutputParameter::Clear();
  clear_has_region_output_param();
}
const ::caffe::RegionOutputParameter& LayerParameter::region_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.region_output_param)
  return region_output_param_ != NULL ? *region_output_param_
                         : *::caffe::RegionOutputParameter::internal_default_instance();
}
::caffe::RegionOutputParameter* LayerParameter::mutable_region_output_param() {
  set_has_region_output_param();
  if (region_output_param_ == NULL) {
    region_output_param_ = new ::caffe::RegionOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.region_output_param)
  return region_output_param_;
}
::caffe::RegionOutputParameter* LayerParameter::release_region_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.region_output_param)
  clear_has_region_output_param();
  ::caffe::RegionOutputParameter* temp = region_output_param_;
  region_output_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_region_output_param(::caffe::RegionOutputParameter* region_output_param) {
  delete region_output_param_;
  region_output_param_ = region_output_param;
  if (region_output_param) {
    set_has_region_output_param();
  } else {
    clear_has_region_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.region_output_param)
}

// optional .caffe.PermuteParameter permute_param = 202;
bool LayerParameter::has_permute_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void LayerParameter::set_has_permute_param() {
  _has_bits_[1] |= 0x00004000u;
}
void LayerParameter::clear_has_permute_param() {
  _has_bits_[1] &= ~0x00004000u;
}
void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->::caffe::PermuteParameter::Clear();
  clear_has_permute_param();
}
const ::caffe::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.permute_param)
  return permute_param_ != NULL ? *permute_param_
                         : *::caffe::PermuteParameter::internal_default_instance();
}
::caffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) {
    permute_param_ = new ::caffe::PermuteParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.permute_param)
  return permute_param_;
}
::caffe::PermuteParameter* LayerParameter::release_permute_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.permute_param)
  clear_has_permute_param();
  ::caffe::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_permute_param(::caffe::PermuteParameter* permute_param) {
  delete permute_param_;
  permute_param_ = permute_param;
  if (permute_param) {
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.permute_param)
}

// optional .caffe.ResampleParameter resample_param = 1000;
bool LayerParameter::has_resample_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void LayerParameter::set_has_resample_param() {
  _has_bits_[1] |= 0x00040000u;
}
void LayerParameter::clear_has_resample_param() {
  _has_bits_[1] &= ~0x00040000u;
}
void LayerParameter::clear_resample_param() {
  if (resample_param_ != NULL) resample_param_->::caffe::ResampleParameter::Clear();
  clear_has_resample_param();
}
const ::caffe::ResampleParameter& LayerParameter::resample_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resample_param)
  return resample_param_ != NULL ? *resample_param_
                         : *::caffe::ResampleParameter::internal_default_instance();
}
::caffe::ResampleParameter* LayerParameter::mutable_resample_param() {
  set_has_resample_param();
  if (resample_param_ == NULL) {
    resample_param_ = new ::caffe::ResampleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resample_param)
  return resample_param_;
}
::caffe::ResampleParameter* LayerParameter::release_resample_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resample_param)
  clear_has_resample_param();
  ::caffe::ResampleParameter* temp = resample_param_;
  resample_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_resample_param(::caffe::ResampleParameter* resample_param) {
  delete resample_param_;
  resample_param_ = resample_param;
  if (resample_param) {
    set_has_resample_param();
  } else {
    clear_has_resample_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resample_param)
}

// optional bool reshape_every_iter = 1001 [default = true];
bool LayerParameter::has_reshape_every_iter() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
void LayerParameter::set_has_reshape_every_iter() {
  _has_bits_[3] |= 0x00000004u;
}
void LayerParameter::clear_has_reshape_every_iter() {
  _has_bits_[3] &= ~0x00000004u;
}
void LayerParameter::clear_reshape_every_iter() {
  reshape_every_iter_ = true;
  clear_has_reshape_every_iter();
}
bool LayerParameter::reshape_every_iter() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_every_iter)
  return reshape_every_iter_;
}
void LayerParameter::set_reshape_every_iter(bool value) {
  set_has_reshape_every_iter();
  reshape_every_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.reshape_every_iter)
}

// optional .caffe.DetectionOutputSSDParameter detection_output_ssd_param = 4001;
bool LayerParameter::has_detection_output_ssd_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void LayerParameter::set_has_detection_output_ssd_param() {
  _has_bits_[2] |= 0x00010000u;
}
void LayerParameter::clear_has_detection_output_ssd_param() {
  _has_bits_[2] &= ~0x00010000u;
}
void LayerParameter::clear_detection_output_ssd_param() {
  if (detection_output_ssd_param_ != NULL) detection_output_ssd_param_->::caffe::DetectionOutputSSDParameter::Clear();
  clear_has_detection_output_ssd_param();
}
const ::caffe::DetectionOutputSSDParameter& LayerParameter::detection_output_ssd_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_output_ssd_param)
  return detection_output_ssd_param_ != NULL ? *detection_output_ssd_param_
                         : *::caffe::DetectionOutputSSDParameter::internal_default_instance();
}
::caffe::DetectionOutputSSDParameter* LayerParameter::mutable_detection_output_ssd_param() {
  set_has_detection_output_ssd_param();
  if (detection_output_ssd_param_ == NULL) {
    detection_output_ssd_param_ = new ::caffe::DetectionOutputSSDParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_output_ssd_param)
  return detection_output_ssd_param_;
}
::caffe::DetectionOutputSSDParameter* LayerParameter::release_detection_output_ssd_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_output_ssd_param)
  clear_has_detection_output_ssd_param();
  ::caffe::DetectionOutputSSDParameter* temp = detection_output_ssd_param_;
  detection_output_ssd_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_detection_output_ssd_param(::caffe::DetectionOutputSSDParameter* detection_output_ssd_param) {
  delete detection_output_ssd_param_;
  detection_output_ssd_param_ = detection_output_ssd_param;
  if (detection_output_ssd_param) {
    set_has_detection_output_ssd_param();
  } else {
    clear_has_detection_output_ssd_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_output_ssd_param)
}

// optional .caffe.ImageDistortParameter image_distort_param = 4008;
bool LayerParameter::has_image_distort_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void LayerParameter::set_has_image_distort_param() {
  _has_bits_[2] |= 0x00020000u;
}
void LayerParameter::clear_has_image_distort_param() {
  _has_bits_[2] &= ~0x00020000u;
}
void LayerParameter::clear_image_distort_param() {
  if (image_distort_param_ != NULL) image_distort_param_->::caffe::ImageDistortParameter::Clear();
  clear_has_image_distort_param();
}
const ::caffe::ImageDistortParameter& LayerParameter::image_distort_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_distort_param)
  return image_distort_param_ != NULL ? *image_distort_param_
                         : *::caffe::ImageDistortParameter::internal_default_instance();
}
::caffe::ImageDistortParameter* LayerParameter::mutable_image_distort_param() {
  set_has_image_distort_param();
  if (image_distort_param_ == NULL) {
    image_distort_param_ = new ::caffe::ImageDistortParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_distort_param)
  return image_distort_param_;
}
::caffe::ImageDistortParameter* LayerParameter::release_image_distort_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_distort_param)
  clear_has_image_distort_param();
  ::caffe::ImageDistortParameter* temp = image_distort_param_;
  image_distort_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_distort_param(::caffe::ImageDistortParameter* image_distort_param) {
  delete image_distort_param_;
  image_distort_param_ = image_distort_param;
  if (image_distort_param) {
    set_has_image_distort_param();
  } else {
    clear_has_image_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_distort_param)
}

// optional .caffe.BBoxRegParameter bbox_reg_param = 4018;
bool LayerParameter::has_bbox_reg_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
void LayerParameter::set_has_bbox_reg_param() {
  _has_bits_[2] |= 0x00040000u;
}
void LayerParameter::clear_has_bbox_reg_param() {
  _has_bits_[2] &= ~0x00040000u;
}
void LayerParameter::clear_bbox_reg_param() {
  if (bbox_reg_param_ != NULL) bbox_reg_param_->::caffe::BBoxRegParameter::Clear();
  clear_has_bbox_reg_param();
}
const ::caffe::BBoxRegParameter& LayerParameter::bbox_reg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_reg_param)
  return bbox_reg_param_ != NULL ? *bbox_reg_param_
                         : *::caffe::BBoxRegParameter::internal_default_instance();
}
::caffe::BBoxRegParameter* LayerParameter::mutable_bbox_reg_param() {
  set_has_bbox_reg_param();
  if (bbox_reg_param_ == NULL) {
    bbox_reg_param_ = new ::caffe::BBoxRegParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_reg_param)
  return bbox_reg_param_;
}
::caffe::BBoxRegParameter* LayerParameter::release_bbox_reg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_reg_param)
  clear_has_bbox_reg_param();
  ::caffe::BBoxRegParameter* temp = bbox_reg_param_;
  bbox_reg_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bbox_reg_param(::caffe::BBoxRegParameter* bbox_reg_param) {
  delete bbox_reg_param_;
  bbox_reg_param_ = bbox_reg_param;
  if (bbox_reg_param) {
    set_has_bbox_reg_param();
  } else {
    clear_has_bbox_reg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_reg_param)
}

// optional .caffe.PSROIPoolingParameter psroi_pooling_param = 4019;
bool LayerParameter::has_psroi_pooling_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
void LayerParameter::set_has_psroi_pooling_param() {
  _has_bits_[2] |= 0x00080000u;
}
void LayerParameter::clear_has_psroi_pooling_param() {
  _has_bits_[2] &= ~0x00080000u;
}
void LayerParameter::clear_psroi_pooling_param() {
  if (psroi_pooling_param_ != NULL) psroi_pooling_param_->::caffe::PSROIPoolingParameter::Clear();
  clear_has_psroi_pooling_param();
}
const ::caffe::PSROIPoolingParameter& LayerParameter::psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_ != NULL ? *psroi_pooling_param_
                         : *::caffe::PSROIPoolingParameter::internal_default_instance();
}
::caffe::PSROIPoolingParameter* LayerParameter::mutable_psroi_pooling_param() {
  set_has_psroi_pooling_param();
  if (psroi_pooling_param_ == NULL) {
    psroi_pooling_param_ = new ::caffe::PSROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_;
}
::caffe::PSROIPoolingParameter* LayerParameter::release_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.psroi_pooling_param)
  clear_has_psroi_pooling_param();
  ::caffe::PSROIPoolingParameter* temp = psroi_pooling_param_;
  psroi_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_psroi_pooling_param(::caffe::PSROIPoolingParameter* psroi_pooling_param) {
  delete psroi_pooling_param_;
  psroi_pooling_param_ = psroi_pooling_param;
  if (psroi_pooling_param) {
    set_has_psroi_pooling_param();
  } else {
    clear_has_psroi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.psroi_pooling_param)
}

// optional .caffe.DFMBPSROIPoolingParameter dfmb_psroi_pooling_param = 4020;
bool LayerParameter::has_dfmb_psroi_pooling_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
void LayerParameter::set_has_dfmb_psroi_pooling_param() {
  _has_bits_[2] |= 0x00100000u;
}
void LayerParameter::clear_has_dfmb_psroi_pooling_param() {
  _has_bits_[2] &= ~0x00100000u;
}
void LayerParameter::clear_dfmb_psroi_pooling_param() {
  if (dfmb_psroi_pooling_param_ != NULL) dfmb_psroi_pooling_param_->::caffe::DFMBPSROIPoolingParameter::Clear();
  clear_has_dfmb_psroi_pooling_param();
}
const ::caffe::DFMBPSROIPoolingParameter& LayerParameter::dfmb_psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dfmb_psroi_pooling_param)
  return dfmb_psroi_pooling_param_ != NULL ? *dfmb_psroi_pooling_param_
                         : *::caffe::DFMBPSROIPoolingParameter::internal_default_instance();
}
::caffe::DFMBPSROIPoolingParameter* LayerParameter::mutable_dfmb_psroi_pooling_param() {
  set_has_dfmb_psroi_pooling_param();
  if (dfmb_psroi_pooling_param_ == NULL) {
    dfmb_psroi_pooling_param_ = new ::caffe::DFMBPSROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dfmb_psroi_pooling_param)
  return dfmb_psroi_pooling_param_;
}
::caffe::DFMBPSROIPoolingParameter* LayerParameter::release_dfmb_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dfmb_psroi_pooling_param)
  clear_has_dfmb_psroi_pooling_param();
  ::caffe::DFMBPSROIPoolingParameter* temp = dfmb_psroi_pooling_param_;
  dfmb_psroi_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dfmb_psroi_pooling_param(::caffe::DFMBPSROIPoolingParameter* dfmb_psroi_pooling_param) {
  delete dfmb_psroi_pooling_param_;
  dfmb_psroi_pooling_param_ = dfmb_psroi_pooling_param;
  if (dfmb_psroi_pooling_param) {
    set_has_dfmb_psroi_pooling_param();
  } else {
    clear_has_dfmb_psroi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dfmb_psroi_pooling_param)
}

// optional .caffe.RegParameter reg_param = 4023;
bool LayerParameter::has_reg_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
void LayerParameter::set_has_reg_param() {
  _has_bits_[2] |= 0x00200000u;
}
void LayerParameter::clear_has_reg_param() {
  _has_bits_[2] &= ~0x00200000u;
}
void LayerParameter::clear_reg_param() {
  if (reg_param_ != NULL) reg_param_->::caffe::RegParameter::Clear();
  clear_has_reg_param();
}
const ::caffe::RegParameter& LayerParameter::reg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reg_param)
  return reg_param_ != NULL ? *reg_param_
                         : *::caffe::RegParameter::internal_default_instance();
}
::caffe::RegParameter* LayerParameter::mutable_reg_param() {
  set_has_reg_param();
  if (reg_param_ == NULL) {
    reg_param_ = new ::caffe::RegParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reg_param)
  return reg_param_;
}
::caffe::RegParameter* LayerParameter::release_reg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reg_param)
  clear_has_reg_param();
  ::caffe::RegParameter* temp = reg_param_;
  reg_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reg_param(::caffe::RegParameter* reg_param) {
  delete reg_param_;
  reg_param_ = reg_param;
  if (reg_param) {
    set_has_reg_param();
  } else {
    clear_has_reg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reg_param)
}

// optional .caffe.ProposalImgScaleToCamCoordsParameter proposal_img_scale_to_cam_coords_param = 4031;
bool LayerParameter::has_proposal_img_scale_to_cam_coords_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
void LayerParameter::set_has_proposal_img_scale_to_cam_coords_param() {
  _has_bits_[2] |= 0x00400000u;
}
void LayerParameter::clear_has_proposal_img_scale_to_cam_coords_param() {
  _has_bits_[2] &= ~0x00400000u;
}
void LayerParameter::clear_proposal_img_scale_to_cam_coords_param() {
  if (proposal_img_scale_to_cam_coords_param_ != NULL) proposal_img_scale_to_cam_coords_param_->::caffe::ProposalImgScaleToCamCoordsParameter::Clear();
  clear_has_proposal_img_scale_to_cam_coords_param();
}
const ::caffe::ProposalImgScaleToCamCoordsParameter& LayerParameter::proposal_img_scale_to_cam_coords_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
  return proposal_img_scale_to_cam_coords_param_ != NULL ? *proposal_img_scale_to_cam_coords_param_
                         : *::caffe::ProposalImgScaleToCamCoordsParameter::internal_default_instance();
}
::caffe::ProposalImgScaleToCamCoordsParameter* LayerParameter::mutable_proposal_img_scale_to_cam_coords_param() {
  set_has_proposal_img_scale_to_cam_coords_param();
  if (proposal_img_scale_to_cam_coords_param_ == NULL) {
    proposal_img_scale_to_cam_coords_param_ = new ::caffe::ProposalImgScaleToCamCoordsParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
  return proposal_img_scale_to_cam_coords_param_;
}
::caffe::ProposalImgScaleToCamCoordsParameter* LayerParameter::release_proposal_img_scale_to_cam_coords_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
  clear_has_proposal_img_scale_to_cam_coords_param();
  ::caffe::ProposalImgScaleToCamCoordsParameter* temp = proposal_img_scale_to_cam_coords_param_;
  proposal_img_scale_to_cam_coords_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_proposal_img_scale_to_cam_coords_param(::caffe::ProposalImgScaleToCamCoordsParameter* proposal_img_scale_to_cam_coords_param) {
  delete proposal_img_scale_to_cam_coords_param_;
  proposal_img_scale_to_cam_coords_param_ = proposal_img_scale_to_cam_coords_param;
  if (proposal_img_scale_to_cam_coords_param) {
    set_has_proposal_img_scale_to_cam_coords_param();
  } else {
    clear_has_proposal_img_scale_to_cam_coords_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.proposal_img_scale_to_cam_coords_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpandlabelParameter::kMaxlabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpandlabelParameter::ExpandlabelParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ExpandlabelParameter)
}
ExpandlabelParameter::ExpandlabelParameter(const ExpandlabelParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maxlabel_ = from.maxlabel_;
  // @@protoc_insertion_point(copy_constructor:caffe.ExpandlabelParameter)
}

void ExpandlabelParameter::SharedCtor() {
  _cached_size_ = 0;
  maxlabel_ = 0u;
}

ExpandlabelParameter::~ExpandlabelParameter() {
  // @@protoc_insertion_point(destructor:caffe.ExpandlabelParameter)
  SharedDtor();
}

void ExpandlabelParameter::SharedDtor() {
}

void ExpandlabelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandlabelParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExpandlabelParameter& ExpandlabelParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExpandlabelParameter* ExpandlabelParameter::New(::google::protobuf::Arena* arena) const {
  ExpandlabelParameter* n = new ExpandlabelParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpandlabelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ExpandlabelParameter)
  maxlabel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExpandlabelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ExpandlabelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxlabel = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_maxlabel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ExpandlabelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ExpandlabelParameter)
  return false;
#undef DO_
}

void ExpandlabelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ExpandlabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maxlabel = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxlabel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ExpandlabelParameter)
}

::google::protobuf::uint8* ExpandlabelParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ExpandlabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maxlabel = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxlabel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ExpandlabelParameter)
  return target;
}

size_t ExpandlabelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ExpandlabelParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 maxlabel = 1 [default = 0];
  if (has_maxlabel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlabel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandlabelParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ExpandlabelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandlabelParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpandlabelParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ExpandlabelParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ExpandlabelParameter)
    MergeFrom(*source);
  }
}

void ExpandlabelParameter::MergeFrom(const ExpandlabelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ExpandlabelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_maxlabel()) {
    set_maxlabel(from.maxlabel());
  }
}

void ExpandlabelParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ExpandlabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandlabelParameter::CopyFrom(const ExpandlabelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ExpandlabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandlabelParameter::IsInitialized() const {
  return true;
}

void ExpandlabelParameter::Swap(ExpandlabelParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpandlabelParameter::InternalSwap(ExpandlabelParameter* other) {
  std::swap(maxlabel_, other->maxlabel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpandlabelParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpandlabelParameter

// optional uint32 maxlabel = 1 [default = 0];
bool ExpandlabelParameter::has_maxlabel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpandlabelParameter::set_has_maxlabel() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpandlabelParameter::clear_has_maxlabel() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpandlabelParameter::clear_maxlabel() {
  maxlabel_ = 0u;
  clear_has_maxlabel();
}
::google::protobuf::uint32 ExpandlabelParameter::maxlabel() const {
  // @@protoc_insertion_point(field_get:caffe.ExpandlabelParameter.maxlabel)
  return maxlabel_;
}
void ExpandlabelParameter::set_maxlabel(::google::protobuf::uint32 value) {
  set_has_maxlabel();
  maxlabel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpandlabelParameter.maxlabel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepeatChannelParameter::kNumRepeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepeatChannelParameter::RepeatChannelParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RepeatChannelParameter)
}
RepeatChannelParameter::RepeatChannelParameter(const RepeatChannelParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_repeat_ = from.num_repeat_;
  // @@protoc_insertion_point(copy_constructor:caffe.RepeatChannelParameter)
}

void RepeatChannelParameter::SharedCtor() {
  _cached_size_ = 0;
  num_repeat_ = 1u;
}

RepeatChannelParameter::~RepeatChannelParameter() {
  // @@protoc_insertion_point(destructor:caffe.RepeatChannelParameter)
  SharedDtor();
}

void RepeatChannelParameter::SharedDtor() {
}

void RepeatChannelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatChannelParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RepeatChannelParameter& RepeatChannelParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

RepeatChannelParameter* RepeatChannelParameter::New(::google::protobuf::Arena* arena) const {
  RepeatChannelParameter* n = new RepeatChannelParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RepeatChannelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RepeatChannelParameter)
  num_repeat_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RepeatChannelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RepeatChannelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_repeat = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_repeat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_repeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RepeatChannelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RepeatChannelParameter)
  return false;
#undef DO_
}

void RepeatChannelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RepeatChannelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_repeat = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_repeat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RepeatChannelParameter)
}

::google::protobuf::uint8* RepeatChannelParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RepeatChannelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_repeat = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_repeat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RepeatChannelParameter)
  return target;
}

size_t RepeatChannelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RepeatChannelParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 num_repeat = 1 [default = 1];
  if (has_num_repeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_repeat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatChannelParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RepeatChannelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatChannelParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepeatChannelParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RepeatChannelParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RepeatChannelParameter)
    MergeFrom(*source);
  }
}

void RepeatChannelParameter::MergeFrom(const RepeatChannelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RepeatChannelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_repeat()) {
    set_num_repeat(from.num_repeat());
  }
}

void RepeatChannelParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RepeatChannelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatChannelParameter::CopyFrom(const RepeatChannelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RepeatChannelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatChannelParameter::IsInitialized() const {
  return true;
}

void RepeatChannelParameter::Swap(RepeatChannelParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepeatChannelParameter::InternalSwap(RepeatChannelParameter* other) {
  std::swap(num_repeat_, other->num_repeat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RepeatChannelParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RepeatChannelParameter

// optional uint32 num_repeat = 1 [default = 1];
bool RepeatChannelParameter::has_num_repeat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RepeatChannelParameter::set_has_num_repeat() {
  _has_bits_[0] |= 0x00000001u;
}
void RepeatChannelParameter::clear_has_num_repeat() {
  _has_bits_[0] &= ~0x00000001u;
}
void RepeatChannelParameter::clear_num_repeat() {
  num_repeat_ = 1u;
  clear_has_num_repeat();
}
::google::protobuf::uint32 RepeatChannelParameter::num_repeat() const {
  // @@protoc_insertion_point(field_get:caffe.RepeatChannelParameter.num_repeat)
  return num_repeat_;
}
void RepeatChannelParameter::set_num_repeat(::google::protobuf::uint32 value) {
  set_has_num_repeat();
  num_repeat_ = value;
  // @@protoc_insertion_point(field_set:caffe.RepeatChannelParameter.num_repeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermuteParameter::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermuteParameter::PermuteParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PermuteParameter)
}
PermuteParameter::PermuteParameter(const PermuteParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      order_(from.order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.PermuteParameter)
}

void PermuteParameter::SharedCtor() {
  _cached_size_ = 0;
}

PermuteParameter::~PermuteParameter() {
  // @@protoc_insertion_point(destructor:caffe.PermuteParameter)
  SharedDtor();
}

void PermuteParameter::SharedDtor() {
}

void PermuteParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PermuteParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PermuteParameter& PermuteParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PermuteParameter* PermuteParameter::New(::google::protobuf::Arena* arena) const {
  PermuteParameter* n = new PermuteParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermuteParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PermuteParameter)
  order_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PermuteParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PermuteParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_order())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_order())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PermuteParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PermuteParameter)
  return false;
#undef DO_
}

void PermuteParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PermuteParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  for (int i = 0, n = this->order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PermuteParameter)
}

::google::protobuf::uint8* PermuteParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PermuteParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->order_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PermuteParameter)
  return target;
}

size_t PermuteParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PermuteParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 order = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->order_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->order_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermuteParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PermuteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PermuteParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PermuteParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PermuteParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PermuteParameter)
    MergeFrom(*source);
  }
}

void PermuteParameter::MergeFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PermuteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_.MergeFrom(from.order_);
}

void PermuteParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermuteParameter::CopyFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermuteParameter::IsInitialized() const {
  return true;
}

void PermuteParameter::Swap(PermuteParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermuteParameter::InternalSwap(PermuteParameter* other) {
  order_.InternalSwap(&other->order_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PermuteParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermuteParameter

// repeated uint32 order = 1;
int PermuteParameter::order_size() const {
  return order_.size();
}
void PermuteParameter::clear_order() {
  order_.Clear();
}
::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PermuteParameter.order)
  return order_.Get(index);
}
void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PermuteParameter.order)
}
void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PermuteParameter.order)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:caffe.PermuteParameter.order)
  return order_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PermuteParameter.order)
  return &order_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizedBBox::kXminFieldNumber;
const int NormalizedBBox::kYminFieldNumber;
const int NormalizedBBox::kXmaxFieldNumber;
const int NormalizedBBox::kYmaxFieldNumber;
const int NormalizedBBox::kLabelFieldNumber;
const int NormalizedBBox::kDifficultFieldNumber;
const int NormalizedBBox::kScoreFieldNumber;
const int NormalizedBBox::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizedBBox::NormalizedBBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NormalizedBBox)
}
NormalizedBBox::NormalizedBBox(const NormalizedBBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&xmin_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:caffe.NormalizedBBox)
}

void NormalizedBBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&xmin_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&xmin_) + sizeof(size_));
}

NormalizedBBox::~NormalizedBBox() {
  // @@protoc_insertion_point(destructor:caffe.NormalizedBBox)
  SharedDtor();
}

void NormalizedBBox::SharedDtor() {
}

void NormalizedBBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizedBBox::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizedBBox& NormalizedBBox::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NormalizedBBox* NormalizedBBox::New(::google::protobuf::Arena* arena) const {
  NormalizedBBox* n = new NormalizedBBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizedBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NormalizedBBox)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&xmin_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&xmin_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizedBBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NormalizedBBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xmax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_xmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_ymax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool difficult = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_difficult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &difficult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NormalizedBBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NormalizedBBox)
  return false;
#undef DO_
}

void NormalizedBBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NormalizedBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xmin(), output);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ymin(), output);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xmax(), output);
  }

  // optional float ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ymax(), output);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // optional bool difficult = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->difficult(), output);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // optional float size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NormalizedBBox)
}

::google::protobuf::uint8* NormalizedBBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NormalizedBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ymin(), target);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xmax(), target);
  }

  // optional float ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ymax(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // optional bool difficult = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->difficult(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->score(), target);
  }

  // optional float size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NormalizedBBox)
  return target;
}

size_t NormalizedBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NormalizedBBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float xmin = 1;
    if (has_xmin()) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (has_ymin()) {
      total_size += 1 + 4;
    }

    // optional float xmax = 3;
    if (has_xmax()) {
      total_size += 1 + 4;
    }

    // optional float ymax = 4;
    if (has_ymax()) {
      total_size += 1 + 4;
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool difficult = 6;
    if (has_difficult()) {
      total_size += 1 + 1;
    }

    // optional float score = 7;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional float size = 8;
    if (has_size()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizedBBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedBBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizedBBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NormalizedBBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NormalizedBBox)
    MergeFrom(*source);
  }
}

void NormalizedBBox::MergeFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficult_ = from.difficult_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedBBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedBBox::CopyFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedBBox::IsInitialized() const {
  return true;
}

void NormalizedBBox::Swap(NormalizedBBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizedBBox::InternalSwap(NormalizedBBox* other) {
  std::swap(xmin_, other->xmin_);
  std::swap(ymin_, other->ymin_);
  std::swap(xmax_, other->xmax_);
  std::swap(ymax_, other->ymax_);
  std::swap(label_, other->label_);
  std::swap(difficult_, other->difficult_);
  std::swap(score_, other->score_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizedBBox::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizedBBox

// optional float xmin = 1;
bool NormalizedBBox::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizedBBox::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizedBBox::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmin)
  return xmin_;
}
void NormalizedBBox::set_xmin(float value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmin)
}

// optional float ymin = 2;
bool NormalizedBBox::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizedBBox::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizedBBox::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymin)
  return ymin_;
}
void NormalizedBBox::set_ymin(float value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymin)
}

// optional float xmax = 3;
bool NormalizedBBox::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NormalizedBBox::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
void NormalizedBBox::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmax)
  return xmax_;
}
void NormalizedBBox::set_xmax(float value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmax)
}

// optional float ymax = 4;
bool NormalizedBBox::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NormalizedBBox::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
void NormalizedBBox::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymax)
  return ymax_;
}
void NormalizedBBox::set_ymax(float value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymax)
}

// optional int32 label = 5;
bool NormalizedBBox::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NormalizedBBox::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void NormalizedBBox::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void NormalizedBBox::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.label)
  return label_;
}
void NormalizedBBox::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.label)
}

// optional bool difficult = 6;
bool NormalizedBBox::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NormalizedBBox::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
void NormalizedBBox::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  clear_has_difficult();
}
bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.difficult)
  return difficult_;
}
void NormalizedBBox::set_difficult(bool value) {
  set_has_difficult();
  difficult_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.difficult)
}

// optional float score = 7;
bool NormalizedBBox::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NormalizedBBox::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void NormalizedBBox::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void NormalizedBBox::clear_score() {
  score_ = 0;
  clear_has_score();
}
float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.score)
  return score_;
}
void NormalizedBBox::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.score)
}

// optional float size = 8;
bool NormalizedBBox::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NormalizedBBox::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
void NormalizedBBox::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void NormalizedBBox::clear_size() {
  size_ = 0;
  clear_has_size();
}
float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.size)
  return size_;
}
void NormalizedBBox::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionOutputParameter::kNumClassesFieldNumber;
const int RegionOutputParameter::kNmsParamFieldNumber;
const int RegionOutputParameter::kKeepTopKFieldNumber;
const int RegionOutputParameter::kConfidenceThresholdFieldNumber;
const int RegionOutputParameter::kAnchorboxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionOutputParameter::RegionOutputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RegionOutputParameter)
}
RegionOutputParameter::RegionOutputParameter(const RegionOutputParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      anchorbox_(from.anchorbox_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nms_param()) {
    nms_param_ = new ::caffe::NonMaximumSuppressionParameter(*from.nms_param_);
  } else {
    nms_param_ = NULL;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    reinterpret_cast<char*>(&keep_top_k_) -
    reinterpret_cast<char*>(&num_classes_) + sizeof(keep_top_k_));
  // @@protoc_insertion_point(copy_constructor:caffe.RegionOutputParameter)
}

void RegionOutputParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nms_param_, 0, reinterpret_cast<char*>(&confidence_threshold_) -
    reinterpret_cast<char*>(&nms_param_) + sizeof(confidence_threshold_));
  keep_top_k_ = -1;
}

RegionOutputParameter::~RegionOutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.RegionOutputParameter)
  SharedDtor();
}

void RegionOutputParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete nms_param_;
  }
}

void RegionOutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionOutputParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionOutputParameter& RegionOutputParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionOutputParameter* RegionOutputParameter::New(::google::protobuf::Arena* arena) const {
  RegionOutputParameter* n = new RegionOutputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RegionOutputParameter)
  anchorbox_.Clear();
  if (has_nms_param()) {
    GOOGLE_DCHECK(nms_param_ != NULL);
    nms_param_->::caffe::NonMaximumSuppressionParameter::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&num_classes_, 0, reinterpret_cast<char*>(&confidence_threshold_) -
      reinterpret_cast<char*>(&num_classes_) + sizeof(confidence_threshold_));
    keep_top_k_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionOutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RegionOutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_classes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nms_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_keep_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_confidence_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.AnchorBox anchorbox = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_anchorbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RegionOutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RegionOutputParameter)
  return false;
#undef DO_
}

void RegionOutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RegionOutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_classes(), output);
  }

  // optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nms_param_, output);
  }

  // optional int32 keep_top_k = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->keep_top_k(), output);
  }

  // optional float confidence_threshold = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence_threshold(), output);
  }

  // repeated .caffe.AnchorBox anchorbox = 5;
  for (unsigned int i = 0, n = this->anchorbox_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchorbox(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RegionOutputParameter)
}

::google::protobuf::uint8* RegionOutputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RegionOutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_classes(), target);
  }

  // optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nms_param_, deterministic, target);
  }

  // optional int32 keep_top_k = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->keep_top_k(), target);
  }

  // optional float confidence_threshold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence_threshold(), target);
  }

  // repeated .caffe.AnchorBox anchorbox = 5;
  for (unsigned int i = 0, n = this->anchorbox_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->anchorbox(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RegionOutputParameter)
  return target;
}

size_t RegionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RegionOutputParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.AnchorBox anchorbox = 5;
  {
    unsigned int count = this->anchorbox_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchorbox(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
    if (has_nms_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nms_param_);
    }

    // optional uint32 num_classes = 1;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional float confidence_threshold = 4;
    if (has_confidence_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 3 [default = -1];
    if (has_keep_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionOutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RegionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOutputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionOutputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RegionOutputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RegionOutputParameter)
    MergeFrom(*source);
  }
}

void RegionOutputParameter::MergeFrom(const RegionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RegionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchorbox_.MergeFrom(from.anchorbox_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_nms_param()->::caffe::NonMaximumSuppressionParameter::MergeFrom(from.nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      keep_top_k_ = from.keep_top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionOutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RegionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOutputParameter::CopyFrom(const RegionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RegionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOutputParameter::IsInitialized() const {
  return true;
}

void RegionOutputParameter::Swap(RegionOutputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionOutputParameter::InternalSwap(RegionOutputParameter* other) {
  anchorbox_.InternalSwap(&other->anchorbox_);
  std::swap(nms_param_, other->nms_param_);
  std::swap(num_classes_, other->num_classes_);
  std::swap(confidence_threshold_, other->confidence_threshold_);
  std::swap(keep_top_k_, other->keep_top_k_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionOutputParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionOutputParameter

// optional uint32 num_classes = 1;
bool RegionOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
::google::protobuf::uint32 RegionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.num_classes)
  return num_classes_;
}
void RegionOutputParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionOutputParameter.num_classes)
}

// optional .caffe.NonMaximumSuppressionParameter nms_param = 2;
bool RegionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
const ::caffe::NonMaximumSuppressionParameter& RegionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::caffe::NonMaximumSuppressionParameter::internal_default_instance();
}
::caffe::NonMaximumSuppressionParameter* RegionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NonMaximumSuppressionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RegionOutputParameter.nms_param)
  return nms_param_;
}
::caffe::NonMaximumSuppressionParameter* RegionOutputParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.RegionOutputParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
void RegionOutputParameter::set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RegionOutputParameter.nms_param)
}

// optional int32 keep_top_k = 3 [default = -1];
bool RegionOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegionOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000008u;
}
void RegionOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegionOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
::google::protobuf::int32 RegionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.keep_top_k)
  return keep_top_k_;
}
void RegionOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 4;
bool RegionOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegionOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void RegionOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegionOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  clear_has_confidence_threshold();
}
float RegionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
void RegionOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionOutputParameter.confidence_threshold)
}

// repeated .caffe.AnchorBox anchorbox = 5;
int RegionOutputParameter::anchorbox_size() const {
  return anchorbox_.size();
}
void RegionOutputParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
const ::caffe::AnchorBox& RegionOutputParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_.Get(index);
}
::caffe::AnchorBox* RegionOutputParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
::caffe::AnchorBox* RegionOutputParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >*
RegionOutputParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegionOutputParameter.anchorbox)
  return &anchorbox_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >&
RegionOutputParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:caffe.RegionOutputParameter.anchorbox)
  return anchorbox_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NonMaximumSuppressionParameter::kNmsThresholdFieldNumber;
const int NonMaximumSuppressionParameter::kTopKFieldNumber;
const int NonMaximumSuppressionParameter::kEtaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NonMaximumSuppressionParameter::NonMaximumSuppressionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NonMaximumSuppressionParameter)
}
NonMaximumSuppressionParameter::NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_k_, &from.top_k_,
    reinterpret_cast<char*>(&eta_) -
    reinterpret_cast<char*>(&top_k_) + sizeof(eta_));
  // @@protoc_insertion_point(copy_constructor:caffe.NonMaximumSuppressionParameter)
}

void NonMaximumSuppressionParameter::SharedCtor() {
  _cached_size_ = 0;
  top_k_ = 0;
  nms_threshold_ = 0.3f;
  eta_ = 1;
}

NonMaximumSuppressionParameter::~NonMaximumSuppressionParameter() {
  // @@protoc_insertion_point(destructor:caffe.NonMaximumSuppressionParameter)
  SharedDtor();
}

void NonMaximumSuppressionParameter::SharedDtor() {
}

void NonMaximumSuppressionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NonMaximumSuppressionParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NonMaximumSuppressionParameter& NonMaximumSuppressionParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NonMaximumSuppressionParameter* NonMaximumSuppressionParameter::New(::google::protobuf::Arena* arena) const {
  NonMaximumSuppressionParameter* n = new NonMaximumSuppressionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NonMaximumSuppressionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NonMaximumSuppressionParameter)
  if (_has_bits_[0 / 32] & 7u) {
    top_k_ = 0;
    nms_threshold_ = 0.3f;
    eta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NonMaximumSuppressionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NonMaximumSuppressionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float nms_threshold = 1 [default = 0.3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_nms_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eta = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_eta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NonMaximumSuppressionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NonMaximumSuppressionParameter)
  return false;
#undef DO_
}

void NonMaximumSuppressionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NonMaximumSuppressionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 1 [default = 0.3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->nms_threshold(), output);
  }

  // optional int32 top_k = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top_k(), output);
  }

  // optional float eta = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NonMaximumSuppressionParameter)
}

::google::protobuf::uint8* NonMaximumSuppressionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NonMaximumSuppressionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 1 [default = 0.3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->nms_threshold(), target);
  }

  // optional int32 top_k = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top_k(), target);
  }

  // optional float eta = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NonMaximumSuppressionParameter)
  return target;
}

size_t NonMaximumSuppressionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NonMaximumSuppressionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 top_k = 2;
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

    // optional float nms_threshold = 1 [default = 0.3];
    if (has_nms_threshold()) {
      total_size += 1 + 4;
    }

    // optional float eta = 3 [default = 1];
    if (has_eta()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NonMaximumSuppressionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NonMaximumSuppressionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NonMaximumSuppressionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NonMaximumSuppressionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NonMaximumSuppressionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NonMaximumSuppressionParameter)
    MergeFrom(*source);
  }
}

void NonMaximumSuppressionParameter::MergeFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NonMaximumSuppressionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      eta_ = from.eta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NonMaximumSuppressionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NonMaximumSuppressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonMaximumSuppressionParameter::CopyFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NonMaximumSuppressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonMaximumSuppressionParameter::IsInitialized() const {
  return true;
}

void NonMaximumSuppressionParameter::Swap(NonMaximumSuppressionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NonMaximumSuppressionParameter::InternalSwap(NonMaximumSuppressionParameter* other) {
  std::swap(top_k_, other->top_k_);
  std::swap(nms_threshold_, other->nms_threshold_);
  std::swap(eta_, other->eta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NonMaximumSuppressionParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NonMaximumSuppressionParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void NonMaximumSuppressionParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void NonMaximumSuppressionParameter::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  clear_has_nms_threshold();
}
float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.nms_threshold)
  return nms_threshold_;
}
void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
bool NonMaximumSuppressionParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NonMaximumSuppressionParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
void NonMaximumSuppressionParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void NonMaximumSuppressionParameter::clear_top_k() {
  top_k_ = 0;
  clear_has_top_k();
}
::google::protobuf::int32 NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.top_k)
  return top_k_;
}
void NonMaximumSuppressionParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.top_k)
}

// optional float eta = 3 [default = 1];
bool NonMaximumSuppressionParameter::has_eta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NonMaximumSuppressionParameter::set_has_eta() {
  _has_bits_[0] |= 0x00000004u;
}
void NonMaximumSuppressionParameter::clear_has_eta() {
  _has_bits_[0] &= ~0x00000004u;
}
void NonMaximumSuppressionParameter::clear_eta() {
  eta_ = 1;
  clear_has_eta();
}
float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.eta)
  return eta_;
}
void NonMaximumSuppressionParameter::set_eta(float value) {
  set_has_eta();
  eta_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.eta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionParameter::kAnchorboxFieldNumber;
const int RegionParameter::kThresholdsFieldNumber;
const int RegionParameter::kObjectScaleFieldNumber;
const int RegionParameter::kNoobjectScaleFieldNumber;
const int RegionParameter::kClassScaleFieldNumber;
const int RegionParameter::kCoordScaleFieldNumber;
const int RegionParameter::kJitterFieldNumber;
const int RegionParameter::kBiasFieldNumber;
const int RegionParameter::kRescoreFieldNumber;
const int RegionParameter::kNumClassesFieldNumber;
const int RegionParameter::kBiasMatchFieldNumber;
const int RegionParameter::kThresholdFieldNumber;
const int RegionParameter::kAdjustAnchorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionParameter::RegionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RegionParameter)
}
RegionParameter::RegionParameter(const RegionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      anchorbox_(from.anchorbox_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_scale_, &from.object_scale_,
    reinterpret_cast<char*>(&adjust_anchor_) -
    reinterpret_cast<char*>(&object_scale_) + sizeof(adjust_anchor_));
  // @@protoc_insertion_point(copy_constructor:caffe.RegionParameter)
}

void RegionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&object_scale_, 0, reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&object_scale_) + sizeof(threshold_));
  adjust_anchor_ = true;
}

RegionParameter::~RegionParameter() {
  // @@protoc_insertion_point(destructor:caffe.RegionParameter)
  SharedDtor();
}

void RegionParameter::SharedDtor() {
}

void RegionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionParameter& RegionParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionParameter* RegionParameter::New(::google::protobuf::Arena* arena) const {
  RegionParameter* n = new RegionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RegionParameter)
  anchorbox_.Clear();
  thresholds_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&object_scale_, 0, reinterpret_cast<char*>(&rescore_) -
      reinterpret_cast<char*>(&object_scale_) + sizeof(rescore_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&bias_match_, 0, reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&bias_match_) + sizeof(threshold_));
    adjust_anchor_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RegionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.AnchorBox anchorbox = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_anchorbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float thresholds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_thresholds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 object_scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_object_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 noobject_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_noobject_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noobject_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 class_scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_class_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 coord_scale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_coord_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coord_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float jitter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rescore = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_rescore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rescore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_classes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_num_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_match = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_bias_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float threshold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adjust_anchor = 13 [default = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_adjust_anchor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adjust_anchor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RegionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RegionParameter)
  return false;
#undef DO_
}

void RegionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RegionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.AnchorBox anchorbox = 1;
  for (unsigned int i = 0, n = this->anchorbox_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->anchorbox(i), output);
  }

  // repeated float thresholds = 2;
  for (int i = 0, n = this->thresholds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->thresholds(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 object_scale = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->object_scale(), output);
  }

  // optional uint32 noobject_scale = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->noobject_scale(), output);
  }

  // optional uint32 class_scale = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->class_scale(), output);
  }

  // optional uint32 coord_scale = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coord_scale(), output);
  }

  // optional float jitter = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->jitter(), output);
  }

  // optional float bias = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bias(), output);
  }

  // optional bool rescore = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->rescore(), output);
  }

  // optional uint32 num_classes = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num_classes(), output);
  }

  // optional bool bias_match = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->bias_match(), output);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->threshold(), output);
  }

  // optional bool adjust_anchor = 13 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->adjust_anchor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RegionParameter)
}

::google::protobuf::uint8* RegionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RegionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.AnchorBox anchorbox = 1;
  for (unsigned int i = 0, n = this->anchorbox_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->anchorbox(i), deterministic, target);
  }

  // repeated float thresholds = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->thresholds_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 object_scale = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->object_scale(), target);
  }

  // optional uint32 noobject_scale = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->noobject_scale(), target);
  }

  // optional uint32 class_scale = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->class_scale(), target);
  }

  // optional uint32 coord_scale = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coord_scale(), target);
  }

  // optional float jitter = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->jitter(), target);
  }

  // optional float bias = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bias(), target);
  }

  // optional bool rescore = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->rescore(), target);
  }

  // optional uint32 num_classes = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num_classes(), target);
  }

  // optional bool bias_match = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->bias_match(), target);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->threshold(), target);
  }

  // optional bool adjust_anchor = 13 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->adjust_anchor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RegionParameter)
  return target;
}

size_t RegionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RegionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.AnchorBox anchorbox = 1;
  {
    unsigned int count = this->anchorbox_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchorbox(i));
    }
  }

  // repeated float thresholds = 2;
  {
    unsigned int count = this->thresholds_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->thresholds_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 object_scale = 3;
    if (has_object_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->object_scale());
    }

    // optional uint32 noobject_scale = 4;
    if (has_noobject_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noobject_scale());
    }

    // optional uint32 class_scale = 5;
    if (has_class_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_scale());
    }

    // optional uint32 coord_scale = 6;
    if (has_coord_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coord_scale());
    }

    // optional float jitter = 7;
    if (has_jitter()) {
      total_size += 1 + 4;
    }

    // optional float bias = 8;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_classes = 10;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional bool rescore = 9;
    if (has_rescore()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool bias_match = 11;
    if (has_bias_match()) {
      total_size += 1 + 1;
    }

    // optional float threshold = 12;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool adjust_anchor = 13 [default = true];
    if (has_adjust_anchor()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RegionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RegionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RegionParameter)
    MergeFrom(*source);
  }
}

void RegionParameter::MergeFrom(const RegionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RegionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchorbox_.MergeFrom(from.anchorbox_);
  thresholds_.MergeFrom(from.thresholds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      object_scale_ = from.object_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      noobject_scale_ = from.noobject_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      class_scale_ = from.class_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      coord_scale_ = from.coord_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      jitter_ = from.jitter_;
    }
    if (cached_has_bits & 0x00000020u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000080u) {
      rescore_ = from.rescore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      bias_match_ = from.bias_match_;
    }
    if (cached_has_bits & 0x00000200u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      adjust_anchor_ = from.adjust_anchor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionParameter::CopyFrom(const RegionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionParameter::IsInitialized() const {
  return true;
}

void RegionParameter::Swap(RegionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionParameter::InternalSwap(RegionParameter* other) {
  anchorbox_.InternalSwap(&other->anchorbox_);
  thresholds_.InternalSwap(&other->thresholds_);
  std::swap(object_scale_, other->object_scale_);
  std::swap(noobject_scale_, other->noobject_scale_);
  std::swap(class_scale_, other->class_scale_);
  std::swap(coord_scale_, other->coord_scale_);
  std::swap(jitter_, other->jitter_);
  std::swap(bias_, other->bias_);
  std::swap(num_classes_, other->num_classes_);
  std::swap(rescore_, other->rescore_);
  std::swap(bias_match_, other->bias_match_);
  std::swap(threshold_, other->threshold_);
  std::swap(adjust_anchor_, other->adjust_anchor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionParameter

// repeated .caffe.AnchorBox anchorbox = 1;
int RegionParameter::anchorbox_size() const {
  return anchorbox_.size();
}
void RegionParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
const ::caffe::AnchorBox& RegionParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.anchorbox)
  return anchorbox_.Get(index);
}
::caffe::AnchorBox* RegionParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.RegionParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
::caffe::AnchorBox* RegionParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:caffe.RegionParameter.anchorbox)
  return anchorbox_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >*
RegionParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegionParameter.anchorbox)
  return &anchorbox_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::AnchorBox >&
RegionParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:caffe.RegionParameter.anchorbox)
  return anchorbox_;
}

// repeated float thresholds = 2;
int RegionParameter::thresholds_size() const {
  return thresholds_.size();
}
void RegionParameter::clear_thresholds() {
  thresholds_.Clear();
}
float RegionParameter::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.thresholds)
  return thresholds_.Get(index);
}
void RegionParameter::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.thresholds)
}
void RegionParameter::add_thresholds(float value) {
  thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RegionParameter.thresholds)
}
const ::google::protobuf::RepeatedField< float >&
RegionParameter::thresholds() const {
  // @@protoc_insertion_point(field_list:caffe.RegionParameter.thresholds)
  return thresholds_;
}
::google::protobuf::RepeatedField< float >*
RegionParameter::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegionParameter.thresholds)
  return &thresholds_;
}

// optional uint32 object_scale = 3;
bool RegionParameter::has_object_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionParameter::set_has_object_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionParameter::clear_has_object_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionParameter::clear_object_scale() {
  object_scale_ = 0u;
  clear_has_object_scale();
}
::google::protobuf::uint32 RegionParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.object_scale)
  return object_scale_;
}
void RegionParameter::set_object_scale(::google::protobuf::uint32 value) {
  set_has_object_scale();
  object_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.object_scale)
}

// optional uint32 noobject_scale = 4;
bool RegionParameter::has_noobject_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionParameter::set_has_noobject_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionParameter::clear_has_noobject_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionParameter::clear_noobject_scale() {
  noobject_scale_ = 0u;
  clear_has_noobject_scale();
}
::google::protobuf::uint32 RegionParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.noobject_scale)
  return noobject_scale_;
}
void RegionParameter::set_noobject_scale(::google::protobuf::uint32 value) {
  set_has_noobject_scale();
  noobject_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.noobject_scale)
}

// optional uint32 class_scale = 5;
bool RegionParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegionParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void RegionParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegionParameter::clear_class_scale() {
  class_scale_ = 0u;
  clear_has_class_scale();
}
::google::protobuf::uint32 RegionParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.class_scale)
  return class_scale_;
}
void RegionParameter::set_class_scale(::google::protobuf::uint32 value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.class_scale)
}

// optional uint32 coord_scale = 6;
bool RegionParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegionParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void RegionParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegionParameter::clear_coord_scale() {
  coord_scale_ = 0u;
  clear_has_coord_scale();
}
::google::protobuf::uint32 RegionParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.coord_scale)
  return coord_scale_;
}
void RegionParameter::set_coord_scale(::google::protobuf::uint32 value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.coord_scale)
}

// optional float jitter = 7;
bool RegionParameter::has_jitter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RegionParameter::set_has_jitter() {
  _has_bits_[0] |= 0x00000010u;
}
void RegionParameter::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000010u;
}
void RegionParameter::clear_jitter() {
  jitter_ = 0;
  clear_has_jitter();
}
float RegionParameter::jitter() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.jitter)
  return jitter_;
}
void RegionParameter::set_jitter(float value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.jitter)
}

// optional float bias = 8;
bool RegionParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RegionParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000020u;
}
void RegionParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000020u;
}
void RegionParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
float RegionParameter::bias() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.bias)
  return bias_;
}
void RegionParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.bias)
}

// optional bool rescore = 9;
bool RegionParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RegionParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00000080u;
}
void RegionParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00000080u;
}
void RegionParameter::clear_rescore() {
  rescore_ = false;
  clear_has_rescore();
}
bool RegionParameter::rescore() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.rescore)
  return rescore_;
}
void RegionParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.rescore)
}

// optional uint32 num_classes = 10;
bool RegionParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RegionParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000040u;
}
void RegionParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000040u;
}
void RegionParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
::google::protobuf::uint32 RegionParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.num_classes)
  return num_classes_;
}
void RegionParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.num_classes)
}

// optional bool bias_match = 11;
bool RegionParameter::has_bias_match() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RegionParameter::set_has_bias_match() {
  _has_bits_[0] |= 0x00000100u;
}
void RegionParameter::clear_has_bias_match() {
  _has_bits_[0] &= ~0x00000100u;
}
void RegionParameter::clear_bias_match() {
  bias_match_ = false;
  clear_has_bias_match();
}
bool RegionParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.bias_match)
  return bias_match_;
}
void RegionParameter::set_bias_match(bool value) {
  set_has_bias_match();
  bias_match_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.bias_match)
}

// optional float threshold = 12;
bool RegionParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RegionParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
void RegionParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void RegionParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
float RegionParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.threshold)
  return threshold_;
}
void RegionParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.threshold)
}

// optional bool adjust_anchor = 13 [default = true];
bool RegionParameter::has_adjust_anchor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RegionParameter::set_has_adjust_anchor() {
  _has_bits_[0] |= 0x00000400u;
}
void RegionParameter::clear_has_adjust_anchor() {
  _has_bits_[0] &= ~0x00000400u;
}
void RegionParameter::clear_adjust_anchor() {
  adjust_anchor_ = true;
  clear_has_adjust_anchor();
}
bool RegionParameter::adjust_anchor() const {
  // @@protoc_insertion_point(field_get:caffe.RegionParameter.adjust_anchor)
  return adjust_anchor_;
}
void RegionParameter::set_adjust_anchor(bool value) {
  set_has_adjust_anchor();
  adjust_anchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionParameter.adjust_anchor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnchorBox::kWFieldNumber;
const int AnchorBox::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnchorBox::AnchorBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AnchorBox)
}
AnchorBox::AnchorBox(const AnchorBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:caffe.AnchorBox)
}

void AnchorBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&w_, 0, reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_) + sizeof(h_));
}

AnchorBox::~AnchorBox() {
  // @@protoc_insertion_point(destructor:caffe.AnchorBox)
  SharedDtor();
}

void AnchorBox::SharedDtor() {
}

void AnchorBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnchorBox::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnchorBox& AnchorBox::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnchorBox* AnchorBox::New(::google::protobuf::Arena* arena) const {
  AnchorBox* n = new AnchorBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnchorBox::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AnchorBox)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&w_, 0, reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnchorBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AnchorBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float w = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float h = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AnchorBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AnchorBox)
  return false;
#undef DO_
}

void AnchorBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AnchorBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float w = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w(), output);
  }

  // optional float h = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->h(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AnchorBox)
}

::google::protobuf::uint8* AnchorBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AnchorBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w(), target);
  }

  // optional float h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->h(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AnchorBox)
  return target;
}

size_t AnchorBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AnchorBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float w = 1;
    if (has_w()) {
      total_size += 1 + 4;
    }

    // optional float h = 2;
    if (has_h()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnchorBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AnchorBox)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnchorBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AnchorBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AnchorBox)
    MergeFrom(*source);
  }
}

void AnchorBox::MergeFrom(const AnchorBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AnchorBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnchorBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AnchorBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorBox::CopyFrom(const AnchorBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AnchorBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorBox::IsInitialized() const {
  return true;
}

void AnchorBox::Swap(AnchorBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnchorBox::InternalSwap(AnchorBox* other) {
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnchorBox::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnchorBox

// optional float w = 1;
bool AnchorBox::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnchorBox::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
void AnchorBox::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnchorBox::clear_w() {
  w_ = 0;
  clear_has_w();
}
float AnchorBox::w() const {
  // @@protoc_insertion_point(field_get:caffe.AnchorBox.w)
  return w_;
}
void AnchorBox::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnchorBox.w)
}

// optional float h = 2;
bool AnchorBox::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnchorBox::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
void AnchorBox::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnchorBox::clear_h() {
  h_ = 0;
  clear_has_h();
}
float AnchorBox::h() const {
  // @@protoc_insertion_point(field_get:caffe.AnchorBox.h)
  return h_;
}
void AnchorBox::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnchorBox.h)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorgParameter::kStrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorgParameter::ReorgParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReorgParameter)
}
ReorgParameter::ReorgParameter(const ReorgParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stride_ = from.stride_;
  // @@protoc_insertion_point(copy_constructor:caffe.ReorgParameter)
}

void ReorgParameter::SharedCtor() {
  _cached_size_ = 0;
  stride_ = 0u;
}

ReorgParameter::~ReorgParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReorgParameter)
  SharedDtor();
}

void ReorgParameter::SharedDtor() {
}

void ReorgParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorgParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReorgParameter& ReorgParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReorgParameter* ReorgParameter::New(::google::protobuf::Arena* arena) const {
  ReorgParameter* n = new ReorgParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorgParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReorgParameter)
  stride_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorgParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReorgParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stride = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReorgParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReorgParameter)
  return false;
#undef DO_
}

void ReorgParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReorgParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stride = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stride(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReorgParameter)
}

::google::protobuf::uint8* ReorgParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReorgParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stride = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stride(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReorgParameter)
  return target;
}

size_t ReorgParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReorgParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 stride = 1;
  if (has_stride()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stride());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorgParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReorgParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorgParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorgParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReorgParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReorgParameter)
    MergeFrom(*source);
  }
}

void ReorgParameter::MergeFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReorgParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stride()) {
    set_stride(from.stride());
  }
}

void ReorgParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReorgParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorgParameter::CopyFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReorgParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorgParameter::IsInitialized() const {
  return true;
}

void ReorgParameter::Swap(ReorgParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorgParameter::InternalSwap(ReorgParameter* other) {
  std::swap(stride_, other->stride_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorgParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorgParameter

// optional uint32 stride = 1;
bool ReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
void ReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReorgParameter::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
::google::protobuf::uint32 ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.stride)
  return stride_;
}
void ReorgParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.stride)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BirdviewParameter::kUseMaxHeightFieldNumber;
const int BirdviewParameter::kUseMeanHeightFieldNumber;
const int BirdviewParameter::kUseLogCountFieldNumber;
const int BirdviewParameter::kUseDirectionFieldNumber;
const int BirdviewParameter::kUseTopIntensityFieldNumber;
const int BirdviewParameter::kUseMeanIntensityFieldNumber;
const int BirdviewParameter::kUseDistanceFieldNumber;
const int BirdviewParameter::kUseNonemptyFieldNumber;
const int BirdviewParameter::kUseFirstOrderFieldNumber;
const int BirdviewParameter::kUseSecondOrderFieldNumber;
const int BirdviewParameter::kUseHeightFilterFieldNumber;
const int BirdviewParameter::kUseDenseFeatFieldNumber;
const int BirdviewParameter::kPointCloudRangeFieldNumber;
const int BirdviewParameter::kWidthFieldNumber;
const int BirdviewParameter::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BirdviewParameter::BirdviewParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BirdviewParameter)
}
BirdviewParameter::BirdviewParameter(const BirdviewParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_max_height_, &from.use_max_height_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&use_max_height_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:caffe.BirdviewParameter)
}

void BirdviewParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&use_max_height_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&use_max_height_) + sizeof(height_));
}

BirdviewParameter::~BirdviewParameter() {
  // @@protoc_insertion_point(destructor:caffe.BirdviewParameter)
  SharedDtor();
}

void BirdviewParameter::SharedDtor() {
}

void BirdviewParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirdviewParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BirdviewParameter& BirdviewParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BirdviewParameter* BirdviewParameter::New(::google::protobuf::Arena* arena) const {
  BirdviewParameter* n = new BirdviewParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BirdviewParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BirdviewParameter)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&use_max_height_, 0, reinterpret_cast<char*>(&use_nonempty_) -
      reinterpret_cast<char*>(&use_max_height_) + sizeof(use_nonempty_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&use_first_order_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&use_first_order_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BirdviewParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BirdviewParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_max_height = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_use_max_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_max_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_mean_height = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_use_mean_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mean_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_log_count = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_log_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_log_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_direction = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_use_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_top_intensity = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_use_top_intensity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_top_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_mean_intensity = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_use_mean_intensity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mean_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_distance = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_use_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_nonempty = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_use_nonempty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_nonempty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_first_order = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_use_first_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_first_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_second_order = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_use_second_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_second_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_height_filter = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_use_height_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_height_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dense_feat = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_use_dense_feat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dense_feat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 point_cloud_range = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_point_cloud_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_cloud_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BirdviewParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BirdviewParameter)
  return false;
#undef DO_
}

void BirdviewParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BirdviewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_max_height = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_max_height(), output);
  }

  // optional bool use_mean_height = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_mean_height(), output);
  }

  // optional bool use_log_count = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_log_count(), output);
  }

  // optional bool use_direction = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_direction(), output);
  }

  // optional bool use_top_intensity = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_top_intensity(), output);
  }

  // optional bool use_mean_intensity = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_mean_intensity(), output);
  }

  // optional bool use_distance = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_distance(), output);
  }

  // optional bool use_nonempty = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_nonempty(), output);
  }

  // optional bool use_first_order = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_first_order(), output);
  }

  // optional bool use_second_order = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_second_order(), output);
  }

  // optional bool use_height_filter = 14 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_height_filter(), output);
  }

  // optional bool use_dense_feat = 15 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->use_dense_feat(), output);
  }

  // optional uint32 point_cloud_range = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->point_cloud_range(), output);
  }

  // optional uint32 width = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->width(), output);
  }

  // optional uint32 height = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BirdviewParameter)
}

::google::protobuf::uint8* BirdviewParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BirdviewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_max_height = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_max_height(), target);
  }

  // optional bool use_mean_height = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_mean_height(), target);
  }

  // optional bool use_log_count = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_log_count(), target);
  }

  // optional bool use_direction = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_direction(), target);
  }

  // optional bool use_top_intensity = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_top_intensity(), target);
  }

  // optional bool use_mean_intensity = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_mean_intensity(), target);
  }

  // optional bool use_distance = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_distance(), target);
  }

  // optional bool use_nonempty = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_nonempty(), target);
  }

  // optional bool use_first_order = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_first_order(), target);
  }

  // optional bool use_second_order = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_second_order(), target);
  }

  // optional bool use_height_filter = 14 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_height_filter(), target);
  }

  // optional bool use_dense_feat = 15 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->use_dense_feat(), target);
  }

  // optional uint32 point_cloud_range = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->point_cloud_range(), target);
  }

  // optional uint32 width = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->width(), target);
  }

  // optional uint32 height = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BirdviewParameter)
  return target;
}

size_t BirdviewParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BirdviewParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool use_max_height = 1 [default = false];
    if (has_use_max_height()) {
      total_size += 1 + 1;
    }

    // optional bool use_mean_height = 2 [default = false];
    if (has_use_mean_height()) {
      total_size += 1 + 1;
    }

    // optional bool use_log_count = 3 [default = false];
    if (has_use_log_count()) {
      total_size += 1 + 1;
    }

    // optional bool use_direction = 4 [default = false];
    if (has_use_direction()) {
      total_size += 1 + 1;
    }

    // optional bool use_top_intensity = 5 [default = false];
    if (has_use_top_intensity()) {
      total_size += 1 + 1;
    }

    // optional bool use_mean_intensity = 6 [default = false];
    if (has_use_mean_intensity()) {
      total_size += 1 + 1;
    }

    // optional bool use_distance = 7 [default = false];
    if (has_use_distance()) {
      total_size += 1 + 1;
    }

    // optional bool use_nonempty = 8 [default = false];
    if (has_use_nonempty()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool use_first_order = 9 [default = false];
    if (has_use_first_order()) {
      total_size += 1 + 1;
    }

    // optional bool use_second_order = 10 [default = false];
    if (has_use_second_order()) {
      total_size += 1 + 1;
    }

    // optional bool use_height_filter = 14 [default = false];
    if (has_use_height_filter()) {
      total_size += 1 + 1;
    }

    // optional bool use_dense_feat = 15 [default = false];
    if (has_use_dense_feat()) {
      total_size += 1 + 1;
    }

    // optional uint32 point_cloud_range = 16;
    if (has_point_cloud_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point_cloud_range());
    }

    // optional uint32 width = 17;
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 18;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirdviewParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BirdviewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BirdviewParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BirdviewParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BirdviewParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BirdviewParameter)
    MergeFrom(*source);
  }
}

void BirdviewParameter::MergeFrom(const BirdviewParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BirdviewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_max_height_ = from.use_max_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_mean_height_ = from.use_mean_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_log_count_ = from.use_log_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_direction_ = from.use_direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_top_intensity_ = from.use_top_intensity_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_mean_intensity_ = from.use_mean_intensity_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_distance_ = from.use_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_nonempty_ = from.use_nonempty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      use_first_order_ = from.use_first_order_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_second_order_ = from.use_second_order_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_height_filter_ = from.use_height_filter_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_dense_feat_ = from.use_dense_feat_;
    }
    if (cached_has_bits & 0x00001000u) {
      point_cloud_range_ = from.point_cloud_range_;
    }
    if (cached_has_bits & 0x00002000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00004000u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BirdviewParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BirdviewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirdviewParameter::CopyFrom(const BirdviewParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BirdviewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirdviewParameter::IsInitialized() const {
  return true;
}

void BirdviewParameter::Swap(BirdviewParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BirdviewParameter::InternalSwap(BirdviewParameter* other) {
  std::swap(use_max_height_, other->use_max_height_);
  std::swap(use_mean_height_, other->use_mean_height_);
  std::swap(use_log_count_, other->use_log_count_);
  std::swap(use_direction_, other->use_direction_);
  std::swap(use_top_intensity_, other->use_top_intensity_);
  std::swap(use_mean_intensity_, other->use_mean_intensity_);
  std::swap(use_distance_, other->use_distance_);
  std::swap(use_nonempty_, other->use_nonempty_);
  std::swap(use_first_order_, other->use_first_order_);
  std::swap(use_second_order_, other->use_second_order_);
  std::swap(use_height_filter_, other->use_height_filter_);
  std::swap(use_dense_feat_, other->use_dense_feat_);
  std::swap(point_cloud_range_, other->point_cloud_range_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BirdviewParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BirdviewParameter

// optional bool use_max_height = 1 [default = false];
bool BirdviewParameter::has_use_max_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BirdviewParameter::set_has_use_max_height() {
  _has_bits_[0] |= 0x00000001u;
}
void BirdviewParameter::clear_has_use_max_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void BirdviewParameter::clear_use_max_height() {
  use_max_height_ = false;
  clear_has_use_max_height();
}
bool BirdviewParameter::use_max_height() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_max_height)
  return use_max_height_;
}
void BirdviewParameter::set_use_max_height(bool value) {
  set_has_use_max_height();
  use_max_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_max_height)
}

// optional bool use_mean_height = 2 [default = false];
bool BirdviewParameter::has_use_mean_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BirdviewParameter::set_has_use_mean_height() {
  _has_bits_[0] |= 0x00000002u;
}
void BirdviewParameter::clear_has_use_mean_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void BirdviewParameter::clear_use_mean_height() {
  use_mean_height_ = false;
  clear_has_use_mean_height();
}
bool BirdviewParameter::use_mean_height() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_mean_height)
  return use_mean_height_;
}
void BirdviewParameter::set_use_mean_height(bool value) {
  set_has_use_mean_height();
  use_mean_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_mean_height)
}

// optional bool use_log_count = 3 [default = false];
bool BirdviewParameter::has_use_log_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BirdviewParameter::set_has_use_log_count() {
  _has_bits_[0] |= 0x00000004u;
}
void BirdviewParameter::clear_has_use_log_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void BirdviewParameter::clear_use_log_count() {
  use_log_count_ = false;
  clear_has_use_log_count();
}
bool BirdviewParameter::use_log_count() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_log_count)
  return use_log_count_;
}
void BirdviewParameter::set_use_log_count(bool value) {
  set_has_use_log_count();
  use_log_count_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_log_count)
}

// optional bool use_direction = 4 [default = false];
bool BirdviewParameter::has_use_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BirdviewParameter::set_has_use_direction() {
  _has_bits_[0] |= 0x00000008u;
}
void BirdviewParameter::clear_has_use_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
void BirdviewParameter::clear_use_direction() {
  use_direction_ = false;
  clear_has_use_direction();
}
bool BirdviewParameter::use_direction() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_direction)
  return use_direction_;
}
void BirdviewParameter::set_use_direction(bool value) {
  set_has_use_direction();
  use_direction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_direction)
}

// optional bool use_top_intensity = 5 [default = false];
bool BirdviewParameter::has_use_top_intensity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BirdviewParameter::set_has_use_top_intensity() {
  _has_bits_[0] |= 0x00000010u;
}
void BirdviewParameter::clear_has_use_top_intensity() {
  _has_bits_[0] &= ~0x00000010u;
}
void BirdviewParameter::clear_use_top_intensity() {
  use_top_intensity_ = false;
  clear_has_use_top_intensity();
}
bool BirdviewParameter::use_top_intensity() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_top_intensity)
  return use_top_intensity_;
}
void BirdviewParameter::set_use_top_intensity(bool value) {
  set_has_use_top_intensity();
  use_top_intensity_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_top_intensity)
}

// optional bool use_mean_intensity = 6 [default = false];
bool BirdviewParameter::has_use_mean_intensity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BirdviewParameter::set_has_use_mean_intensity() {
  _has_bits_[0] |= 0x00000020u;
}
void BirdviewParameter::clear_has_use_mean_intensity() {
  _has_bits_[0] &= ~0x00000020u;
}
void BirdviewParameter::clear_use_mean_intensity() {
  use_mean_intensity_ = false;
  clear_has_use_mean_intensity();
}
bool BirdviewParameter::use_mean_intensity() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_mean_intensity)
  return use_mean_intensity_;
}
void BirdviewParameter::set_use_mean_intensity(bool value) {
  set_has_use_mean_intensity();
  use_mean_intensity_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_mean_intensity)
}

// optional bool use_distance = 7 [default = false];
bool BirdviewParameter::has_use_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BirdviewParameter::set_has_use_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void BirdviewParameter::clear_has_use_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void BirdviewParameter::clear_use_distance() {
  use_distance_ = false;
  clear_has_use_distance();
}
bool BirdviewParameter::use_distance() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_distance)
  return use_distance_;
}
void BirdviewParameter::set_use_distance(bool value) {
  set_has_use_distance();
  use_distance_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_distance)
}

// optional bool use_nonempty = 8 [default = false];
bool BirdviewParameter::has_use_nonempty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BirdviewParameter::set_has_use_nonempty() {
  _has_bits_[0] |= 0x00000080u;
}
void BirdviewParameter::clear_has_use_nonempty() {
  _has_bits_[0] &= ~0x00000080u;
}
void BirdviewParameter::clear_use_nonempty() {
  use_nonempty_ = false;
  clear_has_use_nonempty();
}
bool BirdviewParameter::use_nonempty() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_nonempty)
  return use_nonempty_;
}
void BirdviewParameter::set_use_nonempty(bool value) {
  set_has_use_nonempty();
  use_nonempty_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_nonempty)
}

// optional bool use_first_order = 9 [default = false];
bool BirdviewParameter::has_use_first_order() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BirdviewParameter::set_has_use_first_order() {
  _has_bits_[0] |= 0x00000100u;
}
void BirdviewParameter::clear_has_use_first_order() {
  _has_bits_[0] &= ~0x00000100u;
}
void BirdviewParameter::clear_use_first_order() {
  use_first_order_ = false;
  clear_has_use_first_order();
}
bool BirdviewParameter::use_first_order() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_first_order)
  return use_first_order_;
}
void BirdviewParameter::set_use_first_order(bool value) {
  set_has_use_first_order();
  use_first_order_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_first_order)
}

// optional bool use_second_order = 10 [default = false];
bool BirdviewParameter::has_use_second_order() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BirdviewParameter::set_has_use_second_order() {
  _has_bits_[0] |= 0x00000200u;
}
void BirdviewParameter::clear_has_use_second_order() {
  _has_bits_[0] &= ~0x00000200u;
}
void BirdviewParameter::clear_use_second_order() {
  use_second_order_ = false;
  clear_has_use_second_order();
}
bool BirdviewParameter::use_second_order() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_second_order)
  return use_second_order_;
}
void BirdviewParameter::set_use_second_order(bool value) {
  set_has_use_second_order();
  use_second_order_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_second_order)
}

// optional bool use_height_filter = 14 [default = false];
bool BirdviewParameter::has_use_height_filter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BirdviewParameter::set_has_use_height_filter() {
  _has_bits_[0] |= 0x00000400u;
}
void BirdviewParameter::clear_has_use_height_filter() {
  _has_bits_[0] &= ~0x00000400u;
}
void BirdviewParameter::clear_use_height_filter() {
  use_height_filter_ = false;
  clear_has_use_height_filter();
}
bool BirdviewParameter::use_height_filter() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_height_filter)
  return use_height_filter_;
}
void BirdviewParameter::set_use_height_filter(bool value) {
  set_has_use_height_filter();
  use_height_filter_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_height_filter)
}

// optional bool use_dense_feat = 15 [default = false];
bool BirdviewParameter::has_use_dense_feat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BirdviewParameter::set_has_use_dense_feat() {
  _has_bits_[0] |= 0x00000800u;
}
void BirdviewParameter::clear_has_use_dense_feat() {
  _has_bits_[0] &= ~0x00000800u;
}
void BirdviewParameter::clear_use_dense_feat() {
  use_dense_feat_ = false;
  clear_has_use_dense_feat();
}
bool BirdviewParameter::use_dense_feat() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.use_dense_feat)
  return use_dense_feat_;
}
void BirdviewParameter::set_use_dense_feat(bool value) {
  set_has_use_dense_feat();
  use_dense_feat_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.use_dense_feat)
}

// optional uint32 point_cloud_range = 16;
bool BirdviewParameter::has_point_cloud_range() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BirdviewParameter::set_has_point_cloud_range() {
  _has_bits_[0] |= 0x00001000u;
}
void BirdviewParameter::clear_has_point_cloud_range() {
  _has_bits_[0] &= ~0x00001000u;
}
void BirdviewParameter::clear_point_cloud_range() {
  point_cloud_range_ = 0u;
  clear_has_point_cloud_range();
}
::google::protobuf::uint32 BirdviewParameter::point_cloud_range() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.point_cloud_range)
  return point_cloud_range_;
}
void BirdviewParameter::set_point_cloud_range(::google::protobuf::uint32 value) {
  set_has_point_cloud_range();
  point_cloud_range_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.point_cloud_range)
}

// optional uint32 width = 17;
bool BirdviewParameter::has_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BirdviewParameter::set_has_width() {
  _has_bits_[0] |= 0x00002000u;
}
void BirdviewParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00002000u;
}
void BirdviewParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 BirdviewParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.width)
  return width_;
}
void BirdviewParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.width)
}

// optional uint32 height = 18;
bool BirdviewParameter::has_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BirdviewParameter::set_has_height() {
  _has_bits_[0] |= 0x00004000u;
}
void BirdviewParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00004000u;
}
void BirdviewParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 BirdviewParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.BirdviewParameter.height)
  return height_;
}
void BirdviewParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BirdviewParameter.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderViewParameter::kNthetaFieldNumber;
const int CylinderViewParameter::kNphiFieldNumber;
const int CylinderViewParameter::kOthetaFieldNumber;
const int CylinderViewParameter::kOphiFieldNumber;
const int CylinderViewParameter::kDthetaFieldNumber;
const int CylinderViewParameter::kDphiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderViewParameter::CylinderViewParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CylinderViewParameter)
}
CylinderViewParameter::CylinderViewParameter(const CylinderViewParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ntheta_, &from.ntheta_,
    reinterpret_cast<char*>(&dphi_) -
    reinterpret_cast<char*>(&ntheta_) + sizeof(dphi_));
  // @@protoc_insertion_point(copy_constructor:caffe.CylinderViewParameter)
}

void CylinderViewParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ntheta_, 0, reinterpret_cast<char*>(&dphi_) -
    reinterpret_cast<char*>(&ntheta_) + sizeof(dphi_));
}

CylinderViewParameter::~CylinderViewParameter() {
  // @@protoc_insertion_point(destructor:caffe.CylinderViewParameter)
  SharedDtor();
}

void CylinderViewParameter::SharedDtor() {
}

void CylinderViewParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CylinderViewParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderViewParameter& CylinderViewParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

CylinderViewParameter* CylinderViewParameter::New(::google::protobuf::Arena* arena) const {
  CylinderViewParameter* n = new CylinderViewParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CylinderViewParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CylinderViewParameter)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&ntheta_, 0, reinterpret_cast<char*>(&dphi_) -
      reinterpret_cast<char*>(&ntheta_) + sizeof(dphi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CylinderViewParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CylinderViewParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ntheta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ntheta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntheta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nphi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nphi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nphi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float otheta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_otheta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &otheta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ophi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_ophi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ophi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dtheta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_dtheta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dtheta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dphi = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_dphi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dphi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CylinderViewParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CylinderViewParameter)
  return false;
#undef DO_
}

void CylinderViewParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CylinderViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ntheta = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ntheta(), output);
  }

  // optional uint32 nphi = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nphi(), output);
  }

  // optional float otheta = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->otheta(), output);
  }

  // optional float ophi = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ophi(), output);
  }

  // optional float dtheta = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dtheta(), output);
  }

  // optional float dphi = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dphi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CylinderViewParameter)
}

::google::protobuf::uint8* CylinderViewParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CylinderViewParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ntheta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ntheta(), target);
  }

  // optional uint32 nphi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nphi(), target);
  }

  // optional float otheta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->otheta(), target);
  }

  // optional float ophi = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ophi(), target);
  }

  // optional float dtheta = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dtheta(), target);
  }

  // optional float dphi = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dphi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CylinderViewParameter)
  return target;
}

size_t CylinderViewParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CylinderViewParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 ntheta = 1;
    if (has_ntheta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntheta());
    }

    // optional uint32 nphi = 2;
    if (has_nphi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nphi());
    }

    // optional float otheta = 3;
    if (has_otheta()) {
      total_size += 1 + 4;
    }

    // optional float ophi = 4;
    if (has_ophi()) {
      total_size += 1 + 4;
    }

    // optional float dtheta = 5;
    if (has_dtheta()) {
      total_size += 1 + 4;
    }

    // optional float dphi = 6;
    if (has_dphi()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CylinderViewParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CylinderViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderViewParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderViewParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CylinderViewParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CylinderViewParameter)
    MergeFrom(*source);
  }
}

void CylinderViewParameter::MergeFrom(const CylinderViewParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CylinderViewParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      ntheta_ = from.ntheta_;
    }
    if (cached_has_bits & 0x00000002u) {
      nphi_ = from.nphi_;
    }
    if (cached_has_bits & 0x00000004u) {
      otheta_ = from.otheta_;
    }
    if (cached_has_bits & 0x00000008u) {
      ophi_ = from.ophi_;
    }
    if (cached_has_bits & 0x00000010u) {
      dtheta_ = from.dtheta_;
    }
    if (cached_has_bits & 0x00000020u) {
      dphi_ = from.dphi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CylinderViewParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CylinderViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderViewParameter::CopyFrom(const CylinderViewParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CylinderViewParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderViewParameter::IsInitialized() const {
  return true;
}

void CylinderViewParameter::Swap(CylinderViewParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderViewParameter::InternalSwap(CylinderViewParameter* other) {
  std::swap(ntheta_, other->ntheta_);
  std::swap(nphi_, other->nphi_);
  std::swap(otheta_, other->otheta_);
  std::swap(ophi_, other->ophi_);
  std::swap(dtheta_, other->dtheta_);
  std::swap(dphi_, other->dphi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CylinderViewParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CylinderViewParameter

// optional uint32 ntheta = 1;
bool CylinderViewParameter::has_ntheta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CylinderViewParameter::set_has_ntheta() {
  _has_bits_[0] |= 0x00000001u;
}
void CylinderViewParameter::clear_has_ntheta() {
  _has_bits_[0] &= ~0x00000001u;
}
void CylinderViewParameter::clear_ntheta() {
  ntheta_ = 0u;
  clear_has_ntheta();
}
::google::protobuf::uint32 CylinderViewParameter::ntheta() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.ntheta)
  return ntheta_;
}
void CylinderViewParameter::set_ntheta(::google::protobuf::uint32 value) {
  set_has_ntheta();
  ntheta_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.ntheta)
}

// optional uint32 nphi = 2;
bool CylinderViewParameter::has_nphi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CylinderViewParameter::set_has_nphi() {
  _has_bits_[0] |= 0x00000002u;
}
void CylinderViewParameter::clear_has_nphi() {
  _has_bits_[0] &= ~0x00000002u;
}
void CylinderViewParameter::clear_nphi() {
  nphi_ = 0u;
  clear_has_nphi();
}
::google::protobuf::uint32 CylinderViewParameter::nphi() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.nphi)
  return nphi_;
}
void CylinderViewParameter::set_nphi(::google::protobuf::uint32 value) {
  set_has_nphi();
  nphi_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.nphi)
}

// optional float otheta = 3;
bool CylinderViewParameter::has_otheta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CylinderViewParameter::set_has_otheta() {
  _has_bits_[0] |= 0x00000004u;
}
void CylinderViewParameter::clear_has_otheta() {
  _has_bits_[0] &= ~0x00000004u;
}
void CylinderViewParameter::clear_otheta() {
  otheta_ = 0;
  clear_has_otheta();
}
float CylinderViewParameter::otheta() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.otheta)
  return otheta_;
}
void CylinderViewParameter::set_otheta(float value) {
  set_has_otheta();
  otheta_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.otheta)
}

// optional float ophi = 4;
bool CylinderViewParameter::has_ophi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CylinderViewParameter::set_has_ophi() {
  _has_bits_[0] |= 0x00000008u;
}
void CylinderViewParameter::clear_has_ophi() {
  _has_bits_[0] &= ~0x00000008u;
}
void CylinderViewParameter::clear_ophi() {
  ophi_ = 0;
  clear_has_ophi();
}
float CylinderViewParameter::ophi() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.ophi)
  return ophi_;
}
void CylinderViewParameter::set_ophi(float value) {
  set_has_ophi();
  ophi_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.ophi)
}

// optional float dtheta = 5;
bool CylinderViewParameter::has_dtheta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CylinderViewParameter::set_has_dtheta() {
  _has_bits_[0] |= 0x00000010u;
}
void CylinderViewParameter::clear_has_dtheta() {
  _has_bits_[0] &= ~0x00000010u;
}
void CylinderViewParameter::clear_dtheta() {
  dtheta_ = 0;
  clear_has_dtheta();
}
float CylinderViewParameter::dtheta() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.dtheta)
  return dtheta_;
}
void CylinderViewParameter::set_dtheta(float value) {
  set_has_dtheta();
  dtheta_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.dtheta)
}

// optional float dphi = 6;
bool CylinderViewParameter::has_dphi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CylinderViewParameter::set_has_dphi() {
  _has_bits_[0] |= 0x00000020u;
}
void CylinderViewParameter::clear_has_dphi() {
  _has_bits_[0] &= ~0x00000020u;
}
void CylinderViewParameter::clear_dphi() {
  dphi_ = 0;
  clear_has_dphi();
}
float CylinderViewParameter::dphi() const {
  // @@protoc_insertion_point(field_get:caffe.CylinderViewParameter.dphi)
  return dphi_;
}
void CylinderViewParameter::set_dphi(float value) {
  set_has_dphi();
  dphi_ = value;
  // @@protoc_insertion_point(field_set:caffe.CylinderViewParameter.dphi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinaryDataParameter::kSourceFieldNumber;
const int BinaryDataParameter::kBatchSizeFieldNumber;
const int BinaryDataParameter::kShuffleFieldNumber;
const int BinaryDataParameter::kUseDisturbFieldNumber;
const int BinaryDataParameter::kIgnoreLabelFieldNumber;
const int BinaryDataParameter::kPadSizeFieldNumber;
const int BinaryDataParameter::kUseInstanceLevelFieldNumber;
const int BinaryDataParameter::kNumInstanceFeatFieldNumber;
const int BinaryDataParameter::kRootFolderFieldNumber;
const int BinaryDataParameter::kPreLoadFieldNumber;
const int BinaryDataParameter::kViewTypeFieldNumber;
const int BinaryDataParameter::kLabelMapFileFieldNumber;
const int BinaryDataParameter::kDoClassifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinaryDataParameter::BinaryDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BinaryDataParameter)
}
BinaryDataParameter::BinaryDataParameter(const BinaryDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_folder()) {
    root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  label_map_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_map_file()) {
    label_map_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&view_type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(view_type_));
  // @@protoc_insertion_point(copy_constructor:caffe.BinaryDataParameter)
}

void BinaryDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_map_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&do_classify_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(do_classify_));
  view_type_ = 1;
}

BinaryDataParameter::~BinaryDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.BinaryDataParameter)
  SharedDtor();
}

void BinaryDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_map_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinaryDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BinaryDataParameter& BinaryDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BinaryDataParameter* BinaryDataParameter::New(::google::protobuf::Arena* arena) const {
  BinaryDataParameter* n = new BinaryDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BinaryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BinaryDataParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_root_folder()) {
      GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*root_folder_.UnsafeRawStringPointer())->clear();
    }
    if (has_label_map_file()) {
      GOOGLE_DCHECK(!label_map_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_map_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&batch_size_, 0, reinterpret_cast<char*>(&shuffle_) -
      reinterpret_cast<char*>(&batch_size_) + sizeof(shuffle_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&use_disturb_, 0, reinterpret_cast<char*>(&do_classify_) -
      reinterpret_cast<char*>(&use_disturb_) + sizeof(do_classify_));
    view_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BinaryDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BinaryDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BinaryDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_disturb = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_use_disturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_disturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ignore_label = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_size = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_pad_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_instance_level = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_use_instance_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_instance_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_instance_feat = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_num_instance_feat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_instance_feat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string root_folder = 12 [default = ""];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BinaryDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pre_load = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_pre_load();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pre_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BinaryDataParameter_ViewType_IsValid(value)) {
            set_view_type(static_cast< ::caffe::BinaryDataParameter_ViewType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label_map_file = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_map_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_map_file().data(), this->label_map_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BinaryDataParameter.label_map_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool do_classify = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_do_classify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_classify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BinaryDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BinaryDataParameter)
  return false;
#undef DO_
}

void BinaryDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BinaryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BinaryDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  // optional bool use_disturb = 4 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_disturb(), output);
  }

  // optional uint32 ignore_label = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ignore_label(), output);
  }

  // optional uint32 pad_size = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pad_size(), output);
  }

  // optional bool use_instance_level = 7 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_instance_level(), output);
  }

  // optional uint32 num_instance_feat = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_instance_feat(), output);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BinaryDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->root_folder(), output);
  }

  // optional bool pre_load = 20 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->pre_load(), output);
  }

  // optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->view_type(), output);
  }

  // optional string label_map_file = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_map_file().data(), this->label_map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BinaryDataParameter.label_map_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->label_map_file(), output);
  }

  // optional bool do_classify = 23 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->do_classify(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BinaryDataParameter)
}

::google::protobuf::uint8* BinaryDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BinaryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BinaryDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  // optional bool use_disturb = 4 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_disturb(), target);
  }

  // optional uint32 ignore_label = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ignore_label(), target);
  }

  // optional uint32 pad_size = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pad_size(), target);
  }

  // optional bool use_instance_level = 7 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_instance_level(), target);
  }

  // optional uint32 num_instance_feat = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_instance_feat(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BinaryDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->root_folder(), target);
  }

  // optional bool pre_load = 20 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->pre_load(), target);
  }

  // optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->view_type(), target);
  }

  // optional string label_map_file = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_map_file().data(), this->label_map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BinaryDataParameter.label_map_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->label_map_file(), target);
  }

  // optional bool do_classify = 23 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->do_classify(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BinaryDataParameter)
  return target;
}

size_t BinaryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BinaryDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string root_folder = 12 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional string label_map_file = 22;
    if (has_label_map_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_map_file());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 ignore_label = 5 [default = 0];
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_label());
    }

    // optional uint32 pad_size = 6 [default = 0];
    if (has_pad_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_size());
    }

    // optional uint32 num_instance_feat = 8 [default = 0];
    if (has_num_instance_feat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_instance_feat());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool use_disturb = 4 [default = false];
    if (has_use_disturb()) {
      total_size += 1 + 1;
    }

    // optional bool use_instance_level = 7 [default = false];
    if (has_use_instance_level()) {
      total_size += 1 + 1;
    }

    // optional bool pre_load = 20 [default = false];
    if (has_pre_load()) {
      total_size += 2 + 1;
    }

    // optional bool do_classify = 23 [default = false];
    if (has_do_classify()) {
      total_size += 2 + 1;
    }

    // optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
    if (has_view_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BinaryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinaryDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BinaryDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BinaryDataParameter)
    MergeFrom(*source);
  }
}

void BinaryDataParameter::MergeFrom(const BinaryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BinaryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_label_map_file();
      label_map_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000020u) {
      pad_size_ = from.pad_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_instance_feat_ = from.num_instance_feat_;
    }
    if (cached_has_bits & 0x00000080u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      use_disturb_ = from.use_disturb_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_instance_level_ = from.use_instance_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      pre_load_ = from.pre_load_;
    }
    if (cached_has_bits & 0x00000800u) {
      do_classify_ = from.do_classify_;
    }
    if (cached_has_bits & 0x00001000u) {
      view_type_ = from.view_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinaryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BinaryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryDataParameter::CopyFrom(const BinaryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BinaryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataParameter::IsInitialized() const {
  return true;
}

void BinaryDataParameter::Swap(BinaryDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinaryDataParameter::InternalSwap(BinaryDataParameter* other) {
  source_.Swap(&other->source_);
  root_folder_.Swap(&other->root_folder_);
  label_map_file_.Swap(&other->label_map_file_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(pad_size_, other->pad_size_);
  std::swap(num_instance_feat_, other->num_instance_feat_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(use_disturb_, other->use_disturb_);
  std::swap(use_instance_level_, other->use_instance_level_);
  std::swap(pre_load_, other->pre_load_);
  std::swap(do_classify_, other->do_classify_);
  std::swap(view_type_, other->view_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BinaryDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BinaryDataParameter

// optional string source = 1;
bool BinaryDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BinaryDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void BinaryDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void BinaryDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& BinaryDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.source)
  return source_.GetNoArena();
}
void BinaryDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.source)
}
#if LANG_CXX11
void BinaryDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BinaryDataParameter.source)
}
#endif
void BinaryDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BinaryDataParameter.source)
}
void BinaryDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BinaryDataParameter.source)
}
::std::string* BinaryDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.BinaryDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BinaryDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.BinaryDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BinaryDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.BinaryDataParameter.source)
}

// optional uint32 batch_size = 2;
bool BinaryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BinaryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void BinaryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void BinaryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 BinaryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.batch_size)
  return batch_size_;
}
void BinaryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
bool BinaryDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BinaryDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000080u;
}
void BinaryDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000080u;
}
void BinaryDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool BinaryDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.shuffle)
  return shuffle_;
}
void BinaryDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.shuffle)
}

// optional bool use_disturb = 4 [default = false];
bool BinaryDataParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BinaryDataParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000100u;
}
void BinaryDataParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000100u;
}
void BinaryDataParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
bool BinaryDataParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.use_disturb)
  return use_disturb_;
}
void BinaryDataParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.use_disturb)
}

// optional uint32 ignore_label = 5 [default = 0];
bool BinaryDataParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BinaryDataParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000010u;
}
void BinaryDataParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void BinaryDataParameter::clear_ignore_label() {
  ignore_label_ = 0u;
  clear_has_ignore_label();
}
::google::protobuf::uint32 BinaryDataParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.ignore_label)
  return ignore_label_;
}
void BinaryDataParameter::set_ignore_label(::google::protobuf::uint32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.ignore_label)
}

// optional uint32 pad_size = 6 [default = 0];
bool BinaryDataParameter::has_pad_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BinaryDataParameter::set_has_pad_size() {
  _has_bits_[0] |= 0x00000020u;
}
void BinaryDataParameter::clear_has_pad_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void BinaryDataParameter::clear_pad_size() {
  pad_size_ = 0u;
  clear_has_pad_size();
}
::google::protobuf::uint32 BinaryDataParameter::pad_size() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.pad_size)
  return pad_size_;
}
void BinaryDataParameter::set_pad_size(::google::protobuf::uint32 value) {
  set_has_pad_size();
  pad_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.pad_size)
}

// optional bool use_instance_level = 7 [default = false];
bool BinaryDataParameter::has_use_instance_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BinaryDataParameter::set_has_use_instance_level() {
  _has_bits_[0] |= 0x00000200u;
}
void BinaryDataParameter::clear_has_use_instance_level() {
  _has_bits_[0] &= ~0x00000200u;
}
void BinaryDataParameter::clear_use_instance_level() {
  use_instance_level_ = false;
  clear_has_use_instance_level();
}
bool BinaryDataParameter::use_instance_level() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.use_instance_level)
  return use_instance_level_;
}
void BinaryDataParameter::set_use_instance_level(bool value) {
  set_has_use_instance_level();
  use_instance_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.use_instance_level)
}

// optional uint32 num_instance_feat = 8 [default = 0];
bool BinaryDataParameter::has_num_instance_feat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BinaryDataParameter::set_has_num_instance_feat() {
  _has_bits_[0] |= 0x00000040u;
}
void BinaryDataParameter::clear_has_num_instance_feat() {
  _has_bits_[0] &= ~0x00000040u;
}
void BinaryDataParameter::clear_num_instance_feat() {
  num_instance_feat_ = 0u;
  clear_has_num_instance_feat();
}
::google::protobuf::uint32 BinaryDataParameter::num_instance_feat() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.num_instance_feat)
  return num_instance_feat_;
}
void BinaryDataParameter::set_num_instance_feat(::google::protobuf::uint32 value) {
  set_has_num_instance_feat();
  num_instance_feat_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.num_instance_feat)
}

// optional string root_folder = 12 [default = ""];
bool BinaryDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BinaryDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000002u;
}
void BinaryDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
void BinaryDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& BinaryDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
void BinaryDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.root_folder)
}
#if LANG_CXX11
void BinaryDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BinaryDataParameter.root_folder)
}
#endif
void BinaryDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BinaryDataParameter.root_folder)
}
void BinaryDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BinaryDataParameter.root_folder)
}
::std::string* BinaryDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.BinaryDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BinaryDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.BinaryDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BinaryDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.BinaryDataParameter.root_folder)
}

// optional bool pre_load = 20 [default = false];
bool BinaryDataParameter::has_pre_load() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BinaryDataParameter::set_has_pre_load() {
  _has_bits_[0] |= 0x00000400u;
}
void BinaryDataParameter::clear_has_pre_load() {
  _has_bits_[0] &= ~0x00000400u;
}
void BinaryDataParameter::clear_pre_load() {
  pre_load_ = false;
  clear_has_pre_load();
}
bool BinaryDataParameter::pre_load() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.pre_load)
  return pre_load_;
}
void BinaryDataParameter::set_pre_load(bool value) {
  set_has_pre_load();
  pre_load_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.pre_load)
}

// optional .caffe.BinaryDataParameter.ViewType view_type = 21 [default = Cylinder];
bool BinaryDataParameter::has_view_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BinaryDataParameter::set_has_view_type() {
  _has_bits_[0] |= 0x00001000u;
}
void BinaryDataParameter::clear_has_view_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void BinaryDataParameter::clear_view_type() {
  view_type_ = 1;
  clear_has_view_type();
}
::caffe::BinaryDataParameter_ViewType BinaryDataParameter::view_type() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.view_type)
  return static_cast< ::caffe::BinaryDataParameter_ViewType >(view_type_);
}
void BinaryDataParameter::set_view_type(::caffe::BinaryDataParameter_ViewType value) {
  assert(::caffe::BinaryDataParameter_ViewType_IsValid(value));
  set_has_view_type();
  view_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.view_type)
}

// optional string label_map_file = 22;
bool BinaryDataParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BinaryDataParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000004u;
}
void BinaryDataParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void BinaryDataParameter::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_file();
}
const ::std::string& BinaryDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.label_map_file)
  return label_map_file_.GetNoArena();
}
void BinaryDataParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.label_map_file)
}
#if LANG_CXX11
void BinaryDataParameter::set_label_map_file(::std::string&& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BinaryDataParameter.label_map_file)
}
#endif
void BinaryDataParameter::set_label_map_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BinaryDataParameter.label_map_file)
}
void BinaryDataParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BinaryDataParameter.label_map_file)
}
::std::string* BinaryDataParameter::mutable_label_map_file() {
  set_has_label_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.BinaryDataParameter.label_map_file)
  return label_map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BinaryDataParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:caffe.BinaryDataParameter.label_map_file)
  clear_has_label_map_file();
  return label_map_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BinaryDataParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file != NULL) {
    set_has_label_map_file();
  } else {
    clear_has_label_map_file();
  }
  label_map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.BinaryDataParameter.label_map_file)
}

// optional bool do_classify = 23 [default = false];
bool BinaryDataParameter::has_do_classify() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BinaryDataParameter::set_has_do_classify() {
  _has_bits_[0] |= 0x00000800u;
}
void BinaryDataParameter::clear_has_do_classify() {
  _has_bits_[0] &= ~0x00000800u;
}
void BinaryDataParameter::clear_do_classify() {
  do_classify_ = false;
  clear_has_do_classify();
}
bool BinaryDataParameter::do_classify() const {
  // @@protoc_insertion_point(field_get:caffe.BinaryDataParameter.do_classify)
  return do_classify_;
}
void BinaryDataParameter::set_do_classify(bool value) {
  set_has_do_classify();
  do_classify_ = value;
  // @@protoc_insertion_point(field_set:caffe.BinaryDataParameter.do_classify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelMapItem::kNameFieldNumber;
const int LabelMapItem::kLabelFieldNumber;
const int LabelMapItem::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelMapItem::LabelMapItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelMapItem)
}
LabelMapItem::LabelMapItem(const LabelMapItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  label_ = from.label_;
  // @@protoc_insertion_point(copy_constructor:caffe.LabelMapItem)
}

void LabelMapItem::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
}

LabelMapItem::~LabelMapItem() {
  // @@protoc_insertion_point(destructor:caffe.LabelMapItem)
  SharedDtor();
}

void LabelMapItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LabelMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelMapItem::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelMapItem& LabelMapItem::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelMapItem* LabelMapItem::New(::google::protobuf::Arena* arena) const {
  LabelMapItem* n = new LabelMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelMapItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_display_name()) {
      GOOGLE_DCHECK(!display_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_name_.UnsafeRawStringPointer())->clear();
    }
  }
  label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LabelMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LabelMapItem.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LabelMapItem.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelMapItem)
  return false;
#undef DO_
}

void LabelMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LabelMapItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 label = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label(), output);
  }

  // optional string display_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LabelMapItem.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->display_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelMapItem)
}

::google::protobuf::uint8* LabelMapItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LabelMapItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 label = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label(), target);
  }

  // optional string display_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LabelMapItem.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelMapItem)
  return target;
}

size_t LabelMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelMapItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional int32 label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelMapItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMapItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelMapItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelMapItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelMapItem)
    MergeFrom(*source);
  }
}

void LabelMapItem::MergeFrom(const LabelMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      label_ = from.label_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LabelMapItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMapItem::CopyFrom(const LabelMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMapItem::IsInitialized() const {
  return true;
}

void LabelMapItem::Swap(LabelMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelMapItem::InternalSwap(LabelMapItem* other) {
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  std::swap(label_, other->label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelMapItem::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelMapItem

// optional string name = 1;
bool LabelMapItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelMapItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelMapItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelMapItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LabelMapItem::name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.name)
  return name_.GetNoArena();
}
void LabelMapItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.name)
}
#if LANG_CXX11
void LabelMapItem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LabelMapItem.name)
}
#endif
void LabelMapItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.name)
}
void LabelMapItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.name)
}
::std::string* LabelMapItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LabelMapItem::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LabelMapItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LabelMapItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.name)
}

// optional int32 label = 2;
bool LabelMapItem::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelMapItem::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelMapItem::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelMapItem::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 LabelMapItem::label() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.label)
  return label_;
}
void LabelMapItem::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.label)
}

// optional string display_name = 3;
bool LabelMapItem::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelMapItem::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelMapItem::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelMapItem::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
const ::std::string& LabelMapItem::display_name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.display_name)
  return display_name_.GetNoArena();
}
void LabelMapItem::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.display_name)
}
#if LANG_CXX11
void LabelMapItem::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LabelMapItem.display_name)
}
#endif
void LabelMapItem::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.display_name)
}
void LabelMapItem::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.display_name)
}
::std::string* LabelMapItem::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LabelMapItem::release_display_name() {
  // @@protoc_insertion_point(field_release:caffe.LabelMapItem.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LabelMapItem::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.display_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelMap::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelMap::LabelMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelMap)
}
LabelMap::LabelMap(const LabelMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelMap)
}

void LabelMap::SharedCtor() {
  _cached_size_ = 0;
}

LabelMap::~LabelMap() {
  // @@protoc_insertion_point(destructor:caffe.LabelMap)
  SharedDtor();
}

void LabelMap::SharedDtor() {
}

void LabelMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelMap::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelMap& LabelMap::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelMap* LabelMap::New(::google::protobuf::Arena* arena) const {
  LabelMap* n = new LabelMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelMap::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelMap)
  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LabelMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.LabelMapItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelMap)
  return false;
#undef DO_
}

void LabelMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.LabelMapItem item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelMap)
}

::google::protobuf::uint8* LabelMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.LabelMapItem item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->item(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelMap)
  return target;
}

size_t LabelMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.LabelMapItem item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelMap)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelMap)
    MergeFrom(*source);
  }
}

void LabelMap::MergeFrom(const LabelMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void LabelMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMap::CopyFrom(const LabelMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMap::IsInitialized() const {
  return true;
}

void LabelMap::Swap(LabelMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelMap::InternalSwap(LabelMap* other) {
  item_.InternalSwap(&other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelMap::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelMap

// repeated .caffe.LabelMapItem item = 1;
int LabelMap::item_size() const {
  return item_.size();
}
void LabelMap::clear_item() {
  item_.Clear();
}
const ::caffe::LabelMapItem& LabelMap::item(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelMap.item)
  return item_.Get(index);
}
::caffe::LabelMapItem* LabelMap::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LabelMap.item)
  return item_.Mutable(index);
}
::caffe::LabelMapItem* LabelMap::add_item() {
  // @@protoc_insertion_point(field_add:caffe.LabelMap.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
LabelMap::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelMap.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
LabelMap::item() const {
  // @@protoc_insertion_point(field_list:caffe.LabelMap.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Slice::kDimFieldNumber;
const int Slice::kStrideFieldNumber;
const int Slice::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Slice::Slice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Slice)
}
Slice::Slice(const Slice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dim_(from.dim_),
      stride_(from.stride_),
      offset_(from.offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.Slice)
}

void Slice::SharedCtor() {
  _cached_size_ = 0;
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:caffe.Slice)
  SharedDtor();
}

void Slice::SharedDtor() {
}

void Slice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slice::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Slice& Slice::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Slice* Slice::New(::google::protobuf::Arena* arena) const {
  Slice* n = new Slice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Slice)
  dim_.Clear();
  stride_.Clear();
  offset_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Slice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Slice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dim = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_dim())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stride = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_stride())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_offset())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Slice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Slice)
  return false;
#undef DO_
}

void Slice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dim = 1;
  for (int i = 0, n = this->dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->dim(i), output);
  }

  // repeated uint32 stride = 2;
  for (int i = 0, n = this->stride_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->stride(i), output);
  }

  // repeated uint32 offset = 3;
  for (int i = 0, n = this->offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->offset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Slice)
}

::google::protobuf::uint8* Slice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dim = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->dim_, target);

  // repeated uint32 stride = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->stride_, target);

  // repeated uint32 offset = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->offset_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Slice)
  return target;
}

size_t Slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Slice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 dim = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dim_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dim_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stride_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stride_size());
    total_size += data_size;
  }

  // repeated uint32 offset = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->offset_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->offset_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  const Slice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Slice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Slice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Slice)
    MergeFrom(*source);
  }
}

void Slice::MergeFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  stride_.MergeFrom(from.stride_);
  offset_.MergeFrom(from.offset_);
}

void Slice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {
  return true;
}

void Slice::Swap(Slice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slice::InternalSwap(Slice* other) {
  dim_.InternalSwap(&other->dim_);
  stride_.InternalSwap(&other->stride_);
  offset_.InternalSwap(&other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slice::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slice

// repeated uint32 dim = 1;
int Slice::dim_size() const {
  return dim_.size();
}
void Slice::clear_dim() {
  dim_.Clear();
}
::google::protobuf::uint32 Slice::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Slice.dim)
  return dim_.Get(index);
}
void Slice::set_dim(int index, ::google::protobuf::uint32 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Slice.dim)
}
void Slice::add_dim(::google::protobuf::uint32 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Slice.dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Slice::dim() const {
  // @@protoc_insertion_point(field_list:caffe.Slice.dim)
  return dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Slice::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Slice.dim)
  return &dim_;
}

// repeated uint32 stride = 2;
int Slice::stride_size() const {
  return stride_.size();
}
void Slice::clear_stride() {
  stride_.Clear();
}
::google::protobuf::uint32 Slice::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Slice.stride)
  return stride_.Get(index);
}
void Slice::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Slice.stride)
}
void Slice::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Slice.stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Slice::stride() const {
  // @@protoc_insertion_point(field_list:caffe.Slice.stride)
  return stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Slice::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Slice.stride)
  return &stride_;
}

// repeated uint32 offset = 3;
int Slice::offset_size() const {
  return offset_.size();
}
void Slice::clear_offset() {
  offset_.Clear();
}
::google::protobuf::uint32 Slice::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Slice.offset)
  return offset_.Get(index);
}
void Slice::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Slice.offset)
}
void Slice::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Slice.offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Slice::offset() const {
  // @@protoc_insertion_point(field_list:caffe.Slice.offset)
  return offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Slice::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Slice.offset)
  return &offset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLabelDataParameter::kSourceFieldNumber;
const int ImageLabelDataParameter::kBatchSizeFieldNumber;
const int ImageLabelDataParameter::kRandSkipFieldNumber;
const int ImageLabelDataParameter::kShuffleFieldNumber;
const int ImageLabelDataParameter::kRandScaleFieldNumber;
const int ImageLabelDataParameter::kMinScaleFieldNumber;
const int ImageLabelDataParameter::kMaxScaleFieldNumber;
const int ImageLabelDataParameter::kLabelSliceFieldNumber;
const int ImageLabelDataParameter::kPaddingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLabelDataParameter::ImageLabelDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageLabelDataParameter)
}
ImageLabelDataParameter::ImageLabelDataParameter(const ImageLabelDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.has_label_slice()) {
    label_slice_ = new ::caffe::Slice(*from.label_slice_);
  } else {
    label_slice_ = NULL;
  }
  ::memcpy(&rand_skip_, &from.rand_skip_,
    reinterpret_cast<char*>(&padding_) -
    reinterpret_cast<char*>(&rand_skip_) + sizeof(padding_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageLabelDataParameter)
}

void ImageLabelDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_slice_, 0, reinterpret_cast<char*>(&rand_scale_) -
    reinterpret_cast<char*>(&label_slice_) + sizeof(rand_scale_));
  batch_size_ = 1u;
  min_scale_ = 1;
  max_scale_ = 1;
  padding_ = 1;
}

ImageLabelDataParameter::~ImageLabelDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageLabelDataParameter)
  SharedDtor();
}

void ImageLabelDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete label_slice_;
  }
}

void ImageLabelDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLabelDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageLabelDataParameter& ImageLabelDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageLabelDataParameter* ImageLabelDataParameter::New(::google::protobuf::Arena* arena) const {
  ImageLabelDataParameter* n = new ImageLabelDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLabelDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageLabelDataParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_label_slice()) {
      GOOGLE_DCHECK(label_slice_ != NULL);
      label_slice_->::caffe::Slice::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&rand_skip_, 0, reinterpret_cast<char*>(&rand_scale_) -
      reinterpret_cast<char*>(&rand_skip_) + sizeof(rand_scale_));
    batch_size_ = 1u;
    min_scale_ = 1;
    max_scale_ = 1;
  }
  padding_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageLabelDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageLabelDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageLabelDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rand_scale = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_rand_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rand_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_scale = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_min_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_scale = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_max_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.Slice label_slice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_slice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ImageLabelDataParameter_Padding_IsValid(value)) {
            set_padding(static_cast< ::caffe::ImageLabelDataParameter_Padding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageLabelDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageLabelDataParameter)
  return false;
#undef DO_
}

void ImageLabelDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageLabelDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageLabelDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->batch_size(), output);
  }

  // optional uint32 rand_skip = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rand_skip(), output);
  }

  // optional bool shuffle = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shuffle(), output);
  }

  // optional bool rand_scale = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rand_scale(), output);
  }

  // optional float min_scale = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->min_scale(), output);
  }

  // optional float max_scale = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_scale(), output);
  }

  // optional .caffe.Slice label_slice = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->label_slice_, output);
  }

  // optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->padding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageLabelDataParameter)
}

::google::protobuf::uint8* ImageLabelDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageLabelDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageLabelDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_size(), target);
  }

  // optional uint32 rand_skip = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rand_skip(), target);
  }

  // optional bool shuffle = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shuffle(), target);
  }

  // optional bool rand_scale = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rand_scale(), target);
  }

  // optional float min_scale = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->min_scale(), target);
  }

  // optional float max_scale = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_scale(), target);
  }

  // optional .caffe.Slice label_slice = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->label_slice_, deterministic, target);
  }

  // optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->padding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageLabelDataParameter)
  return target;
}

size_t ImageLabelDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageLabelDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional .caffe.Slice label_slice = 10;
    if (has_label_slice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_slice_);
    }

    // optional uint32 rand_skip = 4 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool shuffle = 5 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool rand_scale = 6 [default = false];
    if (has_rand_scale()) {
      total_size += 1 + 1;
    }

    // optional uint32 batch_size = 3 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional float min_scale = 7 [default = 1];
    if (has_min_scale()) {
      total_size += 1 + 4;
    }

    // optional float max_scale = 8 [default = 1];
    if (has_max_scale()) {
      total_size += 1 + 4;
    }

  }
  // optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
  if (has_padding()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->padding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLabelDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageLabelDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLabelDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLabelDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageLabelDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageLabelDataParameter)
    MergeFrom(*source);
  }
}

void ImageLabelDataParameter::MergeFrom(const ImageLabelDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageLabelDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_label_slice()->::caffe::Slice::MergeFrom(from.label_slice());
    }
    if (cached_has_bits & 0x00000004u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000008u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_scale_ = from.rand_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_scale_ = from.min_scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_scale_ = from.max_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_padding(from.padding());
  }
}

void ImageLabelDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageLabelDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLabelDataParameter::CopyFrom(const ImageLabelDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageLabelDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLabelDataParameter::IsInitialized() const {
  return true;
}

void ImageLabelDataParameter::Swap(ImageLabelDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLabelDataParameter::InternalSwap(ImageLabelDataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(label_slice_, other->label_slice_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(rand_scale_, other->rand_scale_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(min_scale_, other->min_scale_);
  std::swap(max_scale_, other->max_scale_);
  std::swap(padding_, other->padding_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLabelDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLabelDataParameter

// optional string source = 1;
bool ImageLabelDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageLabelDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageLabelDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageLabelDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageLabelDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.source)
  return source_.GetNoArena();
}
void ImageLabelDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.source)
}
#if LANG_CXX11
void ImageLabelDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageLabelDataParameter.source)
}
#endif
void ImageLabelDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageLabelDataParameter.source)
}
void ImageLabelDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageLabelDataParameter.source)
}
::std::string* ImageLabelDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageLabelDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageLabelDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageLabelDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageLabelDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageLabelDataParameter.source)
}

// optional uint32 batch_size = 3 [default = 1];
bool ImageLabelDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageLabelDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageLabelDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageLabelDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageLabelDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.batch_size)
  return batch_size_;
}
void ImageLabelDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.batch_size)
}

// optional uint32 rand_skip = 4 [default = 0];
bool ImageLabelDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageLabelDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageLabelDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageLabelDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageLabelDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.rand_skip)
  return rand_skip_;
}
void ImageLabelDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.rand_skip)
}

// optional bool shuffle = 5 [default = false];
bool ImageLabelDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageLabelDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageLabelDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageLabelDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageLabelDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.shuffle)
  return shuffle_;
}
void ImageLabelDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.shuffle)
}

// optional bool rand_scale = 6 [default = false];
bool ImageLabelDataParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageLabelDataParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageLabelDataParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageLabelDataParameter::clear_rand_scale() {
  rand_scale_ = false;
  clear_has_rand_scale();
}
bool ImageLabelDataParameter::rand_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.rand_scale)
  return rand_scale_;
}
void ImageLabelDataParameter::set_rand_scale(bool value) {
  set_has_rand_scale();
  rand_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.rand_scale)
}

// optional float min_scale = 7 [default = 1];
bool ImageLabelDataParameter::has_min_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageLabelDataParameter::set_has_min_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageLabelDataParameter::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageLabelDataParameter::clear_min_scale() {
  min_scale_ = 1;
  clear_has_min_scale();
}
float ImageLabelDataParameter::min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.min_scale)
  return min_scale_;
}
void ImageLabelDataParameter::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.min_scale)
}

// optional float max_scale = 8 [default = 1];
bool ImageLabelDataParameter::has_max_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageLabelDataParameter::set_has_max_scale() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageLabelDataParameter::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageLabelDataParameter::clear_max_scale() {
  max_scale_ = 1;
  clear_has_max_scale();
}
float ImageLabelDataParameter::max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.max_scale)
  return max_scale_;
}
void ImageLabelDataParameter::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.max_scale)
}

// optional .caffe.Slice label_slice = 10;
bool ImageLabelDataParameter::has_label_slice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageLabelDataParameter::set_has_label_slice() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageLabelDataParameter::clear_has_label_slice() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageLabelDataParameter::clear_label_slice() {
  if (label_slice_ != NULL) label_slice_->::caffe::Slice::Clear();
  clear_has_label_slice();
}
const ::caffe::Slice& ImageLabelDataParameter::label_slice() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.label_slice)
  return label_slice_ != NULL ? *label_slice_
                         : *::caffe::Slice::internal_default_instance();
}
::caffe::Slice* ImageLabelDataParameter::mutable_label_slice() {
  set_has_label_slice();
  if (label_slice_ == NULL) {
    label_slice_ = new ::caffe::Slice;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageLabelDataParameter.label_slice)
  return label_slice_;
}
::caffe::Slice* ImageLabelDataParameter::release_label_slice() {
  // @@protoc_insertion_point(field_release:caffe.ImageLabelDataParameter.label_slice)
  clear_has_label_slice();
  ::caffe::Slice* temp = label_slice_;
  label_slice_ = NULL;
  return temp;
}
void ImageLabelDataParameter::set_allocated_label_slice(::caffe::Slice* label_slice) {
  delete label_slice_;
  label_slice_ = label_slice;
  if (label_slice) {
    set_has_label_slice();
  } else {
    clear_has_label_slice();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageLabelDataParameter.label_slice)
}

// optional .caffe.ImageLabelDataParameter.Padding padding = 13 [default = REFLECT];
bool ImageLabelDataParameter::has_padding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageLabelDataParameter::set_has_padding() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageLabelDataParameter::clear_has_padding() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageLabelDataParameter::clear_padding() {
  padding_ = 1;
  clear_has_padding();
}
::caffe::ImageLabelDataParameter_Padding ImageLabelDataParameter::padding() const {
  // @@protoc_insertion_point(field_get:caffe.ImageLabelDataParameter.padding)
  return static_cast< ::caffe::ImageLabelDataParameter_Padding >(padding_);
}
void ImageLabelDataParameter::set_padding(::caffe::ImageLabelDataParameter_Padding value) {
  assert(::caffe::ImageLabelDataParameter_Padding_IsValid(value));
  set_has_padding();
  padding_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageLabelDataParameter.padding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataArbitraryParameter::kSourceFieldNumber;
const int ImageDataArbitraryParameter::kMeanfileFieldNumber;
const int ImageDataArbitraryParameter::kUseDisturbFieldNumber;
const int ImageDataArbitraryParameter::kUseflipFieldNumber;
const int ImageDataArbitraryParameter::kUsemovedisturbFieldNumber;
const int ImageDataArbitraryParameter::kBatchSizeFieldNumber;
const int ImageDataArbitraryParameter::kRandSkipFieldNumber;
const int ImageDataArbitraryParameter::kShuffleFieldNumber;
const int ImageDataArbitraryParameter::kDataHeightFieldNumber;
const int ImageDataArbitraryParameter::kDataWidthFieldNumber;
const int ImageDataArbitraryParameter::kDataScaleFieldNumber;
const int ImageDataArbitraryParameter::kMeanFileFieldNumber;
const int ImageDataArbitraryParameter::kCropSizeFieldNumber;
const int ImageDataArbitraryParameter::kMirrorFieldNumber;
const int ImageDataArbitraryParameter::kLabelHeightFieldNumber;
const int ImageDataArbitraryParameter::kLabelWidthFieldNumber;
const int ImageDataArbitraryParameter::kDataChannelsFieldNumber;
const int ImageDataArbitraryParameter::kNeedSplitFieldNumber;
const int ImageDataArbitraryParameter::kLeftRoiFieldNumber;
const int ImageDataArbitraryParameter::kRightRoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataArbitraryParameter::ImageDataArbitraryParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataArbitraryParameter)
}
ImageDataArbitraryParameter::ImageDataArbitraryParameter(const ImageDataArbitraryParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meanfile()) {
    meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
  }
  left_roi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_left_roi()) {
    left_roi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_roi_);
  }
  right_roi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_right_roi()) {
    right_roi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_roi_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&data_channels_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(data_channels_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataArbitraryParameter)
}

void ImageDataArbitraryParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_roi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_roi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(shuffle_));
  data_scale_ = 1;
  data_channels_ = 3u;
}

ImageDataArbitraryParameter::~ImageDataArbitraryParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataArbitraryParameter)
  SharedDtor();
}

void ImageDataArbitraryParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_roi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_roi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataArbitraryParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataArbitraryParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataArbitraryParameter& ImageDataArbitraryParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDataArbitraryParameter* ImageDataArbitraryParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataArbitraryParameter* n = new ImageDataArbitraryParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataArbitraryParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataArbitraryParameter)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_mean_file()) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_meanfile()) {
      GOOGLE_DCHECK(!meanfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meanfile_.UnsafeRawStringPointer())->clear();
    }
    if (has_left_roi()) {
      GOOGLE_DCHECK(!left_roi_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*left_roi_.UnsafeRawStringPointer())->clear();
    }
    if (has_right_roi()) {
      GOOGLE_DCHECK(!right_roi_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*right_roi_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&batch_size_, 0, reinterpret_cast<char*>(&rand_skip_) -
      reinterpret_cast<char*>(&batch_size_) + sizeof(rand_skip_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&data_height_, 0, reinterpret_cast<char*>(&useflip_) -
      reinterpret_cast<char*>(&data_height_) + sizeof(useflip_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&usemovedisturb_, 0, reinterpret_cast<char*>(&shuffle_) -
      reinterpret_cast<char*>(&usemovedisturb_) + sizeof(shuffle_));
    data_scale_ = 1;
    data_channels_ = 3u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageDataArbitraryParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataArbitraryParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float data_scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_data_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_height = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_data_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_width = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_data_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 label_height = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_label_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 label_width = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_label_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meanfile = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meanfile().data(), this->meanfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.meanfile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_disturb = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_use_disturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_disturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool useflip = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_useflip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useflip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool usemovedisturb = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_usemovedisturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usemovedisturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_channels = 17 [default = 3];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_data_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_split = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_need_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string left_roi = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left_roi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->left_roi().data(), this->left_roi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.left_roi");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string right_roi = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_roi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right_roi().data(), this->right_roi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.right_roi");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataArbitraryParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataArbitraryParameter)
  return false;
#undef DO_
}

void ImageDataArbitraryParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataArbitraryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float data_scale = 2 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->data_scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional uint32 data_height = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->data_height(), output);
  }

  // optional uint32 data_width = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->data_width(), output);
  }

  // optional uint32 label_height = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->label_height(), output);
  }

  // optional uint32 label_width = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->label_width(), output);
  }

  // optional string meanfile = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.meanfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->meanfile(), output);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_disturb(), output);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->useflip(), output);
  }

  // optional bool usemovedisturb = 16 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->usemovedisturb(), output);
  }

  // optional uint32 data_channels = 17 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->data_channels(), output);
  }

  // optional bool need_split = 18 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->need_split(), output);
  }

  // optional string left_roi = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_roi().data(), this->left_roi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.left_roi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->left_roi(), output);
  }

  // optional string right_roi = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_roi().data(), this->right_roi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.right_roi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->right_roi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataArbitraryParameter)
}

::google::protobuf::uint8* ImageDataArbitraryParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataArbitraryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float data_scale = 2 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->data_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional uint32 data_height = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->data_height(), target);
  }

  // optional uint32 data_width = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->data_width(), target);
  }

  // optional uint32 label_height = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->label_height(), target);
  }

  // optional uint32 label_width = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->label_width(), target);
  }

  // optional string meanfile = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.meanfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->meanfile(), target);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_disturb(), target);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->useflip(), target);
  }

  // optional bool usemovedisturb = 16 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->usemovedisturb(), target);
  }

  // optional uint32 data_channels = 17 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->data_channels(), target);
  }

  // optional bool need_split = 18 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->need_split(), target);
  }

  // optional string left_roi = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_roi().data(), this->left_roi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.left_roi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->left_roi(), target);
  }

  // optional string right_roi = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_roi().data(), this->right_roi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.right_roi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->right_roi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataArbitraryParameter)
  return target;
}

size_t ImageDataArbitraryParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataArbitraryParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional string meanfile = 13;
    if (has_meanfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanfile());
    }

    // optional string left_roi = 19;
    if (has_left_roi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->left_roi());
    }

    // optional string right_roi = 20;
    if (has_right_roi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right_roi());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 data_height = 9 [default = 0];
    if (has_data_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_height());
    }

    // optional uint32 data_width = 10 [default = 0];
    if (has_data_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_width());
    }

    // optional uint32 label_height = 11 [default = 0];
    if (has_label_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_height());
    }

    // optional uint32 label_width = 12 [default = 0];
    if (has_label_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_width());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool need_split = 18 [default = false];
    if (has_need_split()) {
      total_size += 2 + 1;
    }

    // optional bool use_disturb = 14 [default = false];
    if (has_use_disturb()) {
      total_size += 1 + 1;
    }

    // optional bool useflip = 15 [default = false];
    if (has_useflip()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional bool usemovedisturb = 16 [default = false];
    if (has_usemovedisturb()) {
      total_size += 2 + 1;
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional float data_scale = 2 [default = 1];
    if (has_data_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 data_channels = 17 [default = 3];
    if (has_data_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataArbitraryParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataArbitraryParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataArbitraryParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataArbitraryParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataArbitraryParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataArbitraryParameter)
    MergeFrom(*source);
  }
}

void ImageDataArbitraryParameter::MergeFrom(const ImageDataArbitraryParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataArbitraryParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_meanfile();
      meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_left_roi();
      left_roi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_roi_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_right_roi();
      right_roi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_roi_);
    }
    if (cached_has_bits & 0x00000020u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      rand_skip_ = from.rand_skip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      data_height_ = from.data_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      data_width_ = from.data_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      label_height_ = from.label_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      label_width_ = from.label_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00002000u) {
      need_split_ = from.need_split_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_disturb_ = from.use_disturb_;
    }
    if (cached_has_bits & 0x00008000u) {
      useflip_ = from.useflip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      usemovedisturb_ = from.usemovedisturb_;
    }
    if (cached_has_bits & 0x00020000u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00040000u) {
      data_scale_ = from.data_scale_;
    }
    if (cached_has_bits & 0x00080000u) {
      data_channels_ = from.data_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataArbitraryParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataArbitraryParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataArbitraryParameter::CopyFrom(const ImageDataArbitraryParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataArbitraryParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataArbitraryParameter::IsInitialized() const {
  return true;
}

void ImageDataArbitraryParameter::Swap(ImageDataArbitraryParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataArbitraryParameter::InternalSwap(ImageDataArbitraryParameter* other) {
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  meanfile_.Swap(&other->meanfile_);
  left_roi_.Swap(&other->left_roi_);
  right_roi_.Swap(&other->right_roi_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(data_height_, other->data_height_);
  std::swap(data_width_, other->data_width_);
  std::swap(label_height_, other->label_height_);
  std::swap(label_width_, other->label_width_);
  std::swap(mirror_, other->mirror_);
  std::swap(need_split_, other->need_split_);
  std::swap(use_disturb_, other->use_disturb_);
  std::swap(useflip_, other->useflip_);
  std::swap(usemovedisturb_, other->usemovedisturb_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(data_scale_, other->data_scale_);
  std::swap(data_channels_, other->data_channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataArbitraryParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataArbitraryParameter

// optional string source = 1;
bool ImageDataArbitraryParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataArbitraryParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataArbitraryParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataArbitraryParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageDataArbitraryParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.source)
  return source_.GetNoArena();
}
void ImageDataArbitraryParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.source)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.source)
}
#endif
void ImageDataArbitraryParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.source)
}
void ImageDataArbitraryParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.source)
}
::std::string* ImageDataArbitraryParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataArbitraryParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataArbitraryParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.source)
}

// optional string meanfile = 13;
bool ImageDataArbitraryParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataArbitraryParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataArbitraryParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataArbitraryParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
const ::std::string& ImageDataArbitraryParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.meanfile)
  return meanfile_.GetNoArena();
}
void ImageDataArbitraryParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.meanfile)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.meanfile)
}
#endif
void ImageDataArbitraryParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.meanfile)
}
void ImageDataArbitraryParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.meanfile)
}
::std::string* ImageDataArbitraryParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataArbitraryParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataArbitraryParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.meanfile)
}

// optional bool use_disturb = 14 [default = false];
bool ImageDataArbitraryParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ImageDataArbitraryParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00004000u;
}
void ImageDataArbitraryParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00004000u;
}
void ImageDataArbitraryParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
bool ImageDataArbitraryParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.use_disturb)
  return use_disturb_;
}
void ImageDataArbitraryParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.use_disturb)
}

// optional bool useflip = 15 [default = false];
bool ImageDataArbitraryParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ImageDataArbitraryParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00008000u;
}
void ImageDataArbitraryParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00008000u;
}
void ImageDataArbitraryParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
bool ImageDataArbitraryParameter::useflip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.useflip)
  return useflip_;
}
void ImageDataArbitraryParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.useflip)
}

// optional bool usemovedisturb = 16 [default = false];
bool ImageDataArbitraryParameter::has_usemovedisturb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ImageDataArbitraryParameter::set_has_usemovedisturb() {
  _has_bits_[0] |= 0x00010000u;
}
void ImageDataArbitraryParameter::clear_has_usemovedisturb() {
  _has_bits_[0] &= ~0x00010000u;
}
void ImageDataArbitraryParameter::clear_usemovedisturb() {
  usemovedisturb_ = false;
  clear_has_usemovedisturb();
}
bool ImageDataArbitraryParameter::usemovedisturb() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.usemovedisturb)
  return usemovedisturb_;
}
void ImageDataArbitraryParameter::set_usemovedisturb(bool value) {
  set_has_usemovedisturb();
  usemovedisturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.usemovedisturb)
}

// optional uint32 batch_size = 4;
bool ImageDataArbitraryParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataArbitraryParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataArbitraryParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataArbitraryParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.batch_size)
  return batch_size_;
}
void ImageDataArbitraryParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataArbitraryParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataArbitraryParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataArbitraryParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataArbitraryParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_skip)
  return rand_skip_;
}
void ImageDataArbitraryParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataArbitraryParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ImageDataArbitraryParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00020000u;
}
void ImageDataArbitraryParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00020000u;
}
void ImageDataArbitraryParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageDataArbitraryParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.shuffle)
  return shuffle_;
}
void ImageDataArbitraryParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.shuffle)
}

// optional uint32 data_height = 9 [default = 0];
bool ImageDataArbitraryParameter::has_data_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataArbitraryParameter::set_has_data_height() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataArbitraryParameter::clear_has_data_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataArbitraryParameter::clear_data_height() {
  data_height_ = 0u;
  clear_has_data_height();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::data_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_height)
  return data_height_;
}
void ImageDataArbitraryParameter::set_data_height(::google::protobuf::uint32 value) {
  set_has_data_height();
  data_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_height)
}

// optional uint32 data_width = 10 [default = 0];
bool ImageDataArbitraryParameter::has_data_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataArbitraryParameter::set_has_data_width() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataArbitraryParameter::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataArbitraryParameter::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::data_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_width)
  return data_width_;
}
void ImageDataArbitraryParameter::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_width)
}

// optional float data_scale = 2 [default = 1];
bool ImageDataArbitraryParameter::has_data_scale() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ImageDataArbitraryParameter::set_has_data_scale() {
  _has_bits_[0] |= 0x00040000u;
}
void ImageDataArbitraryParameter::clear_has_data_scale() {
  _has_bits_[0] &= ~0x00040000u;
}
void ImageDataArbitraryParameter::clear_data_scale() {
  data_scale_ = 1;
  clear_has_data_scale();
}
float ImageDataArbitraryParameter::data_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_scale)
  return data_scale_;
}
void ImageDataArbitraryParameter::set_data_scale(float value) {
  set_has_data_scale();
  data_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_scale)
}

// optional string mean_file = 3;
bool ImageDataArbitraryParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataArbitraryParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataArbitraryParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataArbitraryParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& ImageDataArbitraryParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.GetNoArena();
}
void ImageDataArbitraryParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mean_file)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.mean_file)
}
#endif
void ImageDataArbitraryParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.mean_file)
}
void ImageDataArbitraryParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.mean_file)
}
::std::string* ImageDataArbitraryParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataArbitraryParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataArbitraryParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataArbitraryParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataArbitraryParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataArbitraryParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataArbitraryParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.crop_size)
  return crop_size_;
}
void ImageDataArbitraryParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataArbitraryParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImageDataArbitraryParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00001000u;
}
void ImageDataArbitraryParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImageDataArbitraryParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool ImageDataArbitraryParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.mirror)
  return mirror_;
}
void ImageDataArbitraryParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mirror)
}

// optional uint32 label_height = 11 [default = 0];
bool ImageDataArbitraryParameter::has_label_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataArbitraryParameter::set_has_label_height() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataArbitraryParameter::clear_has_label_height() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataArbitraryParameter::clear_label_height() {
  label_height_ = 0u;
  clear_has_label_height();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::label_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.label_height)
  return label_height_;
}
void ImageDataArbitraryParameter::set_label_height(::google::protobuf::uint32 value) {
  set_has_label_height();
  label_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.label_height)
}

// optional uint32 label_width = 12 [default = 0];
bool ImageDataArbitraryParameter::has_label_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataArbitraryParameter::set_has_label_width() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataArbitraryParameter::clear_has_label_width() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataArbitraryParameter::clear_label_width() {
  label_width_ = 0u;
  clear_has_label_width();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::label_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.label_width)
  return label_width_;
}
void ImageDataArbitraryParameter::set_label_width(::google::protobuf::uint32 value) {
  set_has_label_width();
  label_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.label_width)
}

// optional uint32 data_channels = 17 [default = 3];
bool ImageDataArbitraryParameter::has_data_channels() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ImageDataArbitraryParameter::set_has_data_channels() {
  _has_bits_[0] |= 0x00080000u;
}
void ImageDataArbitraryParameter::clear_has_data_channels() {
  _has_bits_[0] &= ~0x00080000u;
}
void ImageDataArbitraryParameter::clear_data_channels() {
  data_channels_ = 3u;
  clear_has_data_channels();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::data_channels() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_channels)
  return data_channels_;
}
void ImageDataArbitraryParameter::set_data_channels(::google::protobuf::uint32 value) {
  set_has_data_channels();
  data_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_channels)
}

// optional bool need_split = 18 [default = false];
bool ImageDataArbitraryParameter::has_need_split() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImageDataArbitraryParameter::set_has_need_split() {
  _has_bits_[0] |= 0x00002000u;
}
void ImageDataArbitraryParameter::clear_has_need_split() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImageDataArbitraryParameter::clear_need_split() {
  need_split_ = false;
  clear_has_need_split();
}
bool ImageDataArbitraryParameter::need_split() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.need_split)
  return need_split_;
}
void ImageDataArbitraryParameter::set_need_split(bool value) {
  set_has_need_split();
  need_split_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.need_split)
}

// optional string left_roi = 19;
bool ImageDataArbitraryParameter::has_left_roi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataArbitraryParameter::set_has_left_roi() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataArbitraryParameter::clear_has_left_roi() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataArbitraryParameter::clear_left_roi() {
  left_roi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_roi();
}
const ::std::string& ImageDataArbitraryParameter::left_roi() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.left_roi)
  return left_roi_.GetNoArena();
}
void ImageDataArbitraryParameter::set_left_roi(const ::std::string& value) {
  set_has_left_roi();
  left_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.left_roi)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_left_roi(::std::string&& value) {
  set_has_left_roi();
  left_roi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.left_roi)
}
#endif
void ImageDataArbitraryParameter::set_left_roi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_left_roi();
  left_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.left_roi)
}
void ImageDataArbitraryParameter::set_left_roi(const char* value, size_t size) {
  set_has_left_roi();
  left_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.left_roi)
}
::std::string* ImageDataArbitraryParameter::mutable_left_roi() {
  set_has_left_roi();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.left_roi)
  return left_roi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataArbitraryParameter::release_left_roi() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.left_roi)
  clear_has_left_roi();
  return left_roi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataArbitraryParameter::set_allocated_left_roi(::std::string* left_roi) {
  if (left_roi != NULL) {
    set_has_left_roi();
  } else {
    clear_has_left_roi();
  }
  left_roi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_roi);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.left_roi)
}

// optional string right_roi = 20;
bool ImageDataArbitraryParameter::has_right_roi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataArbitraryParameter::set_has_right_roi() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataArbitraryParameter::clear_has_right_roi() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataArbitraryParameter::clear_right_roi() {
  right_roi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_roi();
}
const ::std::string& ImageDataArbitraryParameter::right_roi() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.right_roi)
  return right_roi_.GetNoArena();
}
void ImageDataArbitraryParameter::set_right_roi(const ::std::string& value) {
  set_has_right_roi();
  right_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.right_roi)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_right_roi(::std::string&& value) {
  set_has_right_roi();
  right_roi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.right_roi)
}
#endif
void ImageDataArbitraryParameter::set_right_roi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_right_roi();
  right_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.right_roi)
}
void ImageDataArbitraryParameter::set_right_roi(const char* value, size_t size) {
  set_has_right_roi();
  right_roi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.right_roi)
}
::std::string* ImageDataArbitraryParameter::mutable_right_roi() {
  set_has_right_roi();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.right_roi)
  return right_roi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataArbitraryParameter::release_right_roi() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.right_roi)
  clear_has_right_roi();
  return right_roi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataArbitraryParameter::set_allocated_right_roi(::std::string* right_roi) {
  if (right_roi != NULL) {
    set_has_right_roi();
  } else {
    clear_has_right_roi();
  }
  right_roi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_roi);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.right_roi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManipulateLossParameter::kUseBalancesampleFieldNumber;
const int ManipulateLossParameter::kIgnoreValueFieldNumber;
const int ManipulateLossParameter::kUseFullzeroignoreFieldNumber;
const int ManipulateLossParameter::kBgRatioFieldNumber;
const int ManipulateLossParameter::kUniformDroprateFieldNumber;
const int ManipulateLossParameter::kUsePerchannelBalanceFieldNumber;
const int ManipulateLossParameter::kDropSingleclasschannelFieldNumber;
const int ManipulateLossParameter::kPrintInfoFieldNumber;
const int ManipulateLossParameter::kUseUnionchannelBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManipulateLossParameter::ManipulateLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ManipulateLossParameter)
}
ManipulateLossParameter::ManipulateLossParameter(const ManipulateLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignore_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ignore_value()) {
    ignore_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_value_);
  }
  ::memcpy(&use_balancesample_, &from.use_balancesample_,
    reinterpret_cast<char*>(&uniform_droprate_) -
    reinterpret_cast<char*>(&use_balancesample_) + sizeof(uniform_droprate_));
  // @@protoc_insertion_point(copy_constructor:caffe.ManipulateLossParameter)
}

void ManipulateLossParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_balancesample_, 0, reinterpret_cast<char*>(&use_unionchannel_balance_) -
    reinterpret_cast<char*>(&use_balancesample_) + sizeof(use_unionchannel_balance_));
  bg_ratio_ = 1;
  uniform_droprate_ = 1;
}

ManipulateLossParameter::~ManipulateLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ManipulateLossParameter)
  SharedDtor();
}

void ManipulateLossParameter::SharedDtor() {
  ignore_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManipulateLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManipulateLossParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManipulateLossParameter& ManipulateLossParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManipulateLossParameter* ManipulateLossParameter::New(::google::protobuf::Arena* arena) const {
  ManipulateLossParameter* n = new ManipulateLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManipulateLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ManipulateLossParameter)
  if (has_ignore_value()) {
    GOOGLE_DCHECK(!ignore_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ignore_value_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&use_balancesample_, 0, reinterpret_cast<char*>(&use_unionchannel_balance_) -
      reinterpret_cast<char*>(&use_balancesample_) + sizeof(use_unionchannel_balance_));
    bg_ratio_ = 1;
  }
  uniform_droprate_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManipulateLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ManipulateLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_balancesample = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_use_balancesample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_balancesample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ignore_value = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ignore_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ignore_value().data(), this->ignore_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ManipulateLossParameter.ignore_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fullzeroignore = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_fullzeroignore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fullzeroignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bg_ratio = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_bg_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float uniform_droprate = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_uniform_droprate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uniform_droprate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_perchannel_balance = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_use_perchannel_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_perchannel_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_singleclasschannel = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_drop_singleclasschannel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_singleclasschannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_info = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_print_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_unionchannel_balance = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_use_unionchannel_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_unionchannel_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ManipulateLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ManipulateLossParameter)
  return false;
#undef DO_
}

void ManipulateLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ManipulateLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_balancesample = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_balancesample(), output);
  }

  // optional string ignore_value = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignore_value().data(), this->ignore_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ManipulateLossParameter.ignore_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ignore_value(), output);
  }

  // optional bool use_fullzeroignore = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_fullzeroignore(), output);
  }

  // optional float bg_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bg_ratio(), output);
  }

  // optional float uniform_droprate = 5 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->uniform_droprate(), output);
  }

  // optional bool use_perchannel_balance = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_perchannel_balance(), output);
  }

  // optional bool drop_singleclasschannel = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->drop_singleclasschannel(), output);
  }

  // optional bool print_info = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->print_info(), output);
  }

  // optional bool use_unionchannel_balance = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_unionchannel_balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ManipulateLossParameter)
}

::google::protobuf::uint8* ManipulateLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ManipulateLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_balancesample = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_balancesample(), target);
  }

  // optional string ignore_value = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignore_value().data(), this->ignore_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ManipulateLossParameter.ignore_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ignore_value(), target);
  }

  // optional bool use_fullzeroignore = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_fullzeroignore(), target);
  }

  // optional float bg_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bg_ratio(), target);
  }

  // optional float uniform_droprate = 5 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->uniform_droprate(), target);
  }

  // optional bool use_perchannel_balance = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_perchannel_balance(), target);
  }

  // optional bool drop_singleclasschannel = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->drop_singleclasschannel(), target);
  }

  // optional bool print_info = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->print_info(), target);
  }

  // optional bool use_unionchannel_balance = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_unionchannel_balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ManipulateLossParameter)
  return target;
}

size_t ManipulateLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ManipulateLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ignore_value = 2 [default = ""];
    if (has_ignore_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ignore_value());
    }

    // optional bool use_balancesample = 1 [default = false];
    if (has_use_balancesample()) {
      total_size += 1 + 1;
    }

    // optional bool use_fullzeroignore = 3 [default = false];
    if (has_use_fullzeroignore()) {
      total_size += 1 + 1;
    }

    // optional bool use_perchannel_balance = 6 [default = false];
    if (has_use_perchannel_balance()) {
      total_size += 1 + 1;
    }

    // optional bool drop_singleclasschannel = 7 [default = false];
    if (has_drop_singleclasschannel()) {
      total_size += 1 + 1;
    }

    // optional bool print_info = 8 [default = false];
    if (has_print_info()) {
      total_size += 1 + 1;
    }

    // optional bool use_unionchannel_balance = 9 [default = false];
    if (has_use_unionchannel_balance()) {
      total_size += 1 + 1;
    }

    // optional float bg_ratio = 4 [default = 1];
    if (has_bg_ratio()) {
      total_size += 1 + 4;
    }

  }
  // optional float uniform_droprate = 5 [default = 1];
  if (has_uniform_droprate()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManipulateLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ManipulateLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ManipulateLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManipulateLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ManipulateLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ManipulateLossParameter)
    MergeFrom(*source);
  }
}

void ManipulateLossParameter::MergeFrom(const ManipulateLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ManipulateLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ignore_value();
      ignore_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      use_balancesample_ = from.use_balancesample_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_fullzeroignore_ = from.use_fullzeroignore_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_perchannel_balance_ = from.use_perchannel_balance_;
    }
    if (cached_has_bits & 0x00000010u) {
      drop_singleclasschannel_ = from.drop_singleclasschannel_;
    }
    if (cached_has_bits & 0x00000020u) {
      print_info_ = from.print_info_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_unionchannel_balance_ = from.use_unionchannel_balance_;
    }
    if (cached_has_bits & 0x00000080u) {
      bg_ratio_ = from.bg_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_uniform_droprate(from.uniform_droprate());
  }
}

void ManipulateLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ManipulateLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManipulateLossParameter::CopyFrom(const ManipulateLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ManipulateLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManipulateLossParameter::IsInitialized() const {
  return true;
}

void ManipulateLossParameter::Swap(ManipulateLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManipulateLossParameter::InternalSwap(ManipulateLossParameter* other) {
  ignore_value_.Swap(&other->ignore_value_);
  std::swap(use_balancesample_, other->use_balancesample_);
  std::swap(use_fullzeroignore_, other->use_fullzeroignore_);
  std::swap(use_perchannel_balance_, other->use_perchannel_balance_);
  std::swap(drop_singleclasschannel_, other->drop_singleclasschannel_);
  std::swap(print_info_, other->print_info_);
  std::swap(use_unionchannel_balance_, other->use_unionchannel_balance_);
  std::swap(bg_ratio_, other->bg_ratio_);
  std::swap(uniform_droprate_, other->uniform_droprate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManipulateLossParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManipulateLossParameter

// optional bool use_balancesample = 1 [default = false];
bool ManipulateLossParameter::has_use_balancesample() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManipulateLossParameter::set_has_use_balancesample() {
  _has_bits_[0] |= 0x00000002u;
}
void ManipulateLossParameter::clear_has_use_balancesample() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManipulateLossParameter::clear_use_balancesample() {
  use_balancesample_ = false;
  clear_has_use_balancesample();
}
bool ManipulateLossParameter::use_balancesample() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_balancesample)
  return use_balancesample_;
}
void ManipulateLossParameter::set_use_balancesample(bool value) {
  set_has_use_balancesample();
  use_balancesample_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_balancesample)
}

// optional string ignore_value = 2 [default = ""];
bool ManipulateLossParameter::has_ignore_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManipulateLossParameter::set_has_ignore_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ManipulateLossParameter::clear_has_ignore_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManipulateLossParameter::clear_ignore_value() {
  ignore_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ignore_value();
}
const ::std::string& ManipulateLossParameter::ignore_value() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.ignore_value)
  return ignore_value_.GetNoArena();
}
void ManipulateLossParameter::set_ignore_value(const ::std::string& value) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.ignore_value)
}
#if LANG_CXX11
void ManipulateLossParameter::set_ignore_value(::std::string&& value) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ManipulateLossParameter.ignore_value)
}
#endif
void ManipulateLossParameter::set_ignore_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ManipulateLossParameter.ignore_value)
}
void ManipulateLossParameter::set_ignore_value(const char* value, size_t size) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ManipulateLossParameter.ignore_value)
}
::std::string* ManipulateLossParameter::mutable_ignore_value() {
  set_has_ignore_value();
  // @@protoc_insertion_point(field_mutable:caffe.ManipulateLossParameter.ignore_value)
  return ignore_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManipulateLossParameter::release_ignore_value() {
  // @@protoc_insertion_point(field_release:caffe.ManipulateLossParameter.ignore_value)
  clear_has_ignore_value();
  return ignore_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManipulateLossParameter::set_allocated_ignore_value(::std::string* ignore_value) {
  if (ignore_value != NULL) {
    set_has_ignore_value();
  } else {
    clear_has_ignore_value();
  }
  ignore_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ignore_value);
  // @@protoc_insertion_point(field_set_allocated:caffe.ManipulateLossParameter.ignore_value)
}

// optional bool use_fullzeroignore = 3 [default = false];
bool ManipulateLossParameter::has_use_fullzeroignore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManipulateLossParameter::set_has_use_fullzeroignore() {
  _has_bits_[0] |= 0x00000004u;
}
void ManipulateLossParameter::clear_has_use_fullzeroignore() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManipulateLossParameter::clear_use_fullzeroignore() {
  use_fullzeroignore_ = false;
  clear_has_use_fullzeroignore();
}
bool ManipulateLossParameter::use_fullzeroignore() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_fullzeroignore)
  return use_fullzeroignore_;
}
void ManipulateLossParameter::set_use_fullzeroignore(bool value) {
  set_has_use_fullzeroignore();
  use_fullzeroignore_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_fullzeroignore)
}

// optional float bg_ratio = 4 [default = 1];
bool ManipulateLossParameter::has_bg_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManipulateLossParameter::set_has_bg_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
void ManipulateLossParameter::clear_has_bg_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManipulateLossParameter::clear_bg_ratio() {
  bg_ratio_ = 1;
  clear_has_bg_ratio();
}
float ManipulateLossParameter::bg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.bg_ratio)
  return bg_ratio_;
}
void ManipulateLossParameter::set_bg_ratio(float value) {
  set_has_bg_ratio();
  bg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.bg_ratio)
}

// optional float uniform_droprate = 5 [default = 1];
bool ManipulateLossParameter::has_uniform_droprate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManipulateLossParameter::set_has_uniform_droprate() {
  _has_bits_[0] |= 0x00000100u;
}
void ManipulateLossParameter::clear_has_uniform_droprate() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManipulateLossParameter::clear_uniform_droprate() {
  uniform_droprate_ = 1;
  clear_has_uniform_droprate();
}
float ManipulateLossParameter::uniform_droprate() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.uniform_droprate)
  return uniform_droprate_;
}
void ManipulateLossParameter::set_uniform_droprate(float value) {
  set_has_uniform_droprate();
  uniform_droprate_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.uniform_droprate)
}

// optional bool use_perchannel_balance = 6 [default = false];
bool ManipulateLossParameter::has_use_perchannel_balance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManipulateLossParameter::set_has_use_perchannel_balance() {
  _has_bits_[0] |= 0x00000008u;
}
void ManipulateLossParameter::clear_has_use_perchannel_balance() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManipulateLossParameter::clear_use_perchannel_balance() {
  use_perchannel_balance_ = false;
  clear_has_use_perchannel_balance();
}
bool ManipulateLossParameter::use_perchannel_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_perchannel_balance)
  return use_perchannel_balance_;
}
void ManipulateLossParameter::set_use_perchannel_balance(bool value) {
  set_has_use_perchannel_balance();
  use_perchannel_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_perchannel_balance)
}

// optional bool drop_singleclasschannel = 7 [default = false];
bool ManipulateLossParameter::has_drop_singleclasschannel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManipulateLossParameter::set_has_drop_singleclasschannel() {
  _has_bits_[0] |= 0x00000010u;
}
void ManipulateLossParameter::clear_has_drop_singleclasschannel() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManipulateLossParameter::clear_drop_singleclasschannel() {
  drop_singleclasschannel_ = false;
  clear_has_drop_singleclasschannel();
}
bool ManipulateLossParameter::drop_singleclasschannel() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.drop_singleclasschannel)
  return drop_singleclasschannel_;
}
void ManipulateLossParameter::set_drop_singleclasschannel(bool value) {
  set_has_drop_singleclasschannel();
  drop_singleclasschannel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.drop_singleclasschannel)
}

// optional bool print_info = 8 [default = false];
bool ManipulateLossParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManipulateLossParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000020u;
}
void ManipulateLossParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManipulateLossParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
bool ManipulateLossParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.print_info)
  return print_info_;
}
void ManipulateLossParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.print_info)
}

// optional bool use_unionchannel_balance = 9 [default = false];
bool ManipulateLossParameter::has_use_unionchannel_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManipulateLossParameter::set_has_use_unionchannel_balance() {
  _has_bits_[0] |= 0x00000040u;
}
void ManipulateLossParameter::clear_has_use_unionchannel_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManipulateLossParameter::clear_use_unionchannel_balance() {
  use_unionchannel_balance_ = false;
  clear_has_use_unionchannel_balance();
}
bool ManipulateLossParameter::use_unionchannel_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_unionchannel_balance)
  return use_unionchannel_balance_;
}
void ManipulateLossParameter::set_use_unionchannel_balance(bool value) {
  set_has_use_unionchannel_balance();
  use_unionchannel_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_unionchannel_balance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationParameter::kScaleFieldNumber;
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kMeanFileFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kForceColorFieldNumber;
const int TransformationParameter::kForceGrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationParameter::TransformationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}
TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mean_value_(from.mean_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  ::memcpy(&crop_size_, &from.crop_size_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_, 0, reinterpret_cast<char*>(&force_gray_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(force_gray_));
  scale_ = 1;
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationParameter& TransformationParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransformationParameter* TransformationParameter::New(::google::protobuf::Arena* arena) const {
  TransformationParameter* n = new TransformationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TransformationParameter)
  mean_value_.Clear();
  if (has_mean_file()) {
    GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*mean_file_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&crop_size_, 0, reinterpret_cast<char*>(&force_gray_) -
      reinterpret_cast<char*>(&crop_size_) + sizeof(force_gray_));
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TransformationParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_mean_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_color = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_force_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_gray = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_force_gray();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gray_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
  return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_size(), output);
  }

  // optional string mean_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mean_file(), output);
  }

  // repeated float mean_value = 5;
  for (int i = 0, n = this->mean_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->mean_value(i), output);
  }

  // optional bool force_color = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_color(), output);
  }

  // optional bool force_gray = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_gray(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_size(), target);
  }

  // optional string mean_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mean_file(), target);
  }

  // repeated float mean_value = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->mean_value_, target);

  // optional bool force_color = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_gray(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
  return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TransformationParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float mean_value = 5;
  {
    unsigned int count = this->mean_value_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string mean_file = 4;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 2 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool force_color = 6 [default = false];
    if (has_force_color()) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (has_force_gray()) {
      total_size += 1 + 1;
    }

    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TransformationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TransformationParameter)
    MergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_value_.MergeFrom(from.mean_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_color_ = from.force_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_gray_ = from.force_gray_;
    }
    if (cached_has_bits & 0x00000020u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {
  return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationParameter::InternalSwap(TransformationParameter* other) {
  mean_value_.InternalSwap(&other->mean_value_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  std::swap(force_color_, other->force_color_);
  std::swap(force_gray_, other->force_gray_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformationParameter

// optional float scale = 1 [default = 1];
bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena();
}
void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
#if LANG_CXX11
void TransformationParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TransformationParameter.mean_file)
}
#endif
void TransformationParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000010u;
}
void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kNormalizationFieldNumber;
const int LossParameter::kNormalizeFieldNumber;
const int LossParameter::kNormalizePerPositiveFieldNumber;
const int LossParameter::kLabelBottomIdFieldNumber;
const int LossParameter::kScaleFieldNumber;
const int LossParameter::kSmoothFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParameter::LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LossParameter)
}
LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ignore_label_, 0, reinterpret_cast<char*>(&smooth_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(smooth_));
  normalization_ = 1;
  normalize_per_positive_ = true;
  label_bottom_id_ = 1u;
  scale_ = 1;
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LossParameter& LossParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossParameter* LossParameter::New(::google::protobuf::Arena* arena) const {
  LossParameter* n = new LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LossParameter)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&ignore_label_, 0, reinterpret_cast<char*>(&smooth_) -
      reinterpret_cast<char*>(&ignore_label_) + sizeof(smooth_));
    normalization_ = 1;
    normalize_per_positive_ = true;
    label_bottom_id_ = 1u;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ignore_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LossParameter_NormalizationMode_IsValid(value)) {
            set_normalization(static_cast< ::caffe::LossParameter_NormalizationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize_per_positive = 100 [default = true];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_normalize_per_positive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_per_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 label_bottom_id = 101 [default = 1];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(808u)) {
          set_has_label_bottom_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_bottom_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 102 [default = 1];
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(821u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smooth = 103 [default = false];
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(824u)) {
          set_has_smooth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smooth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LossParameter)
  return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->normalization(), output);
  }

  // optional bool normalize_per_positive = 100 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->normalize_per_positive(), output);
  }

  // optional uint32 label_bottom_id = 101 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(101, this->label_bottom_id(), output);
  }

  // optional float scale = 102 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->scale(), output);
  }

  // optional bool smooth = 103 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->smooth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->normalization(), target);
  }

  // optional bool normalize_per_positive = 100 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->normalize_per_positive(), target);
  }

  // optional uint32 label_bottom_id = 101 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(101, this->label_bottom_id(), target);
  }

  // optional float scale = 102 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(102, this->scale(), target);
  }

  // optional bool smooth = 103 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->smooth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
  return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 ignore_label = 1;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional bool normalize = 2;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

    // optional bool smooth = 103 [default = false];
    if (has_smooth()) {
      total_size += 2 + 1;
    }

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (has_normalization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->normalization());
    }

    // optional bool normalize_per_positive = 100 [default = true];
    if (has_normalize_per_positive()) {
      total_size += 2 + 1;
    }

    // optional uint32 label_bottom_id = 101 [default = 1];
    if (has_label_bottom_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_bottom_id());
    }

    // optional float scale = 102 [default = 1];
    if (has_scale()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LossParameter)
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_ = from.normalize_;
    }
    if (cached_has_bits & 0x00000004u) {
      smooth_ = from.smooth_;
    }
    if (cached_has_bits & 0x00000008u) {
      normalization_ = from.normalization_;
    }
    if (cached_has_bits & 0x00000010u) {
      normalize_per_positive_ = from.normalize_per_positive_;
    }
    if (cached_has_bits & 0x00000020u) {
      label_bottom_id_ = from.label_bottom_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParameter::InternalSwap(LossParameter* other) {
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(normalize_, other->normalize_);
  std::swap(smooth_, other->smooth_);
  std::swap(normalization_, other->normalization_);
  std::swap(normalize_per_positive_, other->normalize_per_positive_);
  std::swap(label_bottom_id_, other->label_bottom_id_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParameter

// optional int32 ignore_label = 1;
bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000008u;
}
void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000008u;
}
void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000002u;
}
void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000002u;
}
void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

// optional bool normalize_per_positive = 100 [default = true];
bool LossParameter::has_normalize_per_positive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LossParameter::set_has_normalize_per_positive() {
  _has_bits_[0] |= 0x00000010u;
}
void LossParameter::clear_has_normalize_per_positive() {
  _has_bits_[0] &= ~0x00000010u;
}
void LossParameter::clear_normalize_per_positive() {
  normalize_per_positive_ = true;
  clear_has_normalize_per_positive();
}
bool LossParameter::normalize_per_positive() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize_per_positive)
  return normalize_per_positive_;
}
void LossParameter::set_normalize_per_positive(bool value) {
  set_has_normalize_per_positive();
  normalize_per_positive_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize_per_positive)
}

// optional uint32 label_bottom_id = 101 [default = 1];
bool LossParameter::has_label_bottom_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LossParameter::set_has_label_bottom_id() {
  _has_bits_[0] |= 0x00000020u;
}
void LossParameter::clear_has_label_bottom_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void LossParameter::clear_label_bottom_id() {
  label_bottom_id_ = 1u;
  clear_has_label_bottom_id();
}
::google::protobuf::uint32 LossParameter::label_bottom_id() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.label_bottom_id)
  return label_bottom_id_;
}
void LossParameter::set_label_bottom_id(::google::protobuf::uint32 value) {
  set_has_label_bottom_id();
  label_bottom_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.label_bottom_id)
}

// optional float scale = 102 [default = 1];
bool LossParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LossParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void LossParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void LossParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float LossParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.scale)
  return scale_;
}
void LossParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.scale)
}

// optional bool smooth = 103 [default = false];
bool LossParameter::has_smooth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LossParameter::set_has_smooth() {
  _has_bits_[0] |= 0x00000004u;
}
void LossParameter::clear_has_smooth() {
  _has_bits_[0] &= ~0x00000004u;
}
void LossParameter::clear_smooth() {
  smooth_ = false;
  clear_has_smooth();
}
bool LossParameter::smooth() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.smooth)
  return smooth_;
}
void LossParameter::set_smooth(bool value) {
  set_has_smooth();
  smooth_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.smooth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kAxisFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccuracyParameter::AccuracyParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}
AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_label_ = 0;
  top_k_ = 1u;
  axis_ = 1;
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
}

void AccuracyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccuracyParameter* AccuracyParameter::New(::google::protobuf::Arena* arena) const {
  AccuracyParameter* n = new AccuracyParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AccuracyParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ignore_label_ = 0;
    top_k_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccuracyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_k = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ignore_label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
  return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ignore_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ignore_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
  return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AccuracyParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ignore_label = 3;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional uint32 top_k = 1 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccuracyParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccuracyParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AccuracyParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AccuracyParameter)
    MergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000004u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {
  return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(top_k_, other->top_k_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgMaxParameter::kOutMaxValFieldNumber;
const int ArgMaxParameter::kTopKFieldNumber;
const int ArgMaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgMaxParameter::ArgMaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ArgMaxParameter)
}
ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_max_val_, &from.out_max_val_,
    reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&out_max_val_) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&out_max_val_, 0, reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&out_max_val_) + sizeof(axis_));
  top_k_ = 1u;
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.ArgMaxParameter)
  SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
}

void ArgMaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArgMaxParameter& ArgMaxParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArgMaxParameter* ArgMaxParameter::New(::google::protobuf::Arena* arena) const {
  ArgMaxParameter* n = new ArgMaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ArgMaxParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&out_max_val_, 0, reinterpret_cast<char*>(&axis_) -
      reinterpret_cast<char*>(&out_max_val_) + sizeof(axis_));
    top_k_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArgMaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ArgMaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool out_max_val = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_out_max_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_max_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top_k = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ArgMaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ArgMaxParameter)
  return false;
#undef DO_
}

void ArgMaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ArgMaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->out_max_val(), output);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_k(), output);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ArgMaxParameter)
}

::google::protobuf::uint8* ArgMaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ArgMaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_k(), target);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ArgMaxParameter)
  return target;
}

size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ArgMaxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool out_max_val = 1 [default = false];
    if (has_out_max_val()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 3;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 top_k = 2 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgMaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ArgMaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArgMaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ArgMaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ArgMaxParameter)
    MergeFrom(*source);
  }
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      out_max_val_ = from.out_max_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArgMaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {
  return true;
}

void ArgMaxParameter::Swap(ArgMaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  std::swap(out_max_val_, other->out_max_val_);
  std::swap(axis_, other->axis_);
  std::swap(top_k_, other->top_k_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgMaxParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000004u;
}
void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000004u;
}
void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatParameter::kAxisFieldNumber;
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}
ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&concat_dim_, &from.concat_dim_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&concat_dim_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  concat_dim_ = 1u;
  axis_ = 1;
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConcatParameter& ConcatParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConcatParameter* ConcatParameter::New(::google::protobuf::Arena* arena) const {
  ConcatParameter* n = new ConcatParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatParameter)
  if (_has_bits_[0 / 32] & 3u) {
    concat_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_concat_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
  return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
  return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatParameter)
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatParameter::InternalSwap(ConcatParameter* other) {
  std::swap(concat_dim_, other->concat_dim_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatParameter

// optional int32 axis = 2 [default = 1];
bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000001u;
}
void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormParameter::kUseGlobalStatsFieldNumber;
const int BatchNormParameter::kMovingAverageFractionFieldNumber;
const int BatchNormParameter::kEpsFieldNumber;
const int BatchNormParameter::kUseInstanceNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormParameter::BatchNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}
BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_global_stats_, &from.use_global_stats_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&use_global_stats_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&use_global_stats_, 0, reinterpret_cast<char*>(&use_instance_norm_) -
    reinterpret_cast<char*>(&use_global_stats_) + sizeof(use_instance_norm_));
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-05f;
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
}

void BatchNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchNormParameter* BatchNormParameter::New(::google::protobuf::Arena* arena) const {
  BatchNormParameter* n = new BatchNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&use_global_stats_, 0, reinterpret_cast<char*>(&use_instance_norm_) -
      reinterpret_cast<char*>(&use_global_stats_) + sizeof(use_instance_norm_));
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_global_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_use_global_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_moving_average_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 3 [default = 1e-05];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_instance_norm = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_use_instance_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_instance_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
  return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  // optional bool use_instance_norm = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_instance_norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  // optional bool use_instance_norm = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_instance_norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
  return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool use_global_stats = 1;
    if (has_use_global_stats()) {
      total_size += 1 + 1;
    }

    // optional bool use_instance_norm = 4 [default = false];
    if (has_use_instance_norm()) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormParameter)
    MergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      use_global_stats_ = from.use_global_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_instance_norm_ = from.use_instance_norm_;
    }
    if (cached_has_bits & 0x00000004u) {
      moving_average_fraction_ = from.moving_average_fraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {
  return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  std::swap(use_global_stats_, other->use_global_stats_);
  std::swap(use_instance_norm_, other->use_instance_norm_);
  std::swap(moving_average_fraction_, other->moving_average_fraction_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormParameter

// optional bool use_global_stats = 1;
bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

// optional bool use_instance_norm = 4 [default = false];
bool BatchNormParameter::has_use_instance_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchNormParameter::set_has_use_instance_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchNormParameter::clear_has_use_instance_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchNormParameter::clear_use_instance_norm() {
  use_instance_norm_ = false;
  clear_has_use_instance_norm();
}
bool BatchNormParameter::use_instance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_instance_norm)
  return use_instance_norm_;
}
void BatchNormParameter::set_use_instance_norm(bool value) {
  set_has_use_instance_norm();
  use_instance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_instance_norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiasParameter::kAxisFieldNumber;
const int BiasParameter::kNumAxesFieldNumber;
const int BiasParameter::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasParameter::BiasParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BiasParameter)
}
BiasParameter::BiasParameter(const BiasParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filler()) {
    filler_ = new ::caffe::FillerParameter(*from.filler_);
  } else {
    filler_ = NULL;
  }
  ::memcpy(&axis_, &from.axis_,
    reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&axis_) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:caffe.BiasParameter)
}

void BiasParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  axis_ = 1;
  num_axes_ = 1;
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:caffe.BiasParameter)
  SharedDtor();
}

void BiasParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete filler_;
  }
}

void BiasParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BiasParameter& BiasParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BiasParameter* BiasParameter::New(::google::protobuf::Arena* arena) const {
  BiasParameter* n = new BiasParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BiasParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_filler()) {
      GOOGLE_DCHECK(filler_ != NULL);
      filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BiasParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BiasParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BiasParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BiasParameter)
  return false;
#undef DO_
}

void BiasParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BiasParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BiasParameter)
}

::google::protobuf::uint8* BiasParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BiasParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BiasParameter)
  return target;
}

size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BiasParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BiasParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BiasParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BiasParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BiasParameter)
    MergeFrom(*source);
  }
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {
  return true;
}

void BiasParameter::Swap(BiasParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiasParameter::InternalSwap(BiasParameter* other) {
  std::swap(filler_, other->filler_);
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiasParameter

// optional int32 axis = 1 [default = 1];
bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContrastiveLossParameter::kMarginFieldNumber;
const int ContrastiveLossParameter::kLegacyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContrastiveLossParameter::ContrastiveLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ContrastiveLossParameter)
}
ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&legacy_version_, &from.legacy_version_,
    reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&legacy_version_) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
  _cached_size_ = 0;
  legacy_version_ = false;
  margin_ = 1;
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ContrastiveLossParameter)
  SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContrastiveLossParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContrastiveLossParameter* ContrastiveLossParameter::New(::google::protobuf::Arena* arena) const {
  ContrastiveLossParameter* n = new ContrastiveLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ContrastiveLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    legacy_version_ = false;
    margin_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContrastiveLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ContrastiveLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_version = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_legacy_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ContrastiveLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ContrastiveLossParameter)
  return false;
#undef DO_
}

void ContrastiveLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ContrastiveLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->legacy_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ContrastiveLossParameter)
}

::google::protobuf::uint8* ContrastiveLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ContrastiveLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->legacy_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ContrastiveLossParameter)
  return target;
}

size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ContrastiveLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool legacy_version = 2 [default = false];
    if (has_legacy_version()) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 1];
    if (has_margin()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ContrastiveLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContrastiveLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ContrastiveLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ContrastiveLossParameter)
    MergeFrom(*source);
  }
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_version_ = from.legacy_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_ = from.margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContrastiveLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {
  return true;
}

void ContrastiveLossParameter::Swap(ContrastiveLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  std::swap(legacy_version_, other->legacy_version_);
  std::swap(margin_, other->margin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContrastiveLossParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000002u;
}
void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kDilationFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kKernelHFieldNumber;
const int ConvolutionParameter::kKernelWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kEngineFieldNumber;
const int ConvolutionParameter::kAxisFieldNumber;
const int ConvolutionParameter::kForceNdIm2ColFieldNumber;
const int ConvolutionParameter::kDfmbBottomIdxFieldNumber;
const int ConvolutionParameter::kMaskBottomIdxFieldNumber;
const int ConvolutionParameter::kAnalysisNumGroupFieldNumber;
const int ConvolutionParameter::kKernelHOffsetFieldNumber;
const int ConvolutionParameter::kKernelWOffsetFieldNumber;
const int ConvolutionParameter::kPrintWeightBiasStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}
ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pad_(from.pad_),
      kernel_size_(from.kernel_size_),
      stride_(from.stride_),
      dilation_(from.dilation_),
      kernel_h_offset_(from.kernel_h_offset_),
      kernel_w_offset_(from.kernel_w_offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&analysis_num_group_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(analysis_num_group_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&print_weight_bias_statistics_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(print_weight_bias_statistics_));
  bias_term_ = true;
  group_ = 1u;
  axis_ = 1;
  dfmb_bottom_idx_ = -1;
  mask_bottom_idx_ = -1;
  analysis_num_group_ = 1u;
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  ConvolutionParameter* n = new ConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionParameter)
  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  kernel_h_offset_.Clear();
  kernel_w_offset_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&stride_h_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(stride_h_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&stride_w_, 0, reinterpret_cast<char*>(&print_weight_bias_statistics_) -
      reinterpret_cast<char*>(&stride_w_) + sizeof(print_weight_bias_statistics_));
    bias_term_ = true;
    group_ = 1u;
    axis_ = 1;
    dfmb_bottom_idx_ = -1;
  }
  if (_has_bits_[16 / 32] & 196608u) {
    mask_bottom_idx_ = -1;
    analysis_num_group_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_pad())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pad())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_kernel_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stride = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_stride())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ConvolutionParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 16 [default = 1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_force_nd_im2col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 dilation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_dilation())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(146u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dilation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dfmb_bottom_idx = 1001 [default = -1];
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8008u)) {
          set_has_dfmb_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dfmb_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_bottom_idx = 1002 [default = -1];
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8016u)) {
          set_has_mask_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 analysis_num_group = 1003 [default = 1];
      case 1003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8024u)) {
          set_has_analysis_num_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analysis_num_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 kernel_h_offset = 1004;
      case 1004: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8032u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 8032u, input, this->mutable_kernel_h_offset())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8034u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_h_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 kernel_w_offset = 1005;
      case 1005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8040u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 8040u, input, this->mutable_kernel_w_offset())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8042u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_w_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_weight_bias_statistics = 1006;
      case 1006: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8048u)) {
          set_has_print_weight_bias_statistics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_weight_bias_statistics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // repeated uint32 pad = 3;
  for (int i = 0, n = this->pad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0, n = this->kernel_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated uint32 stride = 6;
  for (int i = 0, n = this->stride_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0, n = this->dilation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->dilation(i), output);
  }

  // optional int32 dfmb_bottom_idx = 1001 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1001, this->dfmb_bottom_idx(), output);
  }

  // optional int32 mask_bottom_idx = 1002 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1002, this->mask_bottom_idx(), output);
  }

  // optional uint32 analysis_num_group = 1003 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1003, this->analysis_num_group(), output);
  }

  // repeated uint32 kernel_h_offset = 1004;
  for (int i = 0, n = this->kernel_h_offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1004, this->kernel_h_offset(i), output);
  }

  // repeated uint32 kernel_w_offset = 1005;
  for (int i = 0, n = this->kernel_w_offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1005, this->kernel_w_offset(i), output);
  }

  // optional bool print_weight_bias_statistics = 1006;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1006, this->print_weight_bias_statistics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // repeated uint32 pad = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->pad_, target);

  // repeated uint32 kernel_size = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->kernel_size_, target);

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated uint32 stride = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->stride_, target);

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->dilation_, target);

  // optional int32 dfmb_bottom_idx = 1001 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1001, this->dfmb_bottom_idx(), target);
  }

  // optional int32 mask_bottom_idx = 1002 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1002, this->mask_bottom_idx(), target);
  }

  // optional uint32 analysis_num_group = 1003 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1003, this->analysis_num_group(), target);
  }

  // repeated uint32 kernel_h_offset = 1004;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1004, this->kernel_h_offset_, target);

  // repeated uint32 kernel_w_offset = 1005;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1005, this->kernel_w_offset_, target);

  // optional bool print_weight_bias_statistics = 1006;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1006, this->print_weight_bias_statistics(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
  return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 pad = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pad_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->kernel_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stride_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stride_size());
    total_size += data_size;
  }

  // repeated uint32 dilation = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dilation_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->dilation_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_h_offset = 1004;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->kernel_h_offset_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->kernel_h_offset_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_w_offset = 1005;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->kernel_w_offset_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->kernel_w_offset_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 2 + 1;
    }

    // optional bool print_weight_bias_statistics = 1006;
    if (has_print_weight_bias_statistics()) {
      total_size += 2 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 axis = 16 [default = 1];
    if (has_axis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 dfmb_bottom_idx = 1001 [default = -1];
    if (has_dfmb_bottom_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dfmb_bottom_idx());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 mask_bottom_idx = 1002 [default = -1];
    if (has_mask_bottom_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_bottom_idx());
    }

    // optional uint32 analysis_num_group = 1003 [default = 1];
    if (has_analysis_num_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analysis_num_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionParameter)
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  kernel_h_offset_.MergeFrom(from.kernel_h_offset_);
  kernel_w_offset_.MergeFrom(from.kernel_w_offset_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_h_ = from.pad_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      stride_h_ = from.stride_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      force_nd_im2col_ = from.force_nd_im2col_;
    }
    if (cached_has_bits & 0x00000800u) {
      print_weight_bias_statistics_ = from.print_weight_bias_statistics_;
    }
    if (cached_has_bits & 0x00001000u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00002000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00004000u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00008000u) {
      dfmb_bottom_idx_ = from.dfmb_bottom_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      mask_bottom_idx_ = from.mask_bottom_idx_;
    }
    if (cached_has_bits & 0x00020000u) {
      analysis_num_group_ = from.analysis_num_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  pad_.InternalSwap(&other->pad_);
  kernel_size_.InternalSwap(&other->kernel_size_);
  stride_.InternalSwap(&other->stride_);
  dilation_.InternalSwap(&other->dilation_);
  kernel_h_offset_.InternalSwap(&other->kernel_h_offset_);
  kernel_w_offset_.InternalSwap(&other->kernel_w_offset_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(engine_, other->engine_);
  std::swap(force_nd_im2col_, other->force_nd_im2col_);
  std::swap(print_weight_bias_statistics_, other->print_weight_bias_statistics_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(group_, other->group_);
  std::swap(axis_, other->axis_);
  std::swap(dfmb_bottom_idx_, other->dfmb_bottom_idx_);
  std::swap(mask_bottom_idx_, other->mask_bottom_idx_);
  std::swap(analysis_num_group_, other->analysis_num_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionParameter

// optional uint32 num_output = 1;
bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00001000u;
}
void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00002000u;
}
void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00004000u;
}
void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00004000u;
}
void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

// optional int32 dfmb_bottom_idx = 1001 [default = -1];
bool ConvolutionParameter::has_dfmb_bottom_idx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ConvolutionParameter::set_has_dfmb_bottom_idx() {
  _has_bits_[0] |= 0x00008000u;
}
void ConvolutionParameter::clear_has_dfmb_bottom_idx() {
  _has_bits_[0] &= ~0x00008000u;
}
void ConvolutionParameter::clear_dfmb_bottom_idx() {
  dfmb_bottom_idx_ = -1;
  clear_has_dfmb_bottom_idx();
}
::google::protobuf::int32 ConvolutionParameter::dfmb_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dfmb_bottom_idx)
  return dfmb_bottom_idx_;
}
void ConvolutionParameter::set_dfmb_bottom_idx(::google::protobuf::int32 value) {
  set_has_dfmb_bottom_idx();
  dfmb_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dfmb_bottom_idx)
}

// optional int32 mask_bottom_idx = 1002 [default = -1];
bool ConvolutionParameter::has_mask_bottom_idx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ConvolutionParameter::set_has_mask_bottom_idx() {
  _has_bits_[0] |= 0x00010000u;
}
void ConvolutionParameter::clear_has_mask_bottom_idx() {
  _has_bits_[0] &= ~0x00010000u;
}
void ConvolutionParameter::clear_mask_bottom_idx() {
  mask_bottom_idx_ = -1;
  clear_has_mask_bottom_idx();
}
::google::protobuf::int32 ConvolutionParameter::mask_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.mask_bottom_idx)
  return mask_bottom_idx_;
}
void ConvolutionParameter::set_mask_bottom_idx(::google::protobuf::int32 value) {
  set_has_mask_bottom_idx();
  mask_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.mask_bottom_idx)
}

// optional uint32 analysis_num_group = 1003 [default = 1];
bool ConvolutionParameter::has_analysis_num_group() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ConvolutionParameter::set_has_analysis_num_group() {
  _has_bits_[0] |= 0x00020000u;
}
void ConvolutionParameter::clear_has_analysis_num_group() {
  _has_bits_[0] &= ~0x00020000u;
}
void ConvolutionParameter::clear_analysis_num_group() {
  analysis_num_group_ = 1u;
  clear_has_analysis_num_group();
}
::google::protobuf::uint32 ConvolutionParameter::analysis_num_group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.analysis_num_group)
  return analysis_num_group_;
}
void ConvolutionParameter::set_analysis_num_group(::google::protobuf::uint32 value) {
  set_has_analysis_num_group();
  analysis_num_group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.analysis_num_group)
}

// repeated uint32 kernel_h_offset = 1004;
int ConvolutionParameter::kernel_h_offset_size() const {
  return kernel_h_offset_.size();
}
void ConvolutionParameter::clear_kernel_h_offset() {
  kernel_h_offset_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_h_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h_offset)
  return kernel_h_offset_.Get(index);
}
void ConvolutionParameter::set_kernel_h_offset(int index, ::google::protobuf::uint32 value) {
  kernel_h_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h_offset)
}
void ConvolutionParameter::add_kernel_h_offset(::google::protobuf::uint32 value) {
  kernel_h_offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_h_offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_h_offset() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_h_offset)
  return kernel_h_offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_h_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_h_offset)
  return &kernel_h_offset_;
}

// repeated uint32 kernel_w_offset = 1005;
int ConvolutionParameter::kernel_w_offset_size() const {
  return kernel_w_offset_.size();
}
void ConvolutionParameter::clear_kernel_w_offset() {
  kernel_w_offset_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_w_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w_offset)
  return kernel_w_offset_.Get(index);
}
void ConvolutionParameter::set_kernel_w_offset(int index, ::google::protobuf::uint32 value) {
  kernel_w_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w_offset)
}
void ConvolutionParameter::add_kernel_w_offset(::google::protobuf::uint32 value) {
  kernel_w_offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_w_offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_w_offset() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_w_offset)
  return kernel_w_offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_w_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_w_offset)
  return &kernel_w_offset_;
}

// optional bool print_weight_bias_statistics = 1006;
bool ConvolutionParameter::has_print_weight_bias_statistics() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConvolutionParameter::set_has_print_weight_bias_statistics() {
  _has_bits_[0] |= 0x00000800u;
}
void ConvolutionParameter::clear_has_print_weight_bias_statistics() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConvolutionParameter::clear_print_weight_bias_statistics() {
  print_weight_bias_statistics_ = false;
  clear_has_print_weight_bias_statistics();
}
bool ConvolutionParameter::print_weight_bias_statistics() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.print_weight_bias_statistics)
  return print_weight_bias_statistics_;
}
void ConvolutionParameter::set_print_weight_bias_statistics(bool value) {
  set_has_print_weight_bias_statistics();
  print_weight_bias_statistics_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.print_weight_bias_statistics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kRandSkipFieldNumber;
const int DataParameter::kBackendFieldNumber;
const int DataParameter::kScaleFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCropSizeFieldNumber;
const int DataParameter::kMirrorFieldNumber;
const int DataParameter::kForceEncodedColorFieldNumber;
const int DataParameter::kPrefetchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DataParameter)
}
DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&prefetch_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(prefetch_));
  // @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&backend_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(backend_));
  scale_ = 1;
  prefetch_ = 4u;
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataParameter& DataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
  DataParameter* n = new DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DataParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_mean_file()) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&batch_size_, 0, reinterpret_cast<char*>(&backend_) -
      reinterpret_cast<char*>(&batch_size_) + sizeof(backend_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    scale_ = 1;
    prefetch_ = 4u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DataParameter_DB_IsValid(value)) {
            set_backend(static_cast< ::caffe::DataParameter_DB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_encoded_color = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_force_encoded_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_encoded_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prefetch = 10 [default = 4];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_prefetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->backend(), output);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->force_encoded_color(), output);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prefetch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prefetch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
  return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool force_encoded_color = 9 [default = false];
    if (has_force_encoded_color()) {
      total_size += 1 + 1;
    }

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    if (has_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backend());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (has_prefetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DataParameter)
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000040u) {
      force_encoded_color_ = from.force_encoded_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      backend_ = from.backend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      prefetch_ = from.prefetch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {
  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(mirror_, other->mirror_);
  std::swap(force_encoded_color_, other->force_encoded_color_);
  std::swap(backend_, other->backend_);
  std::swap(scale_, other->scale_);
  std::swap(prefetch_, other->prefetch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataParameter

// optional string source = 1;
bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena();
}
void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
#if LANG_CXX11
void DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.source)
}
#endif
void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000080u;
}
void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000100u;
}
void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena();
}
void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
#if LANG_CXX11
void DataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.mean_file)
}
#endif
void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000040u;
}
void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}
DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropout_ratio_ = from.dropout_ratio_;
  // @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:caffe.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropoutParameter& DropoutParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropoutParameter* DropoutParameter::New(::google::protobuf::Arena* arena) const {
  DropoutParameter* n = new DropoutParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DropoutParameter)
  dropout_ratio_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
  return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DropoutParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DropoutParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DropoutParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DropoutParameter)
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dropout_ratio()) {
    set_dropout_ratio(from.dropout_ratio());
  }
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParameter::InternalSwap(DropoutParameter* other) {
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DummyDataParameter::kDataFillerFieldNumber;
const int DummyDataParameter::kShapeFieldNumber;
const int DummyDataParameter::kNumFieldNumber;
const int DummyDataParameter::kChannelsFieldNumber;
const int DummyDataParameter::kHeightFieldNumber;
const int DummyDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DummyDataParameter::DummyDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DummyDataParameter)
}
DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_filler_(from.data_filler_),
      num_(from.num_),
      channels_(from.channels_),
      height_(from.height_),
      width_(from.width_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
  _cached_size_ = 0;
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DummyDataParameter)
  SharedDtor();
}

void DummyDataParameter::SharedDtor() {
}

void DummyDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DummyDataParameter& DummyDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DummyDataParameter* DummyDataParameter::New(::google::protobuf::Arena* arena) const {
  DummyDataParameter* n = new DummyDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DummyDataParameter)
  data_filler_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DummyDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DummyDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.FillerParameter data_filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_num())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_channels())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_height())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_width())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobShape shape = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DummyDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DummyDataParameter)
  return false;
#undef DO_
}

void DummyDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DummyDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0, n = this->data_filler_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_filler(i), output);
  }

  // repeated uint32 num = 2;
  for (int i = 0, n = this->num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }

  // repeated uint32 channels = 3;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channels(i), output);
  }

  // repeated uint32 height = 4;
  for (int i = 0, n = this->height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->height(i), output);
  }

  // repeated uint32 width = 5;
  for (int i = 0, n = this->width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->width(i), output);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DummyDataParameter)
}

::google::protobuf::uint8* DummyDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DummyDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0, n = this->data_filler_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_filler(i), deterministic, target);
  }

  // repeated uint32 num = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->num_, target);

  // repeated uint32 channels = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->channels_, target);

  // repeated uint32 height = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->height_, target);

  // repeated uint32 width = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->width_, target);

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->shape(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DummyDataParameter)
  return target;
}

size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DummyDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.FillerParameter data_filler = 1;
  {
    unsigned int count = this->data_filler_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_filler(i));
    }
  }

  // repeated uint32 num = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->num_size());
    total_size += data_size;
  }

  // repeated uint32 channels = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channels_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channels_size());
    total_size += data_size;
  }

  // repeated uint32 height = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->height_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->height_size());
    total_size += data_size;
  }

  // repeated uint32 width = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->width_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->width_size());
    total_size += data_size;
  }

  // repeated .caffe.BlobShape shape = 6;
  {
    unsigned int count = this->shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DummyDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DummyDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DummyDataParameter)
    MergeFrom(*source);
  }
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_filler_.MergeFrom(from.data_filler_);
  num_.MergeFrom(from.num_);
  channels_.MergeFrom(from.channels_);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  shape_.MergeFrom(from.shape_);
}

void DummyDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {
  return true;
}

void DummyDataParameter::Swap(DummyDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  data_filler_.InternalSwap(&other->data_filler_);
  num_.InternalSwap(&other->num_);
  channels_.InternalSwap(&other->channels_);
  height_.InternalSwap(&other->height_);
  width_.InternalSwap(&other->width_);
  shape_.InternalSwap(&other->shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DummyDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
int DummyDataParameter::shape_size() const {
  return shape_.size();
}
void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
int DummyDataParameter::num_size() const {
  return num_.size();
}
void DummyDataParameter::clear_num() {
  num_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
int DummyDataParameter::channels_size() const {
  return channels_.size();
}
void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
int DummyDataParameter::height_size() const {
  return height_.size();
}
void DummyDataParameter::clear_height() {
  height_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
int DummyDataParameter::width_size() const {
  return width_.size();
}
void DummyDataParameter::clear_width() {
  width_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseParameter::EltwiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}
EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      coeff_(from.coeff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    reinterpret_cast<char*>(&stable_prod_grad_) -
    reinterpret_cast<char*>(&operation_) + sizeof(stable_prod_grad_));
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  stable_prod_grad_ = true;
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
}

void EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

EltwiseParameter* EltwiseParameter::New(::google::protobuf::Arena* arena) const {
  EltwiseParameter* n = new EltwiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseParameter)
  coeff_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::EltwiseParameter_EltwiseOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::EltwiseParameter_EltwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_coeff())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_stable_prod_grad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
  return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0, n = this->coeff_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->coeff_, target);

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
  return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float coeff = 2;
  {
    unsigned int count = this->coeff_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->coeff_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EltwiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EltwiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseParameter)
    MergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coeff_.MergeFrom(from.coeff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      stable_prod_grad_ = from.stable_prod_grad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {
  return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  coeff_.InternalSwap(&other->coeff_);
  std::swap(operation_, other->operation_);
  std::swap(stable_prod_grad_, other->stable_prod_grad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000002u;
}
void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000002u;
}
void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ELUParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ELUParameter::ELUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ELUParameter)
}
ELUParameter::ELUParameter(const ELUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:caffe.ELUParameter)
}

void ELUParameter::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 1;
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ELUParameter)
  SharedDtor();
}

void ELUParameter::SharedDtor() {
}

void ELUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ELUParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ELUParameter& ELUParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ELUParameter* ELUParameter::New(::google::protobuf::Arena* arena) const {
  ELUParameter* n = new ELUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ELUParameter)
  alpha_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ELUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ELUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ELUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ELUParameter)
  return false;
#undef DO_
}

void ELUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ELUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ELUParameter)
}

::google::protobuf::uint8* ELUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ELUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ELUParameter)
  return target;
}

size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ELUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ELUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ELUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ELUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ELUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ELUParameter)
    MergeFrom(*source);
  }
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alpha()) {
    set_alpha(from.alpha());
  }
}

void ELUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {
  return true;
}

void ELUParameter::Swap(ELUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ELUParameter::InternalSwap(ELUParameter* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ELUParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ELUParameter

// optional float alpha = 1 [default = 1];
bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedParameter::kNumOutputFieldNumber;
const int EmbedParameter::kInputDimFieldNumber;
const int EmbedParameter::kBiasTermFieldNumber;
const int EmbedParameter::kWeightFillerFieldNumber;
const int EmbedParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedParameter::EmbedParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EmbedParameter)
}
EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(bias_term_));
  // @@protoc_insertion_point(copy_constructor:caffe.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&input_dim_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(input_dim_));
  bias_term_ = true;
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:caffe.EmbedParameter)
  SharedDtor();
}

void EmbedParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void EmbedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedParameter& EmbedParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbedParameter* EmbedParameter::New(::google::protobuf::Arena* arena) const {
  EmbedParameter* n = new EmbedParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EmbedParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&input_dim_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(input_dim_));
    bias_term_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EmbedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_input_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EmbedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EmbedParameter)
  return false;
#undef DO_
}

void EmbedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EmbedParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_dim(), output);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EmbedParameter)
}

::google::protobuf::uint8* EmbedParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EmbedParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bias_filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EmbedParameter)
  return target;
}

size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EmbedParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.FillerParameter weight_filler = 4;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 input_dim = 2;
    if (has_input_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EmbedParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EmbedParameter)
    MergeFrom(*source);
  }
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      input_dim_ = from.input_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmbedParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {
  return true;
}

void EmbedParameter::Swap(EmbedParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbedParameter::InternalSwap(EmbedParameter* other) {
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(input_dim_, other->input_dim_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedParameter

// optional uint32 num_output = 1;
bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000008u;
}
void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpParameter::kBaseFieldNumber;
const int ExpParameter::kScaleFieldNumber;
const int ExpParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpParameter::ExpParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ExpParameter)
}
ExpParameter::ExpParameter(const ExpParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.ExpParameter)
}

void ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:caffe.ExpParameter)
  SharedDtor();
}

void ExpParameter::SharedDtor() {
}

void ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExpParameter& ExpParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExpParameter* ExpParameter::New(::google::protobuf::Arena* arena) const {
  ExpParameter* n = new ExpParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ExpParameter)
  if (_has_bits_[0 / 32] & 7u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ExpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ExpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ExpParameter)
  return false;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ExpParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ExpParameter)
}

::google::protobuf::uint8* ExpParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ExpParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ExpParameter)
  return target;
}

size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ExpParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ExpParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ExpParameter)
    MergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {
  return true;
}

void ExpParameter::Swap(ExpParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpParameter::InternalSwap(ExpParameter* other) {
  std::swap(shift_, other->shift_);
  std::swap(base_, other->base_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpParameter

// optional float base = 1 [default = -1];
bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlattenParameter::kAxisFieldNumber;
const int FlattenParameter::kEndAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlattenParameter::FlattenParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    reinterpret_cast<char*>(&end_axis_) -
    reinterpret_cast<char*>(&axis_) + sizeof(end_axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  end_axis_ = -1;
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:caffe.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
}

void FlattenParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlattenParameter& FlattenParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlattenParameter* FlattenParameter::New(::google::protobuf::Arena* arena) const {
  FlattenParameter* n = new FlattenParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FlattenParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    end_axis_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlattenParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FlattenParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 end_axis = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_end_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FlattenParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FlattenParameter)
  return false;
#undef DO_
}

void FlattenParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FlattenParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FlattenParameter)
}

::google::protobuf::uint8* FlattenParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FlattenParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FlattenParameter)
  return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FlattenParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (has_end_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlattenParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FlattenParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlattenParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FlattenParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FlattenParameter)
    MergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_axis_ = from.end_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlattenParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {
  return true;
}

void FlattenParameter::Swap(FlattenParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlattenParameter::InternalSwap(FlattenParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(end_axis_, other->end_axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlattenParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlattenParameter

// optional int32 axis = 1 [default = 1];
bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5DataParameter::kSourceFieldNumber;
const int HDF5DataParameter::kBatchSizeFieldNumber;
const int HDF5DataParameter::kShuffleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5DataParameter::HDF5DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5DataParameter)
}
HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(shuffle_));
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(shuffle_));
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5DataParameter)
  SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5DataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HDF5DataParameter& HDF5DataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HDF5DataParameter* HDF5DataParameter::New(::google::protobuf::Arena* arena) const {
  HDF5DataParameter* n = new HDF5DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5DataParameter)
  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&batch_size_, 0, reinterpret_cast<char*>(&shuffle_) -
      reinterpret_cast<char*>(&batch_size_) + sizeof(shuffle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HDF5DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5DataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5DataParameter)
  return false;
#undef DO_
}

void HDF5DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5DataParameter)
}

::google::protobuf::uint8* HDF5DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5DataParameter)
  return target;
}

size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5DataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HDF5DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5DataParameter)
    MergeFrom(*source);
  }
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HDF5DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {
  return true;
}

void HDF5DataParameter::Swap(HDF5DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5DataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5DataParameter

// optional string source = 1;
bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena();
}
void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
#if LANG_CXX11
void HDF5DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5DataParameter.source)
}
#endif
void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5OutputParameter::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5OutputParameter::HDF5OutputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5OutputParameter)
}
HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5OutputParameter)
  SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5OutputParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HDF5OutputParameter* HDF5OutputParameter::New(::google::protobuf::Arena* arena) const {
  HDF5OutputParameter* n = new HDF5OutputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5OutputParameter)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HDF5OutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5OutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5OutputParameter.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5OutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5OutputParameter)
  return false;
#undef DO_
}

void HDF5OutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5OutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5OutputParameter)
}

::google::protobuf::uint8* HDF5OutputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5OutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5OutputParameter)
  return target;
}

size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5OutputParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HDF5OutputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5OutputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5OutputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5OutputParameter)
    MergeFrom(*source);
  }
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_name()) {
    set_has_file_name();
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void HDF5OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {
  return true;
}

void HDF5OutputParameter::Swap(HDF5OutputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5OutputParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5OutputParameter

// optional string file_name = 1;
bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena();
}
void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
#if LANG_CXX11
void HDF5OutputParameter::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5OutputParameter.file_name)
}
#endif
void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HingeLossParameter::kNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HingeLossParameter::HingeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HingeLossParameter)
}
HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  norm_ = from.norm_;
  // @@protoc_insertion_point(copy_constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  norm_ = 1;
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.HingeLossParameter)
  SharedDtor();
}

void HingeLossParameter::SharedDtor() {
}

void HingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeLossParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HingeLossParameter& HingeLossParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HingeLossParameter* HingeLossParameter::New(::google::protobuf::Arena* arena) const {
  HingeLossParameter* n = new HingeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HingeLossParameter)
  norm_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::HingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::HingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HingeLossParameter)
  return false;
#undef DO_
}

void HingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HingeLossParameter)
}

::google::protobuf::uint8* HingeLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HingeLossParameter)
  return target;
}

size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HingeLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HingeLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HingeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HingeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HingeLossParameter)
    MergeFrom(*source);
  }
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_norm()) {
    set_norm(from.norm());
  }
}

void HingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {
  return true;
}

void HingeLossParameter::Swap(HingeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  std::swap(norm_, other->norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HingeLossParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataParameter::kSourceFieldNumber;
const int ImageDataParameter::kBatchSizeFieldNumber;
const int ImageDataParameter::kRandSkipFieldNumber;
const int ImageDataParameter::kShuffleFieldNumber;
const int ImageDataParameter::kNewHeightFieldNumber;
const int ImageDataParameter::kNewWidthFieldNumber;
const int ImageDataParameter::kIsColorFieldNumber;
const int ImageDataParameter::kScaleFieldNumber;
const int ImageDataParameter::kMeanFileFieldNumber;
const int ImageDataParameter::kCropSizeFieldNumber;
const int ImageDataParameter::kMirrorFieldNumber;
const int ImageDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataParameter::ImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataParameter)
}
ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_folder()) {
    root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&crop_size_, &from.crop_size_,
    reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_, 0, reinterpret_cast<char*>(&new_width_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(new_width_));
  is_color_ = true;
  scale_ = 1;
  batch_size_ = 1u;
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDataParameter* ImageDataParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataParameter* n = new ImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_mean_file()) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_root_folder()) {
      GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*root_folder_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&crop_size_, 0, reinterpret_cast<char*>(&new_height_) -
      reinterpret_cast<char*>(&crop_size_) + sizeof(new_height_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    new_width_ = 0u;
    is_color_ = true;
    scale_ = 1;
    batch_size_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_height = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_width = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_color = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string root_folder = 12 [default = ""];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataParameter)
  return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_height(), output);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_width(), output);
  }

  // optional bool is_color = 11 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_color(), output);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataParameter)
  return target;
}

size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional string root_folder = 12 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_height());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 new_width = 10 [default = 0];
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_width());
    }

    // optional bool is_color = 11 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataParameter)
    MergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      new_height_ = from.new_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_color_ = from.is_color_;
    }
    if (cached_has_bits & 0x00000400u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {
  return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(mirror_, other->mirror_);
  std::swap(new_height_, other->new_height_);
  std::swap(new_width_, other->new_width_);
  std::swap(is_color_, other->is_color_);
  std::swap(scale_, other->scale_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataParameter

// optional string source = 1;
bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena();
}
void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
#if LANG_CXX11
void ImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.source)
}
#endif
void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
#if LANG_CXX11
void ImageDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.mean_file)
}
#endif
void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
#if LANG_CXX11
void ImageDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.root_folder)
}
#endif
void ImageDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfogainLossParameter::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfogainLossParameter::InfogainLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InfogainLossParameter)
}
InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.InfogainLossParameter)
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfogainLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfogainLossParameter* InfogainLossParameter::New(::google::protobuf::Arena* arena) const {
  InfogainLossParameter* n = new InfogainLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InfogainLossParameter)
  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InfogainLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InfogainLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InfogainLossParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InfogainLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InfogainLossParameter)
  return false;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InfogainLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InfogainLossParameter)
}

::google::protobuf::uint8* InfogainLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InfogainLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InfogainLossParameter)
  return target;
}

size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InfogainLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string source = 1;
  if (has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InfogainLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfogainLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InfogainLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InfogainLossParameter)
    MergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    set_has_source();
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {
  return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  source_.Swap(&other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfogainLossParameter

// optional string source = 1;
bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena();
}
void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
#if LANG_CXX11
void InfogainLossParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InfogainLossParameter.source)
}
#endif
void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}
InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&num_output_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(num_output_));
  bias_term_ = true;
  axis_ = 1;
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InnerProductParameter* InnerProductParameter::New(::google::protobuf::Arena* arena) const {
  InnerProductParameter* n = new InnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    num_output_ = 0u;
    bias_term_ = true;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bias_filler_, deterministic, target);
  }

  // optional int32 axis = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
  return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerProductParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductParameter)
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerProductParameter

// optional uint32 num_output = 1;
bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputParameter::InputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.InputParameter)
}

void InputParameter::SharedCtor() {
  _cached_size_ = 0;
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:caffe.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
}

void InputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputParameter& InputParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputParameter* InputParameter::New(::google::protobuf::Arena* arena) const {
  InputParameter* n = new InputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InputParameter)
  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobShape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputParameter)
  return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputParameter)
}

::google::protobuf::uint8* InputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->shape(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InputParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.BlobShape shape = 1;
  {
    unsigned int count = this->shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::Swap(InputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputParameter::InternalSwap(InputParameter* other) {
  shape_.InternalSwap(&other->shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputParameter

// repeated .caffe.BlobShape shape = 1;
int InputParameter::shape_size() const {
  return shape_.size();
}
void InputParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogParameter::kBaseFieldNumber;
const int LogParameter::kScaleFieldNumber;
const int LogParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogParameter::LogParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LogParameter)
}
LogParameter::LogParameter(const LogParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.LogParameter)
}

void LogParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:caffe.LogParameter)
  SharedDtor();
}

void LogParameter::SharedDtor() {
}

void LogParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogParameter& LogParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogParameter* LogParameter::New(::google::protobuf::Arena* arena) const {
  LogParameter* n = new LogParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LogParameter)
  if (_has_bits_[0 / 32] & 7u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LogParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LogParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LogParameter)
  return false;
#undef DO_
}

void LogParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LogParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LogParameter)
}

::google::protobuf::uint8* LogParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LogParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LogParameter)
  return target;
}

size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LogParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LogParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LogParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LogParameter)
    MergeFrom(*source);
  }
}

void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParameter::IsInitialized() const {
  return true;
}

void LogParameter::Swap(LogParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogParameter::InternalSwap(LogParameter* other) {
  std::swap(shift_, other->shift_);
  std::swap(base_, other->base_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogParameter

// optional float base = 1 [default = -1];
bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
const int LRNParameter::kKFieldNumber;
const int LRNParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRNParameter::LRNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LRNParameter)
}
LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&norm_region_, &from.norm_region_,
    reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&norm_region_) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:caffe.LRNParameter)
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&norm_region_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&norm_region_) + sizeof(engine_));
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:caffe.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRNParameter& LRNParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LRNParameter* LRNParameter::New(::google::protobuf::Arena* arena) const {
  LRNParameter* n = new LRNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LRNParameter)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&norm_region_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&norm_region_) + sizeof(engine_));
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffe::LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::LRNParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LRNParameter)
  return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LRNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LRNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LRNParameter)
  return target;
}

size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LRNParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LRNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LRNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LRNParameter)
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      norm_region_ = from.norm_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000010u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000020u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {
  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRNParameter::InternalSwap(LRNParameter* other) {
  std::swap(norm_region_, other->norm_region_);
  std::swap(engine_, other->engine_);
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(k_, other->k_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LRNParameter

// optional uint32 local_size = 1 [default = 5];
bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000004u;
}
void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000010u;
}
void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000010u;
}
void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000001u;
}
void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000020u;
}
void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000020u;
}
void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDataParameter::kBatchSizeFieldNumber;
const int MemoryDataParameter::kChannelsFieldNumber;
const int MemoryDataParameter::kHeightFieldNumber;
const int MemoryDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDataParameter::MemoryDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MemoryDataParameter)
}
MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(width_));
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MemoryDataParameter)
  SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
}

void MemoryDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemoryDataParameter& MemoryDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryDataParameter* MemoryDataParameter::New(::google::protobuf::Arena* arena) const {
  MemoryDataParameter* n = new MemoryDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MemoryDataParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&batch_size_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&batch_size_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MemoryDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MemoryDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MemoryDataParameter)
  return false;
#undef DO_
}

void MemoryDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MemoryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MemoryDataParameter)
}

::google::protobuf::uint8* MemoryDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MemoryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MemoryDataParameter)
  return target;
}

size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MemoryDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MemoryDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MemoryDataParameter)
    MergeFrom(*source);
  }
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {
  return true;
}

void MemoryDataParameter::Swap(MemoryDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  std::swap(batch_size_, other->batch_size_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryDataParameter

// optional uint32 batch_size = 1;
bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVNParameter::kNormalizeVarianceFieldNumber;
const int MVNParameter::kAcrossChannelsFieldNumber;
const int MVNParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVNParameter::MVNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MVNParameter)
}
MVNParameter::MVNParameter(const MVNParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&across_channels_, &from.across_channels_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&across_channels_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:caffe.MVNParameter)
}

void MVNParameter::SharedCtor() {
  _cached_size_ = 0;
  across_channels_ = false;
  normalize_variance_ = true;
  eps_ = 1e-09f;
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:caffe.MVNParameter)
  SharedDtor();
}

void MVNParameter::SharedDtor() {
}

void MVNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVNParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVNParameter& MVNParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVNParameter* MVNParameter::New(::google::protobuf::Arena* arena) const {
  MVNParameter* n = new MVNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MVNParameter)
  if (_has_bits_[0 / 32] & 7u) {
    across_channels_ = false;
    normalize_variance_ = true;
    eps_ = 1e-09f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MVNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normalize_variance = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_normalize_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool across_channels = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_across_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &across_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 3 [default = 1e-09];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MVNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MVNParameter)
  return false;
#undef DO_
}

void MVNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MVNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalize_variance(), output);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->across_channels(), output);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MVNParameter)
}

::google::protobuf::uint8* MVNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MVNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MVNParameter)
  return target;
}

size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MVNParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool across_channels = 2 [default = false];
    if (has_across_channels()) {
      total_size += 1 + 1;
    }

    // optional bool normalize_variance = 1 [default = true];
    if (has_normalize_variance()) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MVNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MVNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MVNParameter)
    MergeFrom(*source);
  }
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      across_channels_ = from.across_channels_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_variance_ = from.normalize_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MVNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {
  return true;
}

void MVNParameter::Swap(MVNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVNParameter::InternalSwap(MVNParameter* other) {
  std::swap(across_channels_, other->across_channels_);
  std::swap(normalize_variance_, other->normalize_variance_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVNParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVNParameter

// optional bool normalize_variance = 1 [default = true];
bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000002u;
}
void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000001u;
}
void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kKernelHFieldNumber;
const int PoolingParameter::kKernelWFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kEngineFieldNumber;
const int PoolingParameter::kGlobalPoolingFieldNumber;
const int PoolingParameter::kCmpOutShapeFloorAsConvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}
PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pool_, &from.pool_,
    reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&pool_) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pool_, 0, reinterpret_cast<char*>(&cmp_out_shape_floor_as_conv_) -
    reinterpret_cast<char*>(&pool_) + sizeof(cmp_out_shape_floor_as_conv_));
  stride_ = 1u;
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoolingParameter& PoolingParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
  PoolingParameter* n = new PoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingParameter)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&pool_, 0, reinterpret_cast<char*>(&pad_h_) -
      reinterpret_cast<char*>(&pool_) + sizeof(pad_h_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&pad_w_, 0, reinterpret_cast<char*>(&cmp_out_shape_floor_as_conv_) -
      reinterpret_cast<char*>(&pad_w_) + sizeof(cmp_out_shape_floor_as_conv_));
    stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PoolingParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool global_pooling = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_global_pooling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_cmp_out_shape_floor_as_conv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmp_out_shape_floor_as_conv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // optional uint32 pad = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
  }

  // optional uint32 kernel_h = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
  }

  // optional uint32 stride_w = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->engine(), output);
  }

  // optional bool global_pooling = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
  }

  // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->cmp_out_shape_floor_as_conv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
  }

  // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->cmp_out_shape_floor_as_conv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
  return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernel_h = 5;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 7;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 8;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

    // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
    if (has_cmp_out_shape_floor_as_conv()) {
      total_size += 1 + 1;
    }

    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingParameter)
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000008u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      stride_h_ = from.stride_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      pad_h_ = from.pad_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      global_pooling_ = from.global_pooling_;
    }
    if (cached_has_bits & 0x00000800u) {
      cmp_out_shape_floor_as_conv_ = from.cmp_out_shape_floor_as_conv_;
    }
    if (cached_has_bits & 0x00001000u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
  std::swap(pool_, other->pool_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(pad_, other->pad_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(engine_, other->engine_);
  std::swap(global_pooling_, other->global_pooling_);
  std::swap(cmp_out_shape_floor_as_conv_, other->cmp_out_shape_floor_as_conv_);
  std::swap(stride_, other->stride_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000080u;
}
void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000100u;
}
void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000008u;
}
void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000010u;
}
void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00001000u;
}
void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000020u;
}
void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000040u;
}
void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
bool PoolingParameter::has_cmp_out_shape_floor_as_conv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PoolingParameter::set_has_cmp_out_shape_floor_as_conv() {
  _has_bits_[0] |= 0x00000800u;
}
void PoolingParameter::clear_has_cmp_out_shape_floor_as_conv() {
  _has_bits_[0] &= ~0x00000800u;
}
void PoolingParameter::clear_cmp_out_shape_floor_as_conv() {
  cmp_out_shape_floor_as_conv_ = false;
  clear_has_cmp_out_shape_floor_as_conv();
}
bool PoolingParameter::cmp_out_shape_floor_as_conv() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.cmp_out_shape_floor_as_conv)
  return cmp_out_shape_floor_as_conv_;
}
void PoolingParameter::set_cmp_out_shape_floor_as_conv(bool value) {
  set_has_cmp_out_shape_floor_as_conv();
  cmp_out_shape_floor_as_conv_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.cmp_out_shape_floor_as_conv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerParameter::PowerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PowerParameter)
}
PowerParameter::PowerParameter(const PowerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.PowerParameter)
}

void PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  power_ = 1;
  scale_ = 1;
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:caffe.PowerParameter)
  SharedDtor();
}

void PowerParameter::SharedDtor() {
}

void PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerParameter& PowerParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PowerParameter* PowerParameter::New(::google::protobuf::Arena* arena) const {
  PowerParameter* n = new PowerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PowerParameter)
  if (_has_bits_[0 / 32] & 7u) {
    shift_ = 0;
    power_ = 1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PowerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PowerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PowerParameter)
  return false;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PowerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PowerParameter)
}

::google::protobuf::uint8* PowerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PowerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PowerParameter)
  return target;
}

size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PowerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PowerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PowerParameter)
    MergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {
  return true;
}

void PowerParameter::Swap(PowerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerParameter::InternalSwap(PowerParameter* other) {
  std::swap(shift_, other->shift_);
  std::swap(power_, other->power_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerParameter

// optional float power = 1 [default = 1];
bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PythonParameter::kModuleFieldNumber;
const int PythonParameter::kLayerFieldNumber;
const int PythonParameter::kParamStrFieldNumber;
const int PythonParameter::kShareInParallelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PythonParameter::PythonParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PythonParameter)
}
PythonParameter::PythonParameter(const PythonParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_module()) {
    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer()) {
    layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
  }
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param_str()) {
    param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
  }
  share_in_parallel_ = from.share_in_parallel_;
  // @@protoc_insertion_point(copy_constructor:caffe.PythonParameter)
}

void PythonParameter::SharedCtor() {
  _cached_size_ = 0;
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_in_parallel_ = false;
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:caffe.PythonParameter)
  SharedDtor();
}

void PythonParameter::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PythonParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PythonParameter& PythonParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PythonParameter* PythonParameter::New(::google::protobuf::Arena* arena) const {
  PythonParameter* n = new PythonParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PythonParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_module()) {
      GOOGLE_DCHECK(!module_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*module_.UnsafeRawStringPointer())->clear();
    }
    if (has_layer()) {
      GOOGLE_DCHECK(!layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_.UnsafeRawStringPointer())->clear();
    }
    if (has_param_str()) {
      GOOGLE_DCHECK(!param_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param_str_.UnsafeRawStringPointer())->clear();
    }
  }
  share_in_parallel_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PythonParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PythonParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.module");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param_str = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_str().data(), this->param_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.param_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_in_parallel = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_share_in_parallel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_in_parallel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PythonParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PythonParameter)
  return false;
#undef DO_
}

void PythonParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PythonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // optional string param_str = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_str(), output);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->share_in_parallel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PythonParameter)
}

::google::protobuf::uint8* PythonParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PythonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->share_in_parallel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PythonParameter)
  return target;
}

size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PythonParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // optional string param_str = 3 [default = ""];
    if (has_param_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (has_share_in_parallel()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PythonParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PythonParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PythonParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PythonParameter)
    MergeFrom(*source);
  }
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_module();
      module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_param_str();
      param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
    }
    if (cached_has_bits & 0x00000008u) {
      share_in_parallel_ = from.share_in_parallel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PythonParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {
  return true;
}

void PythonParameter::Swap(PythonParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PythonParameter::InternalSwap(PythonParameter* other) {
  module_.Swap(&other->module_);
  layer_.Swap(&other->layer_);
  param_str_.Swap(&other->param_str_);
  std::swap(share_in_parallel_, other->share_in_parallel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PythonParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PythonParameter

// optional string module = 1;
bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena();
}
void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
#if LANG_CXX11
void PythonParameter::set_module(::std::string&& value) {
  set_has_module();
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.module)
}
#endif
void PythonParameter::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena();
}
void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
#if LANG_CXX11
void PythonParameter::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.layer)
}
#endif
void PythonParameter::set_layer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena();
}
void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
#if LANG_CXX11
void PythonParameter::set_param_str(::std::string&& value) {
  set_has_param_str();
  param_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.param_str)
}
#endif
void PythonParameter::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReductionParameter::kOperationFieldNumber;
const int ReductionParameter::kAxisFieldNumber;
const int ReductionParameter::kCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReductionParameter::ReductionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReductionParameter)
}
ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    reinterpret_cast<char*>(&coeff_) -
    reinterpret_cast<char*>(&axis_) + sizeof(coeff_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 0;
  operation_ = 1;
  coeff_ = 1;
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReductionParameter)
  SharedDtor();
}

void ReductionParameter::SharedDtor() {
}

void ReductionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReductionParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReductionParameter& ReductionParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReductionParameter* ReductionParameter::New(::google::protobuf::Arena* arena) const {
  ReductionParameter* n = new ReductionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReductionParameter)
  if (_has_bits_[0 / 32] & 7u) {
    axis_ = 0;
    operation_ = 1;
    coeff_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReductionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReductionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReductionParameter_ReductionOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::ReductionParameter_ReductionOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float coeff = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReductionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReductionParameter)
  return false;
#undef DO_
}

void ReductionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReductionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coeff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReductionParameter)
}

::google::protobuf::uint8* ReductionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReductionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coeff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReductionParameter)
  return target;
}

size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReductionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional float coeff = 3 [default = 1];
    if (has_coeff()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReductionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReductionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReductionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReductionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReductionParameter)
    MergeFrom(*source);
  }
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      coeff_ = from.coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReductionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {
  return true;
}

void ReductionParameter::Swap(ReductionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReductionParameter::InternalSwap(ReductionParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(operation_, other->operation_);
  std::swap(coeff_, other->coeff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReductionParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUParameter::kNegativeSlopeFieldNumber;
const int ReLUParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUParameter::ReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}
ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&negative_slope_, &from.negative_slope_,
    reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
}

void ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReLUParameter& ReLUParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReLUParameter* ReLUParameter::New(::google::protobuf::Arena* arena) const {
  ReLUParameter* n = new ReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUParameter)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_negative_slope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReLUParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ReLUParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
  return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
  return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUParameter)
    MergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      negative_slope_ = from.negative_slope_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {
  return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLUParameter::InternalSwap(ReLUParameter* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLUParameter

// optional float negative_slope = 1 [default = 0];
bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReshapeParameter::kShapeFieldNumber;
const int ReshapeParameter::kAxisFieldNumber;
const int ReshapeParameter::kNumAxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReshapeParameter::ReshapeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReshapeParameter)
}
ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::caffe::BlobShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&axis_, &from.axis_,
    reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&axis_) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shape_, 0, reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&shape_) + sizeof(axis_));
  num_axes_ = -1;
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReshapeParameter)
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void ReshapeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReshapeParameter* ReshapeParameter::New(::google::protobuf::Arena* arena) const {
  ReshapeParameter* n = new ReshapeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReshapeParameter)
  if (has_shape()) {
    GOOGLE_DCHECK(shape_ != NULL);
    shape_->::caffe::BlobShape::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    axis_ = 0;
    num_axes_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReshapeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReshapeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_axes = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReshapeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReshapeParameter)
  return false;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReshapeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_axes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReshapeParameter)
}

::google::protobuf::uint8* ReshapeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReshapeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, deterministic, target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_axes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReshapeParameter)
  return target;
}

size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReshapeParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReshapeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReshapeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReshapeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReshapeParameter)
    MergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {
  return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  std::swap(shape_, other->shape_);
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIPoolingParameter::kPooledHFieldNumber;
const int ROIPoolingParameter::kPooledWFieldNumber;
const int ROIPoolingParameter::kSpatialScaleFieldNumber;
const int ROIPoolingParameter::kHeatMapAFieldNumber;
const int ROIPoolingParameter::kHeatMapBFieldNumber;
const int ROIPoolingParameter::kPadRatioFieldNumber;
const int ROIPoolingParameter::kUseFloorFieldNumber;
const int ROIPoolingParameter::kSqrtSampleLocNumPerBinFieldNumber;
const int ROIPoolingParameter::kPoolFieldNumber;
const int ROIPoolingParameter::kPositionSensitiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIPoolingParameter::ROIPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ROIPoolingParameter)
}
ROIPoolingParameter::ROIPoolingParameter(const ROIPoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pooled_h_, &from.pooled_h_,
    reinterpret_cast<char*>(&sqrt_sample_loc_num_per_bin_) -
    reinterpret_cast<char*>(&pooled_h_) + sizeof(sqrt_sample_loc_num_per_bin_));
  // @@protoc_insertion_point(copy_constructor:caffe.ROIPoolingParameter)
}

void ROIPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pooled_h_, 0, reinterpret_cast<char*>(&position_sensitive_) -
    reinterpret_cast<char*>(&pooled_h_) + sizeof(position_sensitive_));
  pool_ = 1;
  spatial_scale_ = 1;
  sqrt_sample_loc_num_per_bin_ = 2u;
}

ROIPoolingParameter::~ROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.ROIPoolingParameter)
  SharedDtor();
}

void ROIPoolingParameter::SharedDtor() {
}

void ROIPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIPoolingParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROIPoolingParameter& ROIPoolingParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROIPoolingParameter* ROIPoolingParameter::New(::google::protobuf::Arena* arena) const {
  ROIPoolingParameter* n = new ROIPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ROIPoolingParameter)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&pooled_h_, 0, reinterpret_cast<char*>(&position_sensitive_) -
      reinterpret_cast<char*>(&pooled_h_) + sizeof(position_sensitive_));
    pool_ = 1;
  }
  if (_has_bits_[8 / 32] & 768u) {
    spatial_scale_ = 1;
    sqrt_sample_loc_num_per_bin_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROIPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ROIPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pooled_h = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pooled_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooled_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pooled_w = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pooled_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooled_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spatial_scale = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_spatial_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spatial_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heat_map_a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_heat_map_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_map_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heat_map_b = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_heat_map_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_map_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pad_ratio = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_pad_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pad_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_floor = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_use_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_sqrt_sample_loc_num_per_bin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sqrt_sample_loc_num_per_bin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ROIPoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::ROIPoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool position_sensitive = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_position_sensitive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &position_sensitive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ROIPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ROIPoolingParameter)
  return false;
#undef DO_
}

void ROIPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ROIPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pooled_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pooled_h(), output);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pooled_w(), output);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->spatial_scale(), output);
  }

  // optional float heat_map_a = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->heat_map_a(), output);
  }

  // optional float heat_map_b = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heat_map_b(), output);
  }

  // optional float pad_ratio = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pad_ratio(), output);
  }

  // optional bool use_floor = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_floor(), output);
  }

  // optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sqrt_sample_loc_num_per_bin(), output);
  }

  // optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pool(), output);
  }

  // optional bool position_sensitive = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->position_sensitive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ROIPoolingParameter)
}

::google::protobuf::uint8* ROIPoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ROIPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pooled_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pooled_h(), target);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pooled_w(), target);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->spatial_scale(), target);
  }

  // optional float heat_map_a = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->heat_map_a(), target);
  }

  // optional float heat_map_b = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->heat_map_b(), target);
  }

  // optional float pad_ratio = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pad_ratio(), target);
  }

  // optional bool use_floor = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_floor(), target);
  }

  // optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sqrt_sample_loc_num_per_bin(), target);
  }

  // optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pool(), target);
  }

  // optional bool position_sensitive = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->position_sensitive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ROIPoolingParameter)
  return target;
}

size_t ROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ROIPoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 pooled_h = 1 [default = 0];
    if (has_pooled_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooled_h());
    }

    // optional uint32 pooled_w = 2 [default = 0];
    if (has_pooled_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooled_w());
    }

    // optional float heat_map_a = 4;
    if (has_heat_map_a()) {
      total_size += 1 + 4;
    }

    // optional float heat_map_b = 5 [default = 0];
    if (has_heat_map_b()) {
      total_size += 1 + 4;
    }

    // optional float pad_ratio = 6 [default = 0];
    if (has_pad_ratio()) {
      total_size += 1 + 4;
    }

    // optional bool use_floor = 7 [default = false];
    if (has_use_floor()) {
      total_size += 1 + 1;
    }

    // optional bool position_sensitive = 10 [default = false];
    if (has_position_sensitive()) {
      total_size += 1 + 1;
    }

    // optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float spatial_scale = 3 [default = 1];
    if (has_spatial_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
    if (has_sqrt_sample_loc_num_per_bin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sqrt_sample_loc_num_per_bin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIPoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ROIPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ROIPoolingParameter)
    MergeFrom(*source);
  }
}

void ROIPoolingParameter::MergeFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pooled_h_ = from.pooled_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      pooled_w_ = from.pooled_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      heat_map_a_ = from.heat_map_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      heat_map_b_ = from.heat_map_b_;
    }
    if (cached_has_bits & 0x00000010u) {
      pad_ratio_ = from.pad_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_floor_ = from.use_floor_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_sensitive_ = from.position_sensitive_;
    }
    if (cached_has_bits & 0x00000080u) {
      pool_ = from.pool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      spatial_scale_ = from.spatial_scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      sqrt_sample_loc_num_per_bin_ = from.sqrt_sample_loc_num_per_bin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIPoolingParameter::CopyFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIPoolingParameter::IsInitialized() const {
  return true;
}

void ROIPoolingParameter::Swap(ROIPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIPoolingParameter::InternalSwap(ROIPoolingParameter* other) {
  std::swap(pooled_h_, other->pooled_h_);
  std::swap(pooled_w_, other->pooled_w_);
  std::swap(heat_map_a_, other->heat_map_a_);
  std::swap(heat_map_b_, other->heat_map_b_);
  std::swap(pad_ratio_, other->pad_ratio_);
  std::swap(use_floor_, other->use_floor_);
  std::swap(position_sensitive_, other->position_sensitive_);
  std::swap(pool_, other->pool_);
  std::swap(spatial_scale_, other->spatial_scale_);
  std::swap(sqrt_sample_loc_num_per_bin_, other->sqrt_sample_loc_num_per_bin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIPoolingParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
::google::protobuf::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
void ROIPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
::google::protobuf::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
void ROIPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000100u;
}
void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.spatial_scale)
}

// optional float heat_map_a = 4;
bool ROIPoolingParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROIPoolingParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000004u;
}
void ROIPoolingParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROIPoolingParameter::clear_heat_map_a() {
  heat_map_a_ = 0;
  clear_has_heat_map_a();
}
float ROIPoolingParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.heat_map_a)
  return heat_map_a_;
}
void ROIPoolingParameter::set_heat_map_a(float value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.heat_map_a)
}

// optional float heat_map_b = 5 [default = 0];
bool ROIPoolingParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ROIPoolingParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000008u;
}
void ROIPoolingParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000008u;
}
void ROIPoolingParameter::clear_heat_map_b() {
  heat_map_b_ = 0;
  clear_has_heat_map_b();
}
float ROIPoolingParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.heat_map_b)
  return heat_map_b_;
}
void ROIPoolingParameter::set_heat_map_b(float value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.heat_map_b)
}

// optional float pad_ratio = 6 [default = 0];
bool ROIPoolingParameter::has_pad_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ROIPoolingParameter::set_has_pad_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
void ROIPoolingParameter::clear_has_pad_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
void ROIPoolingParameter::clear_pad_ratio() {
  pad_ratio_ = 0;
  clear_has_pad_ratio();
}
float ROIPoolingParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pad_ratio)
  return pad_ratio_;
}
void ROIPoolingParameter::set_pad_ratio(float value) {
  set_has_pad_ratio();
  pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pad_ratio)
}

// optional bool use_floor = 7 [default = false];
bool ROIPoolingParameter::has_use_floor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ROIPoolingParameter::set_has_use_floor() {
  _has_bits_[0] |= 0x00000020u;
}
void ROIPoolingParameter::clear_has_use_floor() {
  _has_bits_[0] &= ~0x00000020u;
}
void ROIPoolingParameter::clear_use_floor() {
  use_floor_ = false;
  clear_has_use_floor();
}
bool ROIPoolingParameter::use_floor() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.use_floor)
  return use_floor_;
}
void ROIPoolingParameter::set_use_floor(bool value) {
  set_has_use_floor();
  use_floor_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.use_floor)
}

// optional uint32 sqrt_sample_loc_num_per_bin = 8 [default = 2];
bool ROIPoolingParameter::has_sqrt_sample_loc_num_per_bin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ROIPoolingParameter::set_has_sqrt_sample_loc_num_per_bin() {
  _has_bits_[0] |= 0x00000200u;
}
void ROIPoolingParameter::clear_has_sqrt_sample_loc_num_per_bin() {
  _has_bits_[0] &= ~0x00000200u;
}
void ROIPoolingParameter::clear_sqrt_sample_loc_num_per_bin() {
  sqrt_sample_loc_num_per_bin_ = 2u;
  clear_has_sqrt_sample_loc_num_per_bin();
}
::google::protobuf::uint32 ROIPoolingParameter::sqrt_sample_loc_num_per_bin() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.sqrt_sample_loc_num_per_bin)
  return sqrt_sample_loc_num_per_bin_;
}
void ROIPoolingParameter::set_sqrt_sample_loc_num_per_bin(::google::protobuf::uint32 value) {
  set_has_sqrt_sample_loc_num_per_bin();
  sqrt_sample_loc_num_per_bin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.sqrt_sample_loc_num_per_bin)
}

// optional .caffe.ROIPoolingParameter.PoolMethod pool = 9 [default = AVE];
bool ROIPoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ROIPoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000080u;
}
void ROIPoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000080u;
}
void ROIPoolingParameter::clear_pool() {
  pool_ = 1;
  clear_has_pool();
}
::caffe::ROIPoolingParameter_PoolMethod ROIPoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pool)
  return static_cast< ::caffe::ROIPoolingParameter_PoolMethod >(pool_);
}
void ROIPoolingParameter::set_pool(::caffe::ROIPoolingParameter_PoolMethod value) {
  assert(::caffe::ROIPoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pool)
}

// optional bool position_sensitive = 10 [default = false];
bool ROIPoolingParameter::has_position_sensitive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ROIPoolingParameter::set_has_position_sensitive() {
  _has_bits_[0] |= 0x00000040u;
}
void ROIPoolingParameter::clear_has_position_sensitive() {
  _has_bits_[0] &= ~0x00000040u;
}
void ROIPoolingParameter::clear_position_sensitive() {
  position_sensitive_ = false;
  clear_has_position_sensitive();
}
bool ROIPoolingParameter::position_sensitive() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.position_sensitive)
  return position_sensitive_;
}
void ROIPoolingParameter::set_position_sensitive(bool value) {
  set_has_position_sensitive();
  position_sensitive_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.position_sensitive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScaleParameter::kAxisFieldNumber;
const int ScaleParameter::kNumAxesFieldNumber;
const int ScaleParameter::kFillerFieldNumber;
const int ScaleParameter::kBiasTermFieldNumber;
const int ScaleParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScaleParameter::ScaleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ScaleParameter)
}
ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filler()) {
    filler_ = new ::caffe::FillerParameter(*from.filler_);
  } else {
    filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&bias_term_, &from.bias_term_,
    reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&bias_term_) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:caffe.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filler_, 0, reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&filler_) + sizeof(bias_term_));
  axis_ = 1;
  num_axes_ = 1;
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ScaleParameter)
  SharedDtor();
}

void ScaleParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void ScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScaleParameter& ScaleParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScaleParameter* ScaleParameter::New(::google::protobuf::Arena* arena) const {
  ScaleParameter* n = new ScaleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ScaleParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filler()) {
      GOOGLE_DCHECK(filler_ != NULL);
      filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    bias_term_ = false;
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ScaleParameter)
  return false;
#undef DO_
}

void ScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ScaleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  // optional bool bias_term = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ScaleParameter)
}

::google::protobuf::uint8* ScaleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ScaleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filler_, deterministic, target);
  }

  // optional bool bias_term = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bias_filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ScaleParameter)
  return target;
}

size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ScaleParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScaleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ScaleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ScaleParameter)
    MergeFrom(*source);
  }
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000008u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {
  return true;
}

void ScaleParameter::Swap(ScaleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScaleParameter::InternalSwap(ScaleParameter* other) {
  std::swap(filler_, other->filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScaleParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScaleParameter

// optional int32 axis = 1 [default = 1];
bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000010u;
}
void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidParameter::SigmoidParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SigmoidParameter)
}
SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:caffe.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
}

void SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SigmoidParameter* SigmoidParameter::New(::google::protobuf::Arena* arena) const {
  SigmoidParameter* n = new SigmoidParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SigmoidParameter)
  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SigmoidParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SigmoidParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SigmoidParameter)
  return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SigmoidParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidParameter)
  return target;
}

size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SigmoidParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SigmoidParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SigmoidParameter)
    MergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_engine()) {
    set_engine(from.engine());
  }
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {
  return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SliceParameter::kAxisFieldNumber;
const int SliceParameter::kSlicePointFieldNumber;
const int SliceParameter::kSliceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SliceParameter::SliceParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SliceParameter)
}
SliceParameter::SliceParameter(const SliceParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slice_point_(from.slice_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slice_dim_, &from.slice_dim_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&slice_dim_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.SliceParameter)
}

void SliceParameter::SharedCtor() {
  _cached_size_ = 0;
  slice_dim_ = 1u;
  axis_ = 1;
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:caffe.SliceParameter)
  SharedDtor();
}

void SliceParameter::SharedDtor() {
}

void SliceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SliceParameter& SliceParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SliceParameter* SliceParameter::New(::google::protobuf::Arena* arena) const {
  SliceParameter* n = new SliceParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SliceParameter)
  slice_point_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    slice_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SliceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SliceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_slice_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 slice_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_slice_point())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slice_point())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SliceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SliceParameter)
  return false;
#undef DO_
}

void SliceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SliceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slice_dim(), output);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0, n = this->slice_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slice_point(i), output);
  }

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SliceParameter)
}

::google::protobuf::uint8* SliceParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SliceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->slice_point_, target);

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SliceParameter)
  return target;
}

size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SliceParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 slice_point = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->slice_point_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slice_point_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 slice_dim = 1 [default = 1];
    if (has_slice_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_dim());
    }

    // optional int32 axis = 3 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SliceParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SliceParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SliceParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SliceParameter)
    MergeFrom(*source);
  }
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slice_point_.MergeFrom(from.slice_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      slice_dim_ = from.slice_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {
  return true;
}

void SliceParameter::Swap(SliceParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SliceParameter::InternalSwap(SliceParameter* other) {
  slice_point_.InternalSwap(&other->slice_point_);
  std::swap(slice_dim_, other->slice_dim_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SliceParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SliceParameter

// optional int32 axis = 3 [default = 1];
bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000001u;
}
void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParameter::kEngineFieldNumber;
const int SoftmaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftmaxParameter)
}
SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&engine_, &from.engine_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&engine_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  axis_ = 1;
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
  SoftmaxParameter* n = new SoftmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftmaxParameter)
  if (_has_bits_[0 / 32] & 3u) {
    engine_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SoftmaxParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SoftmaxParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxParameter)
  return target;
}

size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftmaxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftmaxParameter)
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {
  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TanHParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TanHParameter::TanHParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TanHParameter)
}
TanHParameter::TanHParameter(const TanHParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:caffe.TanHParameter)
}

void TanHParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:caffe.TanHParameter)
  SharedDtor();
}

void TanHParameter::SharedDtor() {
}

void TanHParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanHParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TanHParameter& TanHParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TanHParameter* TanHParameter::New(::google::protobuf::Arena* arena) const {
  TanHParameter* n = new TanHParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TanHParameter)
  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TanHParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TanHParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TanHParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::TanHParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TanHParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TanHParameter)
  return false;
#undef DO_
}

void TanHParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TanHParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TanHParameter)
}

::google::protobuf::uint8* TanHParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TanHParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TanHParameter)
  return target;
}

size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TanHParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TanHParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TanHParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TanHParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TanHParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TanHParameter)
    MergeFrom(*source);
  }
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_engine()) {
    set_engine(from.engine());
  }
}

void TanHParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {
  return true;
}

void TanHParameter::Swap(TanHParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TanHParameter::InternalSwap(TanHParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TanHParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileParameter::kAxisFieldNumber;
const int TileParameter::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileParameter::TileParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TileParameter)
}
TileParameter::TileParameter(const TileParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tiles_, &from.tiles_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&tiles_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.TileParameter)
}

void TileParameter::SharedCtor() {
  _cached_size_ = 0;
  tiles_ = 0;
  axis_ = 1;
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:caffe.TileParameter)
  SharedDtor();
}

void TileParameter::SharedDtor() {
}

void TileParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TileParameter& TileParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TileParameter* TileParameter::New(::google::protobuf::Arena* arena) const {
  TileParameter* n = new TileParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TileParameter)
  if (_has_bits_[0 / 32] & 3u) {
    tiles_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TileParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TileParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tiles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tiles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TileParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TileParameter)
  return false;
#undef DO_
}

void TileParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TileParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TileParameter)
}

::google::protobuf::uint8* TileParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TileParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TileParameter)
  return target;
}

size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TileParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 tiles = 2;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiles());
    }

    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TileParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TileParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TileParameter)
    MergeFrom(*source);
  }
}

void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tiles_ = from.tiles_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TileParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileParameter::IsInitialized() const {
  return true;
}

void TileParameter::Swap(TileParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileParameter::InternalSwap(TileParameter* other) {
  std::swap(tiles_, other->tiles_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileParameter

// optional int32 axis = 1 [default = 1];
bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000001u;
}
void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000001u;
}
void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThresholdParameter::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThresholdParameter::ThresholdParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ThresholdParameter)
}
ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:caffe.ThresholdParameter)
  SharedDtor();
}

void ThresholdParameter::SharedDtor() {
}

void ThresholdParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThresholdParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThresholdParameter& ThresholdParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThresholdParameter* ThresholdParameter::New(::google::protobuf::Arena* arena) const {
  ThresholdParameter* n = new ThresholdParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ThresholdParameter)
  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThresholdParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ThresholdParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ThresholdParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ThresholdParameter)
  return false;
#undef DO_
}

void ThresholdParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ThresholdParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ThresholdParameter)
}

::google::protobuf::uint8* ThresholdParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ThresholdParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ThresholdParameter)
  return target;
}

size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ThresholdParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThresholdParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThresholdParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ThresholdParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ThresholdParameter)
    MergeFrom(*source);
  }
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_threshold()) {
    set_threshold(from.threshold());
  }
}

void ThresholdParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {
  return true;
}

void ThresholdParameter::Swap(ThresholdParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThresholdParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThresholdParameter

// optional float threshold = 1 [default = 0];
bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> WindowDataParameter::_default_crop_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowDataParameter::kSourceFieldNumber;
const int WindowDataParameter::kScaleFieldNumber;
const int WindowDataParameter::kMeanFileFieldNumber;
const int WindowDataParameter::kBatchSizeFieldNumber;
const int WindowDataParameter::kCropSizeFieldNumber;
const int WindowDataParameter::kMirrorFieldNumber;
const int WindowDataParameter::kFgThresholdFieldNumber;
const int WindowDataParameter::kBgThresholdFieldNumber;
const int WindowDataParameter::kFgFractionFieldNumber;
const int WindowDataParameter::kContextPadFieldNumber;
const int WindowDataParameter::kCropModeFieldNumber;
const int WindowDataParameter::kCacheImagesFieldNumber;
const int WindowDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowDataParameter::WindowDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WindowDataParameter)
}
WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  crop_mode_.UnsafeSetDefault(&WindowDataParameter::_default_crop_mode_.get());
  if (from.has_crop_mode()) {
    crop_mode_.AssignWithDefault(&WindowDataParameter::_default_crop_mode_.get(), from.crop_mode_);
  }
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_folder()) {
    root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&fg_fraction_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.UnsafeSetDefault(&WindowDataParameter::_default_crop_mode_.get());
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&context_pad_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(context_pad_));
  scale_ = 1;
  fg_threshold_ = 0.5f;
  bg_threshold_ = 0.5f;
  fg_fraction_ = 0.25f;
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.WindowDataParameter)
  SharedDtor();
}

void WindowDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.DestroyNoArena(&WindowDataParameter::_default_crop_mode_.get());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WindowDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindowDataParameter& WindowDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindowDataParameter* WindowDataParameter::New(::google::protobuf::Arena* arena) const {
  WindowDataParameter* n = new WindowDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WindowDataParameter)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_mean_file()) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_crop_mode()) {
      GOOGLE_DCHECK(!crop_mode_.IsDefault(&WindowDataParameter::_default_crop_mode_.get()));
      (*crop_mode_.UnsafeRawStringPointer())->assign(*&WindowDataParameter::_default_crop_mode_.get());
    }
    if (has_root_folder()) {
      GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*root_folder_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&batch_size_, 0, reinterpret_cast<char*>(&cache_images_) -
      reinterpret_cast<char*>(&batch_size_) + sizeof(cache_images_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    context_pad_ = 0u;
    scale_ = 1;
    fg_threshold_ = 0.5f;
    bg_threshold_ = 0.5f;
    fg_fraction_ = 0.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WindowDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WindowDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg_threshold = 7 [default = 0.5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_fg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bg_threshold = 8 [default = 0.5];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_bg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg_fraction = 9 [default = 0.25];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_fg_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 context_pad = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_context_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string crop_mode = 11 [default = "warp"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crop_mode().data(), this->crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.crop_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cache_images = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_cache_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string root_folder = 13 [default = ""];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WindowDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WindowDataParameter)
  return false;
#undef DO_
}

void WindowDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WindowDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fg_threshold(), output);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bg_threshold(), output);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fg_fraction(), output);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->context_pad(), output);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->crop_mode(), output);
  }

  // optional bool cache_images = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cache_images(), output);
  }

  // optional string root_folder = 13 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WindowDataParameter)
}

::google::protobuf::uint8* WindowDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WindowDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WindowDataParameter)
  return target;
}

size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WindowDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (has_crop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crop_mode());
    }

    // optional string root_folder = 13 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool cache_images = 12 [default = false];
    if (has_cache_images()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 context_pad = 10 [default = 0];
    if (has_context_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_pad());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (has_fg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (has_bg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float fg_fraction = 9 [default = 0.25];
    if (has_fg_fraction()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WindowDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WindowDataParameter)
    MergeFrom(*source);
  }
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_crop_mode();
      crop_mode_.AssignWithDefault(&WindowDataParameter::_default_crop_mode_.get(), from.crop_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000010u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      cache_images_ = from.cache_images_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      context_pad_ = from.context_pad_;
    }
    if (cached_has_bits & 0x00000200u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      fg_threshold_ = from.fg_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      bg_threshold_ = from.bg_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      fg_fraction_ = from.fg_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {
  return true;
}

void WindowDataParameter::Swap(WindowDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  crop_mode_.Swap(&other->crop_mode_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  std::swap(cache_images_, other->cache_images_);
  std::swap(context_pad_, other->context_pad_);
  std::swap(scale_, other->scale_);
  std::swap(fg_threshold_, other->fg_threshold_);
  std::swap(bg_threshold_, other->bg_threshold_);
  std::swap(fg_fraction_, other->fg_fraction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowDataParameter

// optional string source = 1;
bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena();
}
void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
#if LANG_CXX11
void WindowDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.source)
}
#endif
void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
#if LANG_CXX11
void WindowDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.mean_file)
}
#endif
void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000020u;
}
void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00001000u;
}
void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00001000u;
}
void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000100u;
}
void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000100u;
}
void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(&WindowDataParameter::_default_crop_mode_.get());
  clear_has_crop_mode();
}
const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena();
}
void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
#if LANG_CXX11
void WindowDataParameter::set_crop_mode(::std::string&& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(
    &WindowDataParameter::_default_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.crop_mode)
}
#endif
void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(&WindowDataParameter::_default_crop_mode_.get());
}
::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(&WindowDataParameter::_default_crop_mode_.get());
}
void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(&WindowDataParameter::_default_crop_mode_.get(), crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000080u;
}
void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000080u;
}
void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000008u;
}
void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
#if LANG_CXX11
void WindowDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.root_folder)
}
#endif
void WindowDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPPParameter::kPyramidHeightFieldNumber;
const int SPPParameter::kPoolFieldNumber;
const int SPPParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPPParameter::SPPParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SPPParameter)
}
SPPParameter::SPPParameter(const SPPParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pyramid_height_, &from.pyramid_height_,
    reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&pyramid_height_) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:caffe.SPPParameter)
}

void SPPParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pyramid_height_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&pyramid_height_) + sizeof(engine_));
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:caffe.SPPParameter)
  SharedDtor();
}

void SPPParameter::SharedDtor() {
}

void SPPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SPPParameter& SPPParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SPPParameter* SPPParameter::New(::google::protobuf::Arena* arena) const {
  SPPParameter* n = new SPPParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SPPParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&pyramid_height_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&pyramid_height_) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SPPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SPPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pyramid_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pyramid_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyramid_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::SPPParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SPPParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SPPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SPPParameter)
  return false;
#undef DO_
}

void SPPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SPPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pyramid_height(), output);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pool(), output);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SPPParameter)
}

::google::protobuf::uint8* SPPParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SPPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pyramid_height(), target);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pool(), target);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SPPParameter)
  return target;
}

size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SPPParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 pyramid_height = 1;
    if (has_pyramid_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyramid_height());
    }

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SPPParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SPPParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SPPParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SPPParameter)
    MergeFrom(*source);
  }
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pyramid_height_ = from.pyramid_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000004u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SPPParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {
  return true;
}

void SPPParameter::Swap(SPPParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SPPParameter::InternalSwap(SPPParameter* other) {
  std::swap(pyramid_height_, other->pyramid_height_);
  std::swap(pool_, other->pool_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SPPParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SPPParameter

// optional uint32 pyramid_height = 1;
bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V1LayerParameter::kBottomFieldNumber;
const int V1LayerParameter::kTopFieldNumber;
const int V1LayerParameter::kNameFieldNumber;
const int V1LayerParameter::kIncludeFieldNumber;
const int V1LayerParameter::kExcludeFieldNumber;
const int V1LayerParameter::kTypeFieldNumber;
const int V1LayerParameter::kBlobsFieldNumber;
const int V1LayerParameter::kParamFieldNumber;
const int V1LayerParameter::kBlobShareModeFieldNumber;
const int V1LayerParameter::kBlobsLrFieldNumber;
const int V1LayerParameter::kWeightDecayFieldNumber;
const int V1LayerParameter::kLossWeightFieldNumber;
const int V1LayerParameter::kAccuracyParamFieldNumber;
const int V1LayerParameter::kArgmaxParamFieldNumber;
const int V1LayerParameter::kConcatParamFieldNumber;
const int V1LayerParameter::kContrastiveLossParamFieldNumber;
const int V1LayerParameter::kConvolutionParamFieldNumber;
const int V1LayerParameter::kDataParamFieldNumber;
const int V1LayerParameter::kDropoutParamFieldNumber;
const int V1LayerParameter::kDummyDataParamFieldNumber;
const int V1LayerParameter::kEltwiseParamFieldNumber;
const int V1LayerParameter::kExpParamFieldNumber;
const int V1LayerParameter::kHdf5DataParamFieldNumber;
const int V1LayerParameter::kHdf5OutputParamFieldNumber;
const int V1LayerParameter::kHingeLossParamFieldNumber;
const int V1LayerParameter::kImageDataParamFieldNumber;
const int V1LayerParameter::kInfogainLossParamFieldNumber;
const int V1LayerParameter::kInnerProductParamFieldNumber;
const int V1LayerParameter::kLrnParamFieldNumber;
const int V1LayerParameter::kMemoryDataParamFieldNumber;
const int V1LayerParameter::kMvnParamFieldNumber;
const int V1LayerParameter::kPoolingParamFieldNumber;
const int V1LayerParameter::kPowerParamFieldNumber;
const int V1LayerParameter::kReluParamFieldNumber;
const int V1LayerParameter::kSigmoidParamFieldNumber;
const int V1LayerParameter::kSoftmaxParamFieldNumber;
const int V1LayerParameter::kSliceParamFieldNumber;
const int V1LayerParameter::kTanhParamFieldNumber;
const int V1LayerParameter::kThresholdParamFieldNumber;
const int V1LayerParameter::kWindowDataParamFieldNumber;
const int V1LayerParameter::kTransformParamFieldNumber;
const int V1LayerParameter::kLossParamFieldNumber;
const int V1LayerParameter::kLayerFieldNumber;
const int V1LayerParameter::kCropParameterFieldNumber;
const int V1LayerParameter::kImageDataArbitraryParamFieldNumber;
const int V1LayerParameter::kExpandlabelParamFieldNumber;
const int V1LayerParameter::kDeformableConvolutionParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V1LayerParameter::V1LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V1LayerParameter)
}
V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bottom_(from.bottom_),
      top_(from.top_),
      blobs_(from.blobs_),
      blobs_lr_(from.blobs_lr_),
      weight_decay_(from.weight_decay_),
      include_(from.include_),
      exclude_(from.exclude_),
      loss_weight_(from.loss_weight_),
      param_(from.param_),
      blob_share_mode_(from.blob_share_mode_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_layer()) {
    layer_ = new ::caffe::V0LayerParameter(*from.layer_);
  } else {
    layer_ = NULL;
  }
  if (from.has_concat_param()) {
    concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = NULL;
  }
  if (from.has_convolution_param()) {
    convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = NULL;
  }
  if (from.has_data_param()) {
    data_param_ = new ::caffe::DataParameter(*from.data_param_);
  } else {
    data_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_hdf5_data_param()) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter(*from.hdf5_data_param_);
  } else {
    hdf5_data_param_ = NULL;
  }
  if (from.has_hdf5_output_param()) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = NULL;
  }
  if (from.has_image_data_param()) {
    image_data_param_ = new ::caffe::ImageDataParameter(*from.image_data_param_);
  } else {
    image_data_param_ = NULL;
  }
  if (from.has_infogain_loss_param()) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter(*from.infogain_loss_param_);
  } else {
    infogain_loss_param_ = NULL;
  }
  if (from.has_inner_product_param()) {
    inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = NULL;
  }
  if (from.has_lrn_param()) {
    lrn_param_ = new ::caffe::LRNParameter(*from.lrn_param_);
  } else {
    lrn_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_window_data_param()) {
    window_data_param_ = new ::caffe::WindowDataParameter(*from.window_data_param_);
  } else {
    window_data_param_ = NULL;
  }
  if (from.has_power_param()) {
    power_param_ = new ::caffe::PowerParameter(*from.power_param_);
  } else {
    power_param_ = NULL;
  }
  if (from.has_memory_data_param()) {
    memory_data_param_ = new ::caffe::MemoryDataParameter(*from.memory_data_param_);
  } else {
    memory_data_param_ = NULL;
  }
  if (from.has_argmax_param()) {
    argmax_param_ = new ::caffe::ArgMaxParameter(*from.argmax_param_);
  } else {
    argmax_param_ = NULL;
  }
  if (from.has_eltwise_param()) {
    eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = NULL;
  }
  if (from.has_threshold_param()) {
    threshold_param_ = new ::caffe::ThresholdParameter(*from.threshold_param_);
  } else {
    threshold_param_ = NULL;
  }
  if (from.has_dummy_data_param()) {
    dummy_data_param_ = new ::caffe::DummyDataParameter(*from.dummy_data_param_);
  } else {
    dummy_data_param_ = NULL;
  }
  if (from.has_accuracy_param()) {
    accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = NULL;
  }
  if (from.has_hinge_loss_param()) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter(*from.hinge_loss_param_);
  } else {
    hinge_loss_param_ = NULL;
  }
  if (from.has_relu_param()) {
    relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_slice_param()) {
    slice_param_ = new ::caffe::SliceParameter(*from.slice_param_);
  } else {
    slice_param_ = NULL;
  }
  if (from.has_mvn_param()) {
    mvn_param_ = new ::caffe::MVNParameter(*from.mvn_param_);
  } else {
    mvn_param_ = NULL;
  }
  if (from.has_transform_param()) {
    transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = NULL;
  }
  if (from.has_tanh_param()) {
    tanh_param_ = new ::caffe::TanHParameter(*from.tanh_param_);
  } else {
    tanh_param_ = NULL;
  }
  if (from.has_sigmoid_param()) {
    sigmoid_param_ = new ::caffe::SigmoidParameter(*from.sigmoid_param_);
  } else {
    sigmoid_param_ = NULL;
  }
  if (from.has_softmax_param()) {
    softmax_param_ = new ::caffe::SoftmaxParameter(*from.softmax_param_);
  } else {
    softmax_param_ = NULL;
  }
  if (from.has_contrastive_loss_param()) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter(*from.contrastive_loss_param_);
  } else {
    contrastive_loss_param_ = NULL;
  }
  if (from.has_exp_param()) {
    exp_param_ = new ::caffe::ExpParameter(*from.exp_param_);
  } else {
    exp_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  if (from.has_crop_parameter()) {
    crop_parameter_ = new ::caffe::CropParameter(*from.crop_parameter_);
  } else {
    crop_parameter_ = NULL;
  }
  if (from.has_deformable_convolution_param()) {
    deformable_convolution_param_ = new ::caffe::DeformableConvolutionParameter(*from.deformable_convolution_param_);
  } else {
    deformable_convolution_param_ = NULL;
  }
  if (from.has_image_data_arbitrary_param()) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter(*from.image_data_arbitrary_param_);
  } else {
    image_data_arbitrary_param_ = NULL;
  }
  if (from.has_expandlabel_param()) {
    expandlabel_param_ = new ::caffe::ExpandlabelParameter(*from.expandlabel_param_);
  } else {
    expandlabel_param_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&layer_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&layer_) + sizeof(type_));
  _cached_size_ = 0;
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V1LayerParameter)
  SharedDtor();
}

void V1LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete layer_;
  }
  if (this != internal_default_instance()) {
    delete concat_param_;
  }
  if (this != internal_default_instance()) {
    delete convolution_param_;
  }
  if (this != internal_default_instance()) {
    delete data_param_;
  }
  if (this != internal_default_instance()) {
    delete dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete hdf5_data_param_;
  }
  if (this != internal_default_instance()) {
    delete hdf5_output_param_;
  }
  if (this != internal_default_instance()) {
    delete image_data_param_;
  }
  if (this != internal_default_instance()) {
    delete infogain_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete inner_product_param_;
  }
  if (this != internal_default_instance()) {
    delete lrn_param_;
  }
  if (this != internal_default_instance()) {
    delete pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete window_data_param_;
  }
  if (this != internal_default_instance()) {
    delete power_param_;
  }
  if (this != internal_default_instance()) {
    delete memory_data_param_;
  }
  if (this != internal_default_instance()) {
    delete argmax_param_;
  }
  if (this != internal_default_instance()) {
    delete eltwise_param_;
  }
  if (this != internal_default_instance()) {
    delete threshold_param_;
  }
  if (this != internal_default_instance()) {
    delete dummy_data_param_;
  }
  if (this != internal_default_instance()) {
    delete accuracy_param_;
  }
  if (this != internal_default_instance()) {
    delete hinge_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete relu_param_;
  }
  if (this != internal_default_instance()) {
    delete slice_param_;
  }
  if (this != internal_default_instance()) {
    delete mvn_param_;
  }
  if (this != internal_default_instance()) {
    delete transform_param_;
  }
  if (this != internal_default_instance()) {
    delete tanh_param_;
  }
  if (this != internal_default_instance()) {
    delete sigmoid_param_;
  }
  if (this != internal_default_instance()) {
    delete softmax_param_;
  }
  if (this != internal_default_instance()) {
    delete contrastive_loss_param_;
  }
  if (this != internal_default_instance()) {
    delete exp_param_;
  }
  if (this != internal_default_instance()) {
    delete loss_param_;
  }
  if (this != internal_default_instance()) {
    delete crop_parameter_;
  }
  if (this != internal_default_instance()) {
    delete deformable_convolution_param_;
  }
  if (this != internal_default_instance()) {
    delete image_data_arbitrary_param_;
  }
  if (this != internal_default_instance()) {
    delete expandlabel_param_;
  }
}

void V1LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V1LayerParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V1LayerParameter& V1LayerParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

V1LayerParameter* V1LayerParameter::New(::google::protobuf::Arena* arena) const {
  V1LayerParameter* n = new V1LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V1LayerParameter)
  bottom_.Clear();
  top_.Clear();
  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  include_.Clear();
  exclude_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_layer()) {
      GOOGLE_DCHECK(layer_ != NULL);
      layer_->::caffe::V0LayerParameter::Clear();
    }
    if (has_concat_param()) {
      GOOGLE_DCHECK(concat_param_ != NULL);
      concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_convolution_param()) {
      GOOGLE_DCHECK(convolution_param_ != NULL);
      convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_data_param()) {
      GOOGLE_DCHECK(data_param_ != NULL);
      data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      GOOGLE_DCHECK(dropout_param_ != NULL);
      dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      GOOGLE_DCHECK(hdf5_data_param_ != NULL);
      hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      GOOGLE_DCHECK(hdf5_output_param_ != NULL);
      hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_image_data_param()) {
      GOOGLE_DCHECK(image_data_param_ != NULL);
      image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      GOOGLE_DCHECK(infogain_loss_param_ != NULL);
      infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      GOOGLE_DCHECK(inner_product_param_ != NULL);
      inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      GOOGLE_DCHECK(lrn_param_ != NULL);
      lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_pooling_param()) {
      GOOGLE_DCHECK(pooling_param_ != NULL);
      pooling_param_->::caffe::PoolingParameter::Clear();
    }
    if (has_window_data_param()) {
      GOOGLE_DCHECK(window_data_param_ != NULL);
      window_data_param_->::caffe::WindowDataParameter::Clear();
    }
    if (has_power_param()) {
      GOOGLE_DCHECK(power_param_ != NULL);
      power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_memory_data_param()) {
      GOOGLE_DCHECK(memory_data_param_ != NULL);
      memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_argmax_param()) {
      GOOGLE_DCHECK(argmax_param_ != NULL);
      argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_eltwise_param()) {
      GOOGLE_DCHECK(eltwise_param_ != NULL);
      eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_threshold_param()) {
      GOOGLE_DCHECK(threshold_param_ != NULL);
      threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (has_dummy_data_param()) {
      GOOGLE_DCHECK(dummy_data_param_ != NULL);
      dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (has_accuracy_param()) {
      GOOGLE_DCHECK(accuracy_param_ != NULL);
      accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_hinge_loss_param()) {
      GOOGLE_DCHECK(hinge_loss_param_ != NULL);
      hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (has_relu_param()) {
      GOOGLE_DCHECK(relu_param_ != NULL);
      relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (has_slice_param()) {
      GOOGLE_DCHECK(slice_param_ != NULL);
      slice_param_->::caffe::SliceParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_mvn_param()) {
      GOOGLE_DCHECK(mvn_param_ != NULL);
      mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (has_transform_param()) {
      GOOGLE_DCHECK(transform_param_ != NULL);
      transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_tanh_param()) {
      GOOGLE_DCHECK(tanh_param_ != NULL);
      tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_sigmoid_param()) {
      GOOGLE_DCHECK(sigmoid_param_ != NULL);
      sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      GOOGLE_DCHECK(softmax_param_ != NULL);
      softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      GOOGLE_DCHECK(contrastive_loss_param_ != NULL);
      contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
    if (has_exp_param()) {
      GOOGLE_DCHECK(exp_param_ != NULL);
      exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_loss_param()) {
      GOOGLE_DCHECK(loss_param_ != NULL);
      loss_param_->::caffe::LossParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 15u) {
    if (has_crop_parameter()) {
      GOOGLE_DCHECK(crop_parameter_ != NULL);
      crop_parameter_->::caffe::CropParameter::Clear();
    }
    if (has_deformable_convolution_param()) {
      GOOGLE_DCHECK(deformable_convolution_param_ != NULL);
      deformable_convolution_param_->::caffe::DeformableConvolutionParameter::Clear();
    }
    if (has_image_data_arbitrary_param()) {
      GOOGLE_DCHECK(image_data_arbitrary_param_ != NULL);
      image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
    }
    if (has_expandlabel_param()) {
      GOOGLE_DCHECK(expandlabel_param_ != NULL);
      expandlabel_param_->::caffe::ExpandlabelParameter::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool V1LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V1LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(40018u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.V0LayerParameter layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bottom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string top = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.V1LayerParameter.LayerType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_LayerType_IsValid(value)) {
            set_type(static_cast< ::caffe::V1LayerParameter_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto blobs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float blobs_lr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_blobs_lr())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weight_decay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_weight_decay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter data_param = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PowerParameter power_param = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SliceParameter slice_param = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule include = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule exclude = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float loss_weight = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(285u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 285u, input, this->mutable_loss_weight())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(282u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ExpParameter exp_param = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter loss_param = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.CropParameter crop_parameter = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(450u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deformable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string param = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8016u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_DimCheckMode_IsValid(value)) {
            add_blob_share_mode(static_cast< ::caffe::V1LayerParameter_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1002, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8018u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1002,
                 ::caffe::V1LayerParameter_DimCheckMode_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_blob_share_mode())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
      case 5001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_arbitrary_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
      case 5002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expandlabel_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V1LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V1LayerParameter)
  return false;
#undef DO_
}

void V1LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V1LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->layer_, output);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bottom(i), output);
  }

  // repeated string top = 3;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top(i), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blobs(i), output);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0, n = this->blobs_lr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 8;
  for (int i = 0, n = this->weight_decay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->weight_decay(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ConcatParameter concat_param = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->concat_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->dropout_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hdf5_output_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->lrn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->pooling_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->window_data_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->power_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->memory_data_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->argmax_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->eltwise_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->threshold_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->dummy_data_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->accuracy_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->relu_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->slice_param_, output);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->exclude(i), output);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->mvn_param_, output);
  }

  // repeated float loss_weight = 35;
  for (int i = 0, n = this->loss_weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      35, this->loss_weight(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->transform_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->tanh_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->softmax_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->exp_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->loss_param_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.CropParameter crop_parameter = 50;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->crop_parameter_, output);
  }

  // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, *this->deformable_convolution_param_, output);
  }

  // repeated string param = 1001;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1001, this->param(i), output);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0, n = this->blob_share_mode_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1002, this->blob_share_mode(i), output);
  }

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5001, *this->image_data_arbitrary_param_, output);
  }

  // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5002, *this->expandlabel_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V1LayerParameter)
}

::google::protobuf::uint8* V1LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V1LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->layer_, deterministic, target);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bottom(i), target);
  }

  // repeated string top = 3;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top(i), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->blobs(i), deterministic, target);
  }

  // repeated float blobs_lr = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->blobs_lr_, target);

  // repeated float weight_decay = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->weight_decay_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ConcatParameter concat_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->concat_param_, deterministic, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->convolution_param_, deterministic, target);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->data_param_, deterministic, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->dropout_param_, deterministic, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->hdf5_data_param_, deterministic, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->hdf5_output_param_, deterministic, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->image_data_param_, deterministic, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->infogain_loss_param_, deterministic, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->inner_product_param_, deterministic, target);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->lrn_param_, deterministic, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->pooling_param_, deterministic, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->window_data_param_, deterministic, target);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->power_param_, deterministic, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->memory_data_param_, deterministic, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->argmax_param_, deterministic, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->eltwise_param_, deterministic, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->threshold_param_, deterministic, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->dummy_data_param_, deterministic, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->accuracy_param_, deterministic, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->hinge_loss_param_, deterministic, target);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->relu_param_, deterministic, target);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->slice_param_, deterministic, target);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->include(i), deterministic, target);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, this->exclude(i), deterministic, target);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->mvn_param_, deterministic, target);
  }

  // repeated float loss_weight = 35;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(35, this->loss_weight_, target);

  // optional .caffe.TransformationParameter transform_param = 36;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->transform_param_, deterministic, target);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->tanh_param_, deterministic, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->sigmoid_param_, deterministic, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->softmax_param_, deterministic, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->contrastive_loss_param_, deterministic, target);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->exp_param_, deterministic, target);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->loss_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.CropParameter crop_parameter = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->crop_parameter_, deterministic, target);
  }

  // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        56, *this->deformable_convolution_param_, deterministic, target);
  }

  // repeated string param = 1001;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1001, this->param(i), target);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1002, this->blob_share_mode_, target);

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5001, *this->image_data_arbitrary_param_, deterministic, target);
  }

  // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5002, *this->expandlabel_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V1LayerParameter)
  return target;
}

size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V1LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string bottom = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0, n = this->top_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated .caffe.BlobProto blobs = 6;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated float blobs_lr = 7;
  {
    unsigned int count = this->blobs_lr_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 8;
  {
    unsigned int count = this->weight_decay_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->weight_decay_size());
    total_size += data_size;
  }

  // repeated .caffe.NetStateRule include = 32;
  {
    unsigned int count = this->include_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->include(i));
    }
  }

  // repeated .caffe.NetStateRule exclude = 33;
  {
    unsigned int count = this->exclude_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exclude(i));
    }
  }

  // repeated float loss_weight = 35;
  {
    unsigned int count = this->loss_weight_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->loss_weight_size());
    total_size += data_size;
  }

  // repeated string param = 1001;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->param_size());
  for (int i = 0, n = this->param_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    size_t data_size = 0;
    unsigned int count = this->blob_share_mode_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->blob_share_mode(i));
    }
    total_size += (2UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.V0LayerParameter layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->layer_);
    }

    // optional .caffe.ConcatParameter concat_param = 9;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ConvolutionParameter convolution_param = 10;
    if (has_convolution_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.DataParameter data_param = 11;
    if (has_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 12;
    if (has_dropout_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    if (has_hdf5_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    if (has_hdf5_output_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.ImageDataParameter image_data_param = 15;
    if (has_image_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 18;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 19;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 20;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

    // optional .caffe.PowerParameter power_param = 21;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.ArgMaxParameter argmax_param = 23;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 25;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 27;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 30;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.SliceParameter slice_param = 31;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.MVNParameter mvn_param = 34;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

    // optional .caffe.TransformationParameter transform_param = 36;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 37;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

    // optional .caffe.ExpParameter exp_param = 41;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.LossParameter loss_param = 42;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

  }
  if (_has_bits_[32 / 32] & 31u) {
    // optional .caffe.CropParameter crop_parameter = 50;
    if (has_crop_parameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crop_parameter_);
    }

    // optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
    if (has_deformable_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deformable_convolution_param_);
    }

    // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
    if (has_image_data_arbitrary_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_arbitrary_param_);
    }

    // optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
    if (has_expandlabel_param()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->expandlabel_param_);
    }

    // optional .caffe.V1LayerParameter.LayerType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V1LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const V1LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V1LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V1LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V1LayerParameter)
    MergeFrom(*source);
  }
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blob_share_mode_.MergeFrom(from.blob_share_mode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_layer()->::caffe::V0LayerParameter::MergeFrom(from.layer());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crop_parameter()->::caffe::CropParameter::MergeFrom(from.crop_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_deformable_convolution_param()->::caffe::DeformableConvolutionParameter::MergeFrom(from.deformable_convolution_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_image_data_arbitrary_param()->::caffe::ImageDataArbitraryParameter::MergeFrom(from.image_data_arbitrary_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_expandlabel_param()->::caffe::ExpandlabelParameter::MergeFrom(from.expandlabel_param());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void V1LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {
  return true;
}

void V1LayerParameter::Swap(V1LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blob_share_mode_.InternalSwap(&other->blob_share_mode_);
  name_.Swap(&other->name_);
  std::swap(layer_, other->layer_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(hdf5_data_param_, other->hdf5_data_param_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(image_data_param_, other->image_data_param_);
  std::swap(infogain_loss_param_, other->infogain_loss_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(lrn_param_, other->lrn_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(window_data_param_, other->window_data_param_);
  std::swap(power_param_, other->power_param_);
  std::swap(memory_data_param_, other->memory_data_param_);
  std::swap(argmax_param_, other->argmax_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(threshold_param_, other->threshold_param_);
  std::swap(dummy_data_param_, other->dummy_data_param_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(hinge_loss_param_, other->hinge_loss_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(slice_param_, other->slice_param_);
  std::swap(mvn_param_, other->mvn_param_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(tanh_param_, other->tanh_param_);
  std::swap(sigmoid_param_, other->sigmoid_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
  std::swap(exp_param_, other->exp_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(crop_parameter_, other->crop_parameter_);
  std::swap(deformable_convolution_param_, other->deformable_convolution_param_);
  std::swap(image_data_arbitrary_param_, other->image_data_arbitrary_param_);
  std::swap(expandlabel_param_, other->expandlabel_param_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V1LayerParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V1LayerParameter

// repeated string bottom = 2;
int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void V1LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
void V1LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#if LANG_CXX11
void V1LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#endif
void V1LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
int V1LayerParameter::top_size() const {
  return top_.size();
}
void V1LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void V1LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
void V1LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#if LANG_CXX11
void V1LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#endif
void V1LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena();
}
void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
#if LANG_CXX11
void V1LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V1LayerParameter.name)
}
#endif
void V1LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
int V1LayerParameter::include_size() const {
  return include_.size();
}
void V1LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
bool V1LayerParameter::has_type() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void V1LayerParameter::set_has_type() {
  _has_bits_[1] |= 0x00000010u;
}
void V1LayerParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000010u;
}
void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
int V1LayerParameter::param_size() const {
  return param_.size();
}
void V1LayerParameter::clear_param() {
  param_.Clear();
}
const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void V1LayerParameter::set_param(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(std::move(value));
}
#endif
void V1LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#if LANG_CXX11
void V1LayerParameter::add_param(::std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#endif
void V1LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00100000u;
}
void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00010000u;
}
void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000004u;
}
void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x20000000u;
}
void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
}
void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000010u;
}
void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
}
void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
}
void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x40000000u;
}
void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
}
void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00200000u;
}
void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
}
void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
}
void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
}
void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
}
void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x01000000u;
}
void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
}
void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V1LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x00004000u;
}
void V1LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void V1LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00400000u;
}
void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x08000000u;
}
void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x10000000u;
}
void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void V1LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x00800000u;
}
void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
}
void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x00040000u;
}
void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
}
void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V1LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x02000000u;
}
void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V1LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
bool V1LayerParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void V1LayerParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void V1LayerParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_
                         : *::caffe::V0LayerParameter::internal_default_instance();
}
::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

// optional .caffe.CropParameter crop_parameter = 50;
bool V1LayerParameter::has_crop_parameter() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V1LayerParameter::set_has_crop_parameter() {
  _has_bits_[1] |= 0x00000001u;
}
void V1LayerParameter::clear_has_crop_parameter() {
  _has_bits_[1] &= ~0x00000001u;
}
void V1LayerParameter::clear_crop_parameter() {
  if (crop_parameter_ != NULL) crop_parameter_->::caffe::CropParameter::Clear();
  clear_has_crop_parameter();
}
const ::caffe::CropParameter& V1LayerParameter::crop_parameter() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.crop_parameter)
  return crop_parameter_ != NULL ? *crop_parameter_
                         : *::caffe::CropParameter::internal_default_instance();
}
::caffe::CropParameter* V1LayerParameter::mutable_crop_parameter() {
  set_has_crop_parameter();
  if (crop_parameter_ == NULL) {
    crop_parameter_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.crop_parameter)
  return crop_parameter_;
}
::caffe::CropParameter* V1LayerParameter::release_crop_parameter() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.crop_parameter)
  clear_has_crop_parameter();
  ::caffe::CropParameter* temp = crop_parameter_;
  crop_parameter_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_crop_parameter(::caffe::CropParameter* crop_parameter) {
  delete crop_parameter_;
  crop_parameter_ = crop_parameter;
  if (crop_parameter) {
    set_has_crop_parameter();
  } else {
    clear_has_crop_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.crop_parameter)
}

// optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 5001;
bool V1LayerParameter::has_image_data_arbitrary_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_image_data_arbitrary_param() {
  _has_bits_[1] |= 0x00000004u;
}
void V1LayerParameter::clear_has_image_data_arbitrary_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void V1LayerParameter::clear_image_data_arbitrary_param() {
  if (image_data_arbitrary_param_ != NULL) image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
  clear_has_image_data_arbitrary_param();
}
const ::caffe::ImageDataArbitraryParameter& V1LayerParameter::image_data_arbitrary_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_ != NULL ? *image_data_arbitrary_param_
                         : *::caffe::ImageDataArbitraryParameter::internal_default_instance();
}
::caffe::ImageDataArbitraryParameter* V1LayerParameter::mutable_image_data_arbitrary_param() {
  set_has_image_data_arbitrary_param();
  if (image_data_arbitrary_param_ == NULL) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_;
}
::caffe::ImageDataArbitraryParameter* V1LayerParameter::release_image_data_arbitrary_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_arbitrary_param)
  clear_has_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* temp = image_data_arbitrary_param_;
  image_data_arbitrary_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param) {
  delete image_data_arbitrary_param_;
  image_data_arbitrary_param_ = image_data_arbitrary_param;
  if (image_data_arbitrary_param) {
    set_has_image_data_arbitrary_param();
  } else {
    clear_has_image_data_arbitrary_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_arbitrary_param)
}

// optional .caffe.ExpandlabelParameter expandlabel_param = 5002;
bool V1LayerParameter::has_expandlabel_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void V1LayerParameter::set_has_expandlabel_param() {
  _has_bits_[1] |= 0x00000008u;
}
void V1LayerParameter::clear_has_expandlabel_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void V1LayerParameter::clear_expandlabel_param() {
  if (expandlabel_param_ != NULL) expandlabel_param_->::caffe::ExpandlabelParameter::Clear();
  clear_has_expandlabel_param();
}
const ::caffe::ExpandlabelParameter& V1LayerParameter::expandlabel_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.expandlabel_param)
  return expandlabel_param_ != NULL ? *expandlabel_param_
                         : *::caffe::ExpandlabelParameter::internal_default_instance();
}
::caffe::ExpandlabelParameter* V1LayerParameter::mutable_expandlabel_param() {
  set_has_expandlabel_param();
  if (expandlabel_param_ == NULL) {
    expandlabel_param_ = new ::caffe::ExpandlabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.expandlabel_param)
  return expandlabel_param_;
}
::caffe::ExpandlabelParameter* V1LayerParameter::release_expandlabel_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.expandlabel_param)
  clear_has_expandlabel_param();
  ::caffe::ExpandlabelParameter* temp = expandlabel_param_;
  expandlabel_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_expandlabel_param(::caffe::ExpandlabelParameter* expandlabel_param) {
  delete expandlabel_param_;
  expandlabel_param_ = expandlabel_param;
  if (expandlabel_param) {
    set_has_expandlabel_param();
  } else {
    clear_has_expandlabel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.expandlabel_param)
}

// optional .caffe.DeformableConvolutionParameter deformable_convolution_param = 56;
bool V1LayerParameter::has_deformable_convolution_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V1LayerParameter::set_has_deformable_convolution_param() {
  _has_bits_[1] |= 0x00000002u;
}
void V1LayerParameter::clear_has_deformable_convolution_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void V1LayerParameter::clear_deformable_convolution_param() {
  if (deformable_convolution_param_ != NULL) deformable_convolution_param_->::caffe::DeformableConvolutionParameter::Clear();
  clear_has_deformable_convolution_param();
}
const ::caffe::DeformableConvolutionParameter& V1LayerParameter::deformable_convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_ != NULL ? *deformable_convolution_param_
                         : *::caffe::DeformableConvolutionParameter::internal_default_instance();
}
::caffe::DeformableConvolutionParameter* V1LayerParameter::mutable_deformable_convolution_param() {
  set_has_deformable_convolution_param();
  if (deformable_convolution_param_ == NULL) {
    deformable_convolution_param_ = new ::caffe::DeformableConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.deformable_convolution_param)
  return deformable_convolution_param_;
}
::caffe::DeformableConvolutionParameter* V1LayerParameter::release_deformable_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.deformable_convolution_param)
  clear_has_deformable_convolution_param();
  ::caffe::DeformableConvolutionParameter* temp = deformable_convolution_param_;
  deformable_convolution_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_deformable_convolution_param(::caffe::DeformableConvolutionParameter* deformable_convolution_param) {
  delete deformable_convolution_param_;
  deformable_convolution_param_ = deformable_convolution_param;
  if (deformable_convolution_param) {
    set_has_deformable_convolution_param();
  } else {
    clear_has_deformable_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.deformable_convolution_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> V0LayerParameter::_default_det_crop_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V0LayerParameter::kNameFieldNumber;
const int V0LayerParameter::kTypeFieldNumber;
const int V0LayerParameter::kNumOutputFieldNumber;
const int V0LayerParameter::kBiastermFieldNumber;
const int V0LayerParameter::kWeightFillerFieldNumber;
const int V0LayerParameter::kBiasFillerFieldNumber;
const int V0LayerParameter::kPadFieldNumber;
const int V0LayerParameter::kKernelsizeFieldNumber;
const int V0LayerParameter::kGroupFieldNumber;
const int V0LayerParameter::kStrideFieldNumber;
const int V0LayerParameter::kPoolFieldNumber;
const int V0LayerParameter::kDropoutRatioFieldNumber;
const int V0LayerParameter::kLocalSizeFieldNumber;
const int V0LayerParameter::kAlphaFieldNumber;
const int V0LayerParameter::kBetaFieldNumber;
const int V0LayerParameter::kKFieldNumber;
const int V0LayerParameter::kSourceFieldNumber;
const int V0LayerParameter::kScaleFieldNumber;
const int V0LayerParameter::kMeanfileFieldNumber;
const int V0LayerParameter::kBatchsizeFieldNumber;
const int V0LayerParameter::kCropsizeFieldNumber;
const int V0LayerParameter::kMirrorFieldNumber;
const int V0LayerParameter::kBlobsFieldNumber;
const int V0LayerParameter::kBlobsLrFieldNumber;
const int V0LayerParameter::kWeightDecayFieldNumber;
const int V0LayerParameter::kRandSkipFieldNumber;
const int V0LayerParameter::kDetFgThresholdFieldNumber;
const int V0LayerParameter::kDetBgThresholdFieldNumber;
const int V0LayerParameter::kDetFgFractionFieldNumber;
const int V0LayerParameter::kDetContextPadFieldNumber;
const int V0LayerParameter::kDetCropModeFieldNumber;
const int V0LayerParameter::kNewNumFieldNumber;
const int V0LayerParameter::kNewChannelsFieldNumber;
const int V0LayerParameter::kNewHeightFieldNumber;
const int V0LayerParameter::kNewWidthFieldNumber;
const int V0LayerParameter::kShuffleImagesFieldNumber;
const int V0LayerParameter::kConcatDimFieldNumber;
const int V0LayerParameter::kHdf5OutputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V0LayerParameter::V0LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V0LayerParameter)
}
V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      blobs_(from.blobs_),
      blobs_lr_(from.blobs_lr_),
      weight_decay_(from.weight_decay_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meanfile()) {
    meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
  }
  det_crop_mode_.UnsafeSetDefault(&V0LayerParameter::_default_det_crop_mode_.get());
  if (from.has_det_crop_mode()) {
    det_crop_mode_.AssignWithDefault(&V0LayerParameter::_default_det_crop_mode_.get(), from.det_crop_mode_);
  }
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  if (from.has_hdf5_output_param()) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&det_fg_fraction_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(det_fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.UnsafeSetDefault(&V0LayerParameter::_default_det_crop_mode_.get());
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&new_height_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(new_height_));
  concat_dim_ = 1u;
  biasterm_ = true;
  group_ = 1u;
  stride_ = 1u;
  dropout_ratio_ = 0.5f;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  scale_ = 1;
  k_ = 1;
  det_fg_threshold_ = 0.5f;
  det_bg_threshold_ = 0.5f;
  det_fg_fraction_ = 0.25f;
  _cached_size_ = 0;
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V0LayerParameter)
  SharedDtor();
}

void V0LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.DestroyNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
  if (this != internal_default_instance()) {
    delete hdf5_output_param_;
  }
}

void V0LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V0LayerParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V0LayerParameter& V0LayerParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

V0LayerParameter* V0LayerParameter::New(::google::protobuf::Arena* arena) const {
  V0LayerParameter* n = new V0LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V0LayerParameter)
  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_meanfile()) {
      GOOGLE_DCHECK(!meanfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meanfile_.UnsafeRawStringPointer())->clear();
    }
    if (has_det_crop_mode()) {
      GOOGLE_DCHECK(!det_crop_mode_.IsDefault(&V0LayerParameter::_default_det_crop_mode_.get()));
      (*det_crop_mode_.UnsafeRawStringPointer())->assign(*&V0LayerParameter::_default_det_crop_mode_.get());
    }
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      GOOGLE_DCHECK(hdf5_output_param_ != NULL);
      hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&mirror_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(mirror_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&shuffle_images_, 0, reinterpret_cast<char*>(&new_height_) -
      reinterpret_cast<char*>(&shuffle_images_) + sizeof(new_height_));
    concat_dim_ = 1u;
    biasterm_ = true;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    group_ = 1u;
    stride_ = 1u;
    dropout_ratio_ = 0.5f;
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    scale_ = 1;
    k_ = 1;
  }
  if (_has_bits_[32 / 32] & 7u) {
    det_fg_threshold_ = 0.5f;
    det_bg_threshold_ = 0.5f;
    det_fg_fraction_ = 0.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool V0LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V0LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_output = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool biasterm = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_biasterm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biasterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernelsize = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_kernelsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernelsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V0LayerParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::V0LayerParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_size = 13 [default = 5];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 14 [default = 1];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float beta = 15 [default = 0.75];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 17 [default = 1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meanfile = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meanfile().data(), this->meanfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.meanfile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batchsize = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_batchsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cropsize = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_cropsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cropsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 21 [default = false];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float k = 22 [default = 1];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto blobs = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float blobs_lr = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(413u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 413u, input, this->mutable_blobs_lr())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(410u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weight_decay = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(421u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 421u, input, this->mutable_weight_decay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(418u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(437u)) {
          set_has_det_fg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(445u)) {
          set_has_det_bg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_bg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(453u)) {
          set_has_det_fg_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 det_context_pad = 58 [default = 0];
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_det_context_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &det_context_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string det_crop_mode = 59 [default = "warp"];
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(474u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det_crop_mode().data(), this->det_crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.det_crop_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_num = 60 [default = 0];
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_new_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_channels = 61 [default = 0];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_new_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_height = 62 [default = 0];
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(496u)) {
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_width = 63 [default = 0];
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(504u)) {
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle_images = 64 [default = false];
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(512u)) {
          set_has_shuffle_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 concat_dim = 65 [default = 1];
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_concat_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V0LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V0LayerParameter)
  return false;
#undef DO_
}

void V0LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V0LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional uint32 num_output = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_output(), output);
  }

  // optional bool biasterm = 4 [default = true];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biasterm(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->bias_filler_, output);
  }

  // optional uint32 pad = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad(), output);
  }

  // optional uint32 kernelsize = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernelsize(), output);
  }

  // optional uint32 group = 9 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group(), output);
  }

  // optional uint32 stride = 10 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pool(), output);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_ratio(), output);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->local_size(), output);
  }

  // optional float alpha = 14 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
  }

  // optional float beta = 15 [default = 0.75];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->beta(), output);
  }

  // optional string source = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->source(), output);
  }

  // optional float scale = 17 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->scale(), output);
  }

  // optional string meanfile = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->meanfile(), output);
  }

  // optional uint32 batchsize = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->batchsize(), output);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cropsize(), output);
  }

  // optional bool mirror = 21 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mirror(), output);
  }

  // optional float k = 22 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->k(), output);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->blobs(i), output);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0, n = this->blobs_lr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      51, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 52;
  for (int i = 0, n = this->weight_decay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      52, this->weight_decay(i), output);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->rand_skip(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float det_fg_threshold = 54 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->det_fg_threshold(), output);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->det_bg_threshold(), output);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->det_fg_fraction(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 det_context_pad = 58 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->det_context_pad(), output);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->det_crop_mode(), output);
  }

  // optional int32 new_num = 60 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->new_num(), output);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->new_channels(), output);
  }

  // optional int32 new_height = 62 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->new_height(), output);
  }

  // optional int32 new_width = 63 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->new_width(), output);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shuffle_images(), output);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->concat_dim(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->hdf5_output_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V0LayerParameter)
}

::google::protobuf::uint8* V0LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V0LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional uint32 num_output = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biasterm(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->bias_filler_, deterministic, target);
  }

  // optional uint32 pad = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->beta(), target);
  }

  // optional string source = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->scale(), target);
  }

  // optional string meanfile = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->k(), target);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, this->blobs(i), deterministic, target);
  }

  // repeated float blobs_lr = 51;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(51, this->blobs_lr_, target);

  // repeated float weight_decay = 52;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(52, this->weight_decay_, target);

  // optional uint32 rand_skip = 53 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->rand_skip(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float det_fg_threshold = 54 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->det_fg_fraction(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 det_context_pad = 58 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->concat_dim(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->hdf5_output_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V0LayerParameter)
  return target;
}

size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V0LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.BlobProto blobs = 50;
  {
    unsigned int count = this->blobs_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated float blobs_lr = 51;
  {
    unsigned int count = this->blobs_lr_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 52;
  {
    unsigned int count = this->weight_decay_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->weight_decay_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string meanfile = 18;
    if (has_meanfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanfile());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (has_det_crop_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det_crop_mode());
    }

    // optional .caffe.FillerParameter weight_filler = 5;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 6;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad = 7 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernelsize = 8;
    if (has_kernelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernelsize());
    }

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 batchsize = 19;
    if (has_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (has_cropsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cropsize());
    }

    // optional int32 new_width = 63 [default = 0];
    if (has_new_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_width());
    }

    // optional bool mirror = 21 [default = false];
    if (has_mirror()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool shuffle_images = 64 [default = false];
    if (has_shuffle_images()) {
      total_size += 2 + 1;
    }

    // optional uint32 rand_skip = 53 [default = 0];
    if (has_rand_skip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (has_det_context_pad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->det_context_pad());
    }

    // optional int32 new_num = 60 [default = 0];
    if (has_new_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_num());
    }

    // optional int32 new_channels = 61 [default = 0];
    if (has_new_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (has_new_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_height());
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (has_concat_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional bool biasterm = 4 [default = true];
    if (has_biasterm()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 group = 9 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float scale = 17 [default = 1];
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional float k = 22 [default = 1];
    if (has_k()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 7u) {
    // optional float det_fg_threshold = 54 [default = 0.5];
    if (has_det_fg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (has_det_bg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (has_det_fg_fraction()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V0LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const V0LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V0LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V0LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V0LayerParameter)
    MergeFrom(*source);
  }
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_meanfile();
      meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_det_crop_mode();
      det_crop_mode_.AssignWithDefault(&V0LayerParameter::_default_det_crop_mode_.get(), from.det_crop_mode_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernelsize_ = from.kernelsize_;
    }
    if (cached_has_bits & 0x00000800u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00001000u) {
      batchsize_ = from.batchsize_;
    }
    if (cached_has_bits & 0x00002000u) {
      cropsize_ = from.cropsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      shuffle_images_ = from.shuffle_images_;
    }
    if (cached_has_bits & 0x00020000u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00040000u) {
      det_context_pad_ = from.det_context_pad_;
    }
    if (cached_has_bits & 0x00080000u) {
      new_num_ = from.new_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      new_channels_ = from.new_channels_;
    }
    if (cached_has_bits & 0x00200000u) {
      new_height_ = from.new_height_;
    }
    if (cached_has_bits & 0x00400000u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00800000u) {
      biasterm_ = from.biasterm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x02000000u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x04000000u) {
      dropout_ratio_ = from.dropout_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x10000000u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x20000000u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x40000000u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x80000000u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      det_fg_threshold_ = from.det_fg_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      det_bg_threshold_ = from.det_bg_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      det_fg_fraction_ = from.det_fg_fraction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void V0LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {
  return true;
}

void V0LayerParameter::Swap(V0LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  source_.Swap(&other->source_);
  meanfile_.Swap(&other->meanfile_);
  det_crop_mode_.Swap(&other->det_crop_mode_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(num_output_, other->num_output_);
  std::swap(pad_, other->pad_);
  std::swap(kernelsize_, other->kernelsize_);
  std::swap(pool_, other->pool_);
  std::swap(batchsize_, other->batchsize_);
  std::swap(cropsize_, other->cropsize_);
  std::swap(new_width_, other->new_width_);
  std::swap(mirror_, other->mirror_);
  std::swap(shuffle_images_, other->shuffle_images_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(det_context_pad_, other->det_context_pad_);
  std::swap(new_num_, other->new_num_);
  std::swap(new_channels_, other->new_channels_);
  std::swap(new_height_, other->new_height_);
  std::swap(concat_dim_, other->concat_dim_);
  std::swap(biasterm_, other->biasterm_);
  std::swap(group_, other->group_);
  std::swap(stride_, other->stride_);
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(scale_, other->scale_);
  std::swap(k_, other->k_);
  std::swap(det_fg_threshold_, other->det_fg_threshold_);
  std::swap(det_bg_threshold_, other->det_bg_threshold_);
  std::swap(det_fg_fraction_, other->det_fg_fraction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V0LayerParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V0LayerParameter

// optional string name = 1;
bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena();
}
void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
#if LANG_CXX11
void V0LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.name)
}
#endif
void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena();
}
void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
#if LANG_CXX11
void V0LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.type)
}
#endif
void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000100u;
}
void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000100u;
}
void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00800000u;
}
void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00800000u;
}
void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
}
void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000200u;
}
void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000400u;
}
void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000400u;
}
void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x01000000u;
}
void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x01000000u;
}
void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x02000000u;
}
void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x02000000u;
}
void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000800u;
}
void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000800u;
}
void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x08000000u;
}
void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x08000000u;
}
void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x10000000u;
}
void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x10000000u;
}
void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x20000000u;
}
void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x20000000u;
}
void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x80000000u;
}
void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x80000000u;
}
void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena();
}
void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
#if LANG_CXX11
void V0LayerParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.source)
}
#endif
void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x40000000u;
}
void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x40000000u;
}
void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000008u;
}
void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000008u;
}
void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena();
}
void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
#if LANG_CXX11
void V0LayerParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.meanfile)
}
#endif
void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00001000u;
}
void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00001000u;
}
void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00002000u;
}
void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00002000u;
}
void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00008000u;
}
void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00008000u;
}
void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00020000u;
}
void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00020000u;
}
void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[1] |= 0x00000001u;
}
void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[1] &= ~0x00000001u;
}
void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[1] |= 0x00000002u;
}
void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[1] &= ~0x00000002u;
}
void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[1] |= 0x00000004u;
}
void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[1] &= ~0x00000004u;
}
void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x00040000u;
}
void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x00040000u;
}
void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
  clear_has_det_crop_mode();
}
const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena();
}
void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
#if LANG_CXX11
void V0LayerParameter::set_det_crop_mode(::std::string&& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(
    &V0LayerParameter::_default_det_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.det_crop_mode)
}
#endif
void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
}
::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
}
void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x00080000u;
}
void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x00080000u;
}
void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V0LayerParameter::set_has_new_channels() {
  _has_bits_[0] |= 0x00100000u;
}
void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[0] &= ~0x00100000u;
}
void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V0LayerParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00200000u;
}
void V0LayerParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00200000u;
}
void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V0LayerParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00004000u;
}
void V0LayerParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00004000u;
}
void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[0] |= 0x00010000u;
}
void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[0] &= ~0x00010000u;
}
void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00400000u;
}
void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00400000u;
}
void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PReLUParameter::kFillerFieldNumber;
const int PReLUParameter::kChannelSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PReLUParameter::PReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PReLUParameter)
}
PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filler()) {
    filler_ = new ::caffe::FillerParameter(*from.filler_);
  } else {
    filler_ = NULL;
  }
  channel_shared_ = from.channel_shared_;
  // @@protoc_insertion_point(copy_constructor:caffe.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filler_, 0, reinterpret_cast<char*>(&channel_shared_) -
    reinterpret_cast<char*>(&filler_) + sizeof(channel_shared_));
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.PReLUParameter)
  SharedDtor();
}

void PReLUParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete filler_;
  }
}

void PReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PReLUParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PReLUParameter& PReLUParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PReLUParameter* PReLUParameter::New(::google::protobuf::Arena* arena) const {
  PReLUParameter* n = new PReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PReLUParameter)
  if (has_filler()) {
    GOOGLE_DCHECK(filler_ != NULL);
    filler_->::caffe::FillerParameter::Clear();
  }
  channel_shared_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_shared = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channel_shared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PReLUParameter)
  return false;
#undef DO_
}

void PReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->filler_, output);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->channel_shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PReLUParameter)
}

::google::protobuf::uint8* PReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->filler_, deterministic, target);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->channel_shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PReLUParameter)
  return target;
}

size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PReLUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.FillerParameter filler = 1;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (has_channel_shared()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PReLUParameter)
    MergeFrom(*source);
  }
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_shared_ = from.channel_shared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {
  return true;
}

void PReLUParameter::Swap(PReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PReLUParameter::InternalSwap(PReLUParameter* other) {
  std::swap(filler_, other->filler_);
  std::swap(channel_shared_, other->channel_shared_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PReLUParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeParameter::kHeightFieldNumber;
const int ResizeParameter::kWidthFieldNumber;
const int ResizeParameter::kIsPyramidTestFieldNumber;
const int ResizeParameter::kOutHeightScaleFieldNumber;
const int ResizeParameter::kOutWidthScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeParameter::ResizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ResizeParameter)
}
ResizeParameter::ResizeParameter(const ResizeParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&out_width_scale_) -
    reinterpret_cast<char*>(&height_) + sizeof(out_width_scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.ResizeParameter)
}

void ResizeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&height_, 0, reinterpret_cast<char*>(&out_width_scale_) -
    reinterpret_cast<char*>(&height_) + sizeof(out_width_scale_));
}

ResizeParameter::~ResizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ResizeParameter)
  SharedDtor();
}

void ResizeParameter::SharedDtor() {
}

void ResizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResizeParameter& ResizeParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeParameter* ResizeParameter::New(::google::protobuf::Arena* arena) const {
  ResizeParameter* n = new ResizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ResizeParameter)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&height_, 0, reinterpret_cast<char*>(&out_width_scale_) -
      reinterpret_cast<char*>(&height_) + sizeof(out_width_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ResizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pyramid_test = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_pyramid_test();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pyramid_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float out_height_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_out_height_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_height_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float out_width_scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_out_width_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_width_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ResizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ResizeParameter)
  return false;
#undef DO_
}

void ResizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ResizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional bool is_pyramid_test = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pyramid_test(), output);
  }

  // optional float out_height_scale = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->out_height_scale(), output);
  }

  // optional float out_width_scale = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->out_width_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ResizeParameter)
}

::google::protobuf::uint8* ResizeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ResizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional bool is_pyramid_test = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pyramid_test(), target);
  }

  // optional float out_height_scale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->out_height_scale(), target);
  }

  // optional float out_width_scale = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->out_width_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ResizeParameter)
  return target;
}

size_t ResizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ResizeParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional bool is_pyramid_test = 3 [default = false];
    if (has_is_pyramid_test()) {
      total_size += 1 + 1;
    }

    // optional float out_height_scale = 4;
    if (has_out_height_scale()) {
      total_size += 1 + 4;
    }

    // optional float out_width_scale = 5;
    if (has_out_width_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ResizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ResizeParameter)
    MergeFrom(*source);
  }
}

void ResizeParameter::MergeFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_pyramid_test_ = from.is_pyramid_test_;
    }
    if (cached_has_bits & 0x00000008u) {
      out_height_scale_ = from.out_height_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      out_width_scale_ = from.out_width_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeParameter::CopyFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeParameter::IsInitialized() const {
  return true;
}

void ResizeParameter::Swap(ResizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeParameter::InternalSwap(ResizeParameter* other) {
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(is_pyramid_test_, other->is_pyramid_test_);
  std::swap(out_height_scale_, other->out_height_scale_);
  std::swap(out_width_scale_, other->out_width_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeParameter

// optional uint32 height = 1;
bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional uint32 width = 2;
bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional bool is_pyramid_test = 3 [default = false];
bool ResizeParameter::has_is_pyramid_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResizeParameter::set_has_is_pyramid_test() {
  _has_bits_[0] |= 0x00000004u;
}
void ResizeParameter::clear_has_is_pyramid_test() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResizeParameter::clear_is_pyramid_test() {
  is_pyramid_test_ = false;
  clear_has_is_pyramid_test();
}
bool ResizeParameter::is_pyramid_test() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.is_pyramid_test)
  return is_pyramid_test_;
}
void ResizeParameter::set_is_pyramid_test(bool value) {
  set_has_is_pyramid_test();
  is_pyramid_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.is_pyramid_test)
}

// optional float out_height_scale = 4;
bool ResizeParameter::has_out_height_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResizeParameter::set_has_out_height_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void ResizeParameter::clear_has_out_height_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResizeParameter::clear_out_height_scale() {
  out_height_scale_ = 0;
  clear_has_out_height_scale();
}
float ResizeParameter::out_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_height_scale)
  return out_height_scale_;
}
void ResizeParameter::set_out_height_scale(float value) {
  set_has_out_height_scale();
  out_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_height_scale)
}

// optional float out_width_scale = 5;
bool ResizeParameter::has_out_width_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResizeParameter::set_has_out_width_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void ResizeParameter::clear_has_out_width_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResizeParameter::clear_out_width_scale() {
  out_width_scale_ = 0;
  clear_has_out_width_scale();
}
float ResizeParameter::out_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_width_scale)
  return out_width_scale_;
}
void ResizeParameter::set_out_width_scale(float value) {
  set_has_out_width_scale();
  out_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_width_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelRelatedDropoutParam::kNegativeRatioFieldNumber;
const int LabelRelatedDropoutParam::kValueMaskedFieldNumber;
const int LabelRelatedDropoutParam::kHardRatioFieldNumber;
const int LabelRelatedDropoutParam::kMarginFieldNumber;
const int LabelRelatedDropoutParam::kIgnoreLargestNFieldNumber;
const int LabelRelatedDropoutParam::kMinNegNumsFieldNumber;
const int LabelRelatedDropoutParam::kPerImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelRelatedDropoutParam::LabelRelatedDropoutParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelRelatedDropoutParam)
}
LabelRelatedDropoutParam::LabelRelatedDropoutParam(const LabelRelatedDropoutParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_masked_, &from.value_masked_,
    reinterpret_cast<char*>(&hard_ratio_) -
    reinterpret_cast<char*>(&value_masked_) + sizeof(hard_ratio_));
  // @@protoc_insertion_point(copy_constructor:caffe.LabelRelatedDropoutParam)
}

void LabelRelatedDropoutParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&value_masked_, 0, reinterpret_cast<char*>(&per_image_) -
    reinterpret_cast<char*>(&value_masked_) + sizeof(per_image_));
  margin_ = 3u;
  negative_ratio_ = 0.5f;
  hard_ratio_ = 0.5f;
}

LabelRelatedDropoutParam::~LabelRelatedDropoutParam() {
  // @@protoc_insertion_point(destructor:caffe.LabelRelatedDropoutParam)
  SharedDtor();
}

void LabelRelatedDropoutParam::SharedDtor() {
}

void LabelRelatedDropoutParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelRelatedDropoutParam::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelRelatedDropoutParam& LabelRelatedDropoutParam::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelRelatedDropoutParam* LabelRelatedDropoutParam::New(::google::protobuf::Arena* arena) const {
  LabelRelatedDropoutParam* n = new LabelRelatedDropoutParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelRelatedDropoutParam::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelRelatedDropoutParam)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&value_masked_, 0, reinterpret_cast<char*>(&per_image_) -
      reinterpret_cast<char*>(&value_masked_) + sizeof(per_image_));
    margin_ = 3u;
    negative_ratio_ = 0.5f;
    hard_ratio_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LabelRelatedDropoutParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelRelatedDropoutParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_ratio = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_negative_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value_masked = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_value_masked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_masked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hard_ratio = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_hard_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hard_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 margin = 5 [default = 3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ignore_largest_n = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ignore_largest_n();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_largest_n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_neg_nums = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_min_neg_nums();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_neg_nums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool per_image = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_per_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &per_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelRelatedDropoutParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelRelatedDropoutParam)
  return false;
#undef DO_
}

void LabelRelatedDropoutParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelRelatedDropoutParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_ratio(), output);
  }

  // optional float value_masked = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value_masked(), output);
  }

  // optional float hard_ratio = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->hard_ratio(), output);
  }

  // optional uint32 margin = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->margin(), output);
  }

  // optional uint32 ignore_largest_n = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ignore_largest_n(), output);
  }

  // optional uint32 min_neg_nums = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->min_neg_nums(), output);
  }

  // optional bool per_image = 8 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->per_image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelRelatedDropoutParam)
}

::google::protobuf::uint8* LabelRelatedDropoutParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelRelatedDropoutParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_ratio(), target);
  }

  // optional float value_masked = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value_masked(), target);
  }

  // optional float hard_ratio = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->hard_ratio(), target);
  }

  // optional uint32 margin = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->margin(), target);
  }

  // optional uint32 ignore_largest_n = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ignore_largest_n(), target);
  }

  // optional uint32 min_neg_nums = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->min_neg_nums(), target);
  }

  // optional bool per_image = 8 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->per_image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelRelatedDropoutParam)
  return target;
}

size_t LabelRelatedDropoutParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelRelatedDropoutParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional float value_masked = 3 [default = 0];
    if (has_value_masked()) {
      total_size += 1 + 4;
    }

    // optional uint32 ignore_largest_n = 6 [default = 0];
    if (has_ignore_largest_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_largest_n());
    }

    // optional uint32 min_neg_nums = 7 [default = 0];
    if (has_min_neg_nums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_neg_nums());
    }

    // optional bool per_image = 8 [default = false];
    if (has_per_image()) {
      total_size += 1 + 1;
    }

    // optional uint32 margin = 5 [default = 3];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }

    // optional float negative_ratio = 1 [default = 0.5];
    if (has_negative_ratio()) {
      total_size += 1 + 4;
    }

    // optional float hard_ratio = 4 [default = 0.5];
    if (has_hard_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelRelatedDropoutParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelRelatedDropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelRelatedDropoutParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelRelatedDropoutParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelRelatedDropoutParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelRelatedDropoutParam)
    MergeFrom(*source);
  }
}

void LabelRelatedDropoutParam::MergeFrom(const LabelRelatedDropoutParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelRelatedDropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      value_masked_ = from.value_masked_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_largest_n_ = from.ignore_largest_n_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_neg_nums_ = from.min_neg_nums_;
    }
    if (cached_has_bits & 0x00000008u) {
      per_image_ = from.per_image_;
    }
    if (cached_has_bits & 0x00000010u) {
      margin_ = from.margin_;
    }
    if (cached_has_bits & 0x00000020u) {
      negative_ratio_ = from.negative_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      hard_ratio_ = from.hard_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LabelRelatedDropoutParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelRelatedDropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelRelatedDropoutParam::CopyFrom(const LabelRelatedDropoutParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelRelatedDropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelRelatedDropoutParam::IsInitialized() const {
  return true;
}

void LabelRelatedDropoutParam::Swap(LabelRelatedDropoutParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelRelatedDropoutParam::InternalSwap(LabelRelatedDropoutParam* other) {
  std::swap(value_masked_, other->value_masked_);
  std::swap(ignore_largest_n_, other->ignore_largest_n_);
  std::swap(min_neg_nums_, other->min_neg_nums_);
  std::swap(per_image_, other->per_image_);
  std::swap(margin_, other->margin_);
  std::swap(negative_ratio_, other->negative_ratio_);
  std::swap(hard_ratio_, other->hard_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelRelatedDropoutParam::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelRelatedDropoutParam

// optional float negative_ratio = 1 [default = 0.5];
bool LabelRelatedDropoutParam::has_negative_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LabelRelatedDropoutParam::set_has_negative_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
void LabelRelatedDropoutParam::clear_has_negative_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
void LabelRelatedDropoutParam::clear_negative_ratio() {
  negative_ratio_ = 0.5f;
  clear_has_negative_ratio();
}
float LabelRelatedDropoutParam::negative_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.negative_ratio)
  return negative_ratio_;
}
void LabelRelatedDropoutParam::set_negative_ratio(float value) {
  set_has_negative_ratio();
  negative_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.negative_ratio)
}

// optional float value_masked = 3 [default = 0];
bool LabelRelatedDropoutParam::has_value_masked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelRelatedDropoutParam::set_has_value_masked() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelRelatedDropoutParam::clear_has_value_masked() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelRelatedDropoutParam::clear_value_masked() {
  value_masked_ = 0;
  clear_has_value_masked();
}
float LabelRelatedDropoutParam::value_masked() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.value_masked)
  return value_masked_;
}
void LabelRelatedDropoutParam::set_value_masked(float value) {
  set_has_value_masked();
  value_masked_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.value_masked)
}

// optional float hard_ratio = 4 [default = 0.5];
bool LabelRelatedDropoutParam::has_hard_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LabelRelatedDropoutParam::set_has_hard_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void LabelRelatedDropoutParam::clear_has_hard_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void LabelRelatedDropoutParam::clear_hard_ratio() {
  hard_ratio_ = 0.5f;
  clear_has_hard_ratio();
}
float LabelRelatedDropoutParam::hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.hard_ratio)
  return hard_ratio_;
}
void LabelRelatedDropoutParam::set_hard_ratio(float value) {
  set_has_hard_ratio();
  hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.hard_ratio)
}

// optional uint32 margin = 5 [default = 3];
bool LabelRelatedDropoutParam::has_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LabelRelatedDropoutParam::set_has_margin() {
  _has_bits_[0] |= 0x00000010u;
}
void LabelRelatedDropoutParam::clear_has_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
void LabelRelatedDropoutParam::clear_margin() {
  margin_ = 3u;
  clear_has_margin();
}
::google::protobuf::uint32 LabelRelatedDropoutParam::margin() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.margin)
  return margin_;
}
void LabelRelatedDropoutParam::set_margin(::google::protobuf::uint32 value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.margin)
}

// optional uint32 ignore_largest_n = 6 [default = 0];
bool LabelRelatedDropoutParam::has_ignore_largest_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelRelatedDropoutParam::set_has_ignore_largest_n() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelRelatedDropoutParam::clear_has_ignore_largest_n() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelRelatedDropoutParam::clear_ignore_largest_n() {
  ignore_largest_n_ = 0u;
  clear_has_ignore_largest_n();
}
::google::protobuf::uint32 LabelRelatedDropoutParam::ignore_largest_n() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.ignore_largest_n)
  return ignore_largest_n_;
}
void LabelRelatedDropoutParam::set_ignore_largest_n(::google::protobuf::uint32 value) {
  set_has_ignore_largest_n();
  ignore_largest_n_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.ignore_largest_n)
}

// optional uint32 min_neg_nums = 7 [default = 0];
bool LabelRelatedDropoutParam::has_min_neg_nums() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelRelatedDropoutParam::set_has_min_neg_nums() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelRelatedDropoutParam::clear_has_min_neg_nums() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelRelatedDropoutParam::clear_min_neg_nums() {
  min_neg_nums_ = 0u;
  clear_has_min_neg_nums();
}
::google::protobuf::uint32 LabelRelatedDropoutParam::min_neg_nums() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.min_neg_nums)
  return min_neg_nums_;
}
void LabelRelatedDropoutParam::set_min_neg_nums(::google::protobuf::uint32 value) {
  set_has_min_neg_nums();
  min_neg_nums_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.min_neg_nums)
}

// optional bool per_image = 8 [default = false];
bool LabelRelatedDropoutParam::has_per_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LabelRelatedDropoutParam::set_has_per_image() {
  _has_bits_[0] |= 0x00000008u;
}
void LabelRelatedDropoutParam::clear_has_per_image() {
  _has_bits_[0] &= ~0x00000008u;
}
void LabelRelatedDropoutParam::clear_per_image() {
  per_image_ = false;
  clear_has_per_image();
}
bool LabelRelatedDropoutParam::per_image() const {
  // @@protoc_insertion_point(field_get:caffe.LabelRelatedDropoutParam.per_image)
  return per_image_;
}
void LabelRelatedDropoutParam::set_per_image(bool value) {
  set_has_per_image();
  per_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelRelatedDropoutParam.per_image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InceptionColumnParameter::kConvolutionParamFieldNumber;
const int InceptionColumnParameter::kPoolingParamFieldNumber;
const int InceptionColumnParameter::kColumnNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InceptionColumnParameter::InceptionColumnParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InceptionColumnParameter)
}
InceptionColumnParameter::InceptionColumnParameter(const InceptionColumnParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      convolution_param_(from.convolution_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_name()) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe.InceptionColumnParameter)
}

void InceptionColumnParameter::SharedCtor() {
  _cached_size_ = 0;
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pooling_param_ = NULL;
}

InceptionColumnParameter::~InceptionColumnParameter() {
  // @@protoc_insertion_point(destructor:caffe.InceptionColumnParameter)
  SharedDtor();
}

void InceptionColumnParameter::SharedDtor() {
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pooling_param_;
  }
}

void InceptionColumnParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InceptionColumnParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InceptionColumnParameter& InceptionColumnParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InceptionColumnParameter* InceptionColumnParameter::New(::google::protobuf::Arena* arena) const {
  InceptionColumnParameter* n = new InceptionColumnParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InceptionColumnParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InceptionColumnParameter)
  convolution_param_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_column_name()) {
      GOOGLE_DCHECK(!column_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*column_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_pooling_param()) {
      GOOGLE_DCHECK(pooling_param_ != NULL);
      pooling_param_->::caffe::PoolingParameter::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InceptionColumnParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InceptionColumnParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.ConvolutionParameter convolution_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string column_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_name().data(), this->column_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InceptionColumnParameter.column_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InceptionColumnParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InceptionColumnParameter)
  return false;
#undef DO_
}

void InceptionColumnParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InceptionColumnParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.ConvolutionParameter convolution_param = 1;
  for (unsigned int i = 0, n = this->convolution_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->convolution_param(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.PoolingParameter pooling_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pooling_param_, output);
  }

  // optional string column_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InceptionColumnParameter.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->column_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InceptionColumnParameter)
}

::google::protobuf::uint8* InceptionColumnParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InceptionColumnParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.ConvolutionParameter convolution_param = 1;
  for (unsigned int i = 0, n = this->convolution_param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->convolution_param(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.PoolingParameter pooling_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pooling_param_, deterministic, target);
  }

  // optional string column_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InceptionColumnParameter.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->column_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InceptionColumnParameter)
  return target;
}

size_t InceptionColumnParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InceptionColumnParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.ConvolutionParameter convolution_param = 1;
  {
    unsigned int count = this->convolution_param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convolution_param(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string column_name = 3;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }

    // optional .caffe.PoolingParameter pooling_param = 2;
    if (has_pooling_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InceptionColumnParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InceptionColumnParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InceptionColumnParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InceptionColumnParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InceptionColumnParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InceptionColumnParameter)
    MergeFrom(*source);
  }
}

void InceptionColumnParameter::MergeFrom(const InceptionColumnParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InceptionColumnParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  convolution_param_.MergeFrom(from.convolution_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_column_name();
      column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
  }
}

void InceptionColumnParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InceptionColumnParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InceptionColumnParameter::CopyFrom(const InceptionColumnParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InceptionColumnParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InceptionColumnParameter::IsInitialized() const {
  return true;
}

void InceptionColumnParameter::Swap(InceptionColumnParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InceptionColumnParameter::InternalSwap(InceptionColumnParameter* other) {
  convolution_param_.InternalSwap(&other->convolution_param_);
  column_name_.Swap(&other->column_name_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InceptionColumnParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InceptionColumnParameter

// repeated .caffe.ConvolutionParameter convolution_param = 1;
int InceptionColumnParameter::convolution_param_size() const {
  return convolution_param_.size();
}
void InceptionColumnParameter::clear_convolution_param() {
  convolution_param_.Clear();
}
const ::caffe::ConvolutionParameter& InceptionColumnParameter::convolution_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_.Get(index);
}
::caffe::ConvolutionParameter* InceptionColumnParameter::mutable_convolution_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_.Mutable(index);
}
::caffe::ConvolutionParameter* InceptionColumnParameter::add_convolution_param() {
  // @@protoc_insertion_point(field_add:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter >*
InceptionColumnParameter::mutable_convolution_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InceptionColumnParameter.convolution_param)
  return &convolution_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ConvolutionParameter >&
InceptionColumnParameter::convolution_param() const {
  // @@protoc_insertion_point(field_list:caffe.InceptionColumnParameter.convolution_param)
  return convolution_param_;
}

// optional .caffe.PoolingParameter pooling_param = 2;
bool InceptionColumnParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InceptionColumnParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00000002u;
}
void InceptionColumnParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void InceptionColumnParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& InceptionColumnParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionColumnParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
::caffe::PoolingParameter* InceptionColumnParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionColumnParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* InceptionColumnParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.InceptionColumnParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void InceptionColumnParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionColumnParameter.pooling_param)
}

// optional string column_name = 3;
bool InceptionColumnParameter::has_column_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InceptionColumnParameter::set_has_column_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InceptionColumnParameter::clear_has_column_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InceptionColumnParameter::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_column_name();
}
const ::std::string& InceptionColumnParameter::column_name() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionColumnParameter.column_name)
  return column_name_.GetNoArena();
}
void InceptionColumnParameter::set_column_name(const ::std::string& value) {
  set_has_column_name();
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InceptionColumnParameter.column_name)
}
#if LANG_CXX11
void InceptionColumnParameter::set_column_name(::std::string&& value) {
  set_has_column_name();
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InceptionColumnParameter.column_name)
}
#endif
void InceptionColumnParameter::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_column_name();
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InceptionColumnParameter.column_name)
}
void InceptionColumnParameter::set_column_name(const char* value, size_t size) {
  set_has_column_name();
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InceptionColumnParameter.column_name)
}
::std::string* InceptionColumnParameter::mutable_column_name() {
  set_has_column_name();
  // @@protoc_insertion_point(field_mutable:caffe.InceptionColumnParameter.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InceptionColumnParameter::release_column_name() {
  // @@protoc_insertion_point(field_release:caffe.InceptionColumnParameter.column_name)
  clear_has_column_name();
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InceptionColumnParameter::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    set_has_column_name();
  } else {
    clear_has_column_name();
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionColumnParameter.column_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InceptionParameter::kReluParamFieldNumber;
const int InceptionParameter::kWeightFillerFieldNumber;
const int InceptionParameter::kBiasFillerFieldNumber;
const int InceptionParameter::kNeedReluFieldNumber;
const int InceptionParameter::kReluAtTopFieldNumber;
const int InceptionParameter::kInceptionColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InceptionParameter::InceptionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InceptionParameter)
}
InceptionParameter::InceptionParameter(const InceptionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      inception_column_(from.inception_column_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relu_param()) {
    relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&need_relu_, &from.need_relu_,
    reinterpret_cast<char*>(&relu_at_top_) -
    reinterpret_cast<char*>(&need_relu_) + sizeof(relu_at_top_));
  // @@protoc_insertion_point(copy_constructor:caffe.InceptionParameter)
}

void InceptionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&relu_param_, 0, reinterpret_cast<char*>(&bias_filler_) -
    reinterpret_cast<char*>(&relu_param_) + sizeof(bias_filler_));
  need_relu_ = true;
  relu_at_top_ = true;
}

InceptionParameter::~InceptionParameter() {
  // @@protoc_insertion_point(destructor:caffe.InceptionParameter)
  SharedDtor();
}

void InceptionParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete relu_param_;
  }
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void InceptionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InceptionParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InceptionParameter& InceptionParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InceptionParameter* InceptionParameter::New(::google::protobuf::Arena* arena) const {
  InceptionParameter* n = new InceptionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InceptionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InceptionParameter)
  inception_column_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_relu_param()) {
      GOOGLE_DCHECK(relu_param_ != NULL);
      relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
    need_relu_ = true;
    relu_at_top_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InceptionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InceptionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ReLUParameter relu_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_relu = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_need_relu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_relu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool relu_at_top = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_relu_at_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relu_at_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.InceptionColumnParameter inception_column = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inception_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InceptionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InceptionParameter)
  return false;
#undef DO_
}

void InceptionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InceptionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ReLUParameter relu_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->relu_param_, output);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bias_filler_, output);
  }

  // optional bool need_relu = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->need_relu(), output);
  }

  // optional bool relu_at_top = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->relu_at_top(), output);
  }

  // repeated .caffe.InceptionColumnParameter inception_column = 7;
  for (unsigned int i = 0, n = this->inception_column_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->inception_column(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InceptionParameter)
}

::google::protobuf::uint8* InceptionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InceptionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ReLUParameter relu_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->relu_param_, deterministic, target);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bias_filler_, deterministic, target);
  }

  // optional bool need_relu = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->need_relu(), target);
  }

  // optional bool relu_at_top = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->relu_at_top(), target);
  }

  // repeated .caffe.InceptionColumnParameter inception_column = 7;
  for (unsigned int i = 0, n = this->inception_column_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->inception_column(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InceptionParameter)
  return target;
}

size_t InceptionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InceptionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.InceptionColumnParameter inception_column = 7;
  {
    unsigned int count = this->inception_column_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inception_column(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.ReLUParameter relu_param = 1;
    if (has_relu_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.FillerParameter weight_filler = 2;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 3;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional bool need_relu = 5 [default = true];
    if (has_need_relu()) {
      total_size += 1 + 1;
    }

    // optional bool relu_at_top = 6 [default = true];
    if (has_relu_at_top()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InceptionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InceptionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InceptionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InceptionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InceptionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InceptionParameter)
    MergeFrom(*source);
  }
}

void InceptionParameter::MergeFrom(const InceptionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InceptionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inception_column_.MergeFrom(from.inception_column_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000008u) {
      need_relu_ = from.need_relu_;
    }
    if (cached_has_bits & 0x00000010u) {
      relu_at_top_ = from.relu_at_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InceptionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InceptionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InceptionParameter::CopyFrom(const InceptionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InceptionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InceptionParameter::IsInitialized() const {
  return true;
}

void InceptionParameter::Swap(InceptionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InceptionParameter::InternalSwap(InceptionParameter* other) {
  inception_column_.InternalSwap(&other->inception_column_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(need_relu_, other->need_relu_);
  std::swap(relu_at_top_, other->relu_at_top_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InceptionParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InceptionParameter

// optional .caffe.ReLUParameter relu_param = 1;
bool InceptionParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InceptionParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000001u;
}
void InceptionParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void InceptionParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& InceptionParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
::caffe::ReLUParameter* InceptionParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* InceptionParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.InceptionParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void InceptionParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionParameter.relu_param)
}

// optional .caffe.FillerParameter weight_filler = 2;
bool InceptionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InceptionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void InceptionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void InceptionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InceptionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InceptionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InceptionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InceptionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InceptionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
bool InceptionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InceptionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void InceptionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void InceptionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InceptionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InceptionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InceptionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InceptionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InceptionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InceptionParameter.bias_filler)
}

// optional bool need_relu = 5 [default = true];
bool InceptionParameter::has_need_relu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InceptionParameter::set_has_need_relu() {
  _has_bits_[0] |= 0x00000008u;
}
void InceptionParameter::clear_has_need_relu() {
  _has_bits_[0] &= ~0x00000008u;
}
void InceptionParameter::clear_need_relu() {
  need_relu_ = true;
  clear_has_need_relu();
}
bool InceptionParameter::need_relu() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.need_relu)
  return need_relu_;
}
void InceptionParameter::set_need_relu(bool value) {
  set_has_need_relu();
  need_relu_ = value;
  // @@protoc_insertion_point(field_set:caffe.InceptionParameter.need_relu)
}

// optional bool relu_at_top = 6 [default = true];
bool InceptionParameter::has_relu_at_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InceptionParameter::set_has_relu_at_top() {
  _has_bits_[0] |= 0x00000010u;
}
void InceptionParameter::clear_has_relu_at_top() {
  _has_bits_[0] &= ~0x00000010u;
}
void InceptionParameter::clear_relu_at_top() {
  relu_at_top_ = true;
  clear_has_relu_at_top();
}
bool InceptionParameter::relu_at_top() const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.relu_at_top)
  return relu_at_top_;
}
void InceptionParameter::set_relu_at_top(bool value) {
  set_has_relu_at_top();
  relu_at_top_ = value;
  // @@protoc_insertion_point(field_set:caffe.InceptionParameter.relu_at_top)
}

// repeated .caffe.InceptionColumnParameter inception_column = 7;
int InceptionParameter::inception_column_size() const {
  return inception_column_.size();
}
void InceptionParameter::clear_inception_column() {
  inception_column_.Clear();
}
const ::caffe::InceptionColumnParameter& InceptionParameter::inception_column(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InceptionParameter.inception_column)
  return inception_column_.Get(index);
}
::caffe::InceptionColumnParameter* InceptionParameter::mutable_inception_column(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InceptionParameter.inception_column)
  return inception_column_.Mutable(index);
}
::caffe::InceptionColumnParameter* InceptionParameter::add_inception_column() {
  // @@protoc_insertion_point(field_add:caffe.InceptionParameter.inception_column)
  return inception_column_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter >*
InceptionParameter::mutable_inception_column() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InceptionParameter.inception_column)
  return &inception_column_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::InceptionColumnParameter >&
InceptionParameter::inception_column() const {
  // @@protoc_insertion_point(field_list:caffe.InceptionParameter.inception_column)
  return inception_column_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementHingeLossParameter::kNormFieldNumber;
const int ElementHingeLossParameter::kScaleLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementHingeLossParameter::ElementHingeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ElementHingeLossParameter)
}
ElementHingeLossParameter::ElementHingeLossParameter(const ElementHingeLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_loss_, &from.scale_loss_,
    reinterpret_cast<char*>(&norm_) -
    reinterpret_cast<char*>(&scale_loss_) + sizeof(norm_));
  // @@protoc_insertion_point(copy_constructor:caffe.ElementHingeLossParameter)
}

void ElementHingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_loss_ = false;
  norm_ = 2;
}

ElementHingeLossParameter::~ElementHingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ElementHingeLossParameter)
  SharedDtor();
}

void ElementHingeLossParameter::SharedDtor() {
}

void ElementHingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementHingeLossParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElementHingeLossParameter& ElementHingeLossParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ElementHingeLossParameter* ElementHingeLossParameter::New(::google::protobuf::Arena* arena) const {
  ElementHingeLossParameter* n = new ElementHingeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElementHingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ElementHingeLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    scale_loss_ = false;
    norm_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementHingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ElementHingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ElementHingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::ElementHingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scale_loss = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_scale_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ElementHingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ElementHingeLossParameter)
  return false;
#undef DO_
}

void ElementHingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ElementHingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  // optional bool scale_loss = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->scale_loss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ElementHingeLossParameter)
}

::google::protobuf::uint8* ElementHingeLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ElementHingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  // optional bool scale_loss = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->scale_loss(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ElementHingeLossParameter)
  return target;
}

size_t ElementHingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ElementHingeLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool scale_loss = 2 [default = false];
    if (has_scale_loss()) {
      total_size += 1 + 1;
    }

    // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
    if (has_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementHingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ElementHingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementHingeLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementHingeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ElementHingeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ElementHingeLossParameter)
    MergeFrom(*source);
  }
}

void ElementHingeLossParameter::MergeFrom(const ElementHingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ElementHingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      scale_loss_ = from.scale_loss_;
    }
    if (cached_has_bits & 0x00000002u) {
      norm_ = from.norm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElementHingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ElementHingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementHingeLossParameter::CopyFrom(const ElementHingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ElementHingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementHingeLossParameter::IsInitialized() const {
  return true;
}

void ElementHingeLossParameter::Swap(ElementHingeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementHingeLossParameter::InternalSwap(ElementHingeLossParameter* other) {
  std::swap(scale_loss_, other->scale_loss_);
  std::swap(norm_, other->norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElementHingeLossParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElementHingeLossParameter

// optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
bool ElementHingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ElementHingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void ElementHingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void ElementHingeLossParameter::clear_norm() {
  norm_ = 2;
  clear_has_norm();
}
::caffe::ElementHingeLossParameter_Norm ElementHingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.ElementHingeLossParameter.norm)
  return static_cast< ::caffe::ElementHingeLossParameter_Norm >(norm_);
}
void ElementHingeLossParameter::set_norm(::caffe::ElementHingeLossParameter_Norm value) {
  assert(::caffe::ElementHingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.ElementHingeLossParameter.norm)
}

// optional bool scale_loss = 2 [default = false];
bool ElementHingeLossParameter::has_scale_loss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ElementHingeLossParameter::set_has_scale_loss() {
  _has_bits_[0] |= 0x00000001u;
}
void ElementHingeLossParameter::clear_has_scale_loss() {
  _has_bits_[0] &= ~0x00000001u;
}
void ElementHingeLossParameter::clear_scale_loss() {
  scale_loss_ = false;
  clear_has_scale_loss();
}
bool ElementHingeLossParameter::scale_loss() const {
  // @@protoc_insertion_point(field_get:caffe.ElementHingeLossParameter.scale_loss)
  return scale_loss_;
}
void ElementHingeLossParameter::set_scale_loss(bool value) {
  set_has_scale_loss();
  scale_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.ElementHingeLossParameter.scale_loss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockPackingParameter::kMaxStrideFieldNumber;
const int BlockPackingParameter::kPadHFieldNumber;
const int BlockPackingParameter::kPadWFieldNumber;
const int BlockPackingParameter::kMaxBlockSizeFieldNumber;
const int BlockPackingParameter::kRoiStarPercentFieldNumber;
const int BlockPackingParameter::kRoiHeightPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockPackingParameter::BlockPackingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlockPackingParameter)
}
BlockPackingParameter::BlockPackingParameter(const BlockPackingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roi_star_percent_, &from.roi_star_percent_,
    reinterpret_cast<char*>(&max_block_size_) -
    reinterpret_cast<char*>(&roi_star_percent_) + sizeof(max_block_size_));
  // @@protoc_insertion_point(copy_constructor:caffe.BlockPackingParameter)
}

void BlockPackingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&roi_star_percent_, 0, reinterpret_cast<char*>(&pad_w_) -
    reinterpret_cast<char*>(&roi_star_percent_) + sizeof(pad_w_));
  roi_height_percent_ = 1;
  max_stride_ = 8u;
  max_block_size_ = 500u;
}

BlockPackingParameter::~BlockPackingParameter() {
  // @@protoc_insertion_point(destructor:caffe.BlockPackingParameter)
  SharedDtor();
}

void BlockPackingParameter::SharedDtor() {
}

void BlockPackingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPackingParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockPackingParameter& BlockPackingParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockPackingParameter* BlockPackingParameter::New(::google::protobuf::Arena* arena) const {
  BlockPackingParameter* n = new BlockPackingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockPackingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlockPackingParameter)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&roi_star_percent_, 0, reinterpret_cast<char*>(&pad_w_) -
      reinterpret_cast<char*>(&roi_star_percent_) + sizeof(pad_w_));
    roi_height_percent_ = 1;
    max_stride_ = 8u;
    max_block_size_ = 500u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockPackingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlockPackingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_stride = 6 [default = 8];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_max_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_block_size = 9 [default = 500];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_max_block_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roi_star_percent = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_roi_star_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_star_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roi_height_percent = 11 [default = 1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_roi_height_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_height_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlockPackingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlockPackingParameter)
  return false;
#undef DO_
}

void BlockPackingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlockPackingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_stride = 6 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_stride(), output);
  }

  // optional uint32 pad_h = 7 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad_h(), output);
  }

  // optional uint32 pad_w = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pad_w(), output);
  }

  // optional uint32 max_block_size = 9 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_block_size(), output);
  }

  // optional float roi_star_percent = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->roi_star_percent(), output);
  }

  // optional float roi_height_percent = 11 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->roi_height_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlockPackingParameter)
}

::google::protobuf::uint8* BlockPackingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlockPackingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_stride = 6 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_stride(), target);
  }

  // optional uint32 pad_h = 7 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad_h(), target);
  }

  // optional uint32 pad_w = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pad_w(), target);
  }

  // optional uint32 max_block_size = 9 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_block_size(), target);
  }

  // optional float roi_star_percent = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->roi_star_percent(), target);
  }

  // optional float roi_height_percent = 11 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->roi_height_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlockPackingParameter)
  return target;
}

size_t BlockPackingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlockPackingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float roi_star_percent = 10 [default = 0];
    if (has_roi_star_percent()) {
      total_size += 1 + 4;
    }

    // optional uint32 pad_h = 7 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 8 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional float roi_height_percent = 11 [default = 1];
    if (has_roi_height_percent()) {
      total_size += 1 + 4;
    }

    // optional uint32 max_stride = 6 [default = 8];
    if (has_max_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stride());
    }

    // optional uint32 max_block_size = 9 [default = 500];
    if (has_max_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_block_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockPackingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlockPackingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockPackingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockPackingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlockPackingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlockPackingParameter)
    MergeFrom(*source);
  }
}

void BlockPackingParameter::MergeFrom(const BlockPackingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlockPackingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      roi_star_percent_ = from.roi_star_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      pad_h_ = from.pad_h_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000008u) {
      roi_height_percent_ = from.roi_height_percent_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_stride_ = from.max_stride_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_block_size_ = from.max_block_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockPackingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlockPackingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockPackingParameter::CopyFrom(const BlockPackingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlockPackingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPackingParameter::IsInitialized() const {
  return true;
}

void BlockPackingParameter::Swap(BlockPackingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockPackingParameter::InternalSwap(BlockPackingParameter* other) {
  std::swap(roi_star_percent_, other->roi_star_percent_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(roi_height_percent_, other->roi_height_percent_);
  std::swap(max_stride_, other->max_stride_);
  std::swap(max_block_size_, other->max_block_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockPackingParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockPackingParameter

// optional uint32 max_stride = 6 [default = 8];
bool BlockPackingParameter::has_max_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlockPackingParameter::set_has_max_stride() {
  _has_bits_[0] |= 0x00000010u;
}
void BlockPackingParameter::clear_has_max_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlockPackingParameter::clear_max_stride() {
  max_stride_ = 8u;
  clear_has_max_stride();
}
::google::protobuf::uint32 BlockPackingParameter::max_stride() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.max_stride)
  return max_stride_;
}
void BlockPackingParameter::set_max_stride(::google::protobuf::uint32 value) {
  set_has_max_stride();
  max_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.max_stride)
}

// optional uint32 pad_h = 7 [default = 0];
bool BlockPackingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlockPackingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000002u;
}
void BlockPackingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlockPackingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 BlockPackingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.pad_h)
  return pad_h_;
}
void BlockPackingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.pad_h)
}

// optional uint32 pad_w = 8 [default = 0];
bool BlockPackingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlockPackingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000004u;
}
void BlockPackingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlockPackingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 BlockPackingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.pad_w)
  return pad_w_;
}
void BlockPackingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.pad_w)
}

// optional uint32 max_block_size = 9 [default = 500];
bool BlockPackingParameter::has_max_block_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlockPackingParameter::set_has_max_block_size() {
  _has_bits_[0] |= 0x00000020u;
}
void BlockPackingParameter::clear_has_max_block_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlockPackingParameter::clear_max_block_size() {
  max_block_size_ = 500u;
  clear_has_max_block_size();
}
::google::protobuf::uint32 BlockPackingParameter::max_block_size() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.max_block_size)
  return max_block_size_;
}
void BlockPackingParameter::set_max_block_size(::google::protobuf::uint32 value) {
  set_has_max_block_size();
  max_block_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.max_block_size)
}

// optional float roi_star_percent = 10 [default = 0];
bool BlockPackingParameter::has_roi_star_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlockPackingParameter::set_has_roi_star_percent() {
  _has_bits_[0] |= 0x00000001u;
}
void BlockPackingParameter::clear_has_roi_star_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlockPackingParameter::clear_roi_star_percent() {
  roi_star_percent_ = 0;
  clear_has_roi_star_percent();
}
float BlockPackingParameter::roi_star_percent() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.roi_star_percent)
  return roi_star_percent_;
}
void BlockPackingParameter::set_roi_star_percent(float value) {
  set_has_roi_star_percent();
  roi_star_percent_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.roi_star_percent)
}

// optional float roi_height_percent = 11 [default = 1];
bool BlockPackingParameter::has_roi_height_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlockPackingParameter::set_has_roi_height_percent() {
  _has_bits_[0] |= 0x00000008u;
}
void BlockPackingParameter::clear_has_roi_height_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlockPackingParameter::clear_roi_height_percent() {
  roi_height_percent_ = 1;
  clear_has_roi_height_percent();
}
float BlockPackingParameter::roi_height_percent() const {
  // @@protoc_insertion_point(field_get:caffe.BlockPackingParameter.roi_height_percent)
  return roi_height_percent_;
}
void BlockPackingParameter::set_roi_height_percent(float value) {
  set_has_roi_height_percent();
  roi_height_percent_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlockPackingParameter.roi_height_percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PyramidDataParameter::kImageListFileFieldNumber;
const int PyramidDataParameter::kImageFolderFieldNumber;
const int PyramidDataParameter::kScaleStartFieldNumber;
const int PyramidDataParameter::kScaleEndFieldNumber;
const int PyramidDataParameter::kScaleStepFieldNumber;
const int PyramidDataParameter::kScaleFromAnnotationFieldNumber;
const int PyramidDataParameter::kBlockPackingParamFieldNumber;
const int PyramidDataParameter::kHeatMapAFieldNumber;
const int PyramidDataParameter::kHeatMapBFieldNumber;
const int PyramidDataParameter::kMeanRFieldNumber;
const int PyramidDataParameter::kMeanGFieldNumber;
const int PyramidDataParameter::kMeanBFieldNumber;
const int PyramidDataParameter::kMaxBlockNumFieldNumber;
const int PyramidDataParameter::kShuffleFieldNumber;
const int PyramidDataParameter::kMean2RFieldNumber;
const int PyramidDataParameter::kMean2GFieldNumber;
const int PyramidDataParameter::kMean2BFieldNumber;
const int PyramidDataParameter::kIsImgPairFieldNumber;
const int PyramidDataParameter::kUseVideoFieldNumber;
const int PyramidDataParameter::kVideoFileFieldNumber;
const int PyramidDataParameter::kListFileFieldNumber;
const int PyramidDataParameter::kDeviceFieldNumber;
const int PyramidDataParameter::kRgbFieldNumber;
const int PyramidDataParameter::kPicPrintFieldNumber;
const int PyramidDataParameter::kShowTimeFieldNumber;
const int PyramidDataParameter::kResizeScaleFieldNumber;
const int PyramidDataParameter::kScalesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PyramidDataParameter::PyramidDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PyramidDataParameter)
}
PyramidDataParameter::PyramidDataParameter(const PyramidDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      scales_(from.scales_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_list_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_list_file()) {
    image_list_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_list_file_);
  }
  image_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_folder()) {
    image_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_folder_);
  }
  video_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_file()) {
    video_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_file_);
  }
  list_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_list_file()) {
    list_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_file_);
  }
  if (from.has_block_packing_param()) {
    block_packing_param_ = new ::caffe::BlockPackingParameter(*from.block_packing_param_);
  } else {
    block_packing_param_ = NULL;
  }
  ::memcpy(&mean_r_, &from.mean_r_,
    reinterpret_cast<char*>(&resize_scale_) -
    reinterpret_cast<char*>(&mean_r_) + sizeof(resize_scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.PyramidDataParameter)
}

void PyramidDataParameter::SharedCtor() {
  _cached_size_ = 0;
  image_list_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_packing_param_, 0, reinterpret_cast<char*>(&device_) -
    reinterpret_cast<char*>(&block_packing_param_) + sizeof(device_));
  scale_start_ = -2;
  scale_end_ = 1;
  scale_step_ = 0.3f;
  max_block_num_ = 4u;
  rgb_ = true;
  resize_scale_ = 1;
}

PyramidDataParameter::~PyramidDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.PyramidDataParameter)
  SharedDtor();
}

void PyramidDataParameter::SharedDtor() {
  image_list_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete block_packing_param_;
  }
}

void PyramidDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyramidDataParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PyramidDataParameter& PyramidDataParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PyramidDataParameter* PyramidDataParameter::New(::google::protobuf::Arena* arena) const {
  PyramidDataParameter* n = new PyramidDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PyramidDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PyramidDataParameter)
  scales_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_image_list_file()) {
      GOOGLE_DCHECK(!image_list_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_list_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_image_folder()) {
      GOOGLE_DCHECK(!image_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_folder_.UnsafeRawStringPointer())->clear();
    }
    if (has_video_file()) {
      GOOGLE_DCHECK(!video_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_list_file()) {
      GOOGLE_DCHECK(!list_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*list_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_block_packing_param()) {
      GOOGLE_DCHECK(block_packing_param_ != NULL);
      block_packing_param_->::caffe::BlockPackingParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&mean_r_, 0, reinterpret_cast<char*>(&mean_b_) -
      reinterpret_cast<char*>(&mean_r_) + sizeof(mean_b_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&heat_map_a_, 0, reinterpret_cast<char*>(&scale_from_annotation_) -
      reinterpret_cast<char*>(&heat_map_a_) + sizeof(scale_from_annotation_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&shuffle_, 0, reinterpret_cast<char*>(&device_) -
      reinterpret_cast<char*>(&shuffle_) + sizeof(device_));
    scale_start_ = -2;
    scale_end_ = 1;
    scale_step_ = 0.3f;
    max_block_num_ = 4u;
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    rgb_ = true;
    resize_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PyramidDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PyramidDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_list_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_list_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_list_file().data(), this->image_list_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PyramidDataParameter.image_list_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image_folder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_folder().data(), this->image_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PyramidDataParameter.image_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_start = 3 [default = -2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_scale_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_end = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_scale_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_step = 5 [default = 0.3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_scale_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BlockPackingParameter block_packing_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_packing_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_r = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_mean_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_g = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_mean_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_b = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_mean_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heat_map_a = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_heat_map_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_map_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heat_map_b = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_heat_map_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_map_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_block_num = 12 [default = 4];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_max_block_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scale_from_annotation = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_scale_from_annotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_from_annotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean2_r = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_mean2_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean2_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean2_g = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_mean2_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean2_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean2_b = 23 [default = 0];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_mean2_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean2_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_img_pair = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_is_img_pair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_img_pair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scales = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 229u, input, this->mutable_scales())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(226u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scales())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_video = 115 [default = false];
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(920u)) {
          set_has_use_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_file = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(930u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_file().data(), this->video_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PyramidDataParameter.video_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string list_file = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(938u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_file().data(), this->list_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PyramidDataParameter.list_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device = 118 [default = 0];
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(944u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rgb = 119 [default = true];
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(952u)) {
          set_has_rgb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rgb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pic_print = 120 [default = false];
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(960u)) {
          set_has_pic_print();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pic_print_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_time = 121 [default = false];
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(968u)) {
          set_has_show_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float resize_scale = 122 [default = 1];
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(981u)) {
          set_has_resize_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resize_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PyramidDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PyramidDataParameter)
  return false;
#undef DO_
}

void PyramidDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PyramidDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string image_list_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_list_file().data(), this->image_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.image_list_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_list_file(), output);
  }

  // optional string image_folder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_folder().data(), this->image_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.image_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_folder(), output);
  }

  // optional float scale_start = 3 [default = -2];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale_start(), output);
  }

  // optional float scale_end = 4 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale_end(), output);
  }

  // optional float scale_step = 5 [default = 0.3];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->scale_step(), output);
  }

  // optional .caffe.BlockPackingParameter block_packing_param = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->block_packing_param_, output);
  }

  // optional float mean_r = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mean_r(), output);
  }

  // optional float mean_g = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mean_g(), output);
  }

  // optional float mean_b = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mean_b(), output);
  }

  // optional uint32 heat_map_a = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->heat_map_a(), output);
  }

  // optional uint32 heat_map_b = 11 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->heat_map_b(), output);
  }

  // optional uint32 max_block_num = 12 [default = 4];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_block_num(), output);
  }

  // optional bool shuffle = 13 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->shuffle(), output);
  }

  // optional bool scale_from_annotation = 14 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->scale_from_annotation(), output);
  }

  // optional float mean2_r = 21 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->mean2_r(), output);
  }

  // optional float mean2_g = 22 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->mean2_g(), output);
  }

  // optional float mean2_b = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->mean2_b(), output);
  }

  // optional bool is_img_pair = 24 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_img_pair(), output);
  }

  // repeated float scales = 28;
  for (int i = 0, n = this->scales_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      28, this->scales(i), output);
  }

  // optional bool use_video = 115 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(115, this->use_video(), output);
  }

  // optional string video_file = 116;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_file().data(), this->video_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.video_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      116, this->video_file(), output);
  }

  // optional string list_file = 117;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_file().data(), this->list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.list_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      117, this->list_file(), output);
  }

  // optional uint32 device = 118 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(118, this->device(), output);
  }

  // optional bool rgb = 119 [default = true];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(119, this->rgb(), output);
  }

  // optional bool pic_print = 120 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->pic_print(), output);
  }

  // optional bool show_time = 121 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(121, this->show_time(), output);
  }

  // optional float resize_scale = 122 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(122, this->resize_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PyramidDataParameter)
}

::google::protobuf::uint8* PyramidDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PyramidDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string image_list_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_list_file().data(), this->image_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.image_list_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_list_file(), target);
  }

  // optional string image_folder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_folder().data(), this->image_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.image_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image_folder(), target);
  }

  // optional float scale_start = 3 [default = -2];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale_start(), target);
  }

  // optional float scale_end = 4 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale_end(), target);
  }

  // optional float scale_step = 5 [default = 0.3];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->scale_step(), target);
  }

  // optional .caffe.BlockPackingParameter block_packing_param = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->block_packing_param_, deterministic, target);
  }

  // optional float mean_r = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mean_r(), target);
  }

  // optional float mean_g = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mean_g(), target);
  }

  // optional float mean_b = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mean_b(), target);
  }

  // optional uint32 heat_map_a = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->heat_map_a(), target);
  }

  // optional uint32 heat_map_b = 11 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->heat_map_b(), target);
  }

  // optional uint32 max_block_num = 12 [default = 4];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_block_num(), target);
  }

  // optional bool shuffle = 13 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->shuffle(), target);
  }

  // optional bool scale_from_annotation = 14 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->scale_from_annotation(), target);
  }

  // optional float mean2_r = 21 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->mean2_r(), target);
  }

  // optional float mean2_g = 22 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->mean2_g(), target);
  }

  // optional float mean2_b = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->mean2_b(), target);
  }

  // optional bool is_img_pair = 24 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_img_pair(), target);
  }

  // repeated float scales = 28;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(28, this->scales_, target);

  // optional bool use_video = 115 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(115, this->use_video(), target);
  }

  // optional string video_file = 116;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_file().data(), this->video_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.video_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        116, this->video_file(), target);
  }

  // optional string list_file = 117;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_file().data(), this->list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PyramidDataParameter.list_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        117, this->list_file(), target);
  }

  // optional uint32 device = 118 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(118, this->device(), target);
  }

  // optional bool rgb = 119 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(119, this->rgb(), target);
  }

  // optional bool pic_print = 120 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->pic_print(), target);
  }

  // optional bool show_time = 121 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(121, this->show_time(), target);
  }

  // optional float resize_scale = 122 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(122, this->resize_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PyramidDataParameter)
  return target;
}

size_t PyramidDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PyramidDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float scales = 28;
  {
    unsigned int count = this->scales_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->scales_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string image_list_file = 1;
    if (has_image_list_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_list_file());
    }

    // optional string image_folder = 2;
    if (has_image_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_folder());
    }

    // optional string video_file = 116;
    if (has_video_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_file());
    }

    // optional string list_file = 117;
    if (has_list_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_file());
    }

    // optional .caffe.BlockPackingParameter block_packing_param = 6;
    if (has_block_packing_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->block_packing_param_);
    }

    // optional float mean_r = 7 [default = 0];
    if (has_mean_r()) {
      total_size += 1 + 4;
    }

    // optional float mean_g = 8 [default = 0];
    if (has_mean_g()) {
      total_size += 1 + 4;
    }

    // optional float mean_b = 9 [default = 0];
    if (has_mean_b()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 heat_map_a = 10 [default = 0];
    if (has_heat_map_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat_map_a());
    }

    // optional uint32 heat_map_b = 11 [default = 0];
    if (has_heat_map_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat_map_b());
    }

    // optional float mean2_r = 21 [default = 0];
    if (has_mean2_r()) {
      total_size += 2 + 4;
    }

    // optional float mean2_g = 22 [default = 0];
    if (has_mean2_g()) {
      total_size += 2 + 4;
    }

    // optional float mean2_b = 23 [default = 0];
    if (has_mean2_b()) {
      total_size += 2 + 4;
    }

    // optional bool pic_print = 120 [default = false];
    if (has_pic_print()) {
      total_size += 2 + 1;
    }

    // optional bool show_time = 121 [default = false];
    if (has_show_time()) {
      total_size += 2 + 1;
    }

    // optional bool scale_from_annotation = 14 [default = false];
    if (has_scale_from_annotation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool shuffle = 13 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool is_img_pair = 24 [default = false];
    if (has_is_img_pair()) {
      total_size += 2 + 1;
    }

    // optional bool use_video = 115 [default = false];
    if (has_use_video()) {
      total_size += 2 + 1;
    }

    // optional uint32 device = 118 [default = 0];
    if (has_device()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional float scale_start = 3 [default = -2];
    if (has_scale_start()) {
      total_size += 1 + 4;
    }

    // optional float scale_end = 4 [default = 1];
    if (has_scale_end()) {
      total_size += 1 + 4;
    }

    // optional float scale_step = 5 [default = 0.3];
    if (has_scale_step()) {
      total_size += 1 + 4;
    }

    // optional uint32 max_block_num = 12 [default = 4];
    if (has_max_block_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_block_num());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional bool rgb = 119 [default = true];
    if (has_rgb()) {
      total_size += 2 + 1;
    }

    // optional float resize_scale = 122 [default = 1];
    if (has_resize_scale()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyramidDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PyramidDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PyramidDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PyramidDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PyramidDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PyramidDataParameter)
    MergeFrom(*source);
  }
}

void PyramidDataParameter::MergeFrom(const PyramidDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PyramidDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scales_.MergeFrom(from.scales_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image_list_file();
      image_list_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_list_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_image_folder();
      image_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_folder_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_video_file();
      video_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_list_file();
      list_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_file_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_block_packing_param()->::caffe::BlockPackingParameter::MergeFrom(from.block_packing_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mean_r_ = from.mean_r_;
    }
    if (cached_has_bits & 0x00000040u) {
      mean_g_ = from.mean_g_;
    }
    if (cached_has_bits & 0x00000080u) {
      mean_b_ = from.mean_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      heat_map_a_ = from.heat_map_a_;
    }
    if (cached_has_bits & 0x00000200u) {
      heat_map_b_ = from.heat_map_b_;
    }
    if (cached_has_bits & 0x00000400u) {
      mean2_r_ = from.mean2_r_;
    }
    if (cached_has_bits & 0x00000800u) {
      mean2_g_ = from.mean2_g_;
    }
    if (cached_has_bits & 0x00001000u) {
      mean2_b_ = from.mean2_b_;
    }
    if (cached_has_bits & 0x00002000u) {
      pic_print_ = from.pic_print_;
    }
    if (cached_has_bits & 0x00004000u) {
      show_time_ = from.show_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      scale_from_annotation_ = from.scale_from_annotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_img_pair_ = from.is_img_pair_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_video_ = from.use_video_;
    }
    if (cached_has_bits & 0x00080000u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00100000u) {
      scale_start_ = from.scale_start_;
    }
    if (cached_has_bits & 0x00200000u) {
      scale_end_ = from.scale_end_;
    }
    if (cached_has_bits & 0x00400000u) {
      scale_step_ = from.scale_step_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_block_num_ = from.max_block_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      rgb_ = from.rgb_;
    }
    if (cached_has_bits & 0x02000000u) {
      resize_scale_ = from.resize_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PyramidDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PyramidDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyramidDataParameter::CopyFrom(const PyramidDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PyramidDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyramidDataParameter::IsInitialized() const {
  return true;
}

void PyramidDataParameter::Swap(PyramidDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PyramidDataParameter::InternalSwap(PyramidDataParameter* other) {
  scales_.InternalSwap(&other->scales_);
  image_list_file_.Swap(&other->image_list_file_);
  image_folder_.Swap(&other->image_folder_);
  video_file_.Swap(&other->video_file_);
  list_file_.Swap(&other->list_file_);
  std::swap(block_packing_param_, other->block_packing_param_);
  std::swap(mean_r_, other->mean_r_);
  std::swap(mean_g_, other->mean_g_);
  std::swap(mean_b_, other->mean_b_);
  std::swap(heat_map_a_, other->heat_map_a_);
  std::swap(heat_map_b_, other->heat_map_b_);
  std::swap(mean2_r_, other->mean2_r_);
  std::swap(mean2_g_, other->mean2_g_);
  std::swap(mean2_b_, other->mean2_b_);
  std::swap(pic_print_, other->pic_print_);
  std::swap(show_time_, other->show_time_);
  std::swap(scale_from_annotation_, other->scale_from_annotation_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(is_img_pair_, other->is_img_pair_);
  std::swap(use_video_, other->use_video_);
  std::swap(device_, other->device_);
  std::swap(scale_start_, other->scale_start_);
  std::swap(scale_end_, other->scale_end_);
  std::swap(scale_step_, other->scale_step_);
  std::swap(max_block_num_, other->max_block_num_);
  std::swap(rgb_, other->rgb_);
  std::swap(resize_scale_, other->resize_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PyramidDataParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PyramidDataParameter

// optional string image_list_file = 1;
bool PyramidDataParameter::has_image_list_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PyramidDataParameter::set_has_image_list_file() {
  _has_bits_[0] |= 0x00000001u;
}
void PyramidDataParameter::clear_has_image_list_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void PyramidDataParameter::clear_image_list_file() {
  image_list_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_list_file();
}
const ::std::string& PyramidDataParameter::image_list_file() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.image_list_file)
  return image_list_file_.GetNoArena();
}
void PyramidDataParameter::set_image_list_file(const ::std::string& value) {
  set_has_image_list_file();
  image_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.image_list_file)
}
#if LANG_CXX11
void PyramidDataParameter::set_image_list_file(::std::string&& value) {
  set_has_image_list_file();
  image_list_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.image_list_file)
}
#endif
void PyramidDataParameter::set_image_list_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image_list_file();
  image_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.image_list_file)
}
void PyramidDataParameter::set_image_list_file(const char* value, size_t size) {
  set_has_image_list_file();
  image_list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.image_list_file)
}
::std::string* PyramidDataParameter::mutable_image_list_file() {
  set_has_image_list_file();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.image_list_file)
  return image_list_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PyramidDataParameter::release_image_list_file() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.image_list_file)
  clear_has_image_list_file();
  return image_list_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PyramidDataParameter::set_allocated_image_list_file(::std::string* image_list_file) {
  if (image_list_file != NULL) {
    set_has_image_list_file();
  } else {
    clear_has_image_list_file();
  }
  image_list_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_list_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.image_list_file)
}

// optional string image_folder = 2;
bool PyramidDataParameter::has_image_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PyramidDataParameter::set_has_image_folder() {
  _has_bits_[0] |= 0x00000002u;
}
void PyramidDataParameter::clear_has_image_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
void PyramidDataParameter::clear_image_folder() {
  image_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_folder();
}
const ::std::string& PyramidDataParameter::image_folder() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.image_folder)
  return image_folder_.GetNoArena();
}
void PyramidDataParameter::set_image_folder(const ::std::string& value) {
  set_has_image_folder();
  image_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.image_folder)
}
#if LANG_CXX11
void PyramidDataParameter::set_image_folder(::std::string&& value) {
  set_has_image_folder();
  image_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.image_folder)
}
#endif
void PyramidDataParameter::set_image_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image_folder();
  image_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.image_folder)
}
void PyramidDataParameter::set_image_folder(const char* value, size_t size) {
  set_has_image_folder();
  image_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.image_folder)
}
::std::string* PyramidDataParameter::mutable_image_folder() {
  set_has_image_folder();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.image_folder)
  return image_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PyramidDataParameter::release_image_folder() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.image_folder)
  clear_has_image_folder();
  return image_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PyramidDataParameter::set_allocated_image_folder(::std::string* image_folder) {
  if (image_folder != NULL) {
    set_has_image_folder();
  } else {
    clear_has_image_folder();
  }
  image_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.image_folder)
}

// optional float scale_start = 3 [default = -2];
bool PyramidDataParameter::has_scale_start() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PyramidDataParameter::set_has_scale_start() {
  _has_bits_[0] |= 0x00100000u;
}
void PyramidDataParameter::clear_has_scale_start() {
  _has_bits_[0] &= ~0x00100000u;
}
void PyramidDataParameter::clear_scale_start() {
  scale_start_ = -2;
  clear_has_scale_start();
}
float PyramidDataParameter::scale_start() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_start)
  return scale_start_;
}
void PyramidDataParameter::set_scale_start(float value) {
  set_has_scale_start();
  scale_start_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_start)
}

// optional float scale_end = 4 [default = 1];
bool PyramidDataParameter::has_scale_end() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PyramidDataParameter::set_has_scale_end() {
  _has_bits_[0] |= 0x00200000u;
}
void PyramidDataParameter::clear_has_scale_end() {
  _has_bits_[0] &= ~0x00200000u;
}
void PyramidDataParameter::clear_scale_end() {
  scale_end_ = 1;
  clear_has_scale_end();
}
float PyramidDataParameter::scale_end() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_end)
  return scale_end_;
}
void PyramidDataParameter::set_scale_end(float value) {
  set_has_scale_end();
  scale_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_end)
}

// optional float scale_step = 5 [default = 0.3];
bool PyramidDataParameter::has_scale_step() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PyramidDataParameter::set_has_scale_step() {
  _has_bits_[0] |= 0x00400000u;
}
void PyramidDataParameter::clear_has_scale_step() {
  _has_bits_[0] &= ~0x00400000u;
}
void PyramidDataParameter::clear_scale_step() {
  scale_step_ = 0.3f;
  clear_has_scale_step();
}
float PyramidDataParameter::scale_step() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_step)
  return scale_step_;
}
void PyramidDataParameter::set_scale_step(float value) {
  set_has_scale_step();
  scale_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_step)
}

// optional bool scale_from_annotation = 14 [default = false];
bool PyramidDataParameter::has_scale_from_annotation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PyramidDataParameter::set_has_scale_from_annotation() {
  _has_bits_[0] |= 0x00008000u;
}
void PyramidDataParameter::clear_has_scale_from_annotation() {
  _has_bits_[0] &= ~0x00008000u;
}
void PyramidDataParameter::clear_scale_from_annotation() {
  scale_from_annotation_ = false;
  clear_has_scale_from_annotation();
}
bool PyramidDataParameter::scale_from_annotation() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scale_from_annotation)
  return scale_from_annotation_;
}
void PyramidDataParameter::set_scale_from_annotation(bool value) {
  set_has_scale_from_annotation();
  scale_from_annotation_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scale_from_annotation)
}

// optional .caffe.BlockPackingParameter block_packing_param = 6;
bool PyramidDataParameter::has_block_packing_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PyramidDataParameter::set_has_block_packing_param() {
  _has_bits_[0] |= 0x00000010u;
}
void PyramidDataParameter::clear_has_block_packing_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void PyramidDataParameter::clear_block_packing_param() {
  if (block_packing_param_ != NULL) block_packing_param_->::caffe::BlockPackingParameter::Clear();
  clear_has_block_packing_param();
}
const ::caffe::BlockPackingParameter& PyramidDataParameter::block_packing_param() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.block_packing_param)
  return block_packing_param_ != NULL ? *block_packing_param_
                         : *::caffe::BlockPackingParameter::internal_default_instance();
}
::caffe::BlockPackingParameter* PyramidDataParameter::mutable_block_packing_param() {
  set_has_block_packing_param();
  if (block_packing_param_ == NULL) {
    block_packing_param_ = new ::caffe::BlockPackingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.block_packing_param)
  return block_packing_param_;
}
::caffe::BlockPackingParameter* PyramidDataParameter::release_block_packing_param() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.block_packing_param)
  clear_has_block_packing_param();
  ::caffe::BlockPackingParameter* temp = block_packing_param_;
  block_packing_param_ = NULL;
  return temp;
}
void PyramidDataParameter::set_allocated_block_packing_param(::caffe::BlockPackingParameter* block_packing_param) {
  delete block_packing_param_;
  block_packing_param_ = block_packing_param;
  if (block_packing_param) {
    set_has_block_packing_param();
  } else {
    clear_has_block_packing_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.block_packing_param)
}

// optional uint32 heat_map_a = 10 [default = 0];
bool PyramidDataParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PyramidDataParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000100u;
}
void PyramidDataParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000100u;
}
void PyramidDataParameter::clear_heat_map_a() {
  heat_map_a_ = 0u;
  clear_has_heat_map_a();
}
::google::protobuf::uint32 PyramidDataParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.heat_map_a)
  return heat_map_a_;
}
void PyramidDataParameter::set_heat_map_a(::google::protobuf::uint32 value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.heat_map_a)
}

// optional uint32 heat_map_b = 11 [default = 0];
bool PyramidDataParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PyramidDataParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000200u;
}
void PyramidDataParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000200u;
}
void PyramidDataParameter::clear_heat_map_b() {
  heat_map_b_ = 0u;
  clear_has_heat_map_b();
}
::google::protobuf::uint32 PyramidDataParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.heat_map_b)
  return heat_map_b_;
}
void PyramidDataParameter::set_heat_map_b(::google::protobuf::uint32 value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.heat_map_b)
}

// optional float mean_r = 7 [default = 0];
bool PyramidDataParameter::has_mean_r() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PyramidDataParameter::set_has_mean_r() {
  _has_bits_[0] |= 0x00000020u;
}
void PyramidDataParameter::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000020u;
}
void PyramidDataParameter::clear_mean_r() {
  mean_r_ = 0;
  clear_has_mean_r();
}
float PyramidDataParameter::mean_r() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean_r)
  return mean_r_;
}
void PyramidDataParameter::set_mean_r(float value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean_r)
}

// optional float mean_g = 8 [default = 0];
bool PyramidDataParameter::has_mean_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PyramidDataParameter::set_has_mean_g() {
  _has_bits_[0] |= 0x00000040u;
}
void PyramidDataParameter::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000040u;
}
void PyramidDataParameter::clear_mean_g() {
  mean_g_ = 0;
  clear_has_mean_g();
}
float PyramidDataParameter::mean_g() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean_g)
  return mean_g_;
}
void PyramidDataParameter::set_mean_g(float value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean_g)
}

// optional float mean_b = 9 [default = 0];
bool PyramidDataParameter::has_mean_b() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PyramidDataParameter::set_has_mean_b() {
  _has_bits_[0] |= 0x00000080u;
}
void PyramidDataParameter::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000080u;
}
void PyramidDataParameter::clear_mean_b() {
  mean_b_ = 0;
  clear_has_mean_b();
}
float PyramidDataParameter::mean_b() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean_b)
  return mean_b_;
}
void PyramidDataParameter::set_mean_b(float value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean_b)
}

// optional uint32 max_block_num = 12 [default = 4];
bool PyramidDataParameter::has_max_block_num() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PyramidDataParameter::set_has_max_block_num() {
  _has_bits_[0] |= 0x00800000u;
}
void PyramidDataParameter::clear_has_max_block_num() {
  _has_bits_[0] &= ~0x00800000u;
}
void PyramidDataParameter::clear_max_block_num() {
  max_block_num_ = 4u;
  clear_has_max_block_num();
}
::google::protobuf::uint32 PyramidDataParameter::max_block_num() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.max_block_num)
  return max_block_num_;
}
void PyramidDataParameter::set_max_block_num(::google::protobuf::uint32 value) {
  set_has_max_block_num();
  max_block_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.max_block_num)
}

// optional bool shuffle = 13 [default = false];
bool PyramidDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PyramidDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00010000u;
}
void PyramidDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00010000u;
}
void PyramidDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool PyramidDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.shuffle)
  return shuffle_;
}
void PyramidDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.shuffle)
}

// optional float mean2_r = 21 [default = 0];
bool PyramidDataParameter::has_mean2_r() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PyramidDataParameter::set_has_mean2_r() {
  _has_bits_[0] |= 0x00000400u;
}
void PyramidDataParameter::clear_has_mean2_r() {
  _has_bits_[0] &= ~0x00000400u;
}
void PyramidDataParameter::clear_mean2_r() {
  mean2_r_ = 0;
  clear_has_mean2_r();
}
float PyramidDataParameter::mean2_r() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean2_r)
  return mean2_r_;
}
void PyramidDataParameter::set_mean2_r(float value) {
  set_has_mean2_r();
  mean2_r_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean2_r)
}

// optional float mean2_g = 22 [default = 0];
bool PyramidDataParameter::has_mean2_g() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PyramidDataParameter::set_has_mean2_g() {
  _has_bits_[0] |= 0x00000800u;
}
void PyramidDataParameter::clear_has_mean2_g() {
  _has_bits_[0] &= ~0x00000800u;
}
void PyramidDataParameter::clear_mean2_g() {
  mean2_g_ = 0;
  clear_has_mean2_g();
}
float PyramidDataParameter::mean2_g() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean2_g)
  return mean2_g_;
}
void PyramidDataParameter::set_mean2_g(float value) {
  set_has_mean2_g();
  mean2_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean2_g)
}

// optional float mean2_b = 23 [default = 0];
bool PyramidDataParameter::has_mean2_b() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PyramidDataParameter::set_has_mean2_b() {
  _has_bits_[0] |= 0x00001000u;
}
void PyramidDataParameter::clear_has_mean2_b() {
  _has_bits_[0] &= ~0x00001000u;
}
void PyramidDataParameter::clear_mean2_b() {
  mean2_b_ = 0;
  clear_has_mean2_b();
}
float PyramidDataParameter::mean2_b() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.mean2_b)
  return mean2_b_;
}
void PyramidDataParameter::set_mean2_b(float value) {
  set_has_mean2_b();
  mean2_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.mean2_b)
}

// optional bool is_img_pair = 24 [default = false];
bool PyramidDataParameter::has_is_img_pair() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PyramidDataParameter::set_has_is_img_pair() {
  _has_bits_[0] |= 0x00020000u;
}
void PyramidDataParameter::clear_has_is_img_pair() {
  _has_bits_[0] &= ~0x00020000u;
}
void PyramidDataParameter::clear_is_img_pair() {
  is_img_pair_ = false;
  clear_has_is_img_pair();
}
bool PyramidDataParameter::is_img_pair() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.is_img_pair)
  return is_img_pair_;
}
void PyramidDataParameter::set_is_img_pair(bool value) {
  set_has_is_img_pair();
  is_img_pair_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.is_img_pair)
}

// optional bool use_video = 115 [default = false];
bool PyramidDataParameter::has_use_video() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PyramidDataParameter::set_has_use_video() {
  _has_bits_[0] |= 0x00040000u;
}
void PyramidDataParameter::clear_has_use_video() {
  _has_bits_[0] &= ~0x00040000u;
}
void PyramidDataParameter::clear_use_video() {
  use_video_ = false;
  clear_has_use_video();
}
bool PyramidDataParameter::use_video() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.use_video)
  return use_video_;
}
void PyramidDataParameter::set_use_video(bool value) {
  set_has_use_video();
  use_video_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.use_video)
}

// optional string video_file = 116;
bool PyramidDataParameter::has_video_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PyramidDataParameter::set_has_video_file() {
  _has_bits_[0] |= 0x00000004u;
}
void PyramidDataParameter::clear_has_video_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void PyramidDataParameter::clear_video_file() {
  video_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_file();
}
const ::std::string& PyramidDataParameter::video_file() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.video_file)
  return video_file_.GetNoArena();
}
void PyramidDataParameter::set_video_file(const ::std::string& value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.video_file)
}
#if LANG_CXX11
void PyramidDataParameter::set_video_file(::std::string&& value) {
  set_has_video_file();
  video_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.video_file)
}
#endif
void PyramidDataParameter::set_video_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.video_file)
}
void PyramidDataParameter::set_video_file(const char* value, size_t size) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.video_file)
}
::std::string* PyramidDataParameter::mutable_video_file() {
  set_has_video_file();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.video_file)
  return video_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PyramidDataParameter::release_video_file() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.video_file)
  clear_has_video_file();
  return video_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PyramidDataParameter::set_allocated_video_file(::std::string* video_file) {
  if (video_file != NULL) {
    set_has_video_file();
  } else {
    clear_has_video_file();
  }
  video_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.video_file)
}

// optional string list_file = 117;
bool PyramidDataParameter::has_list_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PyramidDataParameter::set_has_list_file() {
  _has_bits_[0] |= 0x00000008u;
}
void PyramidDataParameter::clear_has_list_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void PyramidDataParameter::clear_list_file() {
  list_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_list_file();
}
const ::std::string& PyramidDataParameter::list_file() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.list_file)
  return list_file_.GetNoArena();
}
void PyramidDataParameter::set_list_file(const ::std::string& value) {
  set_has_list_file();
  list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.list_file)
}
#if LANG_CXX11
void PyramidDataParameter::set_list_file(::std::string&& value) {
  set_has_list_file();
  list_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PyramidDataParameter.list_file)
}
#endif
void PyramidDataParameter::set_list_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_list_file();
  list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PyramidDataParameter.list_file)
}
void PyramidDataParameter::set_list_file(const char* value, size_t size) {
  set_has_list_file();
  list_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PyramidDataParameter.list_file)
}
::std::string* PyramidDataParameter::mutable_list_file() {
  set_has_list_file();
  // @@protoc_insertion_point(field_mutable:caffe.PyramidDataParameter.list_file)
  return list_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PyramidDataParameter::release_list_file() {
  // @@protoc_insertion_point(field_release:caffe.PyramidDataParameter.list_file)
  clear_has_list_file();
  return list_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PyramidDataParameter::set_allocated_list_file(::std::string* list_file) {
  if (list_file != NULL) {
    set_has_list_file();
  } else {
    clear_has_list_file();
  }
  list_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PyramidDataParameter.list_file)
}

// optional uint32 device = 118 [default = 0];
bool PyramidDataParameter::has_device() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PyramidDataParameter::set_has_device() {
  _has_bits_[0] |= 0x00080000u;
}
void PyramidDataParameter::clear_has_device() {
  _has_bits_[0] &= ~0x00080000u;
}
void PyramidDataParameter::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 PyramidDataParameter::device() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.device)
  return device_;
}
void PyramidDataParameter::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.device)
}

// optional bool rgb = 119 [default = true];
bool PyramidDataParameter::has_rgb() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PyramidDataParameter::set_has_rgb() {
  _has_bits_[0] |= 0x01000000u;
}
void PyramidDataParameter::clear_has_rgb() {
  _has_bits_[0] &= ~0x01000000u;
}
void PyramidDataParameter::clear_rgb() {
  rgb_ = true;
  clear_has_rgb();
}
bool PyramidDataParameter::rgb() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.rgb)
  return rgb_;
}
void PyramidDataParameter::set_rgb(bool value) {
  set_has_rgb();
  rgb_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.rgb)
}

// optional bool pic_print = 120 [default = false];
bool PyramidDataParameter::has_pic_print() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PyramidDataParameter::set_has_pic_print() {
  _has_bits_[0] |= 0x00002000u;
}
void PyramidDataParameter::clear_has_pic_print() {
  _has_bits_[0] &= ~0x00002000u;
}
void PyramidDataParameter::clear_pic_print() {
  pic_print_ = false;
  clear_has_pic_print();
}
bool PyramidDataParameter::pic_print() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.pic_print)
  return pic_print_;
}
void PyramidDataParameter::set_pic_print(bool value) {
  set_has_pic_print();
  pic_print_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.pic_print)
}

// optional bool show_time = 121 [default = false];
bool PyramidDataParameter::has_show_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PyramidDataParameter::set_has_show_time() {
  _has_bits_[0] |= 0x00004000u;
}
void PyramidDataParameter::clear_has_show_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void PyramidDataParameter::clear_show_time() {
  show_time_ = false;
  clear_has_show_time();
}
bool PyramidDataParameter::show_time() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.show_time)
  return show_time_;
}
void PyramidDataParameter::set_show_time(bool value) {
  set_has_show_time();
  show_time_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.show_time)
}

// optional float resize_scale = 122 [default = 1];
bool PyramidDataParameter::has_resize_scale() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PyramidDataParameter::set_has_resize_scale() {
  _has_bits_[0] |= 0x02000000u;
}
void PyramidDataParameter::clear_has_resize_scale() {
  _has_bits_[0] &= ~0x02000000u;
}
void PyramidDataParameter::clear_resize_scale() {
  resize_scale_ = 1;
  clear_has_resize_scale();
}
float PyramidDataParameter::resize_scale() const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.resize_scale)
  return resize_scale_;
}
void PyramidDataParameter::set_resize_scale(float value) {
  set_has_resize_scale();
  resize_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.resize_scale)
}

// repeated float scales = 28;
int PyramidDataParameter::scales_size() const {
  return scales_.size();
}
void PyramidDataParameter::clear_scales() {
  scales_.Clear();
}
float PyramidDataParameter::scales(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PyramidDataParameter.scales)
  return scales_.Get(index);
}
void PyramidDataParameter::set_scales(int index, float value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PyramidDataParameter.scales)
}
void PyramidDataParameter::add_scales(float value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PyramidDataParameter.scales)
}
const ::google::protobuf::RepeatedField< float >&
PyramidDataParameter::scales() const {
  // @@protoc_insertion_point(field_list:caffe.PyramidDataParameter.scales)
  return scales_;
}
::google::protobuf::RepeatedField< float >*
PyramidDataParameter::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PyramidDataParameter.scales)
  return &scales_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NMSParameter::kNeedNmsFieldNumber;
const int NMSParameter::kOverlapRatioFieldNumber;
const int NMSParameter::kTopNFieldNumber;
const int NMSParameter::kAddScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NMSParameter::NMSParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NMSParameter)
}
NMSParameter::NMSParameter(const NMSParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&add_score_, &from.add_score_,
    reinterpret_cast<char*>(&overlap_ratio_) -
    reinterpret_cast<char*>(&add_score_) + sizeof(overlap_ratio_));
  // @@protoc_insertion_point(copy_constructor:caffe.NMSParameter)
}

void NMSParameter::SharedCtor() {
  _cached_size_ = 0;
  add_score_ = false;
  top_n_ = 100u;
  need_nms_ = true;
  overlap_ratio_ = 0.5f;
}

NMSParameter::~NMSParameter() {
  // @@protoc_insertion_point(destructor:caffe.NMSParameter)
  SharedDtor();
}

void NMSParameter::SharedDtor() {
}

void NMSParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NMSParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NMSParameter& NMSParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NMSParameter* NMSParameter::New(::google::protobuf::Arena* arena) const {
  NMSParameter* n = new NMSParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NMSParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NMSParameter)
  if (_has_bits_[0 / 32] & 15u) {
    add_score_ = false;
    top_n_ = 100u;
    need_nms_ = true;
    overlap_ratio_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NMSParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NMSParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool need_nms = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_need_nms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_ratio = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_overlap_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top_n = 3 [default = 100];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_top_n();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool add_score = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_add_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NMSParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NMSParameter)
  return false;
#undef DO_
}

void NMSParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NMSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_nms = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->need_nms(), output);
  }

  // optional float overlap_ratio = 2 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->overlap_ratio(), output);
  }

  // optional uint32 top_n = 3 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top_n(), output);
  }

  // optional bool add_score = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->add_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NMSParameter)
}

::google::protobuf::uint8* NMSParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NMSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_nms = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->need_nms(), target);
  }

  // optional float overlap_ratio = 2 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->overlap_ratio(), target);
  }

  // optional uint32 top_n = 3 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top_n(), target);
  }

  // optional bool add_score = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->add_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NMSParameter)
  return target;
}

size_t NMSParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NMSParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool add_score = 4 [default = false];
    if (has_add_score()) {
      total_size += 1 + 1;
    }

    // optional uint32 top_n = 3 [default = 100];
    if (has_top_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_n());
    }

    // optional bool need_nms = 1 [default = true];
    if (has_need_nms()) {
      total_size += 1 + 1;
    }

    // optional float overlap_ratio = 2 [default = 0.5];
    if (has_overlap_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NMSParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NMSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NMSParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NMSParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NMSParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NMSParameter)
    MergeFrom(*source);
  }
}

void NMSParameter::MergeFrom(const NMSParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NMSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      add_score_ = from.add_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_n_ = from.top_n_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_nms_ = from.need_nms_;
    }
    if (cached_has_bits & 0x00000008u) {
      overlap_ratio_ = from.overlap_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NMSParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NMSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NMSParameter::CopyFrom(const NMSParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NMSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSParameter::IsInitialized() const {
  return true;
}

void NMSParameter::Swap(NMSParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NMSParameter::InternalSwap(NMSParameter* other) {
  std::swap(add_score_, other->add_score_);
  std::swap(top_n_, other->top_n_);
  std::swap(need_nms_, other->need_nms_);
  std::swap(overlap_ratio_, other->overlap_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NMSParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NMSParameter

// optional bool need_nms = 1 [default = true];
bool NMSParameter::has_need_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NMSParameter::set_has_need_nms() {
  _has_bits_[0] |= 0x00000004u;
}
void NMSParameter::clear_has_need_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
void NMSParameter::clear_need_nms() {
  need_nms_ = true;
  clear_has_need_nms();
}
bool NMSParameter::need_nms() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.need_nms)
  return need_nms_;
}
void NMSParameter::set_need_nms(bool value) {
  set_has_need_nms();
  need_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.need_nms)
}

// optional float overlap_ratio = 2 [default = 0.5];
bool NMSParameter::has_overlap_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NMSParameter::set_has_overlap_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void NMSParameter::clear_has_overlap_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void NMSParameter::clear_overlap_ratio() {
  overlap_ratio_ = 0.5f;
  clear_has_overlap_ratio();
}
float NMSParameter::overlap_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.overlap_ratio)
  return overlap_ratio_;
}
void NMSParameter::set_overlap_ratio(float value) {
  set_has_overlap_ratio();
  overlap_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.overlap_ratio)
}

// optional uint32 top_n = 3 [default = 100];
bool NMSParameter::has_top_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NMSParameter::set_has_top_n() {
  _has_bits_[0] |= 0x00000002u;
}
void NMSParameter::clear_has_top_n() {
  _has_bits_[0] &= ~0x00000002u;
}
void NMSParameter::clear_top_n() {
  top_n_ = 100u;
  clear_has_top_n();
}
::google::protobuf::uint32 NMSParameter::top_n() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.top_n)
  return top_n_;
}
void NMSParameter::set_top_n(::google::protobuf::uint32 value) {
  set_has_top_n();
  top_n_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.top_n)
}

// optional bool add_score = 4 [default = false];
bool NMSParameter::has_add_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NMSParameter::set_has_add_score() {
  _has_bits_[0] |= 0x00000001u;
}
void NMSParameter::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void NMSParameter::clear_add_score() {
  add_score_ = false;
  clear_has_add_score();
}
bool NMSParameter::add_score() const {
  // @@protoc_insertion_point(field_get:caffe.NMSParameter.add_score)
  return add_score_;
}
void NMSParameter::set_add_score(bool value) {
  set_has_add_score();
  add_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSParameter.add_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionOutputParameter::kNmsParamFieldNumber;
const int DetectionOutputParameter::kThresholdFieldNumber;
const int DetectionOutputParameter::kChannelPerScaleFieldNumber;
const int DetectionOutputParameter::kClassNameListFieldNumber;
const int DetectionOutputParameter::kNumClassFieldNumber;
const int DetectionOutputParameter::kRefineOutOfMapBboxFieldNumber;
const int DetectionOutputParameter::kAllPosFieldNumber;
const int DetectionOutputParameter::kStepFieldNumber;
const int DetectionOutputParameter::kMeanWFieldNumber;
const int DetectionOutputParameter::kMeanHFieldNumber;
const int DetectionOutputParameter::kMeanLFieldNumber;
const int DetectionOutputParameter::kClassIndsFieldNumber;
const int DetectionOutputParameter::kDimIndsFieldNumber;
const int DetectionOutputParameter::kParsIndsFieldNumber;
const int DetectionOutputParameter::kAngleIndsFieldNumber;
const int DetectionOutputParameter::kPts8IndsFieldNumber;
const int DetectionOutputParameter::kBox2DIndsFieldNumber;
const int DetectionOutputParameter::kGroupVehFieldNumber;
const int DetectionOutputParameter::kNewClassThrFieldNumber;
const int DetectionOutputParameter::kNewClassOverlapRatioFieldNumber;
const int DetectionOutputParameter::kShallowTrackStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionOutputParameter::DetectionOutputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DetectionOutputParameter)
}
DetectionOutputParameter::DetectionOutputParameter(const DetectionOutputParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      class_name_list_(from.class_name_list_),
      mean_w_(from.mean_w_),
      mean_h_(from.mean_h_),
      mean_l_(from.mean_l_),
      class_inds_(from.class_inds_),
      dim_inds_(from.dim_inds_),
      pars_inds_(from.pars_inds_),
      angle_inds_(from.angle_inds_),
      pts8_inds_(from.pts8_inds_),
      box2d_inds_(from.box2d_inds_),
      new_class_thr_(from.new_class_thr_),
      new_class_overlap_ratio_(from.new_class_overlap_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nms_param()) {
    nms_param_ = new ::caffe::NMSParameter(*from.nms_param_);
  } else {
    nms_param_ = NULL;
  }
  ::memcpy(&all_pos_, &from.all_pos_,
    reinterpret_cast<char*>(&refine_out_of_map_bbox_) -
    reinterpret_cast<char*>(&all_pos_) + sizeof(refine_out_of_map_bbox_));
  // @@protoc_insertion_point(copy_constructor:caffe.DetectionOutputParameter)
}

void DetectionOutputParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nms_param_, 0, reinterpret_cast<char*>(&shallow_track_step_) -
    reinterpret_cast<char*>(&nms_param_) + sizeof(shallow_track_step_));
  step_ = 1u;
  threshold_ = 0.5f;
  channel_per_scale_ = 5u;
  num_class_ = 1u;
  refine_out_of_map_bbox_ = true;
}

DetectionOutputParameter::~DetectionOutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.DetectionOutputParameter)
  SharedDtor();
}

void DetectionOutputParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete nms_param_;
  }
}

void DetectionOutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionOutputParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectionOutputParameter& DetectionOutputParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectionOutputParameter* DetectionOutputParameter::New(::google::protobuf::Arena* arena) const {
  DetectionOutputParameter* n = new DetectionOutputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DetectionOutputParameter)
  class_name_list_.Clear();
  mean_w_.Clear();
  mean_h_.Clear();
  mean_l_.Clear();
  class_inds_.Clear();
  dim_inds_.Clear();
  pars_inds_.Clear();
  angle_inds_.Clear();
  pts8_inds_.Clear();
  box2d_inds_.Clear();
  new_class_thr_.Clear();
  new_class_overlap_ratio_.Clear();
  if (has_nms_param()) {
    GOOGLE_DCHECK(nms_param_ != NULL);
    nms_param_->::caffe::NMSParameter::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&all_pos_, 0, reinterpret_cast<char*>(&shallow_track_step_) -
      reinterpret_cast<char*>(&all_pos_) + sizeof(shallow_track_step_));
    step_ = 1u;
    threshold_ = 0.5f;
    channel_per_scale_ = 5u;
    num_class_ = 1u;
  }
  refine_out_of_map_bbox_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectionOutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DetectionOutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.NMSParameter nms_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nms_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float threshold = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_per_scale = 3 [default = 5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel_per_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_per_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string class_name_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name_list(this->class_name_list_size() - 1).data(),
            this->class_name_list(this->class_name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DetectionOutputParameter.class_name_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_class = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool refine_out_of_map_bbox = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_refine_out_of_map_bbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refine_out_of_map_bbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_pos = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_all_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 step = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_w = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85u, input, this->mutable_mean_w())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_w())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_h = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93u, input, this->mutable_mean_h())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_h())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_l = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101u, input, this->mutable_mean_l())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_l())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 class_inds = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_class_inds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_class_inds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 dim_inds = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112u, input, this->mutable_dim_inds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(114u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dim_inds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pars_inds = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_pars_inds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(122u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pars_inds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 angle_inds = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128u, input, this->mutable_angle_inds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(130u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_angle_inds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pts8_inds = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_pts8_inds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(138u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pts8_inds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 box2d_inds = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_box2d_inds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(146u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_box2d_inds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool group_veh = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_group_veh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_veh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float new_class_thr = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 165u, input, this->mutable_new_class_thr())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(162u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_new_class_thr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float new_class_overlap_ratio = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 173u, input, this->mutable_new_class_overlap_ratio())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(170u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_new_class_overlap_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shallow_track_step = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_shallow_track_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shallow_track_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DetectionOutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DetectionOutputParameter)
  return false;
#undef DO_
}

void DetectionOutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DetectionOutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.NMSParameter nms_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nms_param_, output);
  }

  // optional float threshold = 2 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  // optional uint32 channel_per_scale = 3 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_per_scale(), output);
  }

  // repeated string class_name_list = 4;
  for (int i = 0, n = this->class_name_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name_list(i).data(), this->class_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DetectionOutputParameter.class_name_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->class_name_list(i), output);
  }

  // optional uint32 num_class = 5 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_class(), output);
  }

  // optional bool refine_out_of_map_bbox = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->refine_out_of_map_bbox(), output);
  }

  // optional bool all_pos = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->all_pos(), output);
  }

  // optional uint32 step = 9 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->step(), output);
  }

  // repeated float mean_w = 10;
  for (int i = 0, n = this->mean_w_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->mean_w(i), output);
  }

  // repeated float mean_h = 11;
  for (int i = 0, n = this->mean_h_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->mean_h(i), output);
  }

  // repeated float mean_l = 12;
  for (int i = 0, n = this->mean_l_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->mean_l(i), output);
  }

  // repeated uint32 class_inds = 13;
  for (int i = 0, n = this->class_inds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->class_inds(i), output);
  }

  // repeated uint32 dim_inds = 14;
  for (int i = 0, n = this->dim_inds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->dim_inds(i), output);
  }

  // repeated uint32 pars_inds = 15;
  for (int i = 0, n = this->pars_inds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->pars_inds(i), output);
  }

  // repeated uint32 angle_inds = 16;
  for (int i = 0, n = this->angle_inds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->angle_inds(i), output);
  }

  // repeated uint32 pts8_inds = 17;
  for (int i = 0, n = this->pts8_inds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->pts8_inds(i), output);
  }

  // repeated uint32 box2d_inds = 18;
  for (int i = 0, n = this->box2d_inds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->box2d_inds(i), output);
  }

  // optional bool group_veh = 19 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->group_veh(), output);
  }

  // repeated float new_class_thr = 20;
  for (int i = 0, n = this->new_class_thr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      20, this->new_class_thr(i), output);
  }

  // repeated float new_class_overlap_ratio = 21;
  for (int i = 0, n = this->new_class_overlap_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      21, this->new_class_overlap_ratio(i), output);
  }

  // optional uint32 shallow_track_step = 22 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->shallow_track_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DetectionOutputParameter)
}

::google::protobuf::uint8* DetectionOutputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DetectionOutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.NMSParameter nms_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nms_param_, deterministic, target);
  }

  // optional float threshold = 2 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  // optional uint32 channel_per_scale = 3 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_per_scale(), target);
  }

  // repeated string class_name_list = 4;
  for (int i = 0, n = this->class_name_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name_list(i).data(), this->class_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DetectionOutputParameter.class_name_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->class_name_list(i), target);
  }

  // optional uint32 num_class = 5 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_class(), target);
  }

  // optional bool refine_out_of_map_bbox = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->refine_out_of_map_bbox(), target);
  }

  // optional bool all_pos = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->all_pos(), target);
  }

  // optional uint32 step = 9 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->step(), target);
  }

  // repeated float mean_w = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(10, this->mean_w_, target);

  // repeated float mean_h = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(11, this->mean_h_, target);

  // repeated float mean_l = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(12, this->mean_l_, target);

  // repeated uint32 class_inds = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->class_inds_, target);

  // repeated uint32 dim_inds = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(14, this->dim_inds_, target);

  // repeated uint32 pars_inds = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(15, this->pars_inds_, target);

  // repeated uint32 angle_inds = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(16, this->angle_inds_, target);

  // repeated uint32 pts8_inds = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->pts8_inds_, target);

  // repeated uint32 box2d_inds = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->box2d_inds_, target);

  // optional bool group_veh = 19 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->group_veh(), target);
  }

  // repeated float new_class_thr = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(20, this->new_class_thr_, target);

  // repeated float new_class_overlap_ratio = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(21, this->new_class_overlap_ratio_, target);

  // optional uint32 shallow_track_step = 22 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->shallow_track_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DetectionOutputParameter)
  return target;
}

size_t DetectionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DetectionOutputParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string class_name_list = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->class_name_list_size());
  for (int i = 0, n = this->class_name_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_name_list(i));
  }

  // repeated float mean_w = 10;
  {
    unsigned int count = this->mean_w_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_w_size());
    total_size += data_size;
  }

  // repeated float mean_h = 11;
  {
    unsigned int count = this->mean_h_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_h_size());
    total_size += data_size;
  }

  // repeated float mean_l = 12;
  {
    unsigned int count = this->mean_l_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_l_size());
    total_size += data_size;
  }

  // repeated uint32 class_inds = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->class_inds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->class_inds_size());
    total_size += data_size;
  }

  // repeated uint32 dim_inds = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dim_inds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dim_inds_size());
    total_size += data_size;
  }

  // repeated uint32 pars_inds = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pars_inds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pars_inds_size());
    total_size += data_size;
  }

  // repeated uint32 angle_inds = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->angle_inds_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->angle_inds_size());
    total_size += data_size;
  }

  // repeated uint32 pts8_inds = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pts8_inds_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->pts8_inds_size());
    total_size += data_size;
  }

  // repeated uint32 box2d_inds = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->box2d_inds_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->box2d_inds_size());
    total_size += data_size;
  }

  // repeated float new_class_thr = 20;
  {
    unsigned int count = this->new_class_thr_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->new_class_thr_size());
    total_size += data_size;
  }

  // repeated float new_class_overlap_ratio = 21;
  {
    unsigned int count = this->new_class_overlap_ratio_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->new_class_overlap_ratio_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.NMSParameter nms_param = 1;
    if (has_nms_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nms_param_);
    }

    // optional bool all_pos = 7 [default = false];
    if (has_all_pos()) {
      total_size += 1 + 1;
    }

    // optional bool group_veh = 19 [default = false];
    if (has_group_veh()) {
      total_size += 2 + 1;
    }

    // optional uint32 shallow_track_step = 22 [default = 0];
    if (has_shallow_track_step()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shallow_track_step());
    }

    // optional uint32 step = 9 [default = 1];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional float threshold = 2 [default = 0.5];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // optional uint32 channel_per_scale = 3 [default = 5];
    if (has_channel_per_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_per_scale());
    }

    // optional uint32 num_class = 5 [default = 1];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

  }
  // optional bool refine_out_of_map_bbox = 6 [default = true];
  if (has_refine_out_of_map_bbox()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionOutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DetectionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionOutputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionOutputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DetectionOutputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DetectionOutputParameter)
    MergeFrom(*source);
  }
}

void DetectionOutputParameter::MergeFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DetectionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_name_list_.MergeFrom(from.class_name_list_);
  mean_w_.MergeFrom(from.mean_w_);
  mean_h_.MergeFrom(from.mean_h_);
  mean_l_.MergeFrom(from.mean_l_);
  class_inds_.MergeFrom(from.class_inds_);
  dim_inds_.MergeFrom(from.dim_inds_);
  pars_inds_.MergeFrom(from.pars_inds_);
  angle_inds_.MergeFrom(from.angle_inds_);
  pts8_inds_.MergeFrom(from.pts8_inds_);
  box2d_inds_.MergeFrom(from.box2d_inds_);
  new_class_thr_.MergeFrom(from.new_class_thr_);
  new_class_overlap_ratio_.MergeFrom(from.new_class_overlap_ratio_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_nms_param()->::caffe::NMSParameter::MergeFrom(from.nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      all_pos_ = from.all_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_veh_ = from.group_veh_;
    }
    if (cached_has_bits & 0x00000008u) {
      shallow_track_step_ = from.shallow_track_step_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000020u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_per_scale_ = from.channel_per_scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_class_ = from.num_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_refine_out_of_map_bbox(from.refine_out_of_map_bbox());
  }
}

void DetectionOutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DetectionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionOutputParameter::CopyFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DetectionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOutputParameter::IsInitialized() const {
  return true;
}

void DetectionOutputParameter::Swap(DetectionOutputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionOutputParameter::InternalSwap(DetectionOutputParameter* other) {
  class_name_list_.InternalSwap(&other->class_name_list_);
  mean_w_.InternalSwap(&other->mean_w_);
  mean_h_.InternalSwap(&other->mean_h_);
  mean_l_.InternalSwap(&other->mean_l_);
  class_inds_.InternalSwap(&other->class_inds_);
  dim_inds_.InternalSwap(&other->dim_inds_);
  pars_inds_.InternalSwap(&other->pars_inds_);
  angle_inds_.InternalSwap(&other->angle_inds_);
  pts8_inds_.InternalSwap(&other->pts8_inds_);
  box2d_inds_.InternalSwap(&other->box2d_inds_);
  new_class_thr_.InternalSwap(&other->new_class_thr_);
  new_class_overlap_ratio_.InternalSwap(&other->new_class_overlap_ratio_);
  std::swap(nms_param_, other->nms_param_);
  std::swap(all_pos_, other->all_pos_);
  std::swap(group_veh_, other->group_veh_);
  std::swap(shallow_track_step_, other->shallow_track_step_);
  std::swap(step_, other->step_);
  std::swap(threshold_, other->threshold_);
  std::swap(channel_per_scale_, other->channel_per_scale_);
  std::swap(num_class_, other->num_class_);
  std::swap(refine_out_of_map_bbox_, other->refine_out_of_map_bbox_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectionOutputParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectionOutputParameter

// optional .caffe.NMSParameter nms_param = 1;
bool DetectionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NMSParameter::Clear();
  clear_has_nms_param();
}
const ::caffe::NMSParameter& DetectionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::caffe::NMSParameter::internal_default_instance();
}
::caffe::NMSParameter* DetectionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NMSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.nms_param)
  return nms_param_;
}
::caffe::NMSParameter* DetectionOutputParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NMSParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
void DetectionOutputParameter::set_allocated_nms_param(::caffe::NMSParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputParameter.nms_param)
}

// optional float threshold = 2 [default = 0.5];
bool DetectionOutputParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DetectionOutputParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void DetectionOutputParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void DetectionOutputParameter::clear_threshold() {
  threshold_ = 0.5f;
  clear_has_threshold();
}
float DetectionOutputParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.threshold)
  return threshold_;
}
void DetectionOutputParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.threshold)
}

// optional uint32 channel_per_scale = 3 [default = 5];
bool DetectionOutputParameter::has_channel_per_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DetectionOutputParameter::set_has_channel_per_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void DetectionOutputParameter::clear_has_channel_per_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void DetectionOutputParameter::clear_channel_per_scale() {
  channel_per_scale_ = 5u;
  clear_has_channel_per_scale();
}
::google::protobuf::uint32 DetectionOutputParameter::channel_per_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.channel_per_scale)
  return channel_per_scale_;
}
void DetectionOutputParameter::set_channel_per_scale(::google::protobuf::uint32 value) {
  set_has_channel_per_scale();
  channel_per_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.channel_per_scale)
}

// repeated string class_name_list = 4;
int DetectionOutputParameter::class_name_list_size() const {
  return class_name_list_.size();
}
void DetectionOutputParameter::clear_class_name_list() {
  class_name_list_.Clear();
}
const ::std::string& DetectionOutputParameter::class_name_list(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_.Get(index);
}
::std::string* DetectionOutputParameter::mutable_class_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_.Mutable(index);
}
void DetectionOutputParameter::set_class_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.class_name_list)
  class_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DetectionOutputParameter::set_class_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.class_name_list)
  class_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
void DetectionOutputParameter::set_class_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.DetectionOutputParameter.class_name_list)
}
void DetectionOutputParameter::set_class_name_list(int index, const char* value, size_t size) {
  class_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionOutputParameter.class_name_list)
}
::std::string* DetectionOutputParameter::add_class_name_list() {
  // @@protoc_insertion_point(field_add_mutable:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_.Add();
}
void DetectionOutputParameter::add_class_name_list(const ::std::string& value) {
  class_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.class_name_list)
}
#if LANG_CXX11
void DetectionOutputParameter::add_class_name_list(::std::string&& value) {
  class_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.class_name_list)
}
#endif
void DetectionOutputParameter::add_class_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.DetectionOutputParameter.class_name_list)
}
void DetectionOutputParameter::add_class_name_list(const char* value, size_t size) {
  class_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.DetectionOutputParameter.class_name_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DetectionOutputParameter::class_name_list() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.class_name_list)
  return class_name_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DetectionOutputParameter::mutable_class_name_list() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.class_name_list)
  return &class_name_list_;
}

// optional uint32 num_class = 5 [default = 1];
bool DetectionOutputParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DetectionOutputParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000080u;
}
void DetectionOutputParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000080u;
}
void DetectionOutputParameter::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
::google::protobuf::uint32 DetectionOutputParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.num_class)
  return num_class_;
}
void DetectionOutputParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.num_class)
}

// optional bool refine_out_of_map_bbox = 6 [default = true];
bool DetectionOutputParameter::has_refine_out_of_map_bbox() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DetectionOutputParameter::set_has_refine_out_of_map_bbox() {
  _has_bits_[0] |= 0x00000100u;
}
void DetectionOutputParameter::clear_has_refine_out_of_map_bbox() {
  _has_bits_[0] &= ~0x00000100u;
}
void DetectionOutputParameter::clear_refine_out_of_map_bbox() {
  refine_out_of_map_bbox_ = true;
  clear_has_refine_out_of_map_bbox();
}
bool DetectionOutputParameter::refine_out_of_map_bbox() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.refine_out_of_map_bbox)
  return refine_out_of_map_bbox_;
}
void DetectionOutputParameter::set_refine_out_of_map_bbox(bool value) {
  set_has_refine_out_of_map_bbox();
  refine_out_of_map_bbox_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.refine_out_of_map_bbox)
}

// optional bool all_pos = 7 [default = false];
bool DetectionOutputParameter::has_all_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectionOutputParameter::set_has_all_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectionOutputParameter::clear_has_all_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectionOutputParameter::clear_all_pos() {
  all_pos_ = false;
  clear_has_all_pos();
}
bool DetectionOutputParameter::all_pos() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.all_pos)
  return all_pos_;
}
void DetectionOutputParameter::set_all_pos(bool value) {
  set_has_all_pos();
  all_pos_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.all_pos)
}

// optional uint32 step = 9 [default = 1];
bool DetectionOutputParameter::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DetectionOutputParameter::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
void DetectionOutputParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
void DetectionOutputParameter::clear_step() {
  step_ = 1u;
  clear_has_step();
}
::google::protobuf::uint32 DetectionOutputParameter::step() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.step)
  return step_;
}
void DetectionOutputParameter::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.step)
}

// repeated float mean_w = 10;
int DetectionOutputParameter::mean_w_size() const {
  return mean_w_.size();
}
void DetectionOutputParameter::clear_mean_w() {
  mean_w_.Clear();
}
float DetectionOutputParameter::mean_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.mean_w)
  return mean_w_.Get(index);
}
void DetectionOutputParameter::set_mean_w(int index, float value) {
  mean_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.mean_w)
}
void DetectionOutputParameter::add_mean_w(float value) {
  mean_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.mean_w)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::mean_w() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.mean_w)
  return mean_w_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_mean_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.mean_w)
  return &mean_w_;
}

// repeated float mean_h = 11;
int DetectionOutputParameter::mean_h_size() const {
  return mean_h_.size();
}
void DetectionOutputParameter::clear_mean_h() {
  mean_h_.Clear();
}
float DetectionOutputParameter::mean_h(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.mean_h)
  return mean_h_.Get(index);
}
void DetectionOutputParameter::set_mean_h(int index, float value) {
  mean_h_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.mean_h)
}
void DetectionOutputParameter::add_mean_h(float value) {
  mean_h_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.mean_h)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::mean_h() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.mean_h)
  return mean_h_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_mean_h() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.mean_h)
  return &mean_h_;
}

// repeated float mean_l = 12;
int DetectionOutputParameter::mean_l_size() const {
  return mean_l_.size();
}
void DetectionOutputParameter::clear_mean_l() {
  mean_l_.Clear();
}
float DetectionOutputParameter::mean_l(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.mean_l)
  return mean_l_.Get(index);
}
void DetectionOutputParameter::set_mean_l(int index, float value) {
  mean_l_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.mean_l)
}
void DetectionOutputParameter::add_mean_l(float value) {
  mean_l_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.mean_l)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::mean_l() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.mean_l)
  return mean_l_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_mean_l() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.mean_l)
  return &mean_l_;
}

// repeated uint32 class_inds = 13;
int DetectionOutputParameter::class_inds_size() const {
  return class_inds_.size();
}
void DetectionOutputParameter::clear_class_inds() {
  class_inds_.Clear();
}
::google::protobuf::uint32 DetectionOutputParameter::class_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.class_inds)
  return class_inds_.Get(index);
}
void DetectionOutputParameter::set_class_inds(int index, ::google::protobuf::uint32 value) {
  class_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.class_inds)
}
void DetectionOutputParameter::add_class_inds(::google::protobuf::uint32 value) {
  class_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.class_inds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::class_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.class_inds)
  return class_inds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_class_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.class_inds)
  return &class_inds_;
}

// repeated uint32 dim_inds = 14;
int DetectionOutputParameter::dim_inds_size() const {
  return dim_inds_.size();
}
void DetectionOutputParameter::clear_dim_inds() {
  dim_inds_.Clear();
}
::google::protobuf::uint32 DetectionOutputParameter::dim_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.dim_inds)
  return dim_inds_.Get(index);
}
void DetectionOutputParameter::set_dim_inds(int index, ::google::protobuf::uint32 value) {
  dim_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.dim_inds)
}
void DetectionOutputParameter::add_dim_inds(::google::protobuf::uint32 value) {
  dim_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.dim_inds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::dim_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.dim_inds)
  return dim_inds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_dim_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.dim_inds)
  return &dim_inds_;
}

// repeated uint32 pars_inds = 15;
int DetectionOutputParameter::pars_inds_size() const {
  return pars_inds_.size();
}
void DetectionOutputParameter::clear_pars_inds() {
  pars_inds_.Clear();
}
::google::protobuf::uint32 DetectionOutputParameter::pars_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.pars_inds)
  return pars_inds_.Get(index);
}
void DetectionOutputParameter::set_pars_inds(int index, ::google::protobuf::uint32 value) {
  pars_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.pars_inds)
}
void DetectionOutputParameter::add_pars_inds(::google::protobuf::uint32 value) {
  pars_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.pars_inds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::pars_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.pars_inds)
  return pars_inds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_pars_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.pars_inds)
  return &pars_inds_;
}

// repeated uint32 angle_inds = 16;
int DetectionOutputParameter::angle_inds_size() const {
  return angle_inds_.size();
}
void DetectionOutputParameter::clear_angle_inds() {
  angle_inds_.Clear();
}
::google::protobuf::uint32 DetectionOutputParameter::angle_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.angle_inds)
  return angle_inds_.Get(index);
}
void DetectionOutputParameter::set_angle_inds(int index, ::google::protobuf::uint32 value) {
  angle_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.angle_inds)
}
void DetectionOutputParameter::add_angle_inds(::google::protobuf::uint32 value) {
  angle_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.angle_inds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::angle_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.angle_inds)
  return angle_inds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_angle_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.angle_inds)
  return &angle_inds_;
}

// repeated uint32 pts8_inds = 17;
int DetectionOutputParameter::pts8_inds_size() const {
  return pts8_inds_.size();
}
void DetectionOutputParameter::clear_pts8_inds() {
  pts8_inds_.Clear();
}
::google::protobuf::uint32 DetectionOutputParameter::pts8_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.pts8_inds)
  return pts8_inds_.Get(index);
}
void DetectionOutputParameter::set_pts8_inds(int index, ::google::protobuf::uint32 value) {
  pts8_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.pts8_inds)
}
void DetectionOutputParameter::add_pts8_inds(::google::protobuf::uint32 value) {
  pts8_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.pts8_inds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::pts8_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.pts8_inds)
  return pts8_inds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_pts8_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.pts8_inds)
  return &pts8_inds_;
}

// repeated uint32 box2d_inds = 18;
int DetectionOutputParameter::box2d_inds_size() const {
  return box2d_inds_.size();
}
void DetectionOutputParameter::clear_box2d_inds() {
  box2d_inds_.Clear();
}
::google::protobuf::uint32 DetectionOutputParameter::box2d_inds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.box2d_inds)
  return box2d_inds_.Get(index);
}
void DetectionOutputParameter::set_box2d_inds(int index, ::google::protobuf::uint32 value) {
  box2d_inds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.box2d_inds)
}
void DetectionOutputParameter::add_box2d_inds(::google::protobuf::uint32 value) {
  box2d_inds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.box2d_inds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputParameter::box2d_inds() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.box2d_inds)
  return box2d_inds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputParameter::mutable_box2d_inds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.box2d_inds)
  return &box2d_inds_;
}

// optional bool group_veh = 19 [default = false];
bool DetectionOutputParameter::has_group_veh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectionOutputParameter::set_has_group_veh() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectionOutputParameter::clear_has_group_veh() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectionOutputParameter::clear_group_veh() {
  group_veh_ = false;
  clear_has_group_veh();
}
bool DetectionOutputParameter::group_veh() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.group_veh)
  return group_veh_;
}
void DetectionOutputParameter::set_group_veh(bool value) {
  set_has_group_veh();
  group_veh_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.group_veh)
}

// repeated float new_class_thr = 20;
int DetectionOutputParameter::new_class_thr_size() const {
  return new_class_thr_.size();
}
void DetectionOutputParameter::clear_new_class_thr() {
  new_class_thr_.Clear();
}
float DetectionOutputParameter::new_class_thr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.new_class_thr)
  return new_class_thr_.Get(index);
}
void DetectionOutputParameter::set_new_class_thr(int index, float value) {
  new_class_thr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.new_class_thr)
}
void DetectionOutputParameter::add_new_class_thr(float value) {
  new_class_thr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.new_class_thr)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::new_class_thr() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.new_class_thr)
  return new_class_thr_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_new_class_thr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.new_class_thr)
  return &new_class_thr_;
}

// repeated float new_class_overlap_ratio = 21;
int DetectionOutputParameter::new_class_overlap_ratio_size() const {
  return new_class_overlap_ratio_.size();
}
void DetectionOutputParameter::clear_new_class_overlap_ratio() {
  new_class_overlap_ratio_.Clear();
}
float DetectionOutputParameter::new_class_overlap_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.new_class_overlap_ratio)
  return new_class_overlap_ratio_.Get(index);
}
void DetectionOutputParameter::set_new_class_overlap_ratio(int index, float value) {
  new_class_overlap_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.new_class_overlap_ratio)
}
void DetectionOutputParameter::add_new_class_overlap_ratio(float value) {
  new_class_overlap_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.new_class_overlap_ratio)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputParameter::new_class_overlap_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.new_class_overlap_ratio)
  return new_class_overlap_ratio_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputParameter::mutable_new_class_overlap_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.new_class_overlap_ratio)
  return &new_class_overlap_ratio_;
}

// optional uint32 shallow_track_step = 22 [default = 0];
bool DetectionOutputParameter::has_shallow_track_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DetectionOutputParameter::set_has_shallow_track_step() {
  _has_bits_[0] |= 0x00000008u;
}
void DetectionOutputParameter::clear_has_shallow_track_step() {
  _has_bits_[0] &= ~0x00000008u;
}
void DetectionOutputParameter::clear_shallow_track_step() {
  shallow_track_step_ = 0u;
  clear_has_shallow_track_step();
}
::google::protobuf::uint32 DetectionOutputParameter::shallow_track_step() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.shallow_track_step)
  return shallow_track_step_;
}
void DetectionOutputParameter::set_shallow_track_step(::google::protobuf::uint32 value) {
  set_has_shallow_track_step();
  shallow_track_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.shallow_track_step)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIDataParam::kPosIouRatioFieldNumber;
const int ROIDataParam::kNegIouRatioFieldNumber;
const int ROIDataParam::kNumClassFieldNumber;
const int ROIDataParam::kNeedBalanceFieldNumber;
const int ROIDataParam::kNegRatioFieldNumber;
const int ROIDataParam::kHardRatioFieldNumber;
const int ROIDataParam::kHardThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIDataParam::ROIDataParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ROIDataParam)
}
ROIDataParam::ROIDataParam(const ROIDataParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&need_balance_, &from.need_balance_,
    reinterpret_cast<char*>(&hard_threshold_) -
    reinterpret_cast<char*>(&need_balance_) + sizeof(hard_threshold_));
  // @@protoc_insertion_point(copy_constructor:caffe.ROIDataParam)
}

void ROIDataParam::SharedCtor() {
  _cached_size_ = 0;
  need_balance_ = false;
  pos_iou_ratio_ = 0.7f;
  neg_iou_ratio_ = 0.5f;
  num_class_ = 1u;
  neg_ratio_ = 0.75f;
  hard_ratio_ = 1;
  hard_threshold_ = 0.1f;
}

ROIDataParam::~ROIDataParam() {
  // @@protoc_insertion_point(destructor:caffe.ROIDataParam)
  SharedDtor();
}

void ROIDataParam::SharedDtor() {
}

void ROIDataParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIDataParam::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROIDataParam& ROIDataParam::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROIDataParam* ROIDataParam::New(::google::protobuf::Arena* arena) const {
  ROIDataParam* n = new ROIDataParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIDataParam::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ROIDataParam)
  if (_has_bits_[0 / 32] & 127u) {
    need_balance_ = false;
    pos_iou_ratio_ = 0.7f;
    neg_iou_ratio_ = 0.5f;
    num_class_ = 1u;
    neg_ratio_ = 0.75f;
    hard_ratio_ = 1;
    hard_threshold_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROIDataParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ROIDataParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pos_iou_ratio = 1 [default = 0.7];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_pos_iou_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_iou_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_iou_ratio = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_neg_iou_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_iou_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_class = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_balance = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_need_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_ratio = 5 [default = 0.75];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_neg_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hard_ratio = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_hard_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hard_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hard_threshold = 7 [default = 0.1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_hard_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hard_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ROIDataParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ROIDataParam)
  return false;
#undef DO_
}

void ROIDataParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ROIDataParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pos_iou_ratio = 1 [default = 0.7];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pos_iou_ratio(), output);
  }

  // optional float neg_iou_ratio = 2 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->neg_iou_ratio(), output);
  }

  // optional uint32 num_class = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_class(), output);
  }

  // optional bool need_balance = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_balance(), output);
  }

  // optional float neg_ratio = 5 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->neg_ratio(), output);
  }

  // optional float hard_ratio = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hard_ratio(), output);
  }

  // optional float hard_threshold = 7 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hard_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ROIDataParam)
}

::google::protobuf::uint8* ROIDataParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ROIDataParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pos_iou_ratio = 1 [default = 0.7];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pos_iou_ratio(), target);
  }

  // optional float neg_iou_ratio = 2 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->neg_iou_ratio(), target);
  }

  // optional uint32 num_class = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_class(), target);
  }

  // optional bool need_balance = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_balance(), target);
  }

  // optional float neg_ratio = 5 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->neg_ratio(), target);
  }

  // optional float hard_ratio = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hard_ratio(), target);
  }

  // optional float hard_threshold = 7 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hard_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ROIDataParam)
  return target;
}

size_t ROIDataParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ROIDataParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool need_balance = 4 [default = false];
    if (has_need_balance()) {
      total_size += 1 + 1;
    }

    // optional float pos_iou_ratio = 1 [default = 0.7];
    if (has_pos_iou_ratio()) {
      total_size += 1 + 4;
    }

    // optional float neg_iou_ratio = 2 [default = 0.5];
    if (has_neg_iou_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_class = 3 [default = 1];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

    // optional float neg_ratio = 5 [default = 0.75];
    if (has_neg_ratio()) {
      total_size += 1 + 4;
    }

    // optional float hard_ratio = 6 [default = 1];
    if (has_hard_ratio()) {
      total_size += 1 + 4;
    }

    // optional float hard_threshold = 7 [default = 0.1];
    if (has_hard_threshold()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIDataParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ROIDataParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIDataParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIDataParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ROIDataParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ROIDataParam)
    MergeFrom(*source);
  }
}

void ROIDataParam::MergeFrom(const ROIDataParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ROIDataParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      need_balance_ = from.need_balance_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_iou_ratio_ = from.pos_iou_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      neg_iou_ratio_ = from.neg_iou_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_class_ = from.num_class_;
    }
    if (cached_has_bits & 0x00000010u) {
      neg_ratio_ = from.neg_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      hard_ratio_ = from.hard_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      hard_threshold_ = from.hard_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIDataParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ROIDataParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIDataParam::CopyFrom(const ROIDataParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ROIDataParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIDataParam::IsInitialized() const {
  return true;
}

void ROIDataParam::Swap(ROIDataParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIDataParam::InternalSwap(ROIDataParam* other) {
  std::swap(need_balance_, other->need_balance_);
  std::swap(pos_iou_ratio_, other->pos_iou_ratio_);
  std::swap(neg_iou_ratio_, other->neg_iou_ratio_);
  std::swap(num_class_, other->num_class_);
  std::swap(neg_ratio_, other->neg_ratio_);
  std::swap(hard_ratio_, other->hard_ratio_);
  std::swap(hard_threshold_, other->hard_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIDataParam::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIDataParam

// optional float pos_iou_ratio = 1 [default = 0.7];
bool ROIDataParam::has_pos_iou_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIDataParam::set_has_pos_iou_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIDataParam::clear_has_pos_iou_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIDataParam::clear_pos_iou_ratio() {
  pos_iou_ratio_ = 0.7f;
  clear_has_pos_iou_ratio();
}
float ROIDataParam::pos_iou_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.pos_iou_ratio)
  return pos_iou_ratio_;
}
void ROIDataParam::set_pos_iou_ratio(float value) {
  set_has_pos_iou_ratio();
  pos_iou_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.pos_iou_ratio)
}

// optional float neg_iou_ratio = 2 [default = 0.5];
bool ROIDataParam::has_neg_iou_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROIDataParam::set_has_neg_iou_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void ROIDataParam::clear_has_neg_iou_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROIDataParam::clear_neg_iou_ratio() {
  neg_iou_ratio_ = 0.5f;
  clear_has_neg_iou_ratio();
}
float ROIDataParam::neg_iou_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.neg_iou_ratio)
  return neg_iou_ratio_;
}
void ROIDataParam::set_neg_iou_ratio(float value) {
  set_has_neg_iou_ratio();
  neg_iou_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.neg_iou_ratio)
}

// optional uint32 num_class = 3 [default = 1];
bool ROIDataParam::has_num_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ROIDataParam::set_has_num_class() {
  _has_bits_[0] |= 0x00000008u;
}
void ROIDataParam::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000008u;
}
void ROIDataParam::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
::google::protobuf::uint32 ROIDataParam::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.num_class)
  return num_class_;
}
void ROIDataParam::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.num_class)
}

// optional bool need_balance = 4 [default = false];
bool ROIDataParam::has_need_balance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIDataParam::set_has_need_balance() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIDataParam::clear_has_need_balance() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIDataParam::clear_need_balance() {
  need_balance_ = false;
  clear_has_need_balance();
}
bool ROIDataParam::need_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.need_balance)
  return need_balance_;
}
void ROIDataParam::set_need_balance(bool value) {
  set_has_need_balance();
  need_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.need_balance)
}

// optional float neg_ratio = 5 [default = 0.75];
bool ROIDataParam::has_neg_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ROIDataParam::set_has_neg_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
void ROIDataParam::clear_has_neg_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
void ROIDataParam::clear_neg_ratio() {
  neg_ratio_ = 0.75f;
  clear_has_neg_ratio();
}
float ROIDataParam::neg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.neg_ratio)
  return neg_ratio_;
}
void ROIDataParam::set_neg_ratio(float value) {
  set_has_neg_ratio();
  neg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.neg_ratio)
}

// optional float hard_ratio = 6 [default = 1];
bool ROIDataParam::has_hard_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ROIDataParam::set_has_hard_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
void ROIDataParam::clear_has_hard_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
void ROIDataParam::clear_hard_ratio() {
  hard_ratio_ = 1;
  clear_has_hard_ratio();
}
float ROIDataParam::hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.hard_ratio)
  return hard_ratio_;
}
void ROIDataParam::set_hard_ratio(float value) {
  set_has_hard_ratio();
  hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.hard_ratio)
}

// optional float hard_threshold = 7 [default = 0.1];
bool ROIDataParam::has_hard_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ROIDataParam::set_has_hard_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
void ROIDataParam::clear_has_hard_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
void ROIDataParam::clear_hard_threshold() {
  hard_threshold_ = 0.1f;
  clear_has_hard_threshold();
}
float ROIDataParam::hard_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ROIDataParam.hard_threshold)
  return hard_threshold_;
}
void ROIDataParam::set_hard_threshold(float value) {
  set_has_hard_threshold();
  hard_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIDataParam.hard_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROI2HeatMapParam::kNumClassFieldNumber;
const int ROI2HeatMapParam::kMapWFieldNumber;
const int ROI2HeatMapParam::kMapHFieldNumber;
const int ROI2HeatMapParam::kMapNumFieldNumber;
const int ROI2HeatMapParam::kLabelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROI2HeatMapParam::ROI2HeatMapParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ROI2HeatMapParam)
}
ROI2HeatMapParam::ROI2HeatMapParam(const ROI2HeatMapParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&map_w_, &from.map_w_,
    reinterpret_cast<char*>(&label_type_) -
    reinterpret_cast<char*>(&map_w_) + sizeof(label_type_));
  // @@protoc_insertion_point(copy_constructor:caffe.ROI2HeatMapParam)
}

void ROI2HeatMapParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&map_w_, 0, reinterpret_cast<char*>(&map_num_) -
    reinterpret_cast<char*>(&map_w_) + sizeof(map_num_));
  num_class_ = 1u;
  label_type_ = 1;
}

ROI2HeatMapParam::~ROI2HeatMapParam() {
  // @@protoc_insertion_point(destructor:caffe.ROI2HeatMapParam)
  SharedDtor();
}

void ROI2HeatMapParam::SharedDtor() {
}

void ROI2HeatMapParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROI2HeatMapParam::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROI2HeatMapParam& ROI2HeatMapParam::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROI2HeatMapParam* ROI2HeatMapParam::New(::google::protobuf::Arena* arena) const {
  ROI2HeatMapParam* n = new ROI2HeatMapParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROI2HeatMapParam::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ROI2HeatMapParam)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&map_w_, 0, reinterpret_cast<char*>(&map_num_) -
      reinterpret_cast<char*>(&map_w_) + sizeof(map_num_));
    num_class_ = 1u;
    label_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROI2HeatMapParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ROI2HeatMapParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_class = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_map_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map_h = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_map_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_map_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ROI2HeatMapParam_LabelType_IsValid(value)) {
            set_label_type(static_cast< ::caffe::ROI2HeatMapParam_LabelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ROI2HeatMapParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ROI2HeatMapParam)
  return false;
#undef DO_
}

void ROI2HeatMapParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ROI2HeatMapParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_class = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_class(), output);
  }

  // optional uint32 map_w = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_w(), output);
  }

  // optional uint32 map_h = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map_h(), output);
  }

  // optional uint32 map_num = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_num(), output);
  }

  // optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->label_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ROI2HeatMapParam)
}

::google::protobuf::uint8* ROI2HeatMapParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ROI2HeatMapParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_class = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_class(), target);
  }

  // optional uint32 map_w = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_w(), target);
  }

  // optional uint32 map_h = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map_h(), target);
  }

  // optional uint32 map_num = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_num(), target);
  }

  // optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->label_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ROI2HeatMapParam)
  return target;
}

size_t ROI2HeatMapParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ROI2HeatMapParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 map_w = 2;
    if (has_map_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_w());
    }

    // optional uint32 map_h = 3;
    if (has_map_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_h());
    }

    // optional uint32 map_num = 4;
    if (has_map_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_num());
    }

    // optional uint32 num_class = 1 [default = 1];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

    // optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
    if (has_label_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->label_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROI2HeatMapParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ROI2HeatMapParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ROI2HeatMapParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROI2HeatMapParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ROI2HeatMapParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ROI2HeatMapParam)
    MergeFrom(*source);
  }
}

void ROI2HeatMapParam::MergeFrom(const ROI2HeatMapParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ROI2HeatMapParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      map_w_ = from.map_w_;
    }
    if (cached_has_bits & 0x00000002u) {
      map_h_ = from.map_h_;
    }
    if (cached_has_bits & 0x00000004u) {
      map_num_ = from.map_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_class_ = from.num_class_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_type_ = from.label_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROI2HeatMapParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ROI2HeatMapParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROI2HeatMapParam::CopyFrom(const ROI2HeatMapParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ROI2HeatMapParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROI2HeatMapParam::IsInitialized() const {
  return true;
}

void ROI2HeatMapParam::Swap(ROI2HeatMapParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROI2HeatMapParam::InternalSwap(ROI2HeatMapParam* other) {
  std::swap(map_w_, other->map_w_);
  std::swap(map_h_, other->map_h_);
  std::swap(map_num_, other->map_num_);
  std::swap(num_class_, other->num_class_);
  std::swap(label_type_, other->label_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROI2HeatMapParam::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROI2HeatMapParam

// optional uint32 num_class = 1 [default = 1];
bool ROI2HeatMapParam::has_num_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ROI2HeatMapParam::set_has_num_class() {
  _has_bits_[0] |= 0x00000008u;
}
void ROI2HeatMapParam::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000008u;
}
void ROI2HeatMapParam::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
::google::protobuf::uint32 ROI2HeatMapParam::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.num_class)
  return num_class_;
}
void ROI2HeatMapParam::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.num_class)
}

// optional uint32 map_w = 2;
bool ROI2HeatMapParam::has_map_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROI2HeatMapParam::set_has_map_w() {
  _has_bits_[0] |= 0x00000001u;
}
void ROI2HeatMapParam::clear_has_map_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROI2HeatMapParam::clear_map_w() {
  map_w_ = 0u;
  clear_has_map_w();
}
::google::protobuf::uint32 ROI2HeatMapParam::map_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.map_w)
  return map_w_;
}
void ROI2HeatMapParam::set_map_w(::google::protobuf::uint32 value) {
  set_has_map_w();
  map_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.map_w)
}

// optional uint32 map_h = 3;
bool ROI2HeatMapParam::has_map_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROI2HeatMapParam::set_has_map_h() {
  _has_bits_[0] |= 0x00000002u;
}
void ROI2HeatMapParam::clear_has_map_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROI2HeatMapParam::clear_map_h() {
  map_h_ = 0u;
  clear_has_map_h();
}
::google::protobuf::uint32 ROI2HeatMapParam::map_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.map_h)
  return map_h_;
}
void ROI2HeatMapParam::set_map_h(::google::protobuf::uint32 value) {
  set_has_map_h();
  map_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.map_h)
}

// optional uint32 map_num = 4;
bool ROI2HeatMapParam::has_map_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROI2HeatMapParam::set_has_map_num() {
  _has_bits_[0] |= 0x00000004u;
}
void ROI2HeatMapParam::clear_has_map_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROI2HeatMapParam::clear_map_num() {
  map_num_ = 0u;
  clear_has_map_num();
}
::google::protobuf::uint32 ROI2HeatMapParam::map_num() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.map_num)
  return map_num_;
}
void ROI2HeatMapParam::set_map_num(::google::protobuf::uint32 value) {
  set_has_map_num();
  map_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.map_num)
}

// optional .caffe.ROI2HeatMapParam.LabelType label_type = 5 [default = NPlus1];
bool ROI2HeatMapParam::has_label_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ROI2HeatMapParam::set_has_label_type() {
  _has_bits_[0] |= 0x00000010u;
}
void ROI2HeatMapParam::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void ROI2HeatMapParam::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
::caffe::ROI2HeatMapParam_LabelType ROI2HeatMapParam::label_type() const {
  // @@protoc_insertion_point(field_get:caffe.ROI2HeatMapParam.label_type)
  return static_cast< ::caffe::ROI2HeatMapParam_LabelType >(label_type_);
}
void ROI2HeatMapParam::set_label_type(::caffe::ROI2HeatMapParam_LabelType value) {
  assert(::caffe::ROI2HeatMapParam_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROI2HeatMapParam.label_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIRefineParam::kNumClassFieldNumber;
const int ROIRefineParam::kLabelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIRefineParam::ROIRefineParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ROIRefineParam)
}
ROIRefineParam::ROIRefineParam(const ROIRefineParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_class_, &from.num_class_,
    reinterpret_cast<char*>(&label_type_) -
    reinterpret_cast<char*>(&num_class_) + sizeof(label_type_));
  // @@protoc_insertion_point(copy_constructor:caffe.ROIRefineParam)
}

void ROIRefineParam::SharedCtor() {
  _cached_size_ = 0;
  num_class_ = 1u;
  label_type_ = 1;
}

ROIRefineParam::~ROIRefineParam() {
  // @@protoc_insertion_point(destructor:caffe.ROIRefineParam)
  SharedDtor();
}

void ROIRefineParam::SharedDtor() {
}

void ROIRefineParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIRefineParam::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROIRefineParam& ROIRefineParam::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROIRefineParam* ROIRefineParam::New(::google::protobuf::Arena* arena) const {
  ROIRefineParam* n = new ROIRefineParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIRefineParam::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ROIRefineParam)
  if (_has_bits_[0 / 32] & 3u) {
    num_class_ = 1u;
    label_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROIRefineParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ROIRefineParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_class = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ROIRefineParam_LabelType_IsValid(value)) {
            set_label_type(static_cast< ::caffe::ROIRefineParam_LabelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ROIRefineParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ROIRefineParam)
  return false;
#undef DO_
}

void ROIRefineParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ROIRefineParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_class = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_class(), output);
  }

  // optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->label_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ROIRefineParam)
}

::google::protobuf::uint8* ROIRefineParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ROIRefineParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_class = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_class(), target);
  }

  // optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->label_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ROIRefineParam)
  return target;
}

size_t ROIRefineParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ROIRefineParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 num_class = 1 [default = 1];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

    // optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
    if (has_label_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->label_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIRefineParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ROIRefineParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIRefineParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIRefineParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ROIRefineParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ROIRefineParam)
    MergeFrom(*source);
  }
}

void ROIRefineParam::MergeFrom(const ROIRefineParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ROIRefineParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      num_class_ = from.num_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      label_type_ = from.label_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIRefineParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ROIRefineParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIRefineParam::CopyFrom(const ROIRefineParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ROIRefineParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIRefineParam::IsInitialized() const {
  return true;
}

void ROIRefineParam::Swap(ROIRefineParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIRefineParam::InternalSwap(ROIRefineParam* other) {
  std::swap(num_class_, other->num_class_);
  std::swap(label_type_, other->label_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIRefineParam::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIRefineParam

// optional uint32 num_class = 1 [default = 1];
bool ROIRefineParam::has_num_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIRefineParam::set_has_num_class() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIRefineParam::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIRefineParam::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
::google::protobuf::uint32 ROIRefineParam::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ROIRefineParam.num_class)
  return num_class_;
}
void ROIRefineParam::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIRefineParam.num_class)
}

// optional .caffe.ROIRefineParam.LabelType label_type = 5 [default = NPlus1];
bool ROIRefineParam::has_label_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIRefineParam::set_has_label_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIRefineParam::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIRefineParam::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
::caffe::ROIRefineParam_LabelType ROIRefineParam::label_type() const {
  // @@protoc_insertion_point(field_get:caffe.ROIRefineParam.label_type)
  return static_cast< ::caffe::ROIRefineParam_LabelType >(label_type_);
}
void ROIRefineParam::set_label_type(::caffe::ROIRefineParam_LabelType value) {
  assert(::caffe::ROIRefineParam_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIRefineParam.label_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIShowParam::kIsInputHeatmapFieldNumber;
const int ROIShowParam::kHeatmapThresholdFieldNumber;
const int ROIShowParam::kHeatMapAFieldNumber;
const int ROIShowParam::kHeatMapBFieldNumber;
const int ROIShowParam::kMeanRFieldNumber;
const int ROIShowParam::kMeanGFieldNumber;
const int ROIShowParam::kMeanBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIShowParam::ROIShowParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ROIShowParam)
}
ROIShowParam::ROIShowParam(const ROIShowParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_input_heatmap_, &from.is_input_heatmap_,
    reinterpret_cast<char*>(&mean_b_) -
    reinterpret_cast<char*>(&is_input_heatmap_) + sizeof(mean_b_));
  // @@protoc_insertion_point(copy_constructor:caffe.ROIShowParam)
}

void ROIShowParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_input_heatmap_, 0, reinterpret_cast<char*>(&mean_b_) -
    reinterpret_cast<char*>(&is_input_heatmap_) + sizeof(mean_b_));
}

ROIShowParam::~ROIShowParam() {
  // @@protoc_insertion_point(destructor:caffe.ROIShowParam)
  SharedDtor();
}

void ROIShowParam::SharedDtor() {
}

void ROIShowParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIShowParam::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROIShowParam& ROIShowParam::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROIShowParam* ROIShowParam::New(::google::protobuf::Arena* arena) const {
  ROIShowParam* n = new ROIShowParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIShowParam::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ROIShowParam)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&is_input_heatmap_, 0, reinterpret_cast<char*>(&mean_b_) -
      reinterpret_cast<char*>(&is_input_heatmap_) + sizeof(mean_b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROIShowParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ROIShowParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_input_heatmap = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_input_heatmap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_input_heatmap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heatmap_threshold = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_heatmap_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heatmap_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heat_map_a = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_heat_map_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_map_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heat_map_b = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_heat_map_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_map_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_r = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_mean_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_g = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_mean_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_b = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_mean_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ROIShowParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ROIShowParam)
  return false;
#undef DO_
}

void ROIShowParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ROIShowParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_input_heatmap = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_input_heatmap(), output);
  }

  // optional float heatmap_threshold = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heatmap_threshold(), output);
  }

  // optional uint32 heat_map_a = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heat_map_a(), output);
  }

  // optional uint32 heat_map_b = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heat_map_b(), output);
  }

  // optional float mean_r = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mean_r(), output);
  }

  // optional float mean_g = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mean_g(), output);
  }

  // optional float mean_b = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mean_b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ROIShowParam)
}

::google::protobuf::uint8* ROIShowParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ROIShowParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_input_heatmap = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_input_heatmap(), target);
  }

  // optional float heatmap_threshold = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heatmap_threshold(), target);
  }

  // optional uint32 heat_map_a = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heat_map_a(), target);
  }

  // optional uint32 heat_map_b = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heat_map_b(), target);
  }

  // optional float mean_r = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mean_r(), target);
  }

  // optional float mean_g = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mean_g(), target);
  }

  // optional float mean_b = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mean_b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ROIShowParam)
  return target;
}

size_t ROIShowParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ROIShowParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool is_input_heatmap = 1 [default = false];
    if (has_is_input_heatmap()) {
      total_size += 1 + 1;
    }

    // optional float heatmap_threshold = 2 [default = 0];
    if (has_heatmap_threshold()) {
      total_size += 1 + 4;
    }

    // optional uint32 heat_map_a = 5;
    if (has_heat_map_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat_map_a());
    }

    // optional uint32 heat_map_b = 6;
    if (has_heat_map_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat_map_b());
    }

    // optional float mean_r = 7 [default = 0];
    if (has_mean_r()) {
      total_size += 1 + 4;
    }

    // optional float mean_g = 8 [default = 0];
    if (has_mean_g()) {
      total_size += 1 + 4;
    }

    // optional float mean_b = 9 [default = 0];
    if (has_mean_b()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIShowParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ROIShowParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIShowParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIShowParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ROIShowParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ROIShowParam)
    MergeFrom(*source);
  }
}

void ROIShowParam::MergeFrom(const ROIShowParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ROIShowParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      is_input_heatmap_ = from.is_input_heatmap_;
    }
    if (cached_has_bits & 0x00000002u) {
      heatmap_threshold_ = from.heatmap_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      heat_map_a_ = from.heat_map_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      heat_map_b_ = from.heat_map_b_;
    }
    if (cached_has_bits & 0x00000010u) {
      mean_r_ = from.mean_r_;
    }
    if (cached_has_bits & 0x00000020u) {
      mean_g_ = from.mean_g_;
    }
    if (cached_has_bits & 0x00000040u) {
      mean_b_ = from.mean_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIShowParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ROIShowParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIShowParam::CopyFrom(const ROIShowParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ROIShowParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIShowParam::IsInitialized() const {
  return true;
}

void ROIShowParam::Swap(ROIShowParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIShowParam::InternalSwap(ROIShowParam* other) {
  std::swap(is_input_heatmap_, other->is_input_heatmap_);
  std::swap(heatmap_threshold_, other->heatmap_threshold_);
  std::swap(heat_map_a_, other->heat_map_a_);
  std::swap(heat_map_b_, other->heat_map_b_);
  std::swap(mean_r_, other->mean_r_);
  std::swap(mean_g_, other->mean_g_);
  std::swap(mean_b_, other->mean_b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIShowParam::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIShowParam

// optional bool is_input_heatmap = 1 [default = false];
bool ROIShowParam::has_is_input_heatmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIShowParam::set_has_is_input_heatmap() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIShowParam::clear_has_is_input_heatmap() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIShowParam::clear_is_input_heatmap() {
  is_input_heatmap_ = false;
  clear_has_is_input_heatmap();
}
bool ROIShowParam::is_input_heatmap() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.is_input_heatmap)
  return is_input_heatmap_;
}
void ROIShowParam::set_is_input_heatmap(bool value) {
  set_has_is_input_heatmap();
  is_input_heatmap_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.is_input_heatmap)
}

// optional float heatmap_threshold = 2 [default = 0];
bool ROIShowParam::has_heatmap_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIShowParam::set_has_heatmap_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIShowParam::clear_has_heatmap_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIShowParam::clear_heatmap_threshold() {
  heatmap_threshold_ = 0;
  clear_has_heatmap_threshold();
}
float ROIShowParam::heatmap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.heatmap_threshold)
  return heatmap_threshold_;
}
void ROIShowParam::set_heatmap_threshold(float value) {
  set_has_heatmap_threshold();
  heatmap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.heatmap_threshold)
}

// optional uint32 heat_map_a = 5;
bool ROIShowParam::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROIShowParam::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000004u;
}
void ROIShowParam::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROIShowParam::clear_heat_map_a() {
  heat_map_a_ = 0u;
  clear_has_heat_map_a();
}
::google::protobuf::uint32 ROIShowParam::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.heat_map_a)
  return heat_map_a_;
}
void ROIShowParam::set_heat_map_a(::google::protobuf::uint32 value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.heat_map_a)
}

// optional uint32 heat_map_b = 6;
bool ROIShowParam::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ROIShowParam::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000008u;
}
void ROIShowParam::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000008u;
}
void ROIShowParam::clear_heat_map_b() {
  heat_map_b_ = 0u;
  clear_has_heat_map_b();
}
::google::protobuf::uint32 ROIShowParam::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.heat_map_b)
  return heat_map_b_;
}
void ROIShowParam::set_heat_map_b(::google::protobuf::uint32 value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.heat_map_b)
}

// optional float mean_r = 7 [default = 0];
bool ROIShowParam::has_mean_r() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ROIShowParam::set_has_mean_r() {
  _has_bits_[0] |= 0x00000010u;
}
void ROIShowParam::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000010u;
}
void ROIShowParam::clear_mean_r() {
  mean_r_ = 0;
  clear_has_mean_r();
}
float ROIShowParam::mean_r() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.mean_r)
  return mean_r_;
}
void ROIShowParam::set_mean_r(float value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.mean_r)
}

// optional float mean_g = 8 [default = 0];
bool ROIShowParam::has_mean_g() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ROIShowParam::set_has_mean_g() {
  _has_bits_[0] |= 0x00000020u;
}
void ROIShowParam::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000020u;
}
void ROIShowParam::clear_mean_g() {
  mean_g_ = 0;
  clear_has_mean_g();
}
float ROIShowParam::mean_g() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.mean_g)
  return mean_g_;
}
void ROIShowParam::set_mean_g(float value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.mean_g)
}

// optional float mean_b = 9 [default = 0];
bool ROIShowParam::has_mean_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ROIShowParam::set_has_mean_b() {
  _has_bits_[0] |= 0x00000040u;
}
void ROIShowParam::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000040u;
}
void ROIShowParam::clear_mean_b() {
  mean_b_ = 0;
  clear_has_mean_b();
}
float ROIShowParam::mean_b() const {
  // @@protoc_insertion_point(field_get:caffe.ROIShowParam.mean_b)
  return mean_b_;
}
void ROIShowParam::set_mean_b(float value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIShowParam.mean_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreviousStageParameter::kNetPrototxtFieldNumber;
const int PreviousStageParameter::kNetParamFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreviousStageParameter::PreviousStageParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PreviousStageParameter)
}
PreviousStageParameter::PreviousStageParameter(const PreviousStageParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_prototxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_prototxt()) {
    net_prototxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_prototxt_);
  }
  net_param_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_param_file()) {
    net_param_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_param_file_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.PreviousStageParameter)
}

void PreviousStageParameter::SharedCtor() {
  _cached_size_ = 0;
  net_prototxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_param_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PreviousStageParameter::~PreviousStageParameter() {
  // @@protoc_insertion_point(destructor:caffe.PreviousStageParameter)
  SharedDtor();
}

void PreviousStageParameter::SharedDtor() {
  net_prototxt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_param_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PreviousStageParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreviousStageParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreviousStageParameter& PreviousStageParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreviousStageParameter* PreviousStageParameter::New(::google::protobuf::Arena* arena) const {
  PreviousStageParameter* n = new PreviousStageParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreviousStageParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PreviousStageParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_net_prototxt()) {
      GOOGLE_DCHECK(!net_prototxt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*net_prototxt_.UnsafeRawStringPointer())->clear();
    }
    if (has_net_param_file()) {
      GOOGLE_DCHECK(!net_param_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*net_param_file_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreviousStageParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PreviousStageParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string net_prototxt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_prototxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_prototxt().data(), this->net_prototxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PreviousStageParameter.net_prototxt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string net_param_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_param_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_param_file().data(), this->net_param_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PreviousStageParameter.net_param_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PreviousStageParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PreviousStageParameter)
  return false;
#undef DO_
}

void PreviousStageParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PreviousStageParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string net_prototxt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_prototxt().data(), this->net_prototxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PreviousStageParameter.net_prototxt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net_prototxt(), output);
  }

  // optional string net_param_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_param_file().data(), this->net_param_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PreviousStageParameter.net_param_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net_param_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PreviousStageParameter)
}

::google::protobuf::uint8* PreviousStageParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PreviousStageParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string net_prototxt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_prototxt().data(), this->net_prototxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PreviousStageParameter.net_prototxt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net_prototxt(), target);
  }

  // optional string net_param_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_param_file().data(), this->net_param_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PreviousStageParameter.net_param_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net_param_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PreviousStageParameter)
  return target;
}

size_t PreviousStageParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PreviousStageParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string net_prototxt = 1;
    if (has_net_prototxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_prototxt());
    }

    // optional string net_param_file = 2;
    if (has_net_param_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_param_file());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreviousStageParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PreviousStageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviousStageParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreviousStageParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PreviousStageParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PreviousStageParameter)
    MergeFrom(*source);
  }
}

void PreviousStageParameter::MergeFrom(const PreviousStageParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PreviousStageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_net_prototxt();
      net_prototxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_prototxt_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_net_param_file();
      net_param_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_param_file_);
    }
  }
}

void PreviousStageParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PreviousStageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviousStageParameter::CopyFrom(const PreviousStageParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PreviousStageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviousStageParameter::IsInitialized() const {
  return true;
}

void PreviousStageParameter::Swap(PreviousStageParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreviousStageParameter::InternalSwap(PreviousStageParameter* other) {
  net_prototxt_.Swap(&other->net_prototxt_);
  net_param_file_.Swap(&other->net_param_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreviousStageParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreviousStageParameter

// optional string net_prototxt = 1;
bool PreviousStageParameter::has_net_prototxt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PreviousStageParameter::set_has_net_prototxt() {
  _has_bits_[0] |= 0x00000001u;
}
void PreviousStageParameter::clear_has_net_prototxt() {
  _has_bits_[0] &= ~0x00000001u;
}
void PreviousStageParameter::clear_net_prototxt() {
  net_prototxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_prototxt();
}
const ::std::string& PreviousStageParameter::net_prototxt() const {
  // @@protoc_insertion_point(field_get:caffe.PreviousStageParameter.net_prototxt)
  return net_prototxt_.GetNoArena();
}
void PreviousStageParameter::set_net_prototxt(const ::std::string& value) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PreviousStageParameter.net_prototxt)
}
#if LANG_CXX11
void PreviousStageParameter::set_net_prototxt(::std::string&& value) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PreviousStageParameter.net_prototxt)
}
#endif
void PreviousStageParameter::set_net_prototxt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PreviousStageParameter.net_prototxt)
}
void PreviousStageParameter::set_net_prototxt(const char* value, size_t size) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PreviousStageParameter.net_prototxt)
}
::std::string* PreviousStageParameter::mutable_net_prototxt() {
  set_has_net_prototxt();
  // @@protoc_insertion_point(field_mutable:caffe.PreviousStageParameter.net_prototxt)
  return net_prototxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreviousStageParameter::release_net_prototxt() {
  // @@protoc_insertion_point(field_release:caffe.PreviousStageParameter.net_prototxt)
  clear_has_net_prototxt();
  return net_prototxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreviousStageParameter::set_allocated_net_prototxt(::std::string* net_prototxt) {
  if (net_prototxt != NULL) {
    set_has_net_prototxt();
  } else {
    clear_has_net_prototxt();
  }
  net_prototxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_prototxt);
  // @@protoc_insertion_point(field_set_allocated:caffe.PreviousStageParameter.net_prototxt)
}

// optional string net_param_file = 2;
bool PreviousStageParameter::has_net_param_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PreviousStageParameter::set_has_net_param_file() {
  _has_bits_[0] |= 0x00000002u;
}
void PreviousStageParameter::clear_has_net_param_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void PreviousStageParameter::clear_net_param_file() {
  net_param_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_param_file();
}
const ::std::string& PreviousStageParameter::net_param_file() const {
  // @@protoc_insertion_point(field_get:caffe.PreviousStageParameter.net_param_file)
  return net_param_file_.GetNoArena();
}
void PreviousStageParameter::set_net_param_file(const ::std::string& value) {
  set_has_net_param_file();
  net_param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PreviousStageParameter.net_param_file)
}
#if LANG_CXX11
void PreviousStageParameter::set_net_param_file(::std::string&& value) {
  set_has_net_param_file();
  net_param_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PreviousStageParameter.net_param_file)
}
#endif
void PreviousStageParameter::set_net_param_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net_param_file();
  net_param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PreviousStageParameter.net_param_file)
}
void PreviousStageParameter::set_net_param_file(const char* value, size_t size) {
  set_has_net_param_file();
  net_param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PreviousStageParameter.net_param_file)
}
::std::string* PreviousStageParameter::mutable_net_param_file() {
  set_has_net_param_file();
  // @@protoc_insertion_point(field_mutable:caffe.PreviousStageParameter.net_param_file)
  return net_param_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreviousStageParameter::release_net_param_file() {
  // @@protoc_insertion_point(field_release:caffe.PreviousStageParameter.net_param_file)
  clear_has_net_param_file();
  return net_param_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreviousStageParameter::set_allocated_net_param_file(::std::string* net_param_file) {
  if (net_param_file != NULL) {
    set_has_net_param_file();
  } else {
    clear_has_net_param_file();
  }
  net_param_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_param_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PreviousStageParameter.net_param_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropParameter::kTypeFieldNumber;
const int CropParameter::kCropWFieldNumber;
const int CropParameter::kCropHFieldNumber;
const int CropParameter::kPrintInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropParameter::CropParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CropParameter)
}
CropParameter::CropParameter(const CropParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&crop_w_, &from.crop_w_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&crop_w_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:caffe.CropParameter)
}

void CropParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&crop_w_, 0, reinterpret_cast<char*>(&print_info_) -
    reinterpret_cast<char*>(&crop_w_) + sizeof(print_info_));
  type_ = 1;
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:caffe.CropParameter)
  SharedDtor();
}

void CropParameter::SharedDtor() {
}

void CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CropParameter& CropParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

CropParameter* CropParameter::New(::google::protobuf::Arena* arena) const {
  CropParameter* n = new CropParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CropParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&crop_w_, 0, reinterpret_cast<char*>(&print_info_) -
      reinterpret_cast<char*>(&crop_w_) + sizeof(print_info_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.CropParameter.Type type = 1 [default = CENTER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::CropParameter_Type_IsValid(value)) {
            set_type(static_cast< ::caffe::CropParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_w = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_crop_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_h = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_crop_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_info = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_print_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CropParameter)
  return false;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.CropParameter.Type type = 1 [default = CENTER];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 crop_w = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crop_w(), output);
  }

  // optional uint32 crop_h = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_h(), output);
  }

  // optional bool print_info = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->print_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CropParameter)
}

::google::protobuf::uint8* CropParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.CropParameter.Type type = 1 [default = CENTER];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 crop_w = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crop_w(), target);
  }

  // optional uint32 crop_h = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_h(), target);
  }

  // optional bool print_info = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->print_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CropParameter)
  return target;
}

size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CropParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 crop_w = 2 [default = 0];
    if (has_crop_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_w());
    }

    // optional uint32 crop_h = 3 [default = 0];
    if (has_crop_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_h());
    }

    // optional bool print_info = 4 [default = false];
    if (has_print_info()) {
      total_size += 1 + 1;
    }

    // optional .caffe.CropParameter.Type type = 1 [default = CENTER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CropParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CropParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CropParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CropParameter)
    MergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      crop_w_ = from.crop_w_;
    }
    if (cached_has_bits & 0x00000002u) {
      crop_h_ = from.crop_h_;
    }
    if (cached_has_bits & 0x00000004u) {
      print_info_ = from.print_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {
  return true;
}

void CropParameter::Swap(CropParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CropParameter::InternalSwap(CropParameter* other) {
  std::swap(crop_w_, other->crop_w_);
  std::swap(crop_h_, other->crop_h_);
  std::swap(print_info_, other->print_info_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CropParameter

// optional .caffe.CropParameter.Type type = 1 [default = CENTER];
bool CropParameter::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CropParameter::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CropParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CropParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
::caffe::CropParameter_Type CropParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.type)
  return static_cast< ::caffe::CropParameter_Type >(type_);
}
void CropParameter::set_type(::caffe::CropParameter_Type value) {
  assert(::caffe::CropParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.type)
}

// optional uint32 crop_w = 2 [default = 0];
bool CropParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CropParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000001u;
}
void CropParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void CropParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
::google::protobuf::uint32 CropParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.crop_w)
  return crop_w_;
}
void CropParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.crop_w)
}

// optional uint32 crop_h = 3 [default = 0];
bool CropParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CropParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000002u;
}
void CropParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void CropParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
::google::protobuf::uint32 CropParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.crop_h)
  return crop_h_;
}
void CropParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.crop_h)
}

// optional bool print_info = 4 [default = false];
bool CropParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CropParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CropParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CropParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
bool CropParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.print_info)
  return print_info_;
}
void CropParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.print_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResampleParameter::kAntialiasFieldNumber;
const int ResampleParameter::kWidthFieldNumber;
const int ResampleParameter::kHeightFieldNumber;
const int ResampleParameter::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResampleParameter::ResampleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ResampleParameter)
}
ResampleParameter::ResampleParameter(const ResampleParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&antialias_) -
    reinterpret_cast<char*>(&width_) + sizeof(antialias_));
  // @@protoc_insertion_point(copy_constructor:caffe.ResampleParameter)
}

void ResampleParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  type_ = 2;
  antialias_ = true;
}

ResampleParameter::~ResampleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ResampleParameter)
  SharedDtor();
}

void ResampleParameter::SharedDtor() {
}

void ResampleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResampleParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResampleParameter& ResampleParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResampleParameter* ResampleParameter::New(::google::protobuf::Arena* arena) const {
  ResampleParameter* n = new ResampleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResampleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ResampleParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_) + sizeof(height_));
    type_ = 2;
    antialias_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResampleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ResampleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ResampleParameter_ResampleType_IsValid(value)) {
            set_type(static_cast< ::caffe::ResampleParameter_ResampleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool antialias = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_antialias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &antialias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ResampleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ResampleParameter)
  return false;
#undef DO_
}

void ResampleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ResampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // optional uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional bool antialias = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->antialias(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ResampleParameter)
}

::google::protobuf::uint8* ResampleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ResampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // optional uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional bool antialias = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->antialias(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ResampleParameter)
  return target;
}

size_t ResampleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ResampleParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool antialias = 4 [default = true];
    if (has_antialias()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ResampleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ResampleParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResampleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ResampleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ResampleParameter)
    MergeFrom(*source);
  }
}

void ResampleParameter::MergeFrom(const ResampleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ResampleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      antialias_ = from.antialias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ResampleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResampleParameter::CopyFrom(const ResampleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ResampleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResampleParameter::IsInitialized() const {
  return true;
}

void ResampleParameter::Swap(ResampleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResampleParameter::InternalSwap(ResampleParameter* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(type_, other->type_);
  std::swap(antialias_, other->antialias_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResampleParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResampleParameter

// optional bool antialias = 4 [default = true];
bool ResampleParameter::has_antialias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResampleParameter::set_has_antialias() {
  _has_bits_[0] |= 0x00000008u;
}
void ResampleParameter::clear_has_antialias() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResampleParameter::clear_antialias() {
  antialias_ = true;
  clear_has_antialias();
}
bool ResampleParameter::antialias() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.antialias)
  return antialias_;
}
void ResampleParameter::set_antialias(bool value) {
  set_has_antialias();
  antialias_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.antialias)
}

// optional uint32 width = 1;
bool ResampleParameter::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResampleParameter::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void ResampleParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResampleParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ResampleParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.width)
  return width_;
}
void ResampleParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.width)
}

// optional uint32 height = 2;
bool ResampleParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResampleParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ResampleParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResampleParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ResampleParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.height)
  return height_;
}
void ResampleParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.height)
}

// optional .caffe.ResampleParameter.ResampleType type = 3 [default = LINEAR];
bool ResampleParameter::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResampleParameter::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ResampleParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResampleParameter::clear_type() {
  type_ = 2;
  clear_has_type();
}
::caffe::ResampleParameter_ResampleType ResampleParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.ResampleParameter.type)
  return static_cast< ::caffe::ResampleParameter_ResampleType >(type_);
}
void ResampleParameter::set_type(::caffe::ResampleParameter_ResampleType value) {
  assert(::caffe::ResampleParameter_ResampleType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResampleParameter.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenerateAnchorParameter::kBaseSizeFieldNumber;
const int GenerateAnchorParameter::kRatiosFieldNumber;
const int GenerateAnchorParameter::kScalesFieldNumber;
const int GenerateAnchorParameter::kAnchorWidthFieldNumber;
const int GenerateAnchorParameter::kAnchorHeightFieldNumber;
const int GenerateAnchorParameter::kAnchorX1FieldNumber;
const int GenerateAnchorParameter::kAnchorY1FieldNumber;
const int GenerateAnchorParameter::kAnchorX2FieldNumber;
const int GenerateAnchorParameter::kAnchorY2FieldNumber;
const int GenerateAnchorParameter::kZeroAnchorCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenerateAnchorParameter::GenerateAnchorParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GenerateAnchorParameter)
}
GenerateAnchorParameter::GenerateAnchorParameter(const GenerateAnchorParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ratios_(from.ratios_),
      scales_(from.scales_),
      anchor_width_(from.anchor_width_),
      anchor_height_(from.anchor_height_),
      anchor_x1_(from.anchor_x1_),
      anchor_y1_(from.anchor_y1_),
      anchor_x2_(from.anchor_x2_),
      anchor_y2_(from.anchor_y2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&base_size_, &from.base_size_,
    reinterpret_cast<char*>(&zero_anchor_center_) -
    reinterpret_cast<char*>(&base_size_) + sizeof(zero_anchor_center_));
  // @@protoc_insertion_point(copy_constructor:caffe.GenerateAnchorParameter)
}

void GenerateAnchorParameter::SharedCtor() {
  _cached_size_ = 0;
  base_size_ = 16;
  zero_anchor_center_ = true;
}

GenerateAnchorParameter::~GenerateAnchorParameter() {
  // @@protoc_insertion_point(destructor:caffe.GenerateAnchorParameter)
  SharedDtor();
}

void GenerateAnchorParameter::SharedDtor() {
}

void GenerateAnchorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenerateAnchorParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GenerateAnchorParameter& GenerateAnchorParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenerateAnchorParameter* GenerateAnchorParameter::New(::google::protobuf::Arena* arena) const {
  GenerateAnchorParameter* n = new GenerateAnchorParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenerateAnchorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GenerateAnchorParameter)
  ratios_.Clear();
  scales_.Clear();
  anchor_width_.Clear();
  anchor_height_.Clear();
  anchor_x1_.Clear();
  anchor_y1_.Clear();
  anchor_x2_.Clear();
  anchor_y2_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    base_size_ = 16;
    zero_anchor_center_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GenerateAnchorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GenerateAnchorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base_size = 1 [default = 16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_base_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ratios = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_ratios())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ratios())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scales = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_scales())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scales())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_anchor_width())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_anchor_height())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_x1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_anchor_x1())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_x1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_y1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_anchor_y1())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_y1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_x2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_anchor_x2())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_x2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_y2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77u, input, this->mutable_anchor_y2())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_y2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool zero_anchor_center = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_zero_anchor_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zero_anchor_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GenerateAnchorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GenerateAnchorParameter)
  return false;
#undef DO_
}

void GenerateAnchorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GenerateAnchorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base_size = 1 [default = 16];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_size(), output);
  }

  // repeated float ratios = 2;
  for (int i = 0, n = this->ratios_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->ratios(i), output);
  }

  // repeated float scales = 3;
  for (int i = 0, n = this->scales_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->scales(i), output);
  }

  // repeated float anchor_width = 4;
  for (int i = 0, n = this->anchor_width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->anchor_width(i), output);
  }

  // repeated float anchor_height = 5;
  for (int i = 0, n = this->anchor_height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->anchor_height(i), output);
  }

  // repeated float anchor_x1 = 6;
  for (int i = 0, n = this->anchor_x1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->anchor_x1(i), output);
  }

  // repeated float anchor_y1 = 7;
  for (int i = 0, n = this->anchor_y1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->anchor_y1(i), output);
  }

  // repeated float anchor_x2 = 8;
  for (int i = 0, n = this->anchor_x2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->anchor_x2(i), output);
  }

  // repeated float anchor_y2 = 9;
  for (int i = 0, n = this->anchor_y2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->anchor_y2(i), output);
  }

  // optional bool zero_anchor_center = 10 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->zero_anchor_center(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GenerateAnchorParameter)
}

::google::protobuf::uint8* GenerateAnchorParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GenerateAnchorParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base_size = 1 [default = 16];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_size(), target);
  }

  // repeated float ratios = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->ratios_, target);

  // repeated float scales = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->scales_, target);

  // repeated float anchor_width = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->anchor_width_, target);

  // repeated float anchor_height = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->anchor_height_, target);

  // repeated float anchor_x1 = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->anchor_x1_, target);

  // repeated float anchor_y1 = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->anchor_y1_, target);

  // repeated float anchor_x2 = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->anchor_x2_, target);

  // repeated float anchor_y2 = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(9, this->anchor_y2_, target);

  // optional bool zero_anchor_center = 10 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->zero_anchor_center(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GenerateAnchorParameter)
  return target;
}

size_t GenerateAnchorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GenerateAnchorParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float ratios = 2;
  {
    unsigned int count = this->ratios_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ratios_size());
    total_size += data_size;
  }

  // repeated float scales = 3;
  {
    unsigned int count = this->scales_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scales_size());
    total_size += data_size;
  }

  // repeated float anchor_width = 4;
  {
    unsigned int count = this->anchor_width_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anchor_width_size());
    total_size += data_size;
  }

  // repeated float anchor_height = 5;
  {
    unsigned int count = this->anchor_height_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anchor_height_size());
    total_size += data_size;
  }

  // repeated float anchor_x1 = 6;
  {
    unsigned int count = this->anchor_x1_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anchor_x1_size());
    total_size += data_size;
  }

  // repeated float anchor_y1 = 7;
  {
    unsigned int count = this->anchor_y1_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anchor_y1_size());
    total_size += data_size;
  }

  // repeated float anchor_x2 = 8;
  {
    unsigned int count = this->anchor_x2_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anchor_x2_size());
    total_size += data_size;
  }

  // repeated float anchor_y2 = 9;
  {
    unsigned int count = this->anchor_y2_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anchor_y2_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional float base_size = 1 [default = 16];
    if (has_base_size()) {
      total_size += 1 + 4;
    }

    // optional bool zero_anchor_center = 10 [default = true];
    if (has_zero_anchor_center()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenerateAnchorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GenerateAnchorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateAnchorParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenerateAnchorParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GenerateAnchorParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GenerateAnchorParameter)
    MergeFrom(*source);
  }
}

void GenerateAnchorParameter::MergeFrom(const GenerateAnchorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GenerateAnchorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratios_.MergeFrom(from.ratios_);
  scales_.MergeFrom(from.scales_);
  anchor_width_.MergeFrom(from.anchor_width_);
  anchor_height_.MergeFrom(from.anchor_height_);
  anchor_x1_.MergeFrom(from.anchor_x1_);
  anchor_y1_.MergeFrom(from.anchor_y1_);
  anchor_x2_.MergeFrom(from.anchor_x2_);
  anchor_y2_.MergeFrom(from.anchor_y2_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      base_size_ = from.base_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      zero_anchor_center_ = from.zero_anchor_center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenerateAnchorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GenerateAnchorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateAnchorParameter::CopyFrom(const GenerateAnchorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GenerateAnchorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateAnchorParameter::IsInitialized() const {
  return true;
}

void GenerateAnchorParameter::Swap(GenerateAnchorParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenerateAnchorParameter::InternalSwap(GenerateAnchorParameter* other) {
  ratios_.InternalSwap(&other->ratios_);
  scales_.InternalSwap(&other->scales_);
  anchor_width_.InternalSwap(&other->anchor_width_);
  anchor_height_.InternalSwap(&other->anchor_height_);
  anchor_x1_.InternalSwap(&other->anchor_x1_);
  anchor_y1_.InternalSwap(&other->anchor_y1_);
  anchor_x2_.InternalSwap(&other->anchor_x2_);
  anchor_y2_.InternalSwap(&other->anchor_y2_);
  std::swap(base_size_, other->base_size_);
  std::swap(zero_anchor_center_, other->zero_anchor_center_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenerateAnchorParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenerateAnchorParameter

// optional float base_size = 1 [default = 16];
bool GenerateAnchorParameter::has_base_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GenerateAnchorParameter::set_has_base_size() {
  _has_bits_[0] |= 0x00000001u;
}
void GenerateAnchorParameter::clear_has_base_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void GenerateAnchorParameter::clear_base_size() {
  base_size_ = 16;
  clear_has_base_size();
}
float GenerateAnchorParameter::base_size() const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.base_size)
  return base_size_;
}
void GenerateAnchorParameter::set_base_size(float value) {
  set_has_base_size();
  base_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.base_size)
}

// repeated float ratios = 2;
int GenerateAnchorParameter::ratios_size() const {
  return ratios_.size();
}
void GenerateAnchorParameter::clear_ratios() {
  ratios_.Clear();
}
float GenerateAnchorParameter::ratios(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.ratios)
  return ratios_.Get(index);
}
void GenerateAnchorParameter::set_ratios(int index, float value) {
  ratios_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.ratios)
}
void GenerateAnchorParameter::add_ratios(float value) {
  ratios_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.ratios)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::ratios() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.ratios)
  return ratios_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_ratios() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.ratios)
  return &ratios_;
}

// repeated float scales = 3;
int GenerateAnchorParameter::scales_size() const {
  return scales_.size();
}
void GenerateAnchorParameter::clear_scales() {
  scales_.Clear();
}
float GenerateAnchorParameter::scales(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.scales)
  return scales_.Get(index);
}
void GenerateAnchorParameter::set_scales(int index, float value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.scales)
}
void GenerateAnchorParameter::add_scales(float value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.scales)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::scales() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.scales)
  return scales_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.scales)
  return &scales_;
}

// repeated float anchor_width = 4;
int GenerateAnchorParameter::anchor_width_size() const {
  return anchor_width_.size();
}
void GenerateAnchorParameter::clear_anchor_width() {
  anchor_width_.Clear();
}
float GenerateAnchorParameter::anchor_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_width)
  return anchor_width_.Get(index);
}
void GenerateAnchorParameter::set_anchor_width(int index, float value) {
  anchor_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_width)
}
void GenerateAnchorParameter::add_anchor_width(float value) {
  anchor_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_width)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_width() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_width)
  return anchor_width_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_width)
  return &anchor_width_;
}

// repeated float anchor_height = 5;
int GenerateAnchorParameter::anchor_height_size() const {
  return anchor_height_.size();
}
void GenerateAnchorParameter::clear_anchor_height() {
  anchor_height_.Clear();
}
float GenerateAnchorParameter::anchor_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_height)
  return anchor_height_.Get(index);
}
void GenerateAnchorParameter::set_anchor_height(int index, float value) {
  anchor_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_height)
}
void GenerateAnchorParameter::add_anchor_height(float value) {
  anchor_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_height)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_height() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_height)
  return anchor_height_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_height)
  return &anchor_height_;
}

// repeated float anchor_x1 = 6;
int GenerateAnchorParameter::anchor_x1_size() const {
  return anchor_x1_.size();
}
void GenerateAnchorParameter::clear_anchor_x1() {
  anchor_x1_.Clear();
}
float GenerateAnchorParameter::anchor_x1(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_x1)
  return anchor_x1_.Get(index);
}
void GenerateAnchorParameter::set_anchor_x1(int index, float value) {
  anchor_x1_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_x1)
}
void GenerateAnchorParameter::add_anchor_x1(float value) {
  anchor_x1_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_x1)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_x1() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_x1)
  return anchor_x1_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_x1() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_x1)
  return &anchor_x1_;
}

// repeated float anchor_y1 = 7;
int GenerateAnchorParameter::anchor_y1_size() const {
  return anchor_y1_.size();
}
void GenerateAnchorParameter::clear_anchor_y1() {
  anchor_y1_.Clear();
}
float GenerateAnchorParameter::anchor_y1(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_y1)
  return anchor_y1_.Get(index);
}
void GenerateAnchorParameter::set_anchor_y1(int index, float value) {
  anchor_y1_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_y1)
}
void GenerateAnchorParameter::add_anchor_y1(float value) {
  anchor_y1_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_y1)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_y1() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_y1)
  return anchor_y1_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_y1() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_y1)
  return &anchor_y1_;
}

// repeated float anchor_x2 = 8;
int GenerateAnchorParameter::anchor_x2_size() const {
  return anchor_x2_.size();
}
void GenerateAnchorParameter::clear_anchor_x2() {
  anchor_x2_.Clear();
}
float GenerateAnchorParameter::anchor_x2(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_x2)
  return anchor_x2_.Get(index);
}
void GenerateAnchorParameter::set_anchor_x2(int index, float value) {
  anchor_x2_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_x2)
}
void GenerateAnchorParameter::add_anchor_x2(float value) {
  anchor_x2_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_x2)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_x2() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_x2)
  return anchor_x2_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_x2() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_x2)
  return &anchor_x2_;
}

// repeated float anchor_y2 = 9;
int GenerateAnchorParameter::anchor_y2_size() const {
  return anchor_y2_.size();
}
void GenerateAnchorParameter::clear_anchor_y2() {
  anchor_y2_.Clear();
}
float GenerateAnchorParameter::anchor_y2(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.anchor_y2)
  return anchor_y2_.Get(index);
}
void GenerateAnchorParameter::set_anchor_y2(int index, float value) {
  anchor_y2_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.anchor_y2)
}
void GenerateAnchorParameter::add_anchor_y2(float value) {
  anchor_y2_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GenerateAnchorParameter.anchor_y2)
}
const ::google::protobuf::RepeatedField< float >&
GenerateAnchorParameter::anchor_y2() const {
  // @@protoc_insertion_point(field_list:caffe.GenerateAnchorParameter.anchor_y2)
  return anchor_y2_;
}
::google::protobuf::RepeatedField< float >*
GenerateAnchorParameter::mutable_anchor_y2() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GenerateAnchorParameter.anchor_y2)
  return &anchor_y2_;
}

// optional bool zero_anchor_center = 10 [default = true];
bool GenerateAnchorParameter::has_zero_anchor_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GenerateAnchorParameter::set_has_zero_anchor_center() {
  _has_bits_[0] |= 0x00000002u;
}
void GenerateAnchorParameter::clear_has_zero_anchor_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void GenerateAnchorParameter::clear_zero_anchor_center() {
  zero_anchor_center_ = true;
  clear_has_zero_anchor_center();
}
bool GenerateAnchorParameter::zero_anchor_center() const {
  // @@protoc_insertion_point(field_get:caffe.GenerateAnchorParameter.zero_anchor_center)
  return zero_anchor_center_;
}
void GenerateAnchorParameter::set_zero_anchor_center(bool value) {
  set_has_zero_anchor_center();
  zero_anchor_center_ = value;
  // @@protoc_insertion_point(field_set:caffe.GenerateAnchorParameter.zero_anchor_center)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NMSSSDParameter::kNeedNmsFieldNumber;
const int NMSSSDParameter::kOverlapRatioFieldNumber;
const int NMSSSDParameter::kTopNFieldNumber;
const int NMSSSDParameter::kAddScoreFieldNumber;
const int NMSSSDParameter::kMaxCandidateNFieldNumber;
const int NMSSSDParameter::kUseSoftNmsFieldNumber;
const int NMSSSDParameter::kNmsAmongClassesFieldNumber;
const int NMSSSDParameter::kVotingFieldNumber;
const int NMSSSDParameter::kVoteIouFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NMSSSDParameter::NMSSSDParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NMSSSDParameter)
}
NMSSSDParameter::NMSSSDParameter(const NMSSSDParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      overlap_ratio_(from.overlap_ratio_),
      top_n_(from.top_n_),
      max_candidate_n_(from.max_candidate_n_),
      use_soft_nms_(from.use_soft_nms_),
      voting_(from.voting_),
      vote_iou_(from.vote_iou_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&add_score_, &from.add_score_,
    reinterpret_cast<char*>(&need_nms_) -
    reinterpret_cast<char*>(&add_score_) + sizeof(need_nms_));
  // @@protoc_insertion_point(copy_constructor:caffe.NMSSSDParameter)
}

void NMSSSDParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&add_score_, 0, reinterpret_cast<char*>(&nms_among_classes_) -
    reinterpret_cast<char*>(&add_score_) + sizeof(nms_among_classes_));
  need_nms_ = true;
}

NMSSSDParameter::~NMSSSDParameter() {
  // @@protoc_insertion_point(destructor:caffe.NMSSSDParameter)
  SharedDtor();
}

void NMSSSDParameter::SharedDtor() {
}

void NMSSSDParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NMSSSDParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NMSSSDParameter& NMSSSDParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NMSSSDParameter* NMSSSDParameter::New(::google::protobuf::Arena* arena) const {
  NMSSSDParameter* n = new NMSSSDParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NMSSSDParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NMSSSDParameter)
  overlap_ratio_.Clear();
  top_n_.Clear();
  max_candidate_n_.Clear();
  use_soft_nms_.Clear();
  voting_.Clear();
  vote_iou_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&add_score_, 0, reinterpret_cast<char*>(&nms_among_classes_) -
      reinterpret_cast<char*>(&add_score_) + sizeof(nms_among_classes_));
    need_nms_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NMSSSDParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NMSSSDParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool need_nms = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_need_nms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float overlap_ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_overlap_ratio())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_overlap_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 top_n = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_top_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_top_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool add_score = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_add_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 max_candidate_n = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_max_candidate_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_max_candidate_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool use_soft_nms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48u, input, this->mutable_use_soft_nms())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_use_soft_nms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool nms_among_classes = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_nms_among_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nms_among_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool voting = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 64u, input, this->mutable_voting())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_voting())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float vote_iou = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77u, input, this->mutable_vote_iou())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vote_iou())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NMSSSDParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NMSSSDParameter)
  return false;
#undef DO_
}

void NMSSSDParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NMSSSDParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_nms = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->need_nms(), output);
  }

  // repeated float overlap_ratio = 2;
  for (int i = 0, n = this->overlap_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->overlap_ratio(i), output);
  }

  // repeated uint32 top_n = 3;
  for (int i = 0, n = this->top_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->top_n(i), output);
  }

  // optional bool add_score = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->add_score(), output);
  }

  // repeated int32 max_candidate_n = 5;
  for (int i = 0, n = this->max_candidate_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->max_candidate_n(i), output);
  }

  // repeated bool use_soft_nms = 6;
  for (int i = 0, n = this->use_soft_nms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->use_soft_nms(i), output);
  }

  // optional bool nms_among_classes = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->nms_among_classes(), output);
  }

  // repeated bool voting = 8;
  for (int i = 0, n = this->voting_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      8, this->voting(i), output);
  }

  // repeated float vote_iou = 9;
  for (int i = 0, n = this->vote_iou_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->vote_iou(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NMSSSDParameter)
}

::google::protobuf::uint8* NMSSSDParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NMSSSDParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_nms = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->need_nms(), target);
  }

  // repeated float overlap_ratio = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->overlap_ratio_, target);

  // repeated uint32 top_n = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->top_n_, target);

  // optional bool add_score = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->add_score(), target);
  }

  // repeated int32 max_candidate_n = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->max_candidate_n_, target);

  // repeated bool use_soft_nms = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(6, this->use_soft_nms_, target);

  // optional bool nms_among_classes = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->nms_among_classes(), target);
  }

  // repeated bool voting = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(8, this->voting_, target);

  // repeated float vote_iou = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(9, this->vote_iou_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NMSSSDParameter)
  return target;
}

size_t NMSSSDParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NMSSSDParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float overlap_ratio = 2;
  {
    unsigned int count = this->overlap_ratio_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->overlap_ratio_size());
    total_size += data_size;
  }

  // repeated uint32 top_n = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->top_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->top_n_size());
    total_size += data_size;
  }

  // repeated int32 max_candidate_n = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->max_candidate_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->max_candidate_n_size());
    total_size += data_size;
  }

  // repeated bool use_soft_nms = 6;
  {
    unsigned int count = this->use_soft_nms_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->use_soft_nms_size());
    total_size += data_size;
  }

  // repeated bool voting = 8;
  {
    unsigned int count = this->voting_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->voting_size());
    total_size += data_size;
  }

  // repeated float vote_iou = 9;
  {
    unsigned int count = this->vote_iou_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->vote_iou_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool add_score = 4 [default = false];
    if (has_add_score()) {
      total_size += 1 + 1;
    }

    // optional bool nms_among_classes = 7 [default = false];
    if (has_nms_among_classes()) {
      total_size += 1 + 1;
    }

    // optional bool need_nms = 1 [default = true];
    if (has_need_nms()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NMSSSDParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NMSSSDParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NMSSSDParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NMSSSDParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NMSSSDParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NMSSSDParameter)
    MergeFrom(*source);
  }
}

void NMSSSDParameter::MergeFrom(const NMSSSDParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NMSSSDParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_ratio_.MergeFrom(from.overlap_ratio_);
  top_n_.MergeFrom(from.top_n_);
  max_candidate_n_.MergeFrom(from.max_candidate_n_);
  use_soft_nms_.MergeFrom(from.use_soft_nms_);
  voting_.MergeFrom(from.voting_);
  vote_iou_.MergeFrom(from.vote_iou_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      add_score_ = from.add_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_among_classes_ = from.nms_among_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_nms_ = from.need_nms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NMSSSDParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NMSSSDParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NMSSSDParameter::CopyFrom(const NMSSSDParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NMSSSDParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSSSDParameter::IsInitialized() const {
  return true;
}

void NMSSSDParameter::Swap(NMSSSDParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NMSSSDParameter::InternalSwap(NMSSSDParameter* other) {
  overlap_ratio_.InternalSwap(&other->overlap_ratio_);
  top_n_.InternalSwap(&other->top_n_);
  max_candidate_n_.InternalSwap(&other->max_candidate_n_);
  use_soft_nms_.InternalSwap(&other->use_soft_nms_);
  voting_.InternalSwap(&other->voting_);
  vote_iou_.InternalSwap(&other->vote_iou_);
  std::swap(add_score_, other->add_score_);
  std::swap(nms_among_classes_, other->nms_among_classes_);
  std::swap(need_nms_, other->need_nms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NMSSSDParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NMSSSDParameter

// optional bool need_nms = 1 [default = true];
bool NMSSSDParameter::has_need_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NMSSSDParameter::set_has_need_nms() {
  _has_bits_[0] |= 0x00000004u;
}
void NMSSSDParameter::clear_has_need_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
void NMSSSDParameter::clear_need_nms() {
  need_nms_ = true;
  clear_has_need_nms();
}
bool NMSSSDParameter::need_nms() const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.need_nms)
  return need_nms_;
}
void NMSSSDParameter::set_need_nms(bool value) {
  set_has_need_nms();
  need_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.need_nms)
}

// repeated float overlap_ratio = 2;
int NMSSSDParameter::overlap_ratio_size() const {
  return overlap_ratio_.size();
}
void NMSSSDParameter::clear_overlap_ratio() {
  overlap_ratio_.Clear();
}
float NMSSSDParameter::overlap_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.overlap_ratio)
  return overlap_ratio_.Get(index);
}
void NMSSSDParameter::set_overlap_ratio(int index, float value) {
  overlap_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.overlap_ratio)
}
void NMSSSDParameter::add_overlap_ratio(float value) {
  overlap_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.overlap_ratio)
}
const ::google::protobuf::RepeatedField< float >&
NMSSSDParameter::overlap_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.overlap_ratio)
  return overlap_ratio_;
}
::google::protobuf::RepeatedField< float >*
NMSSSDParameter::mutable_overlap_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.overlap_ratio)
  return &overlap_ratio_;
}

// repeated uint32 top_n = 3;
int NMSSSDParameter::top_n_size() const {
  return top_n_.size();
}
void NMSSSDParameter::clear_top_n() {
  top_n_.Clear();
}
::google::protobuf::uint32 NMSSSDParameter::top_n(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.top_n)
  return top_n_.Get(index);
}
void NMSSSDParameter::set_top_n(int index, ::google::protobuf::uint32 value) {
  top_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.top_n)
}
void NMSSSDParameter::add_top_n(::google::protobuf::uint32 value) {
  top_n_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.top_n)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NMSSSDParameter::top_n() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.top_n)
  return top_n_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NMSSSDParameter::mutable_top_n() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.top_n)
  return &top_n_;
}

// optional bool add_score = 4 [default = false];
bool NMSSSDParameter::has_add_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NMSSSDParameter::set_has_add_score() {
  _has_bits_[0] |= 0x00000001u;
}
void NMSSSDParameter::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void NMSSSDParameter::clear_add_score() {
  add_score_ = false;
  clear_has_add_score();
}
bool NMSSSDParameter::add_score() const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.add_score)
  return add_score_;
}
void NMSSSDParameter::set_add_score(bool value) {
  set_has_add_score();
  add_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.add_score)
}

// repeated int32 max_candidate_n = 5;
int NMSSSDParameter::max_candidate_n_size() const {
  return max_candidate_n_.size();
}
void NMSSSDParameter::clear_max_candidate_n() {
  max_candidate_n_.Clear();
}
::google::protobuf::int32 NMSSSDParameter::max_candidate_n(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.max_candidate_n)
  return max_candidate_n_.Get(index);
}
void NMSSSDParameter::set_max_candidate_n(int index, ::google::protobuf::int32 value) {
  max_candidate_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.max_candidate_n)
}
void NMSSSDParameter::add_max_candidate_n(::google::protobuf::int32 value) {
  max_candidate_n_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.max_candidate_n)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NMSSSDParameter::max_candidate_n() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.max_candidate_n)
  return max_candidate_n_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NMSSSDParameter::mutable_max_candidate_n() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.max_candidate_n)
  return &max_candidate_n_;
}

// repeated bool use_soft_nms = 6;
int NMSSSDParameter::use_soft_nms_size() const {
  return use_soft_nms_.size();
}
void NMSSSDParameter::clear_use_soft_nms() {
  use_soft_nms_.Clear();
}
bool NMSSSDParameter::use_soft_nms(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.use_soft_nms)
  return use_soft_nms_.Get(index);
}
void NMSSSDParameter::set_use_soft_nms(int index, bool value) {
  use_soft_nms_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.use_soft_nms)
}
void NMSSSDParameter::add_use_soft_nms(bool value) {
  use_soft_nms_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.use_soft_nms)
}
const ::google::protobuf::RepeatedField< bool >&
NMSSSDParameter::use_soft_nms() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.use_soft_nms)
  return use_soft_nms_;
}
::google::protobuf::RepeatedField< bool >*
NMSSSDParameter::mutable_use_soft_nms() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.use_soft_nms)
  return &use_soft_nms_;
}

// optional bool nms_among_classes = 7 [default = false];
bool NMSSSDParameter::has_nms_among_classes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NMSSSDParameter::set_has_nms_among_classes() {
  _has_bits_[0] |= 0x00000002u;
}
void NMSSSDParameter::clear_has_nms_among_classes() {
  _has_bits_[0] &= ~0x00000002u;
}
void NMSSSDParameter::clear_nms_among_classes() {
  nms_among_classes_ = false;
  clear_has_nms_among_classes();
}
bool NMSSSDParameter::nms_among_classes() const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.nms_among_classes)
  return nms_among_classes_;
}
void NMSSSDParameter::set_nms_among_classes(bool value) {
  set_has_nms_among_classes();
  nms_among_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.nms_among_classes)
}

// repeated bool voting = 8;
int NMSSSDParameter::voting_size() const {
  return voting_.size();
}
void NMSSSDParameter::clear_voting() {
  voting_.Clear();
}
bool NMSSSDParameter::voting(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.voting)
  return voting_.Get(index);
}
void NMSSSDParameter::set_voting(int index, bool value) {
  voting_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.voting)
}
void NMSSSDParameter::add_voting(bool value) {
  voting_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.voting)
}
const ::google::protobuf::RepeatedField< bool >&
NMSSSDParameter::voting() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.voting)
  return voting_;
}
::google::protobuf::RepeatedField< bool >*
NMSSSDParameter::mutable_voting() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.voting)
  return &voting_;
}

// repeated float vote_iou = 9;
int NMSSSDParameter::vote_iou_size() const {
  return vote_iou_.size();
}
void NMSSSDParameter::clear_vote_iou() {
  vote_iou_.Clear();
}
float NMSSSDParameter::vote_iou(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NMSSSDParameter.vote_iou)
  return vote_iou_.Get(index);
}
void NMSSSDParameter::set_vote_iou(int index, float value) {
  vote_iou_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NMSSSDParameter.vote_iou)
}
void NMSSSDParameter::add_vote_iou(float value) {
  vote_iou_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NMSSSDParameter.vote_iou)
}
const ::google::protobuf::RepeatedField< float >&
NMSSSDParameter::vote_iou() const {
  // @@protoc_insertion_point(field_list:caffe.NMSSSDParameter.vote_iou)
  return vote_iou_;
}
::google::protobuf::RepeatedField< float >*
NMSSSDParameter::mutable_vote_iou() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NMSSSDParameter.vote_iou)
  return &vote_iou_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KPTSParameter::kKptsExistBottomIdxFieldNumber;
const int KPTSParameter::kKptsRegBottomIdxFieldNumber;
const int KPTSParameter::kKptsRegAsClassifyFieldNumber;
const int KPTSParameter::kKptsClassifyWidthFieldNumber;
const int KPTSParameter::kKptsClassifyHeightFieldNumber;
const int KPTSParameter::kKptsRegNormIdxStFieldNumber;
const int KPTSParameter::kKptsStForEachClassFieldNumber;
const int KPTSParameter::kKptsEdForEachClassFieldNumber;
const int KPTSParameter::kKptsClassifyPadRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KPTSParameter::KPTSParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.KPTSParameter)
}
KPTSParameter::KPTSParameter(const KPTSParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      kpts_st_for_each_class_(from.kpts_st_for_each_class_),
      kpts_ed_for_each_class_(from.kpts_ed_for_each_class_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kpts_exist_bottom_idx_, &from.kpts_exist_bottom_idx_,
    reinterpret_cast<char*>(&kpts_classify_pad_ratio_) -
    reinterpret_cast<char*>(&kpts_exist_bottom_idx_) + sizeof(kpts_classify_pad_ratio_));
  // @@protoc_insertion_point(copy_constructor:caffe.KPTSParameter)
}

void KPTSParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&kpts_exist_bottom_idx_, 0, reinterpret_cast<char*>(&kpts_classify_pad_ratio_) -
    reinterpret_cast<char*>(&kpts_exist_bottom_idx_) + sizeof(kpts_classify_pad_ratio_));
}

KPTSParameter::~KPTSParameter() {
  // @@protoc_insertion_point(destructor:caffe.KPTSParameter)
  SharedDtor();
}

void KPTSParameter::SharedDtor() {
}

void KPTSParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPTSParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KPTSParameter& KPTSParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

KPTSParameter* KPTSParameter::New(::google::protobuf::Arena* arena) const {
  KPTSParameter* n = new KPTSParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KPTSParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.KPTSParameter)
  kpts_st_for_each_class_.Clear();
  kpts_ed_for_each_class_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&kpts_exist_bottom_idx_, 0, reinterpret_cast<char*>(&kpts_classify_pad_ratio_) -
      reinterpret_cast<char*>(&kpts_exist_bottom_idx_) + sizeof(kpts_classify_pad_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KPTSParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.KPTSParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kpts_exist_bottom_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_kpts_exist_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kpts_exist_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 kpts_reg_bottom_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_kpts_reg_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kpts_reg_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kpts_reg_as_classify = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_kpts_reg_as_classify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kpts_reg_as_classify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kpts_classify_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_kpts_classify_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kpts_classify_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kpts_classify_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_kpts_classify_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kpts_classify_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpts_reg_norm_idx_st = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_kpts_reg_norm_idx_st();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpts_reg_norm_idx_st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 kpts_st_for_each_class = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_kpts_st_for_each_class())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kpts_st_for_each_class())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 kpts_ed_for_each_class = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_kpts_ed_for_each_class())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kpts_ed_for_each_class())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kpts_classify_pad_ratio = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_kpts_classify_pad_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kpts_classify_pad_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.KPTSParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.KPTSParameter)
  return false;
#undef DO_
}

void KPTSParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.KPTSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 kpts_exist_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kpts_exist_bottom_idx(), output);
  }

  // required uint32 kpts_reg_bottom_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kpts_reg_bottom_idx(), output);
  }

  // optional bool kpts_reg_as_classify = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->kpts_reg_as_classify(), output);
  }

  // optional uint32 kpts_classify_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kpts_classify_width(), output);
  }

  // optional uint32 kpts_classify_height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kpts_classify_height(), output);
  }

  // optional int32 kpts_reg_norm_idx_st = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->kpts_reg_norm_idx_st(), output);
  }

  // repeated int32 kpts_st_for_each_class = 7;
  for (int i = 0, n = this->kpts_st_for_each_class_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->kpts_st_for_each_class(i), output);
  }

  // repeated int32 kpts_ed_for_each_class = 8;
  for (int i = 0, n = this->kpts_ed_for_each_class_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->kpts_ed_for_each_class(i), output);
  }

  // optional float kpts_classify_pad_ratio = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->kpts_classify_pad_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.KPTSParameter)
}

::google::protobuf::uint8* KPTSParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.KPTSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 kpts_exist_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kpts_exist_bottom_idx(), target);
  }

  // required uint32 kpts_reg_bottom_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kpts_reg_bottom_idx(), target);
  }

  // optional bool kpts_reg_as_classify = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->kpts_reg_as_classify(), target);
  }

  // optional uint32 kpts_classify_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kpts_classify_width(), target);
  }

  // optional uint32 kpts_classify_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kpts_classify_height(), target);
  }

  // optional int32 kpts_reg_norm_idx_st = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->kpts_reg_norm_idx_st(), target);
  }

  // repeated int32 kpts_st_for_each_class = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->kpts_st_for_each_class_, target);

  // repeated int32 kpts_ed_for_each_class = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->kpts_ed_for_each_class_, target);

  // optional float kpts_classify_pad_ratio = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->kpts_classify_pad_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.KPTSParameter)
  return target;
}

size_t KPTSParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.KPTSParameter)
  size_t total_size = 0;

  if (has_kpts_exist_bottom_idx()) {
    // required uint32 kpts_exist_bottom_idx = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kpts_exist_bottom_idx());
  }

  if (has_kpts_reg_bottom_idx()) {
    // required uint32 kpts_reg_bottom_idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kpts_reg_bottom_idx());
  }

  return total_size;
}
size_t KPTSParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.KPTSParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 kpts_exist_bottom_idx = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kpts_exist_bottom_idx());

    // required uint32 kpts_reg_bottom_idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kpts_reg_bottom_idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 kpts_st_for_each_class = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->kpts_st_for_each_class_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kpts_st_for_each_class_size());
    total_size += data_size;
  }

  // repeated int32 kpts_ed_for_each_class = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->kpts_ed_for_each_class_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kpts_ed_for_each_class_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional bool kpts_reg_as_classify = 3 [default = false];
    if (has_kpts_reg_as_classify()) {
      total_size += 1 + 1;
    }

    // optional uint32 kpts_classify_width = 4;
    if (has_kpts_classify_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kpts_classify_width());
    }

    // optional uint32 kpts_classify_height = 5;
    if (has_kpts_classify_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kpts_classify_height());
    }

    // optional int32 kpts_reg_norm_idx_st = 6;
    if (has_kpts_reg_norm_idx_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpts_reg_norm_idx_st());
    }

    // optional float kpts_classify_pad_ratio = 9 [default = 0];
    if (has_kpts_classify_pad_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPTSParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.KPTSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const KPTSParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KPTSParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.KPTSParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.KPTSParameter)
    MergeFrom(*source);
  }
}

void KPTSParameter::MergeFrom(const KPTSParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.KPTSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kpts_st_for_each_class_.MergeFrom(from.kpts_st_for_each_class_);
  kpts_ed_for_each_class_.MergeFrom(from.kpts_ed_for_each_class_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      kpts_exist_bottom_idx_ = from.kpts_exist_bottom_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      kpts_reg_bottom_idx_ = from.kpts_reg_bottom_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      kpts_reg_as_classify_ = from.kpts_reg_as_classify_;
    }
    if (cached_has_bits & 0x00000008u) {
      kpts_classify_width_ = from.kpts_classify_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      kpts_classify_height_ = from.kpts_classify_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      kpts_reg_norm_idx_st_ = from.kpts_reg_norm_idx_st_;
    }
    if (cached_has_bits & 0x00000040u) {
      kpts_classify_pad_ratio_ = from.kpts_classify_pad_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KPTSParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.KPTSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPTSParameter::CopyFrom(const KPTSParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.KPTSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPTSParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KPTSParameter::Swap(KPTSParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KPTSParameter::InternalSwap(KPTSParameter* other) {
  kpts_st_for_each_class_.InternalSwap(&other->kpts_st_for_each_class_);
  kpts_ed_for_each_class_.InternalSwap(&other->kpts_ed_for_each_class_);
  std::swap(kpts_exist_bottom_idx_, other->kpts_exist_bottom_idx_);
  std::swap(kpts_reg_bottom_idx_, other->kpts_reg_bottom_idx_);
  std::swap(kpts_reg_as_classify_, other->kpts_reg_as_classify_);
  std::swap(kpts_classify_width_, other->kpts_classify_width_);
  std::swap(kpts_classify_height_, other->kpts_classify_height_);
  std::swap(kpts_reg_norm_idx_st_, other->kpts_reg_norm_idx_st_);
  std::swap(kpts_classify_pad_ratio_, other->kpts_classify_pad_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KPTSParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KPTSParameter

// required uint32 kpts_exist_bottom_idx = 1;
bool KPTSParameter::has_kpts_exist_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KPTSParameter::set_has_kpts_exist_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
void KPTSParameter::clear_has_kpts_exist_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
void KPTSParameter::clear_kpts_exist_bottom_idx() {
  kpts_exist_bottom_idx_ = 0u;
  clear_has_kpts_exist_bottom_idx();
}
::google::protobuf::uint32 KPTSParameter::kpts_exist_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_exist_bottom_idx)
  return kpts_exist_bottom_idx_;
}
void KPTSParameter::set_kpts_exist_bottom_idx(::google::protobuf::uint32 value) {
  set_has_kpts_exist_bottom_idx();
  kpts_exist_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_exist_bottom_idx)
}

// required uint32 kpts_reg_bottom_idx = 2;
bool KPTSParameter::has_kpts_reg_bottom_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KPTSParameter::set_has_kpts_reg_bottom_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void KPTSParameter::clear_has_kpts_reg_bottom_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void KPTSParameter::clear_kpts_reg_bottom_idx() {
  kpts_reg_bottom_idx_ = 0u;
  clear_has_kpts_reg_bottom_idx();
}
::google::protobuf::uint32 KPTSParameter::kpts_reg_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_reg_bottom_idx)
  return kpts_reg_bottom_idx_;
}
void KPTSParameter::set_kpts_reg_bottom_idx(::google::protobuf::uint32 value) {
  set_has_kpts_reg_bottom_idx();
  kpts_reg_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_reg_bottom_idx)
}

// optional bool kpts_reg_as_classify = 3 [default = false];
bool KPTSParameter::has_kpts_reg_as_classify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KPTSParameter::set_has_kpts_reg_as_classify() {
  _has_bits_[0] |= 0x00000004u;
}
void KPTSParameter::clear_has_kpts_reg_as_classify() {
  _has_bits_[0] &= ~0x00000004u;
}
void KPTSParameter::clear_kpts_reg_as_classify() {
  kpts_reg_as_classify_ = false;
  clear_has_kpts_reg_as_classify();
}
bool KPTSParameter::kpts_reg_as_classify() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_reg_as_classify)
  return kpts_reg_as_classify_;
}
void KPTSParameter::set_kpts_reg_as_classify(bool value) {
  set_has_kpts_reg_as_classify();
  kpts_reg_as_classify_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_reg_as_classify)
}

// optional uint32 kpts_classify_width = 4;
bool KPTSParameter::has_kpts_classify_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KPTSParameter::set_has_kpts_classify_width() {
  _has_bits_[0] |= 0x00000008u;
}
void KPTSParameter::clear_has_kpts_classify_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void KPTSParameter::clear_kpts_classify_width() {
  kpts_classify_width_ = 0u;
  clear_has_kpts_classify_width();
}
::google::protobuf::uint32 KPTSParameter::kpts_classify_width() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_classify_width)
  return kpts_classify_width_;
}
void KPTSParameter::set_kpts_classify_width(::google::protobuf::uint32 value) {
  set_has_kpts_classify_width();
  kpts_classify_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_classify_width)
}

// optional uint32 kpts_classify_height = 5;
bool KPTSParameter::has_kpts_classify_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KPTSParameter::set_has_kpts_classify_height() {
  _has_bits_[0] |= 0x00000010u;
}
void KPTSParameter::clear_has_kpts_classify_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void KPTSParameter::clear_kpts_classify_height() {
  kpts_classify_height_ = 0u;
  clear_has_kpts_classify_height();
}
::google::protobuf::uint32 KPTSParameter::kpts_classify_height() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_classify_height)
  return kpts_classify_height_;
}
void KPTSParameter::set_kpts_classify_height(::google::protobuf::uint32 value) {
  set_has_kpts_classify_height();
  kpts_classify_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_classify_height)
}

// optional int32 kpts_reg_norm_idx_st = 6;
bool KPTSParameter::has_kpts_reg_norm_idx_st() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KPTSParameter::set_has_kpts_reg_norm_idx_st() {
  _has_bits_[0] |= 0x00000020u;
}
void KPTSParameter::clear_has_kpts_reg_norm_idx_st() {
  _has_bits_[0] &= ~0x00000020u;
}
void KPTSParameter::clear_kpts_reg_norm_idx_st() {
  kpts_reg_norm_idx_st_ = 0;
  clear_has_kpts_reg_norm_idx_st();
}
::google::protobuf::int32 KPTSParameter::kpts_reg_norm_idx_st() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_reg_norm_idx_st)
  return kpts_reg_norm_idx_st_;
}
void KPTSParameter::set_kpts_reg_norm_idx_st(::google::protobuf::int32 value) {
  set_has_kpts_reg_norm_idx_st();
  kpts_reg_norm_idx_st_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_reg_norm_idx_st)
}

// repeated int32 kpts_st_for_each_class = 7;
int KPTSParameter::kpts_st_for_each_class_size() const {
  return kpts_st_for_each_class_.size();
}
void KPTSParameter::clear_kpts_st_for_each_class() {
  kpts_st_for_each_class_.Clear();
}
::google::protobuf::int32 KPTSParameter::kpts_st_for_each_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_st_for_each_class)
  return kpts_st_for_each_class_.Get(index);
}
void KPTSParameter::set_kpts_st_for_each_class(int index, ::google::protobuf::int32 value) {
  kpts_st_for_each_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_st_for_each_class)
}
void KPTSParameter::add_kpts_st_for_each_class(::google::protobuf::int32 value) {
  kpts_st_for_each_class_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.KPTSParameter.kpts_st_for_each_class)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KPTSParameter::kpts_st_for_each_class() const {
  // @@protoc_insertion_point(field_list:caffe.KPTSParameter.kpts_st_for_each_class)
  return kpts_st_for_each_class_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KPTSParameter::mutable_kpts_st_for_each_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.KPTSParameter.kpts_st_for_each_class)
  return &kpts_st_for_each_class_;
}

// repeated int32 kpts_ed_for_each_class = 8;
int KPTSParameter::kpts_ed_for_each_class_size() const {
  return kpts_ed_for_each_class_.size();
}
void KPTSParameter::clear_kpts_ed_for_each_class() {
  kpts_ed_for_each_class_.Clear();
}
::google::protobuf::int32 KPTSParameter::kpts_ed_for_each_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_ed_for_each_class)
  return kpts_ed_for_each_class_.Get(index);
}
void KPTSParameter::set_kpts_ed_for_each_class(int index, ::google::protobuf::int32 value) {
  kpts_ed_for_each_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_ed_for_each_class)
}
void KPTSParameter::add_kpts_ed_for_each_class(::google::protobuf::int32 value) {
  kpts_ed_for_each_class_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.KPTSParameter.kpts_ed_for_each_class)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KPTSParameter::kpts_ed_for_each_class() const {
  // @@protoc_insertion_point(field_list:caffe.KPTSParameter.kpts_ed_for_each_class)
  return kpts_ed_for_each_class_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KPTSParameter::mutable_kpts_ed_for_each_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.KPTSParameter.kpts_ed_for_each_class)
  return &kpts_ed_for_each_class_;
}

// optional float kpts_classify_pad_ratio = 9 [default = 0];
bool KPTSParameter::has_kpts_classify_pad_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KPTSParameter::set_has_kpts_classify_pad_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void KPTSParameter::clear_has_kpts_classify_pad_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void KPTSParameter::clear_kpts_classify_pad_ratio() {
  kpts_classify_pad_ratio_ = 0;
  clear_has_kpts_classify_pad_ratio();
}
float KPTSParameter::kpts_classify_pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.KPTSParameter.kpts_classify_pad_ratio)
  return kpts_classify_pad_ratio_;
}
void KPTSParameter::set_kpts_classify_pad_ratio(float value) {
  set_has_kpts_classify_pad_ratio();
  kpts_classify_pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.KPTSParameter.kpts_classify_pad_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ATRSParameter::kAtrsRegBottomIdxFieldNumber;
const int ATRSParameter::kAtrsRegNormIdxStFieldNumber;
const int ATRSParameter::kAtrsNormTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ATRSParameter::ATRSParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ATRSParameter)
}
ATRSParameter::ATRSParameter(const ATRSParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      atrs_norm_type_(from.atrs_norm_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&atrs_reg_bottom_idx_, &from.atrs_reg_bottom_idx_,
    reinterpret_cast<char*>(&atrs_reg_norm_idx_st_) -
    reinterpret_cast<char*>(&atrs_reg_bottom_idx_) + sizeof(atrs_reg_norm_idx_st_));
  // @@protoc_insertion_point(copy_constructor:caffe.ATRSParameter)
}

void ATRSParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&atrs_reg_bottom_idx_, 0, reinterpret_cast<char*>(&atrs_reg_norm_idx_st_) -
    reinterpret_cast<char*>(&atrs_reg_bottom_idx_) + sizeof(atrs_reg_norm_idx_st_));
}

ATRSParameter::~ATRSParameter() {
  // @@protoc_insertion_point(destructor:caffe.ATRSParameter)
  SharedDtor();
}

void ATRSParameter::SharedDtor() {
}

void ATRSParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATRSParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ATRSParameter& ATRSParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ATRSParameter* ATRSParameter::New(::google::protobuf::Arena* arena) const {
  ATRSParameter* n = new ATRSParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ATRSParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ATRSParameter)
  atrs_norm_type_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&atrs_reg_bottom_idx_, 0, reinterpret_cast<char*>(&atrs_reg_norm_idx_st_) -
      reinterpret_cast<char*>(&atrs_reg_bottom_idx_) + sizeof(atrs_reg_norm_idx_st_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ATRSParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ATRSParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 atrs_reg_bottom_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_atrs_reg_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atrs_reg_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 atrs_reg_norm_idx_st = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_atrs_reg_norm_idx_st();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atrs_reg_norm_idx_st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ATRSParameter_NormType_IsValid(value)) {
            add_atrs_norm_type(static_cast< ::caffe::ATRSParameter_NormType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::caffe::ATRSParameter_NormType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_atrs_norm_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ATRSParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ATRSParameter)
  return false;
#undef DO_
}

void ATRSParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ATRSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 atrs_reg_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atrs_reg_bottom_idx(), output);
  }

  // optional int32 atrs_reg_norm_idx_st = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atrs_reg_norm_idx_st(), output);
  }

  // repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
  for (int i = 0, n = this->atrs_norm_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->atrs_norm_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ATRSParameter)
}

::google::protobuf::uint8* ATRSParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ATRSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 atrs_reg_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atrs_reg_bottom_idx(), target);
  }

  // optional int32 atrs_reg_norm_idx_st = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atrs_reg_norm_idx_st(), target);
  }

  // repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->atrs_norm_type_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ATRSParameter)
  return target;
}

size_t ATRSParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ATRSParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 atrs_reg_bottom_idx = 1;
  if (has_atrs_reg_bottom_idx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->atrs_reg_bottom_idx());
  }
  // repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->atrs_norm_type_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->atrs_norm_type(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional int32 atrs_reg_norm_idx_st = 2;
  if (has_atrs_reg_norm_idx_st()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->atrs_reg_norm_idx_st());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATRSParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ATRSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ATRSParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ATRSParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ATRSParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ATRSParameter)
    MergeFrom(*source);
  }
}

void ATRSParameter::MergeFrom(const ATRSParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ATRSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atrs_norm_type_.MergeFrom(from.atrs_norm_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      atrs_reg_bottom_idx_ = from.atrs_reg_bottom_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      atrs_reg_norm_idx_st_ = from.atrs_reg_norm_idx_st_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ATRSParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ATRSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATRSParameter::CopyFrom(const ATRSParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ATRSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATRSParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ATRSParameter::Swap(ATRSParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ATRSParameter::InternalSwap(ATRSParameter* other) {
  atrs_norm_type_.InternalSwap(&other->atrs_norm_type_);
  std::swap(atrs_reg_bottom_idx_, other->atrs_reg_bottom_idx_);
  std::swap(atrs_reg_norm_idx_st_, other->atrs_reg_norm_idx_st_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ATRSParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ATRSParameter

// required uint32 atrs_reg_bottom_idx = 1;
bool ATRSParameter::has_atrs_reg_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ATRSParameter::set_has_atrs_reg_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
void ATRSParameter::clear_has_atrs_reg_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
void ATRSParameter::clear_atrs_reg_bottom_idx() {
  atrs_reg_bottom_idx_ = 0u;
  clear_has_atrs_reg_bottom_idx();
}
::google::protobuf::uint32 ATRSParameter::atrs_reg_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.ATRSParameter.atrs_reg_bottom_idx)
  return atrs_reg_bottom_idx_;
}
void ATRSParameter::set_atrs_reg_bottom_idx(::google::protobuf::uint32 value) {
  set_has_atrs_reg_bottom_idx();
  atrs_reg_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.ATRSParameter.atrs_reg_bottom_idx)
}

// optional int32 atrs_reg_norm_idx_st = 2;
bool ATRSParameter::has_atrs_reg_norm_idx_st() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ATRSParameter::set_has_atrs_reg_norm_idx_st() {
  _has_bits_[0] |= 0x00000002u;
}
void ATRSParameter::clear_has_atrs_reg_norm_idx_st() {
  _has_bits_[0] &= ~0x00000002u;
}
void ATRSParameter::clear_atrs_reg_norm_idx_st() {
  atrs_reg_norm_idx_st_ = 0;
  clear_has_atrs_reg_norm_idx_st();
}
::google::protobuf::int32 ATRSParameter::atrs_reg_norm_idx_st() const {
  // @@protoc_insertion_point(field_get:caffe.ATRSParameter.atrs_reg_norm_idx_st)
  return atrs_reg_norm_idx_st_;
}
void ATRSParameter::set_atrs_reg_norm_idx_st(::google::protobuf::int32 value) {
  set_has_atrs_reg_norm_idx_st();
  atrs_reg_norm_idx_st_ = value;
  // @@protoc_insertion_point(field_set:caffe.ATRSParameter.atrs_reg_norm_idx_st)
}

// repeated .caffe.ATRSParameter.NormType atrs_norm_type = 3;
int ATRSParameter::atrs_norm_type_size() const {
  return atrs_norm_type_.size();
}
void ATRSParameter::clear_atrs_norm_type() {
  atrs_norm_type_.Clear();
}
::caffe::ATRSParameter_NormType ATRSParameter::atrs_norm_type(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ATRSParameter.atrs_norm_type)
  return static_cast< ::caffe::ATRSParameter_NormType >(atrs_norm_type_.Get(index));
}
void ATRSParameter::set_atrs_norm_type(int index, ::caffe::ATRSParameter_NormType value) {
  assert(::caffe::ATRSParameter_NormType_IsValid(value));
  atrs_norm_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ATRSParameter.atrs_norm_type)
}
void ATRSParameter::add_atrs_norm_type(::caffe::ATRSParameter_NormType value) {
  assert(::caffe::ATRSParameter_NormType_IsValid(value));
  atrs_norm_type_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ATRSParameter.atrs_norm_type)
}
const ::google::protobuf::RepeatedField<int>&
ATRSParameter::atrs_norm_type() const {
  // @@protoc_insertion_point(field_list:caffe.ATRSParameter.atrs_norm_type)
  return atrs_norm_type_;
}
::google::protobuf::RepeatedField<int>*
ATRSParameter::mutable_atrs_norm_type() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ATRSParameter.atrs_norm_type)
  return &atrs_norm_type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTRSParameter::kFtrsBottomIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTRSParameter::FTRSParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FTRSParameter)
}
FTRSParameter::FTRSParameter(const FTRSParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ftrs_bottom_idx_ = from.ftrs_bottom_idx_;
  // @@protoc_insertion_point(copy_constructor:caffe.FTRSParameter)
}

void FTRSParameter::SharedCtor() {
  _cached_size_ = 0;
  ftrs_bottom_idx_ = 0u;
}

FTRSParameter::~FTRSParameter() {
  // @@protoc_insertion_point(destructor:caffe.FTRSParameter)
  SharedDtor();
}

void FTRSParameter::SharedDtor() {
}

void FTRSParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FTRSParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FTRSParameter& FTRSParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FTRSParameter* FTRSParameter::New(::google::protobuf::Arena* arena) const {
  FTRSParameter* n = new FTRSParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FTRSParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FTRSParameter)
  ftrs_bottom_idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FTRSParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FTRSParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ftrs_bottom_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ftrs_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ftrs_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FTRSParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FTRSParameter)
  return false;
#undef DO_
}

void FTRSParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FTRSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ftrs_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ftrs_bottom_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FTRSParameter)
}

::google::protobuf::uint8* FTRSParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FTRSParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ftrs_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ftrs_bottom_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FTRSParameter)
  return target;
}

size_t FTRSParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FTRSParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 ftrs_bottom_idx = 1;
  if (has_ftrs_bottom_idx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ftrs_bottom_idx());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FTRSParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FTRSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FTRSParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FTRSParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FTRSParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FTRSParameter)
    MergeFrom(*source);
  }
}

void FTRSParameter::MergeFrom(const FTRSParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FTRSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ftrs_bottom_idx()) {
    set_ftrs_bottom_idx(from.ftrs_bottom_idx());
  }
}

void FTRSParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FTRSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTRSParameter::CopyFrom(const FTRSParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FTRSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTRSParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FTRSParameter::Swap(FTRSParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTRSParameter::InternalSwap(FTRSParameter* other) {
  std::swap(ftrs_bottom_idx_, other->ftrs_bottom_idx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FTRSParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FTRSParameter

// required uint32 ftrs_bottom_idx = 1;
bool FTRSParameter::has_ftrs_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FTRSParameter::set_has_ftrs_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
void FTRSParameter::clear_has_ftrs_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
void FTRSParameter::clear_ftrs_bottom_idx() {
  ftrs_bottom_idx_ = 0u;
  clear_has_ftrs_bottom_idx();
}
::google::protobuf::uint32 FTRSParameter::ftrs_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.FTRSParameter.ftrs_bottom_idx)
  return ftrs_bottom_idx_;
}
void FTRSParameter::set_ftrs_bottom_idx(::google::protobuf::uint32 value) {
  set_has_ftrs_bottom_idx();
  ftrs_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTRSParameter.ftrs_bottom_idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPMPParameter::kSpmpBottomIdxFieldNumber;
const int SPMPParameter::kSpmpClassAwareFieldNumber;
const int SPMPParameter::kSpmpLabelWidthFieldNumber;
const int SPMPParameter::kSpmpLabelHeightFieldNumber;
const int SPMPParameter::kSpmpPadRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPMPParameter::SPMPParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SPMPParameter)
}
SPMPParameter::SPMPParameter(const SPMPParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      spmp_class_aware_(from.spmp_class_aware_),
      spmp_label_width_(from.spmp_label_width_),
      spmp_label_height_(from.spmp_label_height_),
      spmp_pad_ratio_(from.spmp_pad_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spmp_bottom_idx_ = from.spmp_bottom_idx_;
  // @@protoc_insertion_point(copy_constructor:caffe.SPMPParameter)
}

void SPMPParameter::SharedCtor() {
  _cached_size_ = 0;
  spmp_bottom_idx_ = 0u;
}

SPMPParameter::~SPMPParameter() {
  // @@protoc_insertion_point(destructor:caffe.SPMPParameter)
  SharedDtor();
}

void SPMPParameter::SharedDtor() {
}

void SPMPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPMPParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SPMPParameter& SPMPParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SPMPParameter* SPMPParameter::New(::google::protobuf::Arena* arena) const {
  SPMPParameter* n = new SPMPParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SPMPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SPMPParameter)
  spmp_class_aware_.Clear();
  spmp_label_width_.Clear();
  spmp_label_height_.Clear();
  spmp_pad_ratio_.Clear();
  spmp_bottom_idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SPMPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SPMPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 spmp_bottom_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_spmp_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spmp_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool spmp_class_aware = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16u, input, this->mutable_spmp_class_aware())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_spmp_class_aware())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 spmp_label_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_spmp_label_width())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spmp_label_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 spmp_label_height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_spmp_label_height())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spmp_label_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float spmp_pad_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_spmp_pad_ratio())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_spmp_pad_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SPMPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SPMPParameter)
  return false;
#undef DO_
}

void SPMPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SPMPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 spmp_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spmp_bottom_idx(), output);
  }

  // repeated bool spmp_class_aware = 2;
  for (int i = 0, n = this->spmp_class_aware_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->spmp_class_aware(i), output);
  }

  // repeated uint32 spmp_label_width = 3;
  for (int i = 0, n = this->spmp_label_width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->spmp_label_width(i), output);
  }

  // repeated uint32 spmp_label_height = 4;
  for (int i = 0, n = this->spmp_label_height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->spmp_label_height(i), output);
  }

  // repeated float spmp_pad_ratio = 5;
  for (int i = 0, n = this->spmp_pad_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->spmp_pad_ratio(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SPMPParameter)
}

::google::protobuf::uint8* SPMPParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SPMPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 spmp_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spmp_bottom_idx(), target);
  }

  // repeated bool spmp_class_aware = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(2, this->spmp_class_aware_, target);

  // repeated uint32 spmp_label_width = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->spmp_label_width_, target);

  // repeated uint32 spmp_label_height = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->spmp_label_height_, target);

  // repeated float spmp_pad_ratio = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->spmp_pad_ratio_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SPMPParameter)
  return target;
}

size_t SPMPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SPMPParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 spmp_bottom_idx = 1;
  if (has_spmp_bottom_idx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spmp_bottom_idx());
  }
  // repeated bool spmp_class_aware = 2;
  {
    unsigned int count = this->spmp_class_aware_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->spmp_class_aware_size());
    total_size += data_size;
  }

  // repeated uint32 spmp_label_width = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->spmp_label_width_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->spmp_label_width_size());
    total_size += data_size;
  }

  // repeated uint32 spmp_label_height = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->spmp_label_height_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->spmp_label_height_size());
    total_size += data_size;
  }

  // repeated float spmp_pad_ratio = 5;
  {
    unsigned int count = this->spmp_pad_ratio_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->spmp_pad_ratio_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPMPParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SPMPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SPMPParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SPMPParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SPMPParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SPMPParameter)
    MergeFrom(*source);
  }
}

void SPMPParameter::MergeFrom(const SPMPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SPMPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spmp_class_aware_.MergeFrom(from.spmp_class_aware_);
  spmp_label_width_.MergeFrom(from.spmp_label_width_);
  spmp_label_height_.MergeFrom(from.spmp_label_height_);
  spmp_pad_ratio_.MergeFrom(from.spmp_pad_ratio_);
  if (from.has_spmp_bottom_idx()) {
    set_spmp_bottom_idx(from.spmp_bottom_idx());
  }
}

void SPMPParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SPMPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPMPParameter::CopyFrom(const SPMPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SPMPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPMPParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SPMPParameter::Swap(SPMPParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SPMPParameter::InternalSwap(SPMPParameter* other) {
  spmp_class_aware_.InternalSwap(&other->spmp_class_aware_);
  spmp_label_width_.InternalSwap(&other->spmp_label_width_);
  spmp_label_height_.InternalSwap(&other->spmp_label_height_);
  spmp_pad_ratio_.InternalSwap(&other->spmp_pad_ratio_);
  std::swap(spmp_bottom_idx_, other->spmp_bottom_idx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SPMPParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SPMPParameter

// required uint32 spmp_bottom_idx = 1;
bool SPMPParameter::has_spmp_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SPMPParameter::set_has_spmp_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
void SPMPParameter::clear_has_spmp_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
void SPMPParameter::clear_spmp_bottom_idx() {
  spmp_bottom_idx_ = 0u;
  clear_has_spmp_bottom_idx();
}
::google::protobuf::uint32 SPMPParameter::spmp_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_bottom_idx)
  return spmp_bottom_idx_;
}
void SPMPParameter::set_spmp_bottom_idx(::google::protobuf::uint32 value) {
  set_has_spmp_bottom_idx();
  spmp_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_bottom_idx)
}

// repeated bool spmp_class_aware = 2;
int SPMPParameter::spmp_class_aware_size() const {
  return spmp_class_aware_.size();
}
void SPMPParameter::clear_spmp_class_aware() {
  spmp_class_aware_.Clear();
}
bool SPMPParameter::spmp_class_aware(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_class_aware)
  return spmp_class_aware_.Get(index);
}
void SPMPParameter::set_spmp_class_aware(int index, bool value) {
  spmp_class_aware_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_class_aware)
}
void SPMPParameter::add_spmp_class_aware(bool value) {
  spmp_class_aware_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_class_aware)
}
const ::google::protobuf::RepeatedField< bool >&
SPMPParameter::spmp_class_aware() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_class_aware)
  return spmp_class_aware_;
}
::google::protobuf::RepeatedField< bool >*
SPMPParameter::mutable_spmp_class_aware() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_class_aware)
  return &spmp_class_aware_;
}

// repeated uint32 spmp_label_width = 3;
int SPMPParameter::spmp_label_width_size() const {
  return spmp_label_width_.size();
}
void SPMPParameter::clear_spmp_label_width() {
  spmp_label_width_.Clear();
}
::google::protobuf::uint32 SPMPParameter::spmp_label_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_label_width)
  return spmp_label_width_.Get(index);
}
void SPMPParameter::set_spmp_label_width(int index, ::google::protobuf::uint32 value) {
  spmp_label_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_label_width)
}
void SPMPParameter::add_spmp_label_width(::google::protobuf::uint32 value) {
  spmp_label_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_label_width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SPMPParameter::spmp_label_width() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_label_width)
  return spmp_label_width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SPMPParameter::mutable_spmp_label_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_label_width)
  return &spmp_label_width_;
}

// repeated uint32 spmp_label_height = 4;
int SPMPParameter::spmp_label_height_size() const {
  return spmp_label_height_.size();
}
void SPMPParameter::clear_spmp_label_height() {
  spmp_label_height_.Clear();
}
::google::protobuf::uint32 SPMPParameter::spmp_label_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_label_height)
  return spmp_label_height_.Get(index);
}
void SPMPParameter::set_spmp_label_height(int index, ::google::protobuf::uint32 value) {
  spmp_label_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_label_height)
}
void SPMPParameter::add_spmp_label_height(::google::protobuf::uint32 value) {
  spmp_label_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_label_height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SPMPParameter::spmp_label_height() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_label_height)
  return spmp_label_height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SPMPParameter::mutable_spmp_label_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_label_height)
  return &spmp_label_height_;
}

// repeated float spmp_pad_ratio = 5;
int SPMPParameter::spmp_pad_ratio_size() const {
  return spmp_pad_ratio_.size();
}
void SPMPParameter::clear_spmp_pad_ratio() {
  spmp_pad_ratio_.Clear();
}
float SPMPParameter::spmp_pad_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SPMPParameter.spmp_pad_ratio)
  return spmp_pad_ratio_.Get(index);
}
void SPMPParameter::set_spmp_pad_ratio(int index, float value) {
  spmp_pad_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SPMPParameter.spmp_pad_ratio)
}
void SPMPParameter::add_spmp_pad_ratio(float value) {
  spmp_pad_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SPMPParameter.spmp_pad_ratio)
}
const ::google::protobuf::RepeatedField< float >&
SPMPParameter::spmp_pad_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.SPMPParameter.spmp_pad_ratio)
  return spmp_pad_ratio_;
}
::google::protobuf::RepeatedField< float >*
SPMPParameter::mutable_spmp_pad_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SPMPParameter.spmp_pad_ratio)
  return &spmp_pad_ratio_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cam3dParameter::kCam3DBottomIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cam3dParameter::Cam3dParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Cam3dParameter)
}
Cam3dParameter::Cam3dParameter(const Cam3dParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cam3d_bottom_idx_ = from.cam3d_bottom_idx_;
  // @@protoc_insertion_point(copy_constructor:caffe.Cam3dParameter)
}

void Cam3dParameter::SharedCtor() {
  _cached_size_ = 0;
  cam3d_bottom_idx_ = 0u;
}

Cam3dParameter::~Cam3dParameter() {
  // @@protoc_insertion_point(destructor:caffe.Cam3dParameter)
  SharedDtor();
}

void Cam3dParameter::SharedDtor() {
}

void Cam3dParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cam3dParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cam3dParameter& Cam3dParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cam3dParameter* Cam3dParameter::New(::google::protobuf::Arena* arena) const {
  Cam3dParameter* n = new Cam3dParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cam3dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Cam3dParameter)
  cam3d_bottom_idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cam3dParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Cam3dParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cam3d_bottom_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cam3d_bottom_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cam3d_bottom_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Cam3dParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Cam3dParameter)
  return false;
#undef DO_
}

void Cam3dParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Cam3dParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cam3d_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cam3d_bottom_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Cam3dParameter)
}

::google::protobuf::uint8* Cam3dParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Cam3dParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cam3d_bottom_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cam3d_bottom_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Cam3dParameter)
  return target;
}

size_t Cam3dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Cam3dParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 cam3d_bottom_idx = 1;
  if (has_cam3d_bottom_idx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cam3d_bottom_idx());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cam3dParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Cam3dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Cam3dParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cam3dParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Cam3dParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Cam3dParameter)
    MergeFrom(*source);
  }
}

void Cam3dParameter::MergeFrom(const Cam3dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Cam3dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cam3d_bottom_idx()) {
    set_cam3d_bottom_idx(from.cam3d_bottom_idx());
  }
}

void Cam3dParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Cam3dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cam3dParameter::CopyFrom(const Cam3dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Cam3dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cam3dParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Cam3dParameter::Swap(Cam3dParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cam3dParameter::InternalSwap(Cam3dParameter* other) {
  std::swap(cam3d_bottom_idx_, other->cam3d_bottom_idx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cam3dParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cam3dParameter

// required uint32 cam3d_bottom_idx = 1;
bool Cam3dParameter::has_cam3d_bottom_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cam3dParameter::set_has_cam3d_bottom_idx() {
  _has_bits_[0] |= 0x00000001u;
}
void Cam3dParameter::clear_has_cam3d_bottom_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cam3dParameter::clear_cam3d_bottom_idx() {
  cam3d_bottom_idx_ = 0u;
  clear_has_cam3d_bottom_idx();
}
::google::protobuf::uint32 Cam3dParameter::cam3d_bottom_idx() const {
  // @@protoc_insertion_point(field_get:caffe.Cam3dParameter.cam3d_bottom_idx)
  return cam3d_bottom_idx_;
}
void Cam3dParameter::set_cam3d_bottom_idx(::google::protobuf::uint32 value) {
  set_has_cam3d_bottom_idx();
  cam3d_bottom_idx_ = value;
  // @@protoc_insertion_point(field_set:caffe.Cam3dParameter.cam3d_bottom_idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionOutputSSDParameter::kNmsParamFieldNumber;
const int DetectionOutputSSDParameter::kThresholdFieldNumber;
const int DetectionOutputSSDParameter::kChannelPerScaleFieldNumber;
const int DetectionOutputSSDParameter::kClassNameListFieldNumber;
const int DetectionOutputSSDParameter::kNumClassFieldNumber;
const int DetectionOutputSSDParameter::kRefineOutOfMapBboxFieldNumber;
const int DetectionOutputSSDParameter::kClassIndexesFieldNumber;
const int DetectionOutputSSDParameter::kHeatMapAFieldNumber;
const int DetectionOutputSSDParameter::kHeatMapBFieldNumber;
const int DetectionOutputSSDParameter::kThresholdObjectnessFieldNumber;
const int DetectionOutputSSDParameter::kProposalMinSqrtAreaFieldNumber;
const int DetectionOutputSSDParameter::kProposalMaxSqrtAreaFieldNumber;
const int DetectionOutputSSDParameter::kBgAsOneOfSoftmaxFieldNumber;
const int DetectionOutputSSDParameter::kUseTargetTypeRcnnFieldNumber;
const int DetectionOutputSSDParameter::kImWidthFieldNumber;
const int DetectionOutputSSDParameter::kImHeightFieldNumber;
const int DetectionOutputSSDParameter::kRpnProposalOutputScoreFieldNumber;
const int DetectionOutputSSDParameter::kRegressAgnosticFieldNumber;
const int DetectionOutputSSDParameter::kGenAnchorParamFieldNumber;
const int DetectionOutputSSDParameter::kAllowBorderFieldNumber;
const int DetectionOutputSSDParameter::kAllowBorderRatioFieldNumber;
const int DetectionOutputSSDParameter::kBboxSizeAddOneFieldNumber;
const int DetectionOutputSSDParameter::kReadWidthScaleFieldNumber;
const int DetectionOutputSSDParameter::kReadHeightScaleFieldNumber;
const int DetectionOutputSSDParameter::kReadHeightOffsetFieldNumber;
const int DetectionOutputSSDParameter::kMinSizeHFieldNumber;
const int DetectionOutputSSDParameter::kMinSizeWFieldNumber;
const int DetectionOutputSSDParameter::kMinSizeModeFieldNumber;
const int DetectionOutputSSDParameter::kKptsParamFieldNumber;
const int DetectionOutputSSDParameter::kAtrsParamFieldNumber;
const int DetectionOutputSSDParameter::kFtrsParamFieldNumber;
const int DetectionOutputSSDParameter::kSpmpParamFieldNumber;
const int DetectionOutputSSDParameter::kCam3DParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionOutputSSDParameter::DetectionOutputSSDParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DetectionOutputSSDParameter)
}
DetectionOutputSSDParameter::DetectionOutputSSDParameter(const DetectionOutputSSDParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      threshold_(from.threshold_),
      class_indexes_(from.class_indexes_),
      heat_map_a_(from.heat_map_a_),
      proposal_min_sqrt_area_(from.proposal_min_sqrt_area_),
      proposal_max_sqrt_area_(from.proposal_max_sqrt_area_),
      heat_map_b_(from.heat_map_b_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name_list()) {
    class_name_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_list_);
  }
  if (from.has_nms_param()) {
    nms_param_ = new ::caffe::NMSSSDParameter(*from.nms_param_);
  } else {
    nms_param_ = NULL;
  }
  if (from.has_gen_anchor_param()) {
    gen_anchor_param_ = new ::caffe::GenerateAnchorParameter(*from.gen_anchor_param_);
  } else {
    gen_anchor_param_ = NULL;
  }
  if (from.has_kpts_param()) {
    kpts_param_ = new ::caffe::KPTSParameter(*from.kpts_param_);
  } else {
    kpts_param_ = NULL;
  }
  if (from.has_atrs_param()) {
    atrs_param_ = new ::caffe::ATRSParameter(*from.atrs_param_);
  } else {
    atrs_param_ = NULL;
  }
  if (from.has_ftrs_param()) {
    ftrs_param_ = new ::caffe::FTRSParameter(*from.ftrs_param_);
  } else {
    ftrs_param_ = NULL;
  }
  if (from.has_spmp_param()) {
    spmp_param_ = new ::caffe::SPMPParameter(*from.spmp_param_);
  } else {
    spmp_param_ = NULL;
  }
  if (from.has_cam3d_param()) {
    cam3d_param_ = new ::caffe::Cam3dParameter(*from.cam3d_param_);
  } else {
    cam3d_param_ = NULL;
  }
  ::memcpy(&threshold_objectness_, &from.threshold_objectness_,
    reinterpret_cast<char*>(&min_size_h_) -
    reinterpret_cast<char*>(&threshold_objectness_) + sizeof(min_size_h_));
  // @@protoc_insertion_point(copy_constructor:caffe.DetectionOutputSSDParameter)
}

void DetectionOutputSSDParameter::SharedCtor() {
  _cached_size_ = 0;
  class_name_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nms_param_, 0, reinterpret_cast<char*>(&min_size_mode_) -
    reinterpret_cast<char*>(&nms_param_) + sizeof(min_size_mode_));
  min_size_w_ = 2;
  channel_per_scale_ = 5u;
  num_class_ = 1u;
  use_target_type_rcnn_ = true;
  regress_agnostic_ = true;
  bbox_size_add_one_ = true;
  allow_border_ = -1;
  allow_border_ratio_ = -1;
  read_width_scale_ = 1;
  read_height_scale_ = 1;
  min_size_h_ = 2;
}

DetectionOutputSSDParameter::~DetectionOutputSSDParameter() {
  // @@protoc_insertion_point(destructor:caffe.DetectionOutputSSDParameter)
  SharedDtor();
}

void DetectionOutputSSDParameter::SharedDtor() {
  class_name_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete nms_param_;
  }
  if (this != internal_default_instance()) {
    delete gen_anchor_param_;
  }
  if (this != internal_default_instance()) {
    delete kpts_param_;
  }
  if (this != internal_default_instance()) {
    delete atrs_param_;
  }
  if (this != internal_default_instance()) {
    delete ftrs_param_;
  }
  if (this != internal_default_instance()) {
    delete spmp_param_;
  }
  if (this != internal_default_instance()) {
    delete cam3d_param_;
  }
}

void DetectionOutputSSDParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionOutputSSDParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectionOutputSSDParameter& DetectionOutputSSDParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectionOutputSSDParameter* DetectionOutputSSDParameter::New(::google::protobuf::Arena* arena) const {
  DetectionOutputSSDParameter* n = new DetectionOutputSSDParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectionOutputSSDParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DetectionOutputSSDParameter)
  threshold_.Clear();
  class_indexes_.Clear();
  heat_map_a_.Clear();
  proposal_min_sqrt_area_.Clear();
  proposal_max_sqrt_area_.Clear();
  heat_map_b_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_class_name_list()) {
      GOOGLE_DCHECK(!class_name_list_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*class_name_list_.UnsafeRawStringPointer())->clear();
    }
    if (has_nms_param()) {
      GOOGLE_DCHECK(nms_param_ != NULL);
      nms_param_->::caffe::NMSSSDParameter::Clear();
    }
    if (has_gen_anchor_param()) {
      GOOGLE_DCHECK(gen_anchor_param_ != NULL);
      gen_anchor_param_->::caffe::GenerateAnchorParameter::Clear();
    }
    if (has_kpts_param()) {
      GOOGLE_DCHECK(kpts_param_ != NULL);
      kpts_param_->::caffe::KPTSParameter::Clear();
    }
    if (has_atrs_param()) {
      GOOGLE_DCHECK(atrs_param_ != NULL);
      atrs_param_->::caffe::ATRSParameter::Clear();
    }
    if (has_ftrs_param()) {
      GOOGLE_DCHECK(ftrs_param_ != NULL);
      ftrs_param_->::caffe::FTRSParameter::Clear();
    }
    if (has_spmp_param()) {
      GOOGLE_DCHECK(spmp_param_ != NULL);
      spmp_param_->::caffe::SPMPParameter::Clear();
    }
    if (has_cam3d_param()) {
      GOOGLE_DCHECK(cam3d_param_ != NULL);
      cam3d_param_->::caffe::Cam3dParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&threshold_objectness_, 0, reinterpret_cast<char*>(&min_size_mode_) -
      reinterpret_cast<char*>(&threshold_objectness_) + sizeof(min_size_mode_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    min_size_w_ = 2;
    channel_per_scale_ = 5u;
    num_class_ = 1u;
    use_target_type_rcnn_ = true;
    regress_agnostic_ = true;
    bbox_size_add_one_ = true;
    allow_border_ = -1;
    allow_border_ratio_ = -1;
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    read_width_scale_ = 1;
    read_height_scale_ = 1;
    min_size_h_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectionOutputSSDParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DetectionOutputSSDParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.NMSSSDParameter nms_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nms_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_threshold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_threshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_per_scale = 3 [default = 5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel_per_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_per_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_name_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name_list().data(), this->class_name_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DetectionOutputSSDParameter.class_name_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_class = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool refine_out_of_map_bbox = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_refine_out_of_map_bbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refine_out_of_map_bbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 class_indexes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_class_indexes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_class_indexes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float heat_map_a = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_heat_map_a())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_heat_map_a())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float threshold_objectness = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_threshold_objectness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_objectness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float proposal_min_sqrt_area = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85u, input, this->mutable_proposal_min_sqrt_area())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_proposal_min_sqrt_area())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float proposal_max_sqrt_area = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93u, input, this->mutable_proposal_max_sqrt_area())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_proposal_max_sqrt_area())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bg_as_one_of_softmax = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_bg_as_one_of_softmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bg_as_one_of_softmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float heat_map_b = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109u, input, this->mutable_heat_map_b())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_heat_map_b())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_target_type_rcnn = 14 [default = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_use_target_type_rcnn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_target_type_rcnn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float im_width = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_im_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &im_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float im_height = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_im_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &im_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rpn_proposal_output_score = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_rpn_proposal_output_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rpn_proposal_output_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool regress_agnostic = 18 [default = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_regress_agnostic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &regress_agnostic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gen_anchor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float allow_border = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_allow_border();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allow_border_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float allow_border_ratio = 21 [default = -1];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_allow_border_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allow_border_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bbox_size_add_one = 22 [default = true];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_bbox_size_add_one();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_size_add_one_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float read_width_scale = 29 [default = 1];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u)) {
          set_has_read_width_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &read_width_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float read_height_scale = 30 [default = 1];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u)) {
          set_has_read_height_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &read_height_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 read_height_offset = 31 [default = 0];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_read_height_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_height_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_size_h = 32 [default = 2];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(261u)) {
          set_has_min_size_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_size_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_size_w = 33 [default = 2];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(269u)) {
          set_has_min_size_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_size_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(value)) {
            set_min_size_mode(static_cast< ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.KPTSParameter kpts_param = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kpts_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ATRSParameter atrs_param = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atrs_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FTRSParameter ftrs_param = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ftrs_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPMPParameter spmp_param = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spmp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.Cam3dParameter cam3d_param = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cam3d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DetectionOutputSSDParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DetectionOutputSSDParameter)
  return false;
#undef DO_
}

void DetectionOutputSSDParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DetectionOutputSSDParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.NMSSSDParameter nms_param = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nms_param_, output);
  }

  // repeated float threshold = 2;
  for (int i = 0, n = this->threshold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->threshold(i), output);
  }

  // optional uint32 channel_per_scale = 3 [default = 5];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_per_scale(), output);
  }

  // optional string class_name_list = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name_list().data(), this->class_name_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DetectionOutputSSDParameter.class_name_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->class_name_list(), output);
  }

  // optional uint32 num_class = 5 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_class(), output);
  }

  // optional bool refine_out_of_map_bbox = 6 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->refine_out_of_map_bbox(), output);
  }

  // repeated uint32 class_indexes = 7;
  for (int i = 0, n = this->class_indexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->class_indexes(i), output);
  }

  // repeated float heat_map_a = 8;
  for (int i = 0, n = this->heat_map_a_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->heat_map_a(i), output);
  }

  // optional float threshold_objectness = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->threshold_objectness(), output);
  }

  // repeated float proposal_min_sqrt_area = 10;
  for (int i = 0, n = this->proposal_min_sqrt_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->proposal_min_sqrt_area(i), output);
  }

  // repeated float proposal_max_sqrt_area = 11;
  for (int i = 0, n = this->proposal_max_sqrt_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->proposal_max_sqrt_area(i), output);
  }

  // optional bool bg_as_one_of_softmax = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bg_as_one_of_softmax(), output);
  }

  // repeated float heat_map_b = 13;
  for (int i = 0, n = this->heat_map_b_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->heat_map_b(i), output);
  }

  // optional bool use_target_type_rcnn = 14 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_target_type_rcnn(), output);
  }

  // optional float im_width = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->im_width(), output);
  }

  // optional float im_height = 16 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->im_height(), output);
  }

  // optional bool rpn_proposal_output_score = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->rpn_proposal_output_score(), output);
  }

  // optional bool regress_agnostic = 18 [default = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->regress_agnostic(), output);
  }

  // optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->gen_anchor_param_, output);
  }

  // optional float allow_border = 20 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->allow_border(), output);
  }

  // optional float allow_border_ratio = 21 [default = -1];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->allow_border_ratio(), output);
  }

  // optional bool bbox_size_add_one = 22 [default = true];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->bbox_size_add_one(), output);
  }

  // optional float read_width_scale = 29 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->read_width_scale(), output);
  }

  // optional float read_height_scale = 30 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->read_height_scale(), output);
  }

  // optional uint32 read_height_offset = 31 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->read_height_offset(), output);
  }

  // optional float min_size_h = 32 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->min_size_h(), output);
  }

  // optional float min_size_w = 33 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->min_size_w(), output);
  }

  // optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->min_size_mode(), output);
  }

  // optional .caffe.KPTSParameter kpts_param = 35;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->kpts_param_, output);
  }

  // optional .caffe.ATRSParameter atrs_param = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->atrs_param_, output);
  }

  // optional .caffe.FTRSParameter ftrs_param = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->ftrs_param_, output);
  }

  // optional .caffe.SPMPParameter spmp_param = 38;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->spmp_param_, output);
  }

  // optional .caffe.Cam3dParameter cam3d_param = 39;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->cam3d_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DetectionOutputSSDParameter)
}

::google::protobuf::uint8* DetectionOutputSSDParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DetectionOutputSSDParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.NMSSSDParameter nms_param = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nms_param_, deterministic, target);
  }

  // repeated float threshold = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->threshold_, target);

  // optional uint32 channel_per_scale = 3 [default = 5];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_per_scale(), target);
  }

  // optional string class_name_list = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name_list().data(), this->class_name_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DetectionOutputSSDParameter.class_name_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_name_list(), target);
  }

  // optional uint32 num_class = 5 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_class(), target);
  }

  // optional bool refine_out_of_map_bbox = 6 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->refine_out_of_map_bbox(), target);
  }

  // repeated uint32 class_indexes = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->class_indexes_, target);

  // repeated float heat_map_a = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->heat_map_a_, target);

  // optional float threshold_objectness = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->threshold_objectness(), target);
  }

  // repeated float proposal_min_sqrt_area = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(10, this->proposal_min_sqrt_area_, target);

  // repeated float proposal_max_sqrt_area = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(11, this->proposal_max_sqrt_area_, target);

  // optional bool bg_as_one_of_softmax = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->bg_as_one_of_softmax(), target);
  }

  // repeated float heat_map_b = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(13, this->heat_map_b_, target);

  // optional bool use_target_type_rcnn = 14 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_target_type_rcnn(), target);
  }

  // optional float im_width = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->im_width(), target);
  }

  // optional float im_height = 16 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->im_height(), target);
  }

  // optional bool rpn_proposal_output_score = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->rpn_proposal_output_score(), target);
  }

  // optional bool regress_agnostic = 18 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->regress_agnostic(), target);
  }

  // optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->gen_anchor_param_, deterministic, target);
  }

  // optional float allow_border = 20 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->allow_border(), target);
  }

  // optional float allow_border_ratio = 21 [default = -1];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->allow_border_ratio(), target);
  }

  // optional bool bbox_size_add_one = 22 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->bbox_size_add_one(), target);
  }

  // optional float read_width_scale = 29 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->read_width_scale(), target);
  }

  // optional float read_height_scale = 30 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->read_height_scale(), target);
  }

  // optional uint32 read_height_offset = 31 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->read_height_offset(), target);
  }

  // optional float min_size_h = 32 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->min_size_h(), target);
  }

  // optional float min_size_w = 33 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->min_size_w(), target);
  }

  // optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->min_size_mode(), target);
  }

  // optional .caffe.KPTSParameter kpts_param = 35;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->kpts_param_, deterministic, target);
  }

  // optional .caffe.ATRSParameter atrs_param = 36;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->atrs_param_, deterministic, target);
  }

  // optional .caffe.FTRSParameter ftrs_param = 37;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->ftrs_param_, deterministic, target);
  }

  // optional .caffe.SPMPParameter spmp_param = 38;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->spmp_param_, deterministic, target);
  }

  // optional .caffe.Cam3dParameter cam3d_param = 39;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->cam3d_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DetectionOutputSSDParameter)
  return target;
}

size_t DetectionOutputSSDParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DetectionOutputSSDParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float threshold = 2;
  {
    unsigned int count = this->threshold_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->threshold_size());
    total_size += data_size;
  }

  // repeated uint32 class_indexes = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->class_indexes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->class_indexes_size());
    total_size += data_size;
  }

  // repeated float heat_map_a = 8;
  {
    unsigned int count = this->heat_map_a_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heat_map_a_size());
    total_size += data_size;
  }

  // repeated float proposal_min_sqrt_area = 10;
  {
    unsigned int count = this->proposal_min_sqrt_area_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->proposal_min_sqrt_area_size());
    total_size += data_size;
  }

  // repeated float proposal_max_sqrt_area = 11;
  {
    unsigned int count = this->proposal_max_sqrt_area_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->proposal_max_sqrt_area_size());
    total_size += data_size;
  }

  // repeated float heat_map_b = 13;
  {
    unsigned int count = this->heat_map_b_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heat_map_b_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string class_name_list = 4;
    if (has_class_name_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name_list());
    }

    // optional .caffe.NMSSSDParameter nms_param = 1;
    if (has_nms_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nms_param_);
    }

    // optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
    if (has_gen_anchor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gen_anchor_param_);
    }

    // optional .caffe.KPTSParameter kpts_param = 35;
    if (has_kpts_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kpts_param_);
    }

    // optional .caffe.ATRSParameter atrs_param = 36;
    if (has_atrs_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->atrs_param_);
    }

    // optional .caffe.FTRSParameter ftrs_param = 37;
    if (has_ftrs_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ftrs_param_);
    }

    // optional .caffe.SPMPParameter spmp_param = 38;
    if (has_spmp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spmp_param_);
    }

    // optional .caffe.Cam3dParameter cam3d_param = 39;
    if (has_cam3d_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cam3d_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float threshold_objectness = 9 [default = 0];
    if (has_threshold_objectness()) {
      total_size += 1 + 4;
    }

    // optional bool refine_out_of_map_bbox = 6 [default = false];
    if (has_refine_out_of_map_bbox()) {
      total_size += 1 + 1;
    }

    // optional bool bg_as_one_of_softmax = 12 [default = false];
    if (has_bg_as_one_of_softmax()) {
      total_size += 1 + 1;
    }

    // optional bool rpn_proposal_output_score = 17 [default = false];
    if (has_rpn_proposal_output_score()) {
      total_size += 2 + 1;
    }

    // optional float im_width = 15 [default = 0];
    if (has_im_width()) {
      total_size += 1 + 4;
    }

    // optional float im_height = 16 [default = 0];
    if (has_im_height()) {
      total_size += 2 + 4;
    }

    // optional uint32 read_height_offset = 31 [default = 0];
    if (has_read_height_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_height_offset());
    }

    // optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
    if (has_min_size_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_size_mode());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float min_size_w = 33 [default = 2];
    if (has_min_size_w()) {
      total_size += 2 + 4;
    }

    // optional uint32 channel_per_scale = 3 [default = 5];
    if (has_channel_per_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_per_scale());
    }

    // optional uint32 num_class = 5 [default = 1];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

    // optional bool use_target_type_rcnn = 14 [default = true];
    if (has_use_target_type_rcnn()) {
      total_size += 1 + 1;
    }

    // optional bool regress_agnostic = 18 [default = true];
    if (has_regress_agnostic()) {
      total_size += 2 + 1;
    }

    // optional bool bbox_size_add_one = 22 [default = true];
    if (has_bbox_size_add_one()) {
      total_size += 2 + 1;
    }

    // optional float allow_border = 20 [default = -1];
    if (has_allow_border()) {
      total_size += 2 + 4;
    }

    // optional float allow_border_ratio = 21 [default = -1];
    if (has_allow_border_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional float read_width_scale = 29 [default = 1];
    if (has_read_width_scale()) {
      total_size += 2 + 4;
    }

    // optional float read_height_scale = 30 [default = 1];
    if (has_read_height_scale()) {
      total_size += 2 + 4;
    }

    // optional float min_size_h = 32 [default = 2];
    if (has_min_size_h()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionOutputSSDParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DetectionOutputSSDParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionOutputSSDParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionOutputSSDParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DetectionOutputSSDParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DetectionOutputSSDParameter)
    MergeFrom(*source);
  }
}

void DetectionOutputSSDParameter::MergeFrom(const DetectionOutputSSDParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DetectionOutputSSDParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_.MergeFrom(from.threshold_);
  class_indexes_.MergeFrom(from.class_indexes_);
  heat_map_a_.MergeFrom(from.heat_map_a_);
  proposal_min_sqrt_area_.MergeFrom(from.proposal_min_sqrt_area_);
  proposal_max_sqrt_area_.MergeFrom(from.proposal_max_sqrt_area_);
  heat_map_b_.MergeFrom(from.heat_map_b_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_class_name_list();
      class_name_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_nms_param()->::caffe::NMSSSDParameter::MergeFrom(from.nms_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gen_anchor_param()->::caffe::GenerateAnchorParameter::MergeFrom(from.gen_anchor_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_kpts_param()->::caffe::KPTSParameter::MergeFrom(from.kpts_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_atrs_param()->::caffe::ATRSParameter::MergeFrom(from.atrs_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ftrs_param()->::caffe::FTRSParameter::MergeFrom(from.ftrs_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_spmp_param()->::caffe::SPMPParameter::MergeFrom(from.spmp_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cam3d_param()->::caffe::Cam3dParameter::MergeFrom(from.cam3d_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      threshold_objectness_ = from.threshold_objectness_;
    }
    if (cached_has_bits & 0x00000200u) {
      refine_out_of_map_bbox_ = from.refine_out_of_map_bbox_;
    }
    if (cached_has_bits & 0x00000400u) {
      bg_as_one_of_softmax_ = from.bg_as_one_of_softmax_;
    }
    if (cached_has_bits & 0x00000800u) {
      rpn_proposal_output_score_ = from.rpn_proposal_output_score_;
    }
    if (cached_has_bits & 0x00001000u) {
      im_width_ = from.im_width_;
    }
    if (cached_has_bits & 0x00002000u) {
      im_height_ = from.im_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      read_height_offset_ = from.read_height_offset_;
    }
    if (cached_has_bits & 0x00008000u) {
      min_size_mode_ = from.min_size_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      min_size_w_ = from.min_size_w_;
    }
    if (cached_has_bits & 0x00020000u) {
      channel_per_scale_ = from.channel_per_scale_;
    }
    if (cached_has_bits & 0x00040000u) {
      num_class_ = from.num_class_;
    }
    if (cached_has_bits & 0x00080000u) {
      use_target_type_rcnn_ = from.use_target_type_rcnn_;
    }
    if (cached_has_bits & 0x00100000u) {
      regress_agnostic_ = from.regress_agnostic_;
    }
    if (cached_has_bits & 0x00200000u) {
      bbox_size_add_one_ = from.bbox_size_add_one_;
    }
    if (cached_has_bits & 0x00400000u) {
      allow_border_ = from.allow_border_;
    }
    if (cached_has_bits & 0x00800000u) {
      allow_border_ratio_ = from.allow_border_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      read_width_scale_ = from.read_width_scale_;
    }
    if (cached_has_bits & 0x02000000u) {
      read_height_scale_ = from.read_height_scale_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_size_h_ = from.min_size_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionOutputSSDParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DetectionOutputSSDParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionOutputSSDParameter::CopyFrom(const DetectionOutputSSDParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DetectionOutputSSDParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOutputSSDParameter::IsInitialized() const {
  if (has_kpts_param()) {
    if (!this->kpts_param_->IsInitialized()) return false;
  }
  if (has_atrs_param()) {
    if (!this->atrs_param_->IsInitialized()) return false;
  }
  if (has_ftrs_param()) {
    if (!this->ftrs_param_->IsInitialized()) return false;
  }
  if (has_spmp_param()) {
    if (!this->spmp_param_->IsInitialized()) return false;
  }
  if (has_cam3d_param()) {
    if (!this->cam3d_param_->IsInitialized()) return false;
  }
  return true;
}

void DetectionOutputSSDParameter::Swap(DetectionOutputSSDParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionOutputSSDParameter::InternalSwap(DetectionOutputSSDParameter* other) {
  threshold_.InternalSwap(&other->threshold_);
  class_indexes_.InternalSwap(&other->class_indexes_);
  heat_map_a_.InternalSwap(&other->heat_map_a_);
  proposal_min_sqrt_area_.InternalSwap(&other->proposal_min_sqrt_area_);
  proposal_max_sqrt_area_.InternalSwap(&other->proposal_max_sqrt_area_);
  heat_map_b_.InternalSwap(&other->heat_map_b_);
  class_name_list_.Swap(&other->class_name_list_);
  std::swap(nms_param_, other->nms_param_);
  std::swap(gen_anchor_param_, other->gen_anchor_param_);
  std::swap(kpts_param_, other->kpts_param_);
  std::swap(atrs_param_, other->atrs_param_);
  std::swap(ftrs_param_, other->ftrs_param_);
  std::swap(spmp_param_, other->spmp_param_);
  std::swap(cam3d_param_, other->cam3d_param_);
  std::swap(threshold_objectness_, other->threshold_objectness_);
  std::swap(refine_out_of_map_bbox_, other->refine_out_of_map_bbox_);
  std::swap(bg_as_one_of_softmax_, other->bg_as_one_of_softmax_);
  std::swap(rpn_proposal_output_score_, other->rpn_proposal_output_score_);
  std::swap(im_width_, other->im_width_);
  std::swap(im_height_, other->im_height_);
  std::swap(read_height_offset_, other->read_height_offset_);
  std::swap(min_size_mode_, other->min_size_mode_);
  std::swap(min_size_w_, other->min_size_w_);
  std::swap(channel_per_scale_, other->channel_per_scale_);
  std::swap(num_class_, other->num_class_);
  std::swap(use_target_type_rcnn_, other->use_target_type_rcnn_);
  std::swap(regress_agnostic_, other->regress_agnostic_);
  std::swap(bbox_size_add_one_, other->bbox_size_add_one_);
  std::swap(allow_border_, other->allow_border_);
  std::swap(allow_border_ratio_, other->allow_border_ratio_);
  std::swap(read_width_scale_, other->read_width_scale_);
  std::swap(read_height_scale_, other->read_height_scale_);
  std::swap(min_size_h_, other->min_size_h_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectionOutputSSDParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectionOutputSSDParameter

// optional .caffe.NMSSSDParameter nms_param = 1;
bool DetectionOutputSSDParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectionOutputSSDParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectionOutputSSDParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectionOutputSSDParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NMSSSDParameter::Clear();
  clear_has_nms_param();
}
const ::caffe::NMSSSDParameter& DetectionOutputSSDParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::caffe::NMSSSDParameter::internal_default_instance();
}
::caffe::NMSSSDParameter* DetectionOutputSSDParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NMSSSDParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.nms_param)
  return nms_param_;
}
::caffe::NMSSSDParameter* DetectionOutputSSDParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NMSSSDParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_nms_param(::caffe::NMSSSDParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.nms_param)
}

// repeated float threshold = 2;
int DetectionOutputSSDParameter::threshold_size() const {
  return threshold_.size();
}
void DetectionOutputSSDParameter::clear_threshold() {
  threshold_.Clear();
}
float DetectionOutputSSDParameter::threshold(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.threshold)
  return threshold_.Get(index);
}
void DetectionOutputSSDParameter::set_threshold(int index, float value) {
  threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.threshold)
}
void DetectionOutputSSDParameter::add_threshold(float value) {
  threshold_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.threshold)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::threshold() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.threshold)
  return threshold_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_threshold() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.threshold)
  return &threshold_;
}

// optional uint32 channel_per_scale = 3 [default = 5];
bool DetectionOutputSSDParameter::has_channel_per_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DetectionOutputSSDParameter::set_has_channel_per_scale() {
  _has_bits_[0] |= 0x00020000u;
}
void DetectionOutputSSDParameter::clear_has_channel_per_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
void DetectionOutputSSDParameter::clear_channel_per_scale() {
  channel_per_scale_ = 5u;
  clear_has_channel_per_scale();
}
::google::protobuf::uint32 DetectionOutputSSDParameter::channel_per_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.channel_per_scale)
  return channel_per_scale_;
}
void DetectionOutputSSDParameter::set_channel_per_scale(::google::protobuf::uint32 value) {
  set_has_channel_per_scale();
  channel_per_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.channel_per_scale)
}

// optional string class_name_list = 4;
bool DetectionOutputSSDParameter::has_class_name_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectionOutputSSDParameter::set_has_class_name_list() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectionOutputSSDParameter::clear_has_class_name_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectionOutputSSDParameter::clear_class_name_list() {
  class_name_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name_list();
}
const ::std::string& DetectionOutputSSDParameter::class_name_list() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.class_name_list)
  return class_name_list_.GetNoArena();
}
void DetectionOutputSSDParameter::set_class_name_list(const ::std::string& value) {
  set_has_class_name_list();
  class_name_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.class_name_list)
}
#if LANG_CXX11
void DetectionOutputSSDParameter::set_class_name_list(::std::string&& value) {
  set_has_class_name_list();
  class_name_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DetectionOutputSSDParameter.class_name_list)
}
#endif
void DetectionOutputSSDParameter::set_class_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_name_list();
  class_name_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionOutputSSDParameter.class_name_list)
}
void DetectionOutputSSDParameter::set_class_name_list(const char* value, size_t size) {
  set_has_class_name_list();
  class_name_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionOutputSSDParameter.class_name_list)
}
::std::string* DetectionOutputSSDParameter::mutable_class_name_list() {
  set_has_class_name_list();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.class_name_list)
  return class_name_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DetectionOutputSSDParameter::release_class_name_list() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.class_name_list)
  clear_has_class_name_list();
  return class_name_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DetectionOutputSSDParameter::set_allocated_class_name_list(::std::string* class_name_list) {
  if (class_name_list != NULL) {
    set_has_class_name_list();
  } else {
    clear_has_class_name_list();
  }
  class_name_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name_list);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.class_name_list)
}

// optional uint32 num_class = 5 [default = 1];
bool DetectionOutputSSDParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DetectionOutputSSDParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00040000u;
}
void DetectionOutputSSDParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00040000u;
}
void DetectionOutputSSDParameter::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
::google::protobuf::uint32 DetectionOutputSSDParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.num_class)
  return num_class_;
}
void DetectionOutputSSDParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.num_class)
}

// optional bool refine_out_of_map_bbox = 6 [default = false];
bool DetectionOutputSSDParameter::has_refine_out_of_map_bbox() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DetectionOutputSSDParameter::set_has_refine_out_of_map_bbox() {
  _has_bits_[0] |= 0x00000200u;
}
void DetectionOutputSSDParameter::clear_has_refine_out_of_map_bbox() {
  _has_bits_[0] &= ~0x00000200u;
}
void DetectionOutputSSDParameter::clear_refine_out_of_map_bbox() {
  refine_out_of_map_bbox_ = false;
  clear_has_refine_out_of_map_bbox();
}
bool DetectionOutputSSDParameter::refine_out_of_map_bbox() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.refine_out_of_map_bbox)
  return refine_out_of_map_bbox_;
}
void DetectionOutputSSDParameter::set_refine_out_of_map_bbox(bool value) {
  set_has_refine_out_of_map_bbox();
  refine_out_of_map_bbox_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.refine_out_of_map_bbox)
}

// repeated uint32 class_indexes = 7;
int DetectionOutputSSDParameter::class_indexes_size() const {
  return class_indexes_.size();
}
void DetectionOutputSSDParameter::clear_class_indexes() {
  class_indexes_.Clear();
}
::google::protobuf::uint32 DetectionOutputSSDParameter::class_indexes(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.class_indexes)
  return class_indexes_.Get(index);
}
void DetectionOutputSSDParameter::set_class_indexes(int index, ::google::protobuf::uint32 value) {
  class_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.class_indexes)
}
void DetectionOutputSSDParameter::add_class_indexes(::google::protobuf::uint32 value) {
  class_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.class_indexes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetectionOutputSSDParameter::class_indexes() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.class_indexes)
  return class_indexes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetectionOutputSSDParameter::mutable_class_indexes() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.class_indexes)
  return &class_indexes_;
}

// repeated float heat_map_a = 8;
int DetectionOutputSSDParameter::heat_map_a_size() const {
  return heat_map_a_.size();
}
void DetectionOutputSSDParameter::clear_heat_map_a() {
  heat_map_a_.Clear();
}
float DetectionOutputSSDParameter::heat_map_a(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.heat_map_a)
  return heat_map_a_.Get(index);
}
void DetectionOutputSSDParameter::set_heat_map_a(int index, float value) {
  heat_map_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.heat_map_a)
}
void DetectionOutputSSDParameter::add_heat_map_a(float value) {
  heat_map_a_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.heat_map_a)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.heat_map_a)
  return heat_map_a_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_heat_map_a() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.heat_map_a)
  return &heat_map_a_;
}

// repeated float heat_map_b = 13;
int DetectionOutputSSDParameter::heat_map_b_size() const {
  return heat_map_b_.size();
}
void DetectionOutputSSDParameter::clear_heat_map_b() {
  heat_map_b_.Clear();
}
float DetectionOutputSSDParameter::heat_map_b(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.heat_map_b)
  return heat_map_b_.Get(index);
}
void DetectionOutputSSDParameter::set_heat_map_b(int index, float value) {
  heat_map_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.heat_map_b)
}
void DetectionOutputSSDParameter::add_heat_map_b(float value) {
  heat_map_b_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.heat_map_b)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.heat_map_b)
  return heat_map_b_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_heat_map_b() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.heat_map_b)
  return &heat_map_b_;
}

// optional float threshold_objectness = 9 [default = 0];
bool DetectionOutputSSDParameter::has_threshold_objectness() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DetectionOutputSSDParameter::set_has_threshold_objectness() {
  _has_bits_[0] |= 0x00000100u;
}
void DetectionOutputSSDParameter::clear_has_threshold_objectness() {
  _has_bits_[0] &= ~0x00000100u;
}
void DetectionOutputSSDParameter::clear_threshold_objectness() {
  threshold_objectness_ = 0;
  clear_has_threshold_objectness();
}
float DetectionOutputSSDParameter::threshold_objectness() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.threshold_objectness)
  return threshold_objectness_;
}
void DetectionOutputSSDParameter::set_threshold_objectness(float value) {
  set_has_threshold_objectness();
  threshold_objectness_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.threshold_objectness)
}

// repeated float proposal_min_sqrt_area = 10;
int DetectionOutputSSDParameter::proposal_min_sqrt_area_size() const {
  return proposal_min_sqrt_area_.size();
}
void DetectionOutputSSDParameter::clear_proposal_min_sqrt_area() {
  proposal_min_sqrt_area_.Clear();
}
float DetectionOutputSSDParameter::proposal_min_sqrt_area(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
  return proposal_min_sqrt_area_.Get(index);
}
void DetectionOutputSSDParameter::set_proposal_min_sqrt_area(int index, float value) {
  proposal_min_sqrt_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
}
void DetectionOutputSSDParameter::add_proposal_min_sqrt_area(float value) {
  proposal_min_sqrt_area_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::proposal_min_sqrt_area() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
  return proposal_min_sqrt_area_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_proposal_min_sqrt_area() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.proposal_min_sqrt_area)
  return &proposal_min_sqrt_area_;
}

// repeated float proposal_max_sqrt_area = 11;
int DetectionOutputSSDParameter::proposal_max_sqrt_area_size() const {
  return proposal_max_sqrt_area_.size();
}
void DetectionOutputSSDParameter::clear_proposal_max_sqrt_area() {
  proposal_max_sqrt_area_.Clear();
}
float DetectionOutputSSDParameter::proposal_max_sqrt_area(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
  return proposal_max_sqrt_area_.Get(index);
}
void DetectionOutputSSDParameter::set_proposal_max_sqrt_area(int index, float value) {
  proposal_max_sqrt_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
}
void DetectionOutputSSDParameter::add_proposal_max_sqrt_area(float value) {
  proposal_max_sqrt_area_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
}
const ::google::protobuf::RepeatedField< float >&
DetectionOutputSSDParameter::proposal_max_sqrt_area() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
  return proposal_max_sqrt_area_;
}
::google::protobuf::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_proposal_max_sqrt_area() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputSSDParameter.proposal_max_sqrt_area)
  return &proposal_max_sqrt_area_;
}

// optional bool bg_as_one_of_softmax = 12 [default = false];
bool DetectionOutputSSDParameter::has_bg_as_one_of_softmax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DetectionOutputSSDParameter::set_has_bg_as_one_of_softmax() {
  _has_bits_[0] |= 0x00000400u;
}
void DetectionOutputSSDParameter::clear_has_bg_as_one_of_softmax() {
  _has_bits_[0] &= ~0x00000400u;
}
void DetectionOutputSSDParameter::clear_bg_as_one_of_softmax() {
  bg_as_one_of_softmax_ = false;
  clear_has_bg_as_one_of_softmax();
}
bool DetectionOutputSSDParameter::bg_as_one_of_softmax() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.bg_as_one_of_softmax)
  return bg_as_one_of_softmax_;
}
void DetectionOutputSSDParameter::set_bg_as_one_of_softmax(bool value) {
  set_has_bg_as_one_of_softmax();
  bg_as_one_of_softmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.bg_as_one_of_softmax)
}

// optional bool use_target_type_rcnn = 14 [default = true];
bool DetectionOutputSSDParameter::has_use_target_type_rcnn() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DetectionOutputSSDParameter::set_has_use_target_type_rcnn() {
  _has_bits_[0] |= 0x00080000u;
}
void DetectionOutputSSDParameter::clear_has_use_target_type_rcnn() {
  _has_bits_[0] &= ~0x00080000u;
}
void DetectionOutputSSDParameter::clear_use_target_type_rcnn() {
  use_target_type_rcnn_ = true;
  clear_has_use_target_type_rcnn();
}
bool DetectionOutputSSDParameter::use_target_type_rcnn() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.use_target_type_rcnn)
  return use_target_type_rcnn_;
}
void DetectionOutputSSDParameter::set_use_target_type_rcnn(bool value) {
  set_has_use_target_type_rcnn();
  use_target_type_rcnn_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.use_target_type_rcnn)
}

// optional float im_width = 15 [default = 0];
bool DetectionOutputSSDParameter::has_im_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DetectionOutputSSDParameter::set_has_im_width() {
  _has_bits_[0] |= 0x00001000u;
}
void DetectionOutputSSDParameter::clear_has_im_width() {
  _has_bits_[0] &= ~0x00001000u;
}
void DetectionOutputSSDParameter::clear_im_width() {
  im_width_ = 0;
  clear_has_im_width();
}
float DetectionOutputSSDParameter::im_width() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.im_width)
  return im_width_;
}
void DetectionOutputSSDParameter::set_im_width(float value) {
  set_has_im_width();
  im_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.im_width)
}

// optional float im_height = 16 [default = 0];
bool DetectionOutputSSDParameter::has_im_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DetectionOutputSSDParameter::set_has_im_height() {
  _has_bits_[0] |= 0x00002000u;
}
void DetectionOutputSSDParameter::clear_has_im_height() {
  _has_bits_[0] &= ~0x00002000u;
}
void DetectionOutputSSDParameter::clear_im_height() {
  im_height_ = 0;
  clear_has_im_height();
}
float DetectionOutputSSDParameter::im_height() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.im_height)
  return im_height_;
}
void DetectionOutputSSDParameter::set_im_height(float value) {
  set_has_im_height();
  im_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.im_height)
}

// optional bool rpn_proposal_output_score = 17 [default = false];
bool DetectionOutputSSDParameter::has_rpn_proposal_output_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DetectionOutputSSDParameter::set_has_rpn_proposal_output_score() {
  _has_bits_[0] |= 0x00000800u;
}
void DetectionOutputSSDParameter::clear_has_rpn_proposal_output_score() {
  _has_bits_[0] &= ~0x00000800u;
}
void DetectionOutputSSDParameter::clear_rpn_proposal_output_score() {
  rpn_proposal_output_score_ = false;
  clear_has_rpn_proposal_output_score();
}
bool DetectionOutputSSDParameter::rpn_proposal_output_score() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.rpn_proposal_output_score)
  return rpn_proposal_output_score_;
}
void DetectionOutputSSDParameter::set_rpn_proposal_output_score(bool value) {
  set_has_rpn_proposal_output_score();
  rpn_proposal_output_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.rpn_proposal_output_score)
}

// optional bool regress_agnostic = 18 [default = true];
bool DetectionOutputSSDParameter::has_regress_agnostic() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DetectionOutputSSDParameter::set_has_regress_agnostic() {
  _has_bits_[0] |= 0x00100000u;
}
void DetectionOutputSSDParameter::clear_has_regress_agnostic() {
  _has_bits_[0] &= ~0x00100000u;
}
void DetectionOutputSSDParameter::clear_regress_agnostic() {
  regress_agnostic_ = true;
  clear_has_regress_agnostic();
}
bool DetectionOutputSSDParameter::regress_agnostic() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.regress_agnostic)
  return regress_agnostic_;
}
void DetectionOutputSSDParameter::set_regress_agnostic(bool value) {
  set_has_regress_agnostic();
  regress_agnostic_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.regress_agnostic)
}

// optional .caffe.GenerateAnchorParameter gen_anchor_param = 19;
bool DetectionOutputSSDParameter::has_gen_anchor_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectionOutputSSDParameter::set_has_gen_anchor_param() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectionOutputSSDParameter::clear_has_gen_anchor_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectionOutputSSDParameter::clear_gen_anchor_param() {
  if (gen_anchor_param_ != NULL) gen_anchor_param_->::caffe::GenerateAnchorParameter::Clear();
  clear_has_gen_anchor_param();
}
const ::caffe::GenerateAnchorParameter& DetectionOutputSSDParameter::gen_anchor_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.gen_anchor_param)
  return gen_anchor_param_ != NULL ? *gen_anchor_param_
                         : *::caffe::GenerateAnchorParameter::internal_default_instance();
}
::caffe::GenerateAnchorParameter* DetectionOutputSSDParameter::mutable_gen_anchor_param() {
  set_has_gen_anchor_param();
  if (gen_anchor_param_ == NULL) {
    gen_anchor_param_ = new ::caffe::GenerateAnchorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.gen_anchor_param)
  return gen_anchor_param_;
}
::caffe::GenerateAnchorParameter* DetectionOutputSSDParameter::release_gen_anchor_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.gen_anchor_param)
  clear_has_gen_anchor_param();
  ::caffe::GenerateAnchorParameter* temp = gen_anchor_param_;
  gen_anchor_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_gen_anchor_param(::caffe::GenerateAnchorParameter* gen_anchor_param) {
  delete gen_anchor_param_;
  gen_anchor_param_ = gen_anchor_param;
  if (gen_anchor_param) {
    set_has_gen_anchor_param();
  } else {
    clear_has_gen_anchor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.gen_anchor_param)
}

// optional float allow_border = 20 [default = -1];
bool DetectionOutputSSDParameter::has_allow_border() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DetectionOutputSSDParameter::set_has_allow_border() {
  _has_bits_[0] |= 0x00400000u;
}
void DetectionOutputSSDParameter::clear_has_allow_border() {
  _has_bits_[0] &= ~0x00400000u;
}
void DetectionOutputSSDParameter::clear_allow_border() {
  allow_border_ = -1;
  clear_has_allow_border();
}
float DetectionOutputSSDParameter::allow_border() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.allow_border)
  return allow_border_;
}
void DetectionOutputSSDParameter::set_allow_border(float value) {
  set_has_allow_border();
  allow_border_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.allow_border)
}

// optional float allow_border_ratio = 21 [default = -1];
bool DetectionOutputSSDParameter::has_allow_border_ratio() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DetectionOutputSSDParameter::set_has_allow_border_ratio() {
  _has_bits_[0] |= 0x00800000u;
}
void DetectionOutputSSDParameter::clear_has_allow_border_ratio() {
  _has_bits_[0] &= ~0x00800000u;
}
void DetectionOutputSSDParameter::clear_allow_border_ratio() {
  allow_border_ratio_ = -1;
  clear_has_allow_border_ratio();
}
float DetectionOutputSSDParameter::allow_border_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.allow_border_ratio)
  return allow_border_ratio_;
}
void DetectionOutputSSDParameter::set_allow_border_ratio(float value) {
  set_has_allow_border_ratio();
  allow_border_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.allow_border_ratio)
}

// optional bool bbox_size_add_one = 22 [default = true];
bool DetectionOutputSSDParameter::has_bbox_size_add_one() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DetectionOutputSSDParameter::set_has_bbox_size_add_one() {
  _has_bits_[0] |= 0x00200000u;
}
void DetectionOutputSSDParameter::clear_has_bbox_size_add_one() {
  _has_bits_[0] &= ~0x00200000u;
}
void DetectionOutputSSDParameter::clear_bbox_size_add_one() {
  bbox_size_add_one_ = true;
  clear_has_bbox_size_add_one();
}
bool DetectionOutputSSDParameter::bbox_size_add_one() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.bbox_size_add_one)
  return bbox_size_add_one_;
}
void DetectionOutputSSDParameter::set_bbox_size_add_one(bool value) {
  set_has_bbox_size_add_one();
  bbox_size_add_one_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.bbox_size_add_one)
}

// optional float read_width_scale = 29 [default = 1];
bool DetectionOutputSSDParameter::has_read_width_scale() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DetectionOutputSSDParameter::set_has_read_width_scale() {
  _has_bits_[0] |= 0x01000000u;
}
void DetectionOutputSSDParameter::clear_has_read_width_scale() {
  _has_bits_[0] &= ~0x01000000u;
}
void DetectionOutputSSDParameter::clear_read_width_scale() {
  read_width_scale_ = 1;
  clear_has_read_width_scale();
}
float DetectionOutputSSDParameter::read_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.read_width_scale)
  return read_width_scale_;
}
void DetectionOutputSSDParameter::set_read_width_scale(float value) {
  set_has_read_width_scale();
  read_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.read_width_scale)
}

// optional float read_height_scale = 30 [default = 1];
bool DetectionOutputSSDParameter::has_read_height_scale() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DetectionOutputSSDParameter::set_has_read_height_scale() {
  _has_bits_[0] |= 0x02000000u;
}
void DetectionOutputSSDParameter::clear_has_read_height_scale() {
  _has_bits_[0] &= ~0x02000000u;
}
void DetectionOutputSSDParameter::clear_read_height_scale() {
  read_height_scale_ = 1;
  clear_has_read_height_scale();
}
float DetectionOutputSSDParameter::read_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.read_height_scale)
  return read_height_scale_;
}
void DetectionOutputSSDParameter::set_read_height_scale(float value) {
  set_has_read_height_scale();
  read_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.read_height_scale)
}

// optional uint32 read_height_offset = 31 [default = 0];
bool DetectionOutputSSDParameter::has_read_height_offset() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DetectionOutputSSDParameter::set_has_read_height_offset() {
  _has_bits_[0] |= 0x00004000u;
}
void DetectionOutputSSDParameter::clear_has_read_height_offset() {
  _has_bits_[0] &= ~0x00004000u;
}
void DetectionOutputSSDParameter::clear_read_height_offset() {
  read_height_offset_ = 0u;
  clear_has_read_height_offset();
}
::google::protobuf::uint32 DetectionOutputSSDParameter::read_height_offset() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.read_height_offset)
  return read_height_offset_;
}
void DetectionOutputSSDParameter::set_read_height_offset(::google::protobuf::uint32 value) {
  set_has_read_height_offset();
  read_height_offset_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.read_height_offset)
}

// optional float min_size_h = 32 [default = 2];
bool DetectionOutputSSDParameter::has_min_size_h() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DetectionOutputSSDParameter::set_has_min_size_h() {
  _has_bits_[0] |= 0x04000000u;
}
void DetectionOutputSSDParameter::clear_has_min_size_h() {
  _has_bits_[0] &= ~0x04000000u;
}
void DetectionOutputSSDParameter::clear_min_size_h() {
  min_size_h_ = 2;
  clear_has_min_size_h();
}
float DetectionOutputSSDParameter::min_size_h() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.min_size_h)
  return min_size_h_;
}
void DetectionOutputSSDParameter::set_min_size_h(float value) {
  set_has_min_size_h();
  min_size_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.min_size_h)
}

// optional float min_size_w = 33 [default = 2];
bool DetectionOutputSSDParameter::has_min_size_w() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DetectionOutputSSDParameter::set_has_min_size_w() {
  _has_bits_[0] |= 0x00010000u;
}
void DetectionOutputSSDParameter::clear_has_min_size_w() {
  _has_bits_[0] &= ~0x00010000u;
}
void DetectionOutputSSDParameter::clear_min_size_w() {
  min_size_w_ = 2;
  clear_has_min_size_w();
}
float DetectionOutputSSDParameter::min_size_w() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.min_size_w)
  return min_size_w_;
}
void DetectionOutputSSDParameter::set_min_size_w(float value) {
  set_has_min_size_w();
  min_size_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.min_size_w)
}

// optional .caffe.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 34 [default = HEIGHT_AND_WIDTH];
bool DetectionOutputSSDParameter::has_min_size_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DetectionOutputSSDParameter::set_has_min_size_mode() {
  _has_bits_[0] |= 0x00008000u;
}
void DetectionOutputSSDParameter::clear_has_min_size_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
void DetectionOutputSSDParameter::clear_min_size_mode() {
  min_size_mode_ = 0;
  clear_has_min_size_mode();
}
::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::min_size_mode() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.min_size_mode)
  return static_cast< ::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE >(min_size_mode_);
}
void DetectionOutputSSDParameter::set_min_size_mode(::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE value) {
  assert(::caffe::DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(value));
  set_has_min_size_mode();
  min_size_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputSSDParameter.min_size_mode)
}

// optional .caffe.KPTSParameter kpts_param = 35;
bool DetectionOutputSSDParameter::has_kpts_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DetectionOutputSSDParameter::set_has_kpts_param() {
  _has_bits_[0] |= 0x00000008u;
}
void DetectionOutputSSDParameter::clear_has_kpts_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void DetectionOutputSSDParameter::clear_kpts_param() {
  if (kpts_param_ != NULL) kpts_param_->::caffe::KPTSParameter::Clear();
  clear_has_kpts_param();
}
const ::caffe::KPTSParameter& DetectionOutputSSDParameter::kpts_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.kpts_param)
  return kpts_param_ != NULL ? *kpts_param_
                         : *::caffe::KPTSParameter::internal_default_instance();
}
::caffe::KPTSParameter* DetectionOutputSSDParameter::mutable_kpts_param() {
  set_has_kpts_param();
  if (kpts_param_ == NULL) {
    kpts_param_ = new ::caffe::KPTSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.kpts_param)
  return kpts_param_;
}
::caffe::KPTSParameter* DetectionOutputSSDParameter::release_kpts_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.kpts_param)
  clear_has_kpts_param();
  ::caffe::KPTSParameter* temp = kpts_param_;
  kpts_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_kpts_param(::caffe::KPTSParameter* kpts_param) {
  delete kpts_param_;
  kpts_param_ = kpts_param;
  if (kpts_param) {
    set_has_kpts_param();
  } else {
    clear_has_kpts_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.kpts_param)
}

// optional .caffe.ATRSParameter atrs_param = 36;
bool DetectionOutputSSDParameter::has_atrs_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DetectionOutputSSDParameter::set_has_atrs_param() {
  _has_bits_[0] |= 0x00000010u;
}
void DetectionOutputSSDParameter::clear_has_atrs_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void DetectionOutputSSDParameter::clear_atrs_param() {
  if (atrs_param_ != NULL) atrs_param_->::caffe::ATRSParameter::Clear();
  clear_has_atrs_param();
}
const ::caffe::ATRSParameter& DetectionOutputSSDParameter::atrs_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.atrs_param)
  return atrs_param_ != NULL ? *atrs_param_
                         : *::caffe::ATRSParameter::internal_default_instance();
}
::caffe::ATRSParameter* DetectionOutputSSDParameter::mutable_atrs_param() {
  set_has_atrs_param();
  if (atrs_param_ == NULL) {
    atrs_param_ = new ::caffe::ATRSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.atrs_param)
  return atrs_param_;
}
::caffe::ATRSParameter* DetectionOutputSSDParameter::release_atrs_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.atrs_param)
  clear_has_atrs_param();
  ::caffe::ATRSParameter* temp = atrs_param_;
  atrs_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_atrs_param(::caffe::ATRSParameter* atrs_param) {
  delete atrs_param_;
  atrs_param_ = atrs_param;
  if (atrs_param) {
    set_has_atrs_param();
  } else {
    clear_has_atrs_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.atrs_param)
}

// optional .caffe.FTRSParameter ftrs_param = 37;
bool DetectionOutputSSDParameter::has_ftrs_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DetectionOutputSSDParameter::set_has_ftrs_param() {
  _has_bits_[0] |= 0x00000020u;
}
void DetectionOutputSSDParameter::clear_has_ftrs_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void DetectionOutputSSDParameter::clear_ftrs_param() {
  if (ftrs_param_ != NULL) ftrs_param_->::caffe::FTRSParameter::Clear();
  clear_has_ftrs_param();
}
const ::caffe::FTRSParameter& DetectionOutputSSDParameter::ftrs_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.ftrs_param)
  return ftrs_param_ != NULL ? *ftrs_param_
                         : *::caffe::FTRSParameter::internal_default_instance();
}
::caffe::FTRSParameter* DetectionOutputSSDParameter::mutable_ftrs_param() {
  set_has_ftrs_param();
  if (ftrs_param_ == NULL) {
    ftrs_param_ = new ::caffe::FTRSParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.ftrs_param)
  return ftrs_param_;
}
::caffe::FTRSParameter* DetectionOutputSSDParameter::release_ftrs_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.ftrs_param)
  clear_has_ftrs_param();
  ::caffe::FTRSParameter* temp = ftrs_param_;
  ftrs_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_ftrs_param(::caffe::FTRSParameter* ftrs_param) {
  delete ftrs_param_;
  ftrs_param_ = ftrs_param;
  if (ftrs_param) {
    set_has_ftrs_param();
  } else {
    clear_has_ftrs_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.ftrs_param)
}

// optional .caffe.SPMPParameter spmp_param = 38;
bool DetectionOutputSSDParameter::has_spmp_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DetectionOutputSSDParameter::set_has_spmp_param() {
  _has_bits_[0] |= 0x00000040u;
}
void DetectionOutputSSDParameter::clear_has_spmp_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void DetectionOutputSSDParameter::clear_spmp_param() {
  if (spmp_param_ != NULL) spmp_param_->::caffe::SPMPParameter::Clear();
  clear_has_spmp_param();
}
const ::caffe::SPMPParameter& DetectionOutputSSDParameter::spmp_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.spmp_param)
  return spmp_param_ != NULL ? *spmp_param_
                         : *::caffe::SPMPParameter::internal_default_instance();
}
::caffe::SPMPParameter* DetectionOutputSSDParameter::mutable_spmp_param() {
  set_has_spmp_param();
  if (spmp_param_ == NULL) {
    spmp_param_ = new ::caffe::SPMPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.spmp_param)
  return spmp_param_;
}
::caffe::SPMPParameter* DetectionOutputSSDParameter::release_spmp_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.spmp_param)
  clear_has_spmp_param();
  ::caffe::SPMPParameter* temp = spmp_param_;
  spmp_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_spmp_param(::caffe::SPMPParameter* spmp_param) {
  delete spmp_param_;
  spmp_param_ = spmp_param;
  if (spmp_param) {
    set_has_spmp_param();
  } else {
    clear_has_spmp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.spmp_param)
}

// optional .caffe.Cam3dParameter cam3d_param = 39;
bool DetectionOutputSSDParameter::has_cam3d_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DetectionOutputSSDParameter::set_has_cam3d_param() {
  _has_bits_[0] |= 0x00000080u;
}
void DetectionOutputSSDParameter::clear_has_cam3d_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void DetectionOutputSSDParameter::clear_cam3d_param() {
  if (cam3d_param_ != NULL) cam3d_param_->::caffe::Cam3dParameter::Clear();
  clear_has_cam3d_param();
}
const ::caffe::Cam3dParameter& DetectionOutputSSDParameter::cam3d_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputSSDParameter.cam3d_param)
  return cam3d_param_ != NULL ? *cam3d_param_
                         : *::caffe::Cam3dParameter::internal_default_instance();
}
::caffe::Cam3dParameter* DetectionOutputSSDParameter::mutable_cam3d_param() {
  set_has_cam3d_param();
  if (cam3d_param_ == NULL) {
    cam3d_param_ = new ::caffe::Cam3dParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputSSDParameter.cam3d_param)
  return cam3d_param_;
}
::caffe::Cam3dParameter* DetectionOutputSSDParameter::release_cam3d_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputSSDParameter.cam3d_param)
  clear_has_cam3d_param();
  ::caffe::Cam3dParameter* temp = cam3d_param_;
  cam3d_param_ = NULL;
  return temp;
}
void DetectionOutputSSDParameter::set_allocated_cam3d_param(::caffe::Cam3dParameter* cam3d_param) {
  delete cam3d_param_;
  cam3d_param_ = cam3d_param;
  if (cam3d_param) {
    set_has_cam3d_param();
  } else {
    clear_has_cam3d_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputSSDParameter.cam3d_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBoxRegParameter::kBboxMeanFieldNumber;
const int BBoxRegParameter::kBboxStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBoxRegParameter::BBoxRegParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BBoxRegParameter)
}
BBoxRegParameter::BBoxRegParameter(const BBoxRegParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bbox_mean_(from.bbox_mean_),
      bbox_std_(from.bbox_std_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.BBoxRegParameter)
}

void BBoxRegParameter::SharedCtor() {
  _cached_size_ = 0;
}

BBoxRegParameter::~BBoxRegParameter() {
  // @@protoc_insertion_point(destructor:caffe.BBoxRegParameter)
  SharedDtor();
}

void BBoxRegParameter::SharedDtor() {
}

void BBoxRegParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBoxRegParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BBoxRegParameter& BBoxRegParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BBoxRegParameter* BBoxRegParameter::New(::google::protobuf::Arena* arena) const {
  BBoxRegParameter* n = new BBoxRegParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBoxRegParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BBoxRegParameter)
  bbox_mean_.Clear();
  bbox_std_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BBoxRegParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BBoxRegParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float bbox_mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_bbox_mean())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bbox_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bbox_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_bbox_std())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bbox_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BBoxRegParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BBoxRegParameter)
  return false;
#undef DO_
}

void BBoxRegParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BBoxRegParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float bbox_mean = 1;
  for (int i = 0, n = this->bbox_mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->bbox_mean(i), output);
  }

  // repeated float bbox_std = 2;
  for (int i = 0, n = this->bbox_std_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->bbox_std(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BBoxRegParameter)
}

::google::protobuf::uint8* BBoxRegParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BBoxRegParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float bbox_mean = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->bbox_mean_, target);

  // repeated float bbox_std = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->bbox_std_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BBoxRegParameter)
  return target;
}

size_t BBoxRegParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BBoxRegParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float bbox_mean = 1;
  {
    unsigned int count = this->bbox_mean_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bbox_mean_size());
    total_size += data_size;
  }

  // repeated float bbox_std = 2;
  {
    unsigned int count = this->bbox_std_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bbox_std_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBoxRegParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BBoxRegParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BBoxRegParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBoxRegParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BBoxRegParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BBoxRegParameter)
    MergeFrom(*source);
  }
}

void BBoxRegParameter::MergeFrom(const BBoxRegParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BBoxRegParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bbox_mean_.MergeFrom(from.bbox_mean_);
  bbox_std_.MergeFrom(from.bbox_std_);
}

void BBoxRegParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BBoxRegParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxRegParameter::CopyFrom(const BBoxRegParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BBoxRegParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxRegParameter::IsInitialized() const {
  return true;
}

void BBoxRegParameter::Swap(BBoxRegParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBoxRegParameter::InternalSwap(BBoxRegParameter* other) {
  bbox_mean_.InternalSwap(&other->bbox_mean_);
  bbox_std_.InternalSwap(&other->bbox_std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBoxRegParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBoxRegParameter

// repeated float bbox_mean = 1;
int BBoxRegParameter::bbox_mean_size() const {
  return bbox_mean_.size();
}
void BBoxRegParameter::clear_bbox_mean() {
  bbox_mean_.Clear();
}
float BBoxRegParameter::bbox_mean(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxRegParameter.bbox_mean)
  return bbox_mean_.Get(index);
}
void BBoxRegParameter::set_bbox_mean(int index, float value) {
  bbox_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxRegParameter.bbox_mean)
}
void BBoxRegParameter::add_bbox_mean(float value) {
  bbox_mean_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxRegParameter.bbox_mean)
}
const ::google::protobuf::RepeatedField< float >&
BBoxRegParameter::bbox_mean() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxRegParameter.bbox_mean)
  return bbox_mean_;
}
::google::protobuf::RepeatedField< float >*
BBoxRegParameter::mutable_bbox_mean() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxRegParameter.bbox_mean)
  return &bbox_mean_;
}

// repeated float bbox_std = 2;
int BBoxRegParameter::bbox_std_size() const {
  return bbox_std_.size();
}
void BBoxRegParameter::clear_bbox_std() {
  bbox_std_.Clear();
}
float BBoxRegParameter::bbox_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxRegParameter.bbox_std)
  return bbox_std_.Get(index);
}
void BBoxRegParameter::set_bbox_std(int index, float value) {
  bbox_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxRegParameter.bbox_std)
}
void BBoxRegParameter::add_bbox_std(float value) {
  bbox_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxRegParameter.bbox_std)
}
const ::google::protobuf::RepeatedField< float >&
BBoxRegParameter::bbox_std() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxRegParameter.bbox_std)
  return bbox_std_;
}
::google::protobuf::RepeatedField< float >*
BBoxRegParameter::mutable_bbox_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxRegParameter.bbox_std)
  return &bbox_std_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegParameter::kMeanFieldNumber;
const int RegParameter::kStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegParameter::RegParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RegParameter)
}
RegParameter::RegParameter(const RegParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mean_(from.mean_),
      std_(from.std_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.RegParameter)
}

void RegParameter::SharedCtor() {
  _cached_size_ = 0;
}

RegParameter::~RegParameter() {
  // @@protoc_insertion_point(destructor:caffe.RegParameter)
  SharedDtor();
}

void RegParameter::SharedDtor() {
}

void RegParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegParameter& RegParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegParameter* RegParameter::New(::google::protobuf::Arena* arena) const {
  RegParameter* n = new RegParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RegParameter)
  mean_.Clear();
  std_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RegParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_mean())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_std())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RegParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RegParameter)
  return false;
#undef DO_
}

void RegParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RegParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mean = 1;
  for (int i = 0, n = this->mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->mean(i), output);
  }

  // repeated float std = 2;
  for (int i = 0, n = this->std_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->std(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RegParameter)
}

::google::protobuf::uint8* RegParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RegParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mean = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->mean_, target);

  // repeated float std = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->std_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RegParameter)
  return target;
}

size_t RegParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RegParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float mean = 1;
  {
    unsigned int count = this->mean_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_size());
    total_size += data_size;
  }

  // repeated float std = 2;
  {
    unsigned int count = this->std_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->std_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RegParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RegParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RegParameter)
    MergeFrom(*source);
  }
}

void RegParameter::MergeFrom(const RegParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RegParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_.MergeFrom(from.mean_);
  std_.MergeFrom(from.std_);
}

void RegParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RegParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegParameter::CopyFrom(const RegParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RegParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegParameter::IsInitialized() const {
  return true;
}

void RegParameter::Swap(RegParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegParameter::InternalSwap(RegParameter* other) {
  mean_.InternalSwap(&other->mean_);
  std_.InternalSwap(&other->std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegParameter

// repeated float mean = 1;
int RegParameter::mean_size() const {
  return mean_.size();
}
void RegParameter::clear_mean() {
  mean_.Clear();
}
float RegParameter::mean(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegParameter.mean)
  return mean_.Get(index);
}
void RegParameter::set_mean(int index, float value) {
  mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RegParameter.mean)
}
void RegParameter::add_mean(float value) {
  mean_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RegParameter.mean)
}
const ::google::protobuf::RepeatedField< float >&
RegParameter::mean() const {
  // @@protoc_insertion_point(field_list:caffe.RegParameter.mean)
  return mean_;
}
::google::protobuf::RepeatedField< float >*
RegParameter::mutable_mean() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegParameter.mean)
  return &mean_;
}

// repeated float std = 2;
int RegParameter::std_size() const {
  return std_.size();
}
void RegParameter::clear_std() {
  std_.Clear();
}
float RegParameter::std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RegParameter.std)
  return std_.Get(index);
}
void RegParameter::set_std(int index, float value) {
  std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RegParameter.std)
}
void RegParameter::add_std(float value) {
  std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RegParameter.std)
}
const ::google::protobuf::RepeatedField< float >&
RegParameter::std() const {
  // @@protoc_insertion_point(field_list:caffe.RegParameter.std)
  return std_;
}
::google::protobuf::RepeatedField< float >*
RegParameter::mutable_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RegParameter.std)
  return &std_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDistortParameter::kPreMeanValueFieldNumber;
const int ImageDistortParameter::kNewMeanValueFieldNumber;
const int ImageDistortParameter::kPreScaleFieldNumber;
const int ImageDistortParameter::kNewScaleFieldNumber;
const int ImageDistortParameter::kDistortParamFieldNumber;
const int ImageDistortParameter::kNoiseParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDistortParameter::ImageDistortParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDistortParameter)
}
ImageDistortParameter::ImageDistortParameter(const ImageDistortParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pre_mean_value_(from.pre_mean_value_),
      new_mean_value_(from.new_mean_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_distort_param()) {
    distort_param_ = new ::caffe_fcn_data_layer::DistortionParameter(*from.distort_param_);
  } else {
    distort_param_ = NULL;
  }
  if (from.has_noise_param()) {
    noise_param_ = new ::caffe_fcn_data_layer::NoiseParameter(*from.noise_param_);
  } else {
    noise_param_ = NULL;
  }
  ::memcpy(&new_scale_, &from.new_scale_,
    reinterpret_cast<char*>(&pre_scale_) -
    reinterpret_cast<char*>(&new_scale_) + sizeof(pre_scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDistortParameter)
}

void ImageDistortParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&distort_param_, 0, reinterpret_cast<char*>(&new_scale_) -
    reinterpret_cast<char*>(&distort_param_) + sizeof(new_scale_));
  pre_scale_ = 1;
}

ImageDistortParameter::~ImageDistortParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDistortParameter)
  SharedDtor();
}

void ImageDistortParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete distort_param_;
  }
  if (this != internal_default_instance()) {
    delete noise_param_;
  }
}

void ImageDistortParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDistortParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDistortParameter& ImageDistortParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDistortParameter* ImageDistortParameter::New(::google::protobuf::Arena* arena) const {
  ImageDistortParameter* n = new ImageDistortParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDistortParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDistortParameter)
  pre_mean_value_.Clear();
  new_mean_value_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_distort_param()) {
      GOOGLE_DCHECK(distort_param_ != NULL);
      distort_param_->::caffe_fcn_data_layer::DistortionParameter::Clear();
    }
    if (has_noise_param()) {
      GOOGLE_DCHECK(noise_param_ != NULL);
      noise_param_->::caffe_fcn_data_layer::NoiseParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    new_scale_ = 0;
    pre_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageDistortParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDistortParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float pre_mean_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_pre_mean_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pre_mean_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float new_mean_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_new_mean_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_new_mean_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pre_scale = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_pre_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pre_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float new_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_new_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distort_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDistortParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDistortParameter)
  return false;
#undef DO_
}

void ImageDistortParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDistortParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float pre_mean_value = 1;
  for (int i = 0, n = this->pre_mean_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->pre_mean_value(i), output);
  }

  // repeated float new_mean_value = 2;
  for (int i = 0, n = this->new_mean_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->new_mean_value(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float pre_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pre_scale(), output);
  }

  // optional float new_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->new_scale(), output);
  }

  // optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->distort_param_, output);
  }

  // optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->noise_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDistortParameter)
}

::google::protobuf::uint8* ImageDistortParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDistortParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float pre_mean_value = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->pre_mean_value_, target);

  // repeated float new_mean_value = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->new_mean_value_, target);

  cached_has_bits = _has_bits_[0];
  // optional float pre_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pre_scale(), target);
  }

  // optional float new_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->new_scale(), target);
  }

  // optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->distort_param_, deterministic, target);
  }

  // optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->noise_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDistortParameter)
  return target;
}

size_t ImageDistortParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDistortParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float pre_mean_value = 1;
  {
    unsigned int count = this->pre_mean_value_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pre_mean_value_size());
    total_size += data_size;
  }

  // repeated float new_mean_value = 2;
  {
    unsigned int count = this->new_mean_value_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->new_mean_value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
    if (has_distort_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->distort_param_);
    }

    // optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
    if (has_noise_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->noise_param_);
    }

    // optional float new_scale = 4;
    if (has_new_scale()) {
      total_size += 1 + 4;
    }

    // optional float pre_scale = 3 [default = 1];
    if (has_pre_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDistortParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDistortParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDistortParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDistortParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDistortParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDistortParameter)
    MergeFrom(*source);
  }
}

void ImageDistortParameter::MergeFrom(const ImageDistortParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDistortParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pre_mean_value_.MergeFrom(from.pre_mean_value_);
  new_mean_value_.MergeFrom(from.new_mean_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_distort_param()->::caffe_fcn_data_layer::DistortionParameter::MergeFrom(from.distort_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_noise_param()->::caffe_fcn_data_layer::NoiseParameter::MergeFrom(from.noise_param());
    }
    if (cached_has_bits & 0x00000004u) {
      new_scale_ = from.new_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      pre_scale_ = from.pre_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDistortParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDistortParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDistortParameter::CopyFrom(const ImageDistortParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDistortParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDistortParameter::IsInitialized() const {
  return true;
}

void ImageDistortParameter::Swap(ImageDistortParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDistortParameter::InternalSwap(ImageDistortParameter* other) {
  pre_mean_value_.InternalSwap(&other->pre_mean_value_);
  new_mean_value_.InternalSwap(&other->new_mean_value_);
  std::swap(distort_param_, other->distort_param_);
  std::swap(noise_param_, other->noise_param_);
  std::swap(new_scale_, other->new_scale_);
  std::swap(pre_scale_, other->pre_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDistortParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDistortParameter

// repeated float pre_mean_value = 1;
int ImageDistortParameter::pre_mean_value_size() const {
  return pre_mean_value_.size();
}
void ImageDistortParameter::clear_pre_mean_value() {
  pre_mean_value_.Clear();
}
float ImageDistortParameter::pre_mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.pre_mean_value)
  return pre_mean_value_.Get(index);
}
void ImageDistortParameter::set_pre_mean_value(int index, float value) {
  pre_mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.pre_mean_value)
}
void ImageDistortParameter::add_pre_mean_value(float value) {
  pre_mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDistortParameter.pre_mean_value)
}
const ::google::protobuf::RepeatedField< float >&
ImageDistortParameter::pre_mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDistortParameter.pre_mean_value)
  return pre_mean_value_;
}
::google::protobuf::RepeatedField< float >*
ImageDistortParameter::mutable_pre_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDistortParameter.pre_mean_value)
  return &pre_mean_value_;
}

// repeated float new_mean_value = 2;
int ImageDistortParameter::new_mean_value_size() const {
  return new_mean_value_.size();
}
void ImageDistortParameter::clear_new_mean_value() {
  new_mean_value_.Clear();
}
float ImageDistortParameter::new_mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.new_mean_value)
  return new_mean_value_.Get(index);
}
void ImageDistortParameter::set_new_mean_value(int index, float value) {
  new_mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.new_mean_value)
}
void ImageDistortParameter::add_new_mean_value(float value) {
  new_mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDistortParameter.new_mean_value)
}
const ::google::protobuf::RepeatedField< float >&
ImageDistortParameter::new_mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDistortParameter.new_mean_value)
  return new_mean_value_;
}
::google::protobuf::RepeatedField< float >*
ImageDistortParameter::mutable_new_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDistortParameter.new_mean_value)
  return &new_mean_value_;
}

// optional float pre_scale = 3 [default = 1];
bool ImageDistortParameter::has_pre_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDistortParameter::set_has_pre_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDistortParameter::clear_has_pre_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDistortParameter::clear_pre_scale() {
  pre_scale_ = 1;
  clear_has_pre_scale();
}
float ImageDistortParameter::pre_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.pre_scale)
  return pre_scale_;
}
void ImageDistortParameter::set_pre_scale(float value) {
  set_has_pre_scale();
  pre_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.pre_scale)
}

// optional float new_scale = 4;
bool ImageDistortParameter::has_new_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDistortParameter::set_has_new_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDistortParameter::clear_has_new_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDistortParameter::clear_new_scale() {
  new_scale_ = 0;
  clear_has_new_scale();
}
float ImageDistortParameter::new_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.new_scale)
  return new_scale_;
}
void ImageDistortParameter::set_new_scale(float value) {
  set_has_new_scale();
  new_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDistortParameter.new_scale)
}

// optional .caffe_fcn_data_layer.DistortionParameter distort_param = 5;
bool ImageDistortParameter::has_distort_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDistortParameter::set_has_distort_param() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDistortParameter::clear_has_distort_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDistortParameter::clear_distort_param() {
  if (distort_param_ != NULL) distort_param_->::caffe_fcn_data_layer::DistortionParameter::Clear();
  clear_has_distort_param();
}
const ::caffe_fcn_data_layer::DistortionParameter& ImageDistortParameter::distort_param() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.distort_param)
  return distort_param_ != NULL ? *distort_param_
                         : *::caffe_fcn_data_layer::DistortionParameter::internal_default_instance();
}
::caffe_fcn_data_layer::DistortionParameter* ImageDistortParameter::mutable_distort_param() {
  set_has_distort_param();
  if (distort_param_ == NULL) {
    distort_param_ = new ::caffe_fcn_data_layer::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDistortParameter.distort_param)
  return distort_param_;
}
::caffe_fcn_data_layer::DistortionParameter* ImageDistortParameter::release_distort_param() {
  // @@protoc_insertion_point(field_release:caffe.ImageDistortParameter.distort_param)
  clear_has_distort_param();
  ::caffe_fcn_data_layer::DistortionParameter* temp = distort_param_;
  distort_param_ = NULL;
  return temp;
}
void ImageDistortParameter::set_allocated_distort_param(::caffe_fcn_data_layer::DistortionParameter* distort_param) {
  delete distort_param_;
  distort_param_ = distort_param;
  if (distort_param) {
    set_has_distort_param();
  } else {
    clear_has_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDistortParameter.distort_param)
}

// optional .caffe_fcn_data_layer.NoiseParameter noise_param = 6;
bool ImageDistortParameter::has_noise_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDistortParameter::set_has_noise_param() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDistortParameter::clear_has_noise_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDistortParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe_fcn_data_layer::NoiseParameter::Clear();
  clear_has_noise_param();
}
const ::caffe_fcn_data_layer::NoiseParameter& ImageDistortParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDistortParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_
                         : *::caffe_fcn_data_layer::NoiseParameter::internal_default_instance();
}
::caffe_fcn_data_layer::NoiseParameter* ImageDistortParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe_fcn_data_layer::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDistortParameter.noise_param)
  return noise_param_;
}
::caffe_fcn_data_layer::NoiseParameter* ImageDistortParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.ImageDistortParameter.noise_param)
  clear_has_noise_param();
  ::caffe_fcn_data_layer::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
void ImageDistortParameter::set_allocated_noise_param(::caffe_fcn_data_layer::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDistortParameter.noise_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSROIPoolingParameter::kHeatMapAFieldNumber;
const int PSROIPoolingParameter::kHeatMapBFieldNumber;
const int PSROIPoolingParameter::kPadRatioFieldNumber;
const int PSROIPoolingParameter::kOutputDimFieldNumber;
const int PSROIPoolingParameter::kGroupSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSROIPoolingParameter::PSROIPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PSROIPoolingParameter)
}
PSROIPoolingParameter::PSROIPoolingParameter(const PSROIPoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heat_map_a_, &from.heat_map_a_,
    reinterpret_cast<char*>(&group_size_) -
    reinterpret_cast<char*>(&heat_map_a_) + sizeof(group_size_));
  // @@protoc_insertion_point(copy_constructor:caffe.PSROIPoolingParameter)
}

void PSROIPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&heat_map_a_, 0, reinterpret_cast<char*>(&group_size_) -
    reinterpret_cast<char*>(&heat_map_a_) + sizeof(group_size_));
}

PSROIPoolingParameter::~PSROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PSROIPoolingParameter)
  SharedDtor();
}

void PSROIPoolingParameter::SharedDtor() {
}

void PSROIPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSROIPoolingParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSROIPoolingParameter& PSROIPoolingParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PSROIPoolingParameter* PSROIPoolingParameter::New(::google::protobuf::Arena* arena) const {
  PSROIPoolingParameter* n = new PSROIPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PSROIPoolingParameter)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&heat_map_a_, 0, reinterpret_cast<char*>(&group_size_) -
      reinterpret_cast<char*>(&heat_map_a_) + sizeof(group_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PSROIPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PSROIPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float heat_map_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_heat_map_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_map_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heat_map_b = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_heat_map_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_map_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pad_ratio = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_pad_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pad_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 output_dim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_output_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 group_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_group_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PSROIPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PSROIPoolingParameter)
  return false;
#undef DO_
}

void PSROIPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PSROIPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float heat_map_a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->heat_map_a(), output);
  }

  // optional float heat_map_b = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heat_map_b(), output);
  }

  // optional float pad_ratio = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pad_ratio(), output);
  }

  // required int32 output_dim = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->output_dim(), output);
  }

  // required int32 group_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PSROIPoolingParameter)
}

::google::protobuf::uint8* PSROIPoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PSROIPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float heat_map_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->heat_map_a(), target);
  }

  // optional float heat_map_b = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heat_map_b(), target);
  }

  // optional float pad_ratio = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pad_ratio(), target);
  }

  // required int32 output_dim = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->output_dim(), target);
  }

  // required int32 group_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PSROIPoolingParameter)
  return target;
}

size_t PSROIPoolingParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.PSROIPoolingParameter)
  size_t total_size = 0;

  if (has_heat_map_a()) {
    // required float heat_map_a = 1;
    total_size += 1 + 4;
  }

  if (has_output_dim()) {
    // required int32 output_dim = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_dim());
  }

  if (has_group_size()) {
    // required int32 group_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  return total_size;
}
size_t PSROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PSROIPoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required float heat_map_a = 1;
    total_size += 1 + 4;

    // required int32 output_dim = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_dim());

    // required int32 group_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional float heat_map_b = 2 [default = 0];
    if (has_heat_map_b()) {
      total_size += 1 + 4;
    }

    // optional float pad_ratio = 3 [default = 0];
    if (has_pad_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSROIPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PSROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PSROIPoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSROIPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PSROIPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PSROIPoolingParameter)
    MergeFrom(*source);
  }
}

void PSROIPoolingParameter::MergeFrom(const PSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PSROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      heat_map_a_ = from.heat_map_a_;
    }
    if (cached_has_bits & 0x00000002u) {
      heat_map_b_ = from.heat_map_b_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_ratio_ = from.pad_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_dim_ = from.output_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      group_size_ = from.group_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PSROIPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PSROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSROIPoolingParameter::CopyFrom(const PSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PSROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSROIPoolingParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  return true;
}

void PSROIPoolingParameter::Swap(PSROIPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSROIPoolingParameter::InternalSwap(PSROIPoolingParameter* other) {
  std::swap(heat_map_a_, other->heat_map_a_);
  std::swap(heat_map_b_, other->heat_map_b_);
  std::swap(pad_ratio_, other->pad_ratio_);
  std::swap(output_dim_, other->output_dim_);
  std::swap(group_size_, other->group_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSROIPoolingParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSROIPoolingParameter

// required float heat_map_a = 1;
bool PSROIPoolingParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PSROIPoolingParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000001u;
}
void PSROIPoolingParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000001u;
}
void PSROIPoolingParameter::clear_heat_map_a() {
  heat_map_a_ = 0;
  clear_has_heat_map_a();
}
float PSROIPoolingParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.heat_map_a)
  return heat_map_a_;
}
void PSROIPoolingParameter::set_heat_map_a(float value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.heat_map_a)
}

// optional float heat_map_b = 2 [default = 0];
bool PSROIPoolingParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PSROIPoolingParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000002u;
}
void PSROIPoolingParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000002u;
}
void PSROIPoolingParameter::clear_heat_map_b() {
  heat_map_b_ = 0;
  clear_has_heat_map_b();
}
float PSROIPoolingParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.heat_map_b)
  return heat_map_b_;
}
void PSROIPoolingParameter::set_heat_map_b(float value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.heat_map_b)
}

// optional float pad_ratio = 3 [default = 0];
bool PSROIPoolingParameter::has_pad_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PSROIPoolingParameter::set_has_pad_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void PSROIPoolingParameter::clear_has_pad_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void PSROIPoolingParameter::clear_pad_ratio() {
  pad_ratio_ = 0;
  clear_has_pad_ratio();
}
float PSROIPoolingParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.pad_ratio)
  return pad_ratio_;
}
void PSROIPoolingParameter::set_pad_ratio(float value) {
  set_has_pad_ratio();
  pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.pad_ratio)
}

// required int32 output_dim = 4;
bool PSROIPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PSROIPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000008u;
}
void PSROIPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
void PSROIPoolingParameter::clear_output_dim() {
  output_dim_ = 0;
  clear_has_output_dim();
}
::google::protobuf::int32 PSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.output_dim)
  return output_dim_;
}
void PSROIPoolingParameter::set_output_dim(::google::protobuf::int32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.output_dim)
}

// required int32 group_size = 5;
bool PSROIPoolingParameter::has_group_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PSROIPoolingParameter::set_has_group_size() {
  _has_bits_[0] |= 0x00000010u;
}
void PSROIPoolingParameter::clear_has_group_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void PSROIPoolingParameter::clear_group_size() {
  group_size_ = 0;
  clear_has_group_size();
}
::google::protobuf::int32 PSROIPoolingParameter::group_size() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.group_size)
  return group_size_;
}
void PSROIPoolingParameter::set_group_size(::google::protobuf::int32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.group_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DFMBPSROIPoolingParameter::kHeatMapAFieldNumber;
const int DFMBPSROIPoolingParameter::kHeatMapBFieldNumber;
const int DFMBPSROIPoolingParameter::kPadRatioFieldNumber;
const int DFMBPSROIPoolingParameter::kOutputDimFieldNumber;
const int DFMBPSROIPoolingParameter::kTransStdFieldNumber;
const int DFMBPSROIPoolingParameter::kSamplePerPartFieldNumber;
const int DFMBPSROIPoolingParameter::kGroupHeightFieldNumber;
const int DFMBPSROIPoolingParameter::kGroupWidthFieldNumber;
const int DFMBPSROIPoolingParameter::kPooledHeightFieldNumber;
const int DFMBPSROIPoolingParameter::kPooledWidthFieldNumber;
const int DFMBPSROIPoolingParameter::kPartHeightFieldNumber;
const int DFMBPSROIPoolingParameter::kPartWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DFMBPSROIPoolingParameter::DFMBPSROIPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DFMBPSROIPoolingParameter)
}
DFMBPSROIPoolingParameter::DFMBPSROIPoolingParameter(const DFMBPSROIPoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heat_map_a_, &from.heat_map_a_,
    reinterpret_cast<char*>(&part_width_) -
    reinterpret_cast<char*>(&heat_map_a_) + sizeof(part_width_));
  // @@protoc_insertion_point(copy_constructor:caffe.DFMBPSROIPoolingParameter)
}

void DFMBPSROIPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&heat_map_a_, 0, reinterpret_cast<char*>(&output_dim_) -
    reinterpret_cast<char*>(&heat_map_a_) + sizeof(output_dim_));
  trans_std_ = 0.1f;
  sample_per_part_ = 4u;
  group_height_ = 7u;
  group_width_ = 7u;
  pooled_height_ = 7u;
  pooled_width_ = 7u;
  part_height_ = 7u;
  part_width_ = 7u;
}

DFMBPSROIPoolingParameter::~DFMBPSROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.DFMBPSROIPoolingParameter)
  SharedDtor();
}

void DFMBPSROIPoolingParameter::SharedDtor() {
}

void DFMBPSROIPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DFMBPSROIPoolingParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DFMBPSROIPoolingParameter& DFMBPSROIPoolingParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DFMBPSROIPoolingParameter* DFMBPSROIPoolingParameter::New(::google::protobuf::Arena* arena) const {
  DFMBPSROIPoolingParameter* n = new DFMBPSROIPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DFMBPSROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DFMBPSROIPoolingParameter)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&heat_map_a_, 0, reinterpret_cast<char*>(&output_dim_) -
      reinterpret_cast<char*>(&heat_map_a_) + sizeof(output_dim_));
    trans_std_ = 0.1f;
    sample_per_part_ = 4u;
    group_height_ = 7u;
    group_width_ = 7u;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    pooled_height_ = 7u;
    pooled_width_ = 7u;
    part_height_ = 7u;
    part_width_ = 7u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DFMBPSROIPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DFMBPSROIPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float heat_map_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_heat_map_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_map_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heat_map_b = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_heat_map_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_map_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pad_ratio = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_pad_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pad_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 output_dim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_output_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float trans_std = 5 [default = 0.1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_trans_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trans_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sample_per_part = 6 [default = 4];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_sample_per_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_per_part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_height = 7 [default = 7];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_group_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_width = 8 [default = 7];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_group_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pooled_height = 9 [default = 7];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pooled_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooled_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pooled_width = 10 [default = 7];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_pooled_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooled_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 part_height = 11 [default = 7];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_part_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 part_width = 12 [default = 7];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_part_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DFMBPSROIPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DFMBPSROIPoolingParameter)
  return false;
#undef DO_
}

void DFMBPSROIPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DFMBPSROIPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float heat_map_a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->heat_map_a(), output);
  }

  // optional float heat_map_b = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heat_map_b(), output);
  }

  // optional float pad_ratio = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pad_ratio(), output);
  }

  // required uint32 output_dim = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->output_dim(), output);
  }

  // optional float trans_std = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->trans_std(), output);
  }

  // optional uint32 sample_per_part = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sample_per_part(), output);
  }

  // optional uint32 group_height = 7 [default = 7];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->group_height(), output);
  }

  // optional uint32 group_width = 8 [default = 7];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->group_width(), output);
  }

  // optional uint32 pooled_height = 9 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pooled_height(), output);
  }

  // optional uint32 pooled_width = 10 [default = 7];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pooled_width(), output);
  }

  // optional uint32 part_height = 11 [default = 7];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->part_height(), output);
  }

  // optional uint32 part_width = 12 [default = 7];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->part_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DFMBPSROIPoolingParameter)
}

::google::protobuf::uint8* DFMBPSROIPoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DFMBPSROIPoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float heat_map_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->heat_map_a(), target);
  }

  // optional float heat_map_b = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heat_map_b(), target);
  }

  // optional float pad_ratio = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pad_ratio(), target);
  }

  // required uint32 output_dim = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->output_dim(), target);
  }

  // optional float trans_std = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->trans_std(), target);
  }

  // optional uint32 sample_per_part = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sample_per_part(), target);
  }

  // optional uint32 group_height = 7 [default = 7];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->group_height(), target);
  }

  // optional uint32 group_width = 8 [default = 7];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->group_width(), target);
  }

  // optional uint32 pooled_height = 9 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pooled_height(), target);
  }

  // optional uint32 pooled_width = 10 [default = 7];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pooled_width(), target);
  }

  // optional uint32 part_height = 11 [default = 7];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->part_height(), target);
  }

  // optional uint32 part_width = 12 [default = 7];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->part_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DFMBPSROIPoolingParameter)
  return target;
}

size_t DFMBPSROIPoolingParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.DFMBPSROIPoolingParameter)
  size_t total_size = 0;

  if (has_heat_map_a()) {
    // required float heat_map_a = 1;
    total_size += 1 + 4;
  }

  if (has_output_dim()) {
    // required uint32 output_dim = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_dim());
  }

  return total_size;
}
size_t DFMBPSROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DFMBPSROIPoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required float heat_map_a = 1;
    total_size += 1 + 4;

    // required uint32 output_dim = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_dim());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional float heat_map_b = 2 [default = 0];
    if (has_heat_map_b()) {
      total_size += 1 + 4;
    }

    // optional float pad_ratio = 3 [default = 0];
    if (has_pad_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional float trans_std = 5 [default = 0.1];
    if (has_trans_std()) {
      total_size += 1 + 4;
    }

    // optional uint32 sample_per_part = 6 [default = 4];
    if (has_sample_per_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_per_part());
    }

    // optional uint32 group_height = 7 [default = 7];
    if (has_group_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_height());
    }

    // optional uint32 group_width = 8 [default = 7];
    if (has_group_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_width());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 pooled_height = 9 [default = 7];
    if (has_pooled_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooled_height());
    }

    // optional uint32 pooled_width = 10 [default = 7];
    if (has_pooled_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooled_width());
    }

    // optional uint32 part_height = 11 [default = 7];
    if (has_part_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part_height());
    }

    // optional uint32 part_width = 12 [default = 7];
    if (has_part_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DFMBPSROIPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DFMBPSROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DFMBPSROIPoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DFMBPSROIPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DFMBPSROIPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DFMBPSROIPoolingParameter)
    MergeFrom(*source);
  }
}

void DFMBPSROIPoolingParameter::MergeFrom(const DFMBPSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DFMBPSROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      heat_map_a_ = from.heat_map_a_;
    }
    if (cached_has_bits & 0x00000002u) {
      heat_map_b_ = from.heat_map_b_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_ratio_ = from.pad_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_dim_ = from.output_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      trans_std_ = from.trans_std_;
    }
    if (cached_has_bits & 0x00000020u) {
      sample_per_part_ = from.sample_per_part_;
    }
    if (cached_has_bits & 0x00000040u) {
      group_height_ = from.group_height_;
    }
    if (cached_has_bits & 0x00000080u) {
      group_width_ = from.group_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      pooled_height_ = from.pooled_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      pooled_width_ = from.pooled_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      part_height_ = from.part_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      part_width_ = from.part_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DFMBPSROIPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DFMBPSROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFMBPSROIPoolingParameter::CopyFrom(const DFMBPSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DFMBPSROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFMBPSROIPoolingParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void DFMBPSROIPoolingParameter::Swap(DFMBPSROIPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DFMBPSROIPoolingParameter::InternalSwap(DFMBPSROIPoolingParameter* other) {
  std::swap(heat_map_a_, other->heat_map_a_);
  std::swap(heat_map_b_, other->heat_map_b_);
  std::swap(pad_ratio_, other->pad_ratio_);
  std::swap(output_dim_, other->output_dim_);
  std::swap(trans_std_, other->trans_std_);
  std::swap(sample_per_part_, other->sample_per_part_);
  std::swap(group_height_, other->group_height_);
  std::swap(group_width_, other->group_width_);
  std::swap(pooled_height_, other->pooled_height_);
  std::swap(pooled_width_, other->pooled_width_);
  std::swap(part_height_, other->part_height_);
  std::swap(part_width_, other->part_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DFMBPSROIPoolingParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DFMBPSROIPoolingParameter

// required float heat_map_a = 1;
bool DFMBPSROIPoolingParameter::has_heat_map_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_heat_map_a() {
  _has_bits_[0] |= 0x00000001u;
}
void DFMBPSROIPoolingParameter::clear_has_heat_map_a() {
  _has_bits_[0] &= ~0x00000001u;
}
void DFMBPSROIPoolingParameter::clear_heat_map_a() {
  heat_map_a_ = 0;
  clear_has_heat_map_a();
}
float DFMBPSROIPoolingParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.heat_map_a)
  return heat_map_a_;
}
void DFMBPSROIPoolingParameter::set_heat_map_a(float value) {
  set_has_heat_map_a();
  heat_map_a_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.heat_map_a)
}

// optional float heat_map_b = 2 [default = 0];
bool DFMBPSROIPoolingParameter::has_heat_map_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_heat_map_b() {
  _has_bits_[0] |= 0x00000002u;
}
void DFMBPSROIPoolingParameter::clear_has_heat_map_b() {
  _has_bits_[0] &= ~0x00000002u;
}
void DFMBPSROIPoolingParameter::clear_heat_map_b() {
  heat_map_b_ = 0;
  clear_has_heat_map_b();
}
float DFMBPSROIPoolingParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.heat_map_b)
  return heat_map_b_;
}
void DFMBPSROIPoolingParameter::set_heat_map_b(float value) {
  set_has_heat_map_b();
  heat_map_b_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.heat_map_b)
}

// optional float pad_ratio = 3 [default = 0];
bool DFMBPSROIPoolingParameter::has_pad_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_pad_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void DFMBPSROIPoolingParameter::clear_has_pad_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void DFMBPSROIPoolingParameter::clear_pad_ratio() {
  pad_ratio_ = 0;
  clear_has_pad_ratio();
}
float DFMBPSROIPoolingParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.pad_ratio)
  return pad_ratio_;
}
void DFMBPSROIPoolingParameter::set_pad_ratio(float value) {
  set_has_pad_ratio();
  pad_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.pad_ratio)
}

// required uint32 output_dim = 4;
bool DFMBPSROIPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000008u;
}
void DFMBPSROIPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
void DFMBPSROIPoolingParameter::clear_output_dim() {
  output_dim_ = 0u;
  clear_has_output_dim();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.output_dim)
  return output_dim_;
}
void DFMBPSROIPoolingParameter::set_output_dim(::google::protobuf::uint32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.output_dim)
}

// optional float trans_std = 5 [default = 0.1];
bool DFMBPSROIPoolingParameter::has_trans_std() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_trans_std() {
  _has_bits_[0] |= 0x00000010u;
}
void DFMBPSROIPoolingParameter::clear_has_trans_std() {
  _has_bits_[0] &= ~0x00000010u;
}
void DFMBPSROIPoolingParameter::clear_trans_std() {
  trans_std_ = 0.1f;
  clear_has_trans_std();
}
float DFMBPSROIPoolingParameter::trans_std() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.trans_std)
  return trans_std_;
}
void DFMBPSROIPoolingParameter::set_trans_std(float value) {
  set_has_trans_std();
  trans_std_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.trans_std)
}

// optional uint32 sample_per_part = 6 [default = 4];
bool DFMBPSROIPoolingParameter::has_sample_per_part() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_sample_per_part() {
  _has_bits_[0] |= 0x00000020u;
}
void DFMBPSROIPoolingParameter::clear_has_sample_per_part() {
  _has_bits_[0] &= ~0x00000020u;
}
void DFMBPSROIPoolingParameter::clear_sample_per_part() {
  sample_per_part_ = 4u;
  clear_has_sample_per_part();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::sample_per_part() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.sample_per_part)
  return sample_per_part_;
}
void DFMBPSROIPoolingParameter::set_sample_per_part(::google::protobuf::uint32 value) {
  set_has_sample_per_part();
  sample_per_part_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.sample_per_part)
}

// optional uint32 group_height = 7 [default = 7];
bool DFMBPSROIPoolingParameter::has_group_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_group_height() {
  _has_bits_[0] |= 0x00000040u;
}
void DFMBPSROIPoolingParameter::clear_has_group_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void DFMBPSROIPoolingParameter::clear_group_height() {
  group_height_ = 7u;
  clear_has_group_height();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::group_height() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.group_height)
  return group_height_;
}
void DFMBPSROIPoolingParameter::set_group_height(::google::protobuf::uint32 value) {
  set_has_group_height();
  group_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.group_height)
}

// optional uint32 group_width = 8 [default = 7];
bool DFMBPSROIPoolingParameter::has_group_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_group_width() {
  _has_bits_[0] |= 0x00000080u;
}
void DFMBPSROIPoolingParameter::clear_has_group_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void DFMBPSROIPoolingParameter::clear_group_width() {
  group_width_ = 7u;
  clear_has_group_width();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::group_width() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.group_width)
  return group_width_;
}
void DFMBPSROIPoolingParameter::set_group_width(::google::protobuf::uint32 value) {
  set_has_group_width();
  group_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.group_width)
}

// optional uint32 pooled_height = 9 [default = 7];
bool DFMBPSROIPoolingParameter::has_pooled_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_pooled_height() {
  _has_bits_[0] |= 0x00000100u;
}
void DFMBPSROIPoolingParameter::clear_has_pooled_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void DFMBPSROIPoolingParameter::clear_pooled_height() {
  pooled_height_ = 7u;
  clear_has_pooled_height();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::pooled_height() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.pooled_height)
  return pooled_height_;
}
void DFMBPSROIPoolingParameter::set_pooled_height(::google::protobuf::uint32 value) {
  set_has_pooled_height();
  pooled_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.pooled_height)
}

// optional uint32 pooled_width = 10 [default = 7];
bool DFMBPSROIPoolingParameter::has_pooled_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_pooled_width() {
  _has_bits_[0] |= 0x00000200u;
}
void DFMBPSROIPoolingParameter::clear_has_pooled_width() {
  _has_bits_[0] &= ~0x00000200u;
}
void DFMBPSROIPoolingParameter::clear_pooled_width() {
  pooled_width_ = 7u;
  clear_has_pooled_width();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::pooled_width() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.pooled_width)
  return pooled_width_;
}
void DFMBPSROIPoolingParameter::set_pooled_width(::google::protobuf::uint32 value) {
  set_has_pooled_width();
  pooled_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.pooled_width)
}

// optional uint32 part_height = 11 [default = 7];
bool DFMBPSROIPoolingParameter::has_part_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_part_height() {
  _has_bits_[0] |= 0x00000400u;
}
void DFMBPSROIPoolingParameter::clear_has_part_height() {
  _has_bits_[0] &= ~0x00000400u;
}
void DFMBPSROIPoolingParameter::clear_part_height() {
  part_height_ = 7u;
  clear_has_part_height();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::part_height() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.part_height)
  return part_height_;
}
void DFMBPSROIPoolingParameter::set_part_height(::google::protobuf::uint32 value) {
  set_has_part_height();
  part_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.part_height)
}

// optional uint32 part_width = 12 [default = 7];
bool DFMBPSROIPoolingParameter::has_part_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DFMBPSROIPoolingParameter::set_has_part_width() {
  _has_bits_[0] |= 0x00000800u;
}
void DFMBPSROIPoolingParameter::clear_has_part_width() {
  _has_bits_[0] &= ~0x00000800u;
}
void DFMBPSROIPoolingParameter::clear_part_width() {
  part_width_ = 7u;
  clear_has_part_width();
}
::google::protobuf::uint32 DFMBPSROIPoolingParameter::part_width() const {
  // @@protoc_insertion_point(field_get:caffe.DFMBPSROIPoolingParameter.part_width)
  return part_width_;
}
void DFMBPSROIPoolingParameter::set_part_width(::google::protobuf::uint32 value) {
  set_has_part_width();
  part_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DFMBPSROIPoolingParameter.part_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposalImgScaleToCamCoordsParameter::kNumClassFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kSubClassNumClassFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kSubClassBottomIdxFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kPrjHNormTypeFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kHasSize3DAndOrien3DFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kOrienTypeFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kClsIdsZeroSize3DWFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kClsIdsZeroSize3DLFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kClsIdsZeroOrien3DFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCmpPtsCorner3DFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCmpPtsCorner2DFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCtr2DMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCtr2DStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kPrjHMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kPrjHStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kRealHMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kRealHStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kRealWMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kRealWStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kRealLMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kRealLStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kSinMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kSinStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCosMeansFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCosStdsFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCamInfoIdxStInImInfoFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kImWidthScaleFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kImHeightScaleFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCordsOffsetXFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kCordsOffsetYFieldNumber;
const int ProposalImgScaleToCamCoordsParameter::kBboxSizeAddOneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposalImgScaleToCamCoordsParameter::ProposalImgScaleToCamCoordsParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ProposalImgScaleToCamCoordsParameter)
}
ProposalImgScaleToCamCoordsParameter::ProposalImgScaleToCamCoordsParameter(const ProposalImgScaleToCamCoordsParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sub_class_num_class_(from.sub_class_num_class_),
      sub_class_bottom_idx_(from.sub_class_bottom_idx_),
      cls_ids_zero_size3d_w_(from.cls_ids_zero_size3d_w_),
      cls_ids_zero_size3d_l_(from.cls_ids_zero_size3d_l_),
      cls_ids_zero_orien3d_(from.cls_ids_zero_orien3d_),
      ctr_2d_means_(from.ctr_2d_means_),
      ctr_2d_stds_(from.ctr_2d_stds_),
      prj_h_means_(from.prj_h_means_),
      prj_h_stds_(from.prj_h_stds_),
      real_h_means_(from.real_h_means_),
      real_h_stds_(from.real_h_stds_),
      real_w_means_(from.real_w_means_),
      real_w_stds_(from.real_w_stds_),
      real_l_means_(from.real_l_means_),
      real_l_stds_(from.real_l_stds_),
      sin_means_(from.sin_means_),
      sin_stds_(from.sin_stds_),
      cos_means_(from.cos_means_),
      cos_stds_(from.cos_stds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_class_, &from.num_class_,
    reinterpret_cast<char*>(&im_height_scale_) -
    reinterpret_cast<char*>(&num_class_) + sizeof(im_height_scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.ProposalImgScaleToCamCoordsParameter)
}

void ProposalImgScaleToCamCoordsParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_class_, 0, reinterpret_cast<char*>(&cords_offset_y_) -
    reinterpret_cast<char*>(&num_class_) + sizeof(cords_offset_y_));
  bbox_size_add_one_ = true;
  prj_h_norm_type_ = 1;
  orien_type_ = 1;
  im_width_scale_ = 1;
  im_height_scale_ = 1;
}

ProposalImgScaleToCamCoordsParameter::~ProposalImgScaleToCamCoordsParameter() {
  // @@protoc_insertion_point(destructor:caffe.ProposalImgScaleToCamCoordsParameter)
  SharedDtor();
}

void ProposalImgScaleToCamCoordsParameter::SharedDtor() {
}

void ProposalImgScaleToCamCoordsParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProposalImgScaleToCamCoordsParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProposalImgScaleToCamCoordsParameter& ProposalImgScaleToCamCoordsParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProposalImgScaleToCamCoordsParameter* ProposalImgScaleToCamCoordsParameter::New(::google::protobuf::Arena* arena) const {
  ProposalImgScaleToCamCoordsParameter* n = new ProposalImgScaleToCamCoordsParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProposalImgScaleToCamCoordsParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ProposalImgScaleToCamCoordsParameter)
  sub_class_num_class_.Clear();
  sub_class_bottom_idx_.Clear();
  cls_ids_zero_size3d_w_.Clear();
  cls_ids_zero_size3d_l_.Clear();
  cls_ids_zero_orien3d_.Clear();
  ctr_2d_means_.Clear();
  ctr_2d_stds_.Clear();
  prj_h_means_.Clear();
  prj_h_stds_.Clear();
  real_h_means_.Clear();
  real_h_stds_.Clear();
  real_w_means_.Clear();
  real_w_stds_.Clear();
  real_l_means_.Clear();
  real_l_stds_.Clear();
  sin_means_.Clear();
  sin_stds_.Clear();
  cos_means_.Clear();
  cos_stds_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&num_class_, 0, reinterpret_cast<char*>(&cords_offset_y_) -
      reinterpret_cast<char*>(&num_class_) + sizeof(cords_offset_y_));
    bbox_size_add_one_ = true;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    prj_h_norm_type_ = 1;
    orien_type_ = 1;
    im_width_scale_ = 1;
    im_height_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProposalImgScaleToCamCoordsParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ProposalImgScaleToCamCoordsParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_class = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sub_class_num_class = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_sub_class_num_class())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sub_class_num_class())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 sub_class_bottom_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_sub_class_bottom_idx())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sub_class_bottom_idx())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ProposalImgScaleToCamCoordsParameter_NormType_IsValid(value)) {
            set_prj_h_norm_type(static_cast< ::caffe::ProposalImgScaleToCamCoordsParameter_NormType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_size3d_and_orien3d = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_has_size3d_and_orien3d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_size3d_and_orien3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ProposalImgScaleToCamCoordsParameter_OrienType_IsValid(value)) {
            set_orien_type(static_cast< ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cls_ids_zero_size3d_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_cls_ids_zero_size3d_w())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cls_ids_zero_size3d_w())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cls_ids_zero_size3d_l = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_cls_ids_zero_size3d_l())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cls_ids_zero_size3d_l())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cls_ids_zero_orien3d = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_cls_ids_zero_orien3d())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cls_ids_zero_orien3d())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cmp_pts_corner_3d = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cmp_pts_corner_3d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmp_pts_corner_3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cmp_pts_corner_2d = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_cmp_pts_corner_2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmp_pts_corner_2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ctr_2d_means = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101u, input, this->mutable_ctr_2d_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ctr_2d_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ctr_2d_stds = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109u, input, this->mutable_ctr_2d_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ctr_2d_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float prj_h_means = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 117u, input, this->mutable_prj_h_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(114u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_prj_h_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float prj_h_stds = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125u, input, this->mutable_prj_h_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(122u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_prj_h_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float real_h_means = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 133u, input, this->mutable_real_h_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(130u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_real_h_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float real_h_stds = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 141u, input, this->mutable_real_h_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(138u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_real_h_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float real_w_means = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 149u, input, this->mutable_real_w_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(146u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_real_w_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float real_w_stds = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 157u, input, this->mutable_real_w_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(154u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_real_w_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float real_l_means = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 165u, input, this->mutable_real_l_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(162u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_real_l_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float real_l_stds = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 173u, input, this->mutable_real_l_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(170u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_real_l_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sin_means = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181u, input, this->mutable_sin_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(178u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sin_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sin_stds = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189u, input, this->mutable_sin_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(186u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sin_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float cos_means = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 197u, input, this->mutable_cos_means())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(194u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cos_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float cos_stds = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 205u, input, this->mutable_cos_stds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(202u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cos_stds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_cam_info_idx_st_in_im_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cam_info_idx_st_in_im_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float im_width_scale = 27 [default = 1];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u)) {
          set_has_im_width_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &im_width_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float im_height_scale = 28 [default = 1];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u)) {
          set_has_im_height_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &im_height_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cords_offset_x = 29 [default = 0];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u)) {
          set_has_cords_offset_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cords_offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cords_offset_y = 30 [default = 0];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u)) {
          set_has_cords_offset_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cords_offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bbox_size_add_one = 31 [default = true];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_bbox_size_add_one();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_size_add_one_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ProposalImgScaleToCamCoordsParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ProposalImgScaleToCamCoordsParameter)
  return false;
#undef DO_
}

void ProposalImgScaleToCamCoordsParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ProposalImgScaleToCamCoordsParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num_class = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_class(), output);
  }

  // repeated uint32 sub_class_num_class = 2;
  for (int i = 0, n = this->sub_class_num_class_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sub_class_num_class(i), output);
  }

  // repeated int32 sub_class_bottom_idx = 3;
  for (int i = 0, n = this->sub_class_bottom_idx_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->sub_class_bottom_idx(i), output);
  }

  // optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->prj_h_norm_type(), output);
  }

  // optional bool has_size3d_and_orien3d = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_size3d_and_orien3d(), output);
  }

  // optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->orien_type(), output);
  }

  // repeated uint32 cls_ids_zero_size3d_w = 7;
  for (int i = 0, n = this->cls_ids_zero_size3d_w_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->cls_ids_zero_size3d_w(i), output);
  }

  // repeated uint32 cls_ids_zero_size3d_l = 8;
  for (int i = 0, n = this->cls_ids_zero_size3d_l_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->cls_ids_zero_size3d_l(i), output);
  }

  // repeated uint32 cls_ids_zero_orien3d = 9;
  for (int i = 0, n = this->cls_ids_zero_orien3d_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->cls_ids_zero_orien3d(i), output);
  }

  // optional bool cmp_pts_corner_3d = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->cmp_pts_corner_3d(), output);
  }

  // optional bool cmp_pts_corner_2d = 11 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->cmp_pts_corner_2d(), output);
  }

  // repeated float ctr_2d_means = 12;
  for (int i = 0, n = this->ctr_2d_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->ctr_2d_means(i), output);
  }

  // repeated float ctr_2d_stds = 13;
  for (int i = 0, n = this->ctr_2d_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->ctr_2d_stds(i), output);
  }

  // repeated float prj_h_means = 14;
  for (int i = 0, n = this->prj_h_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      14, this->prj_h_means(i), output);
  }

  // repeated float prj_h_stds = 15;
  for (int i = 0, n = this->prj_h_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->prj_h_stds(i), output);
  }

  // repeated float real_h_means = 16;
  for (int i = 0, n = this->real_h_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      16, this->real_h_means(i), output);
  }

  // repeated float real_h_stds = 17;
  for (int i = 0, n = this->real_h_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      17, this->real_h_stds(i), output);
  }

  // repeated float real_w_means = 18;
  for (int i = 0, n = this->real_w_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      18, this->real_w_means(i), output);
  }

  // repeated float real_w_stds = 19;
  for (int i = 0, n = this->real_w_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      19, this->real_w_stds(i), output);
  }

  // repeated float real_l_means = 20;
  for (int i = 0, n = this->real_l_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      20, this->real_l_means(i), output);
  }

  // repeated float real_l_stds = 21;
  for (int i = 0, n = this->real_l_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      21, this->real_l_stds(i), output);
  }

  // repeated float sin_means = 22;
  for (int i = 0, n = this->sin_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      22, this->sin_means(i), output);
  }

  // repeated float sin_stds = 23;
  for (int i = 0, n = this->sin_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->sin_stds(i), output);
  }

  // repeated float cos_means = 24;
  for (int i = 0, n = this->cos_means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      24, this->cos_means(i), output);
  }

  // repeated float cos_stds = 25;
  for (int i = 0, n = this->cos_stds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      25, this->cos_stds(i), output);
  }

  // optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->cam_info_idx_st_in_im_info(), output);
  }

  // optional float im_width_scale = 27 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->im_width_scale(), output);
  }

  // optional float im_height_scale = 28 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->im_height_scale(), output);
  }

  // optional float cords_offset_x = 29 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->cords_offset_x(), output);
  }

  // optional float cords_offset_y = 30 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->cords_offset_y(), output);
  }

  // optional bool bbox_size_add_one = 31 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->bbox_size_add_one(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ProposalImgScaleToCamCoordsParameter)
}

::google::protobuf::uint8* ProposalImgScaleToCamCoordsParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ProposalImgScaleToCamCoordsParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_class(), target);
  }

  // repeated uint32 sub_class_num_class = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->sub_class_num_class_, target);

  // repeated int32 sub_class_bottom_idx = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->sub_class_bottom_idx_, target);

  // optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->prj_h_norm_type(), target);
  }

  // optional bool has_size3d_and_orien3d = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_size3d_and_orien3d(), target);
  }

  // optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->orien_type(), target);
  }

  // repeated uint32 cls_ids_zero_size3d_w = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->cls_ids_zero_size3d_w_, target);

  // repeated uint32 cls_ids_zero_size3d_l = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->cls_ids_zero_size3d_l_, target);

  // repeated uint32 cls_ids_zero_orien3d = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->cls_ids_zero_orien3d_, target);

  // optional bool cmp_pts_corner_3d = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->cmp_pts_corner_3d(), target);
  }

  // optional bool cmp_pts_corner_2d = 11 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->cmp_pts_corner_2d(), target);
  }

  // repeated float ctr_2d_means = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(12, this->ctr_2d_means_, target);

  // repeated float ctr_2d_stds = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(13, this->ctr_2d_stds_, target);

  // repeated float prj_h_means = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(14, this->prj_h_means_, target);

  // repeated float prj_h_stds = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(15, this->prj_h_stds_, target);

  // repeated float real_h_means = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(16, this->real_h_means_, target);

  // repeated float real_h_stds = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(17, this->real_h_stds_, target);

  // repeated float real_w_means = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(18, this->real_w_means_, target);

  // repeated float real_w_stds = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(19, this->real_w_stds_, target);

  // repeated float real_l_means = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(20, this->real_l_means_, target);

  // repeated float real_l_stds = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(21, this->real_l_stds_, target);

  // repeated float sin_means = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(22, this->sin_means_, target);

  // repeated float sin_stds = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(23, this->sin_stds_, target);

  // repeated float cos_means = 24;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(24, this->cos_means_, target);

  // repeated float cos_stds = 25;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(25, this->cos_stds_, target);

  // optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->cam_info_idx_st_in_im_info(), target);
  }

  // optional float im_width_scale = 27 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->im_width_scale(), target);
  }

  // optional float im_height_scale = 28 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->im_height_scale(), target);
  }

  // optional float cords_offset_x = 29 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->cords_offset_x(), target);
  }

  // optional float cords_offset_y = 30 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->cords_offset_y(), target);
  }

  // optional bool bbox_size_add_one = 31 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->bbox_size_add_one(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ProposalImgScaleToCamCoordsParameter)
  return target;
}

size_t ProposalImgScaleToCamCoordsParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ProposalImgScaleToCamCoordsParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 num_class = 1;
  if (has_num_class()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_class());
  }
  // repeated uint32 sub_class_num_class = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sub_class_num_class_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sub_class_num_class_size());
    total_size += data_size;
  }

  // repeated int32 sub_class_bottom_idx = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->sub_class_bottom_idx_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sub_class_bottom_idx_size());
    total_size += data_size;
  }

  // repeated uint32 cls_ids_zero_size3d_w = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cls_ids_zero_size3d_w_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cls_ids_zero_size3d_w_size());
    total_size += data_size;
  }

  // repeated uint32 cls_ids_zero_size3d_l = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cls_ids_zero_size3d_l_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cls_ids_zero_size3d_l_size());
    total_size += data_size;
  }

  // repeated uint32 cls_ids_zero_orien3d = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cls_ids_zero_orien3d_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cls_ids_zero_orien3d_size());
    total_size += data_size;
  }

  // repeated float ctr_2d_means = 12;
  {
    unsigned int count = this->ctr_2d_means_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ctr_2d_means_size());
    total_size += data_size;
  }

  // repeated float ctr_2d_stds = 13;
  {
    unsigned int count = this->ctr_2d_stds_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ctr_2d_stds_size());
    total_size += data_size;
  }

  // repeated float prj_h_means = 14;
  {
    unsigned int count = this->prj_h_means_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->prj_h_means_size());
    total_size += data_size;
  }

  // repeated float prj_h_stds = 15;
  {
    unsigned int count = this->prj_h_stds_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->prj_h_stds_size());
    total_size += data_size;
  }

  // repeated float real_h_means = 16;
  {
    unsigned int count = this->real_h_means_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->real_h_means_size());
    total_size += data_size;
  }

  // repeated float real_h_stds = 17;
  {
    unsigned int count = this->real_h_stds_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->real_h_stds_size());
    total_size += data_size;
  }

  // repeated float real_w_means = 18;
  {
    unsigned int count = this->real_w_means_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->real_w_means_size());
    total_size += data_size;
  }

  // repeated float real_w_stds = 19;
  {
    unsigned int count = this->real_w_stds_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->real_w_stds_size());
    total_size += data_size;
  }

  // repeated float real_l_means = 20;
  {
    unsigned int count = this->real_l_means_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->real_l_means_size());
    total_size += data_size;
  }

  // repeated float real_l_stds = 21;
  {
    unsigned int count = this->real_l_stds_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->real_l_stds_size());
    total_size += data_size;
  }

  // repeated float sin_means = 22;
  {
    unsigned int count = this->sin_means_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->sin_means_size());
    total_size += data_size;
  }

  // repeated float sin_stds = 23;
  {
    unsigned int count = this->sin_stds_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->sin_stds_size());
    total_size += data_size;
  }

  // repeated float cos_means = 24;
  {
    unsigned int count = this->cos_means_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->cos_means_size());
    total_size += data_size;
  }

  // repeated float cos_stds = 25;
  {
    unsigned int count = this->cos_stds_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->cos_stds_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional bool has_size3d_and_orien3d = 5 [default = false];
    if (has_has_size3d_and_orien3d()) {
      total_size += 1 + 1;
    }

    // optional bool cmp_pts_corner_3d = 10 [default = false];
    if (has_cmp_pts_corner_3d()) {
      total_size += 1 + 1;
    }

    // optional bool cmp_pts_corner_2d = 11 [default = false];
    if (has_cmp_pts_corner_2d()) {
      total_size += 1 + 1;
    }

    // optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
    if (has_cam_info_idx_st_in_im_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cam_info_idx_st_in_im_info());
    }

    // optional float cords_offset_x = 29 [default = 0];
    if (has_cords_offset_x()) {
      total_size += 2 + 4;
    }

    // optional float cords_offset_y = 30 [default = 0];
    if (has_cords_offset_y()) {
      total_size += 2 + 4;
    }

    // optional bool bbox_size_add_one = 31 [default = true];
    if (has_bbox_size_add_one()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
    if (has_prj_h_norm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prj_h_norm_type());
    }

    // optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
    if (has_orien_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orien_type());
    }

    // optional float im_width_scale = 27 [default = 1];
    if (has_im_width_scale()) {
      total_size += 2 + 4;
    }

    // optional float im_height_scale = 28 [default = 1];
    if (has_im_height_scale()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProposalImgScaleToCamCoordsParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ProposalImgScaleToCamCoordsParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalImgScaleToCamCoordsParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProposalImgScaleToCamCoordsParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ProposalImgScaleToCamCoordsParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ProposalImgScaleToCamCoordsParameter)
    MergeFrom(*source);
  }
}

void ProposalImgScaleToCamCoordsParameter::MergeFrom(const ProposalImgScaleToCamCoordsParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ProposalImgScaleToCamCoordsParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_class_num_class_.MergeFrom(from.sub_class_num_class_);
  sub_class_bottom_idx_.MergeFrom(from.sub_class_bottom_idx_);
  cls_ids_zero_size3d_w_.MergeFrom(from.cls_ids_zero_size3d_w_);
  cls_ids_zero_size3d_l_.MergeFrom(from.cls_ids_zero_size3d_l_);
  cls_ids_zero_orien3d_.MergeFrom(from.cls_ids_zero_orien3d_);
  ctr_2d_means_.MergeFrom(from.ctr_2d_means_);
  ctr_2d_stds_.MergeFrom(from.ctr_2d_stds_);
  prj_h_means_.MergeFrom(from.prj_h_means_);
  prj_h_stds_.MergeFrom(from.prj_h_stds_);
  real_h_means_.MergeFrom(from.real_h_means_);
  real_h_stds_.MergeFrom(from.real_h_stds_);
  real_w_means_.MergeFrom(from.real_w_means_);
  real_w_stds_.MergeFrom(from.real_w_stds_);
  real_l_means_.MergeFrom(from.real_l_means_);
  real_l_stds_.MergeFrom(from.real_l_stds_);
  sin_means_.MergeFrom(from.sin_means_);
  sin_stds_.MergeFrom(from.sin_stds_);
  cos_means_.MergeFrom(from.cos_means_);
  cos_stds_.MergeFrom(from.cos_stds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      num_class_ = from.num_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_size3d_and_orien3d_ = from.has_size3d_and_orien3d_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmp_pts_corner_3d_ = from.cmp_pts_corner_3d_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmp_pts_corner_2d_ = from.cmp_pts_corner_2d_;
    }
    if (cached_has_bits & 0x00000010u) {
      cam_info_idx_st_in_im_info_ = from.cam_info_idx_st_in_im_info_;
    }
    if (cached_has_bits & 0x00000020u) {
      cords_offset_x_ = from.cords_offset_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      cords_offset_y_ = from.cords_offset_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      bbox_size_add_one_ = from.bbox_size_add_one_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      prj_h_norm_type_ = from.prj_h_norm_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      orien_type_ = from.orien_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      im_width_scale_ = from.im_width_scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      im_height_scale_ = from.im_height_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProposalImgScaleToCamCoordsParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ProposalImgScaleToCamCoordsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalImgScaleToCamCoordsParameter::CopyFrom(const ProposalImgScaleToCamCoordsParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ProposalImgScaleToCamCoordsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalImgScaleToCamCoordsParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProposalImgScaleToCamCoordsParameter::Swap(ProposalImgScaleToCamCoordsParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposalImgScaleToCamCoordsParameter::InternalSwap(ProposalImgScaleToCamCoordsParameter* other) {
  sub_class_num_class_.InternalSwap(&other->sub_class_num_class_);
  sub_class_bottom_idx_.InternalSwap(&other->sub_class_bottom_idx_);
  cls_ids_zero_size3d_w_.InternalSwap(&other->cls_ids_zero_size3d_w_);
  cls_ids_zero_size3d_l_.InternalSwap(&other->cls_ids_zero_size3d_l_);
  cls_ids_zero_orien3d_.InternalSwap(&other->cls_ids_zero_orien3d_);
  ctr_2d_means_.InternalSwap(&other->ctr_2d_means_);
  ctr_2d_stds_.InternalSwap(&other->ctr_2d_stds_);
  prj_h_means_.InternalSwap(&other->prj_h_means_);
  prj_h_stds_.InternalSwap(&other->prj_h_stds_);
  real_h_means_.InternalSwap(&other->real_h_means_);
  real_h_stds_.InternalSwap(&other->real_h_stds_);
  real_w_means_.InternalSwap(&other->real_w_means_);
  real_w_stds_.InternalSwap(&other->real_w_stds_);
  real_l_means_.InternalSwap(&other->real_l_means_);
  real_l_stds_.InternalSwap(&other->real_l_stds_);
  sin_means_.InternalSwap(&other->sin_means_);
  sin_stds_.InternalSwap(&other->sin_stds_);
  cos_means_.InternalSwap(&other->cos_means_);
  cos_stds_.InternalSwap(&other->cos_stds_);
  std::swap(num_class_, other->num_class_);
  std::swap(has_size3d_and_orien3d_, other->has_size3d_and_orien3d_);
  std::swap(cmp_pts_corner_3d_, other->cmp_pts_corner_3d_);
  std::swap(cmp_pts_corner_2d_, other->cmp_pts_corner_2d_);
  std::swap(cam_info_idx_st_in_im_info_, other->cam_info_idx_st_in_im_info_);
  std::swap(cords_offset_x_, other->cords_offset_x_);
  std::swap(cords_offset_y_, other->cords_offset_y_);
  std::swap(bbox_size_add_one_, other->bbox_size_add_one_);
  std::swap(prj_h_norm_type_, other->prj_h_norm_type_);
  std::swap(orien_type_, other->orien_type_);
  std::swap(im_width_scale_, other->im_width_scale_);
  std::swap(im_height_scale_, other->im_height_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProposalImgScaleToCamCoordsParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProposalImgScaleToCamCoordsParameter

// required uint32 num_class = 1;
bool ProposalImgScaleToCamCoordsParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000001u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProposalImgScaleToCamCoordsParameter::clear_num_class() {
  num_class_ = 0u;
  clear_has_num_class();
}
::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.num_class)
  return num_class_;
}
void ProposalImgScaleToCamCoordsParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.num_class)
}

// repeated uint32 sub_class_num_class = 2;
int ProposalImgScaleToCamCoordsParameter::sub_class_num_class_size() const {
  return sub_class_num_class_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_sub_class_num_class() {
  sub_class_num_class_.Clear();
}
::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::sub_class_num_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
  return sub_class_num_class_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_sub_class_num_class(int index, ::google::protobuf::uint32 value) {
  sub_class_num_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
}
void ProposalImgScaleToCamCoordsParameter::add_sub_class_num_class(::google::protobuf::uint32 value) {
  sub_class_num_class_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::sub_class_num_class() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
  return sub_class_num_class_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_sub_class_num_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_num_class)
  return &sub_class_num_class_;
}

// repeated int32 sub_class_bottom_idx = 3;
int ProposalImgScaleToCamCoordsParameter::sub_class_bottom_idx_size() const {
  return sub_class_bottom_idx_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_sub_class_bottom_idx() {
  sub_class_bottom_idx_.Clear();
}
::google::protobuf::int32 ProposalImgScaleToCamCoordsParameter::sub_class_bottom_idx(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
  return sub_class_bottom_idx_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_sub_class_bottom_idx(int index, ::google::protobuf::int32 value) {
  sub_class_bottom_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
}
void ProposalImgScaleToCamCoordsParameter::add_sub_class_bottom_idx(::google::protobuf::int32 value) {
  sub_class_bottom_idx_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProposalImgScaleToCamCoordsParameter::sub_class_bottom_idx() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
  return sub_class_bottom_idx_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProposalImgScaleToCamCoordsParameter::mutable_sub_class_bottom_idx() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sub_class_bottom_idx)
  return &sub_class_bottom_idx_;
}

// optional .caffe.ProposalImgScaleToCamCoordsParameter.NormType prj_h_norm_type = 4 [default = HEIGHT_LOG];
bool ProposalImgScaleToCamCoordsParameter::has_prj_h_norm_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_prj_h_norm_type() {
  _has_bits_[0] |= 0x00000100u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_prj_h_norm_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProposalImgScaleToCamCoordsParameter::clear_prj_h_norm_type() {
  prj_h_norm_type_ = 1;
  clear_has_prj_h_norm_type();
}
::caffe::ProposalImgScaleToCamCoordsParameter_NormType ProposalImgScaleToCamCoordsParameter::prj_h_norm_type() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_norm_type)
  return static_cast< ::caffe::ProposalImgScaleToCamCoordsParameter_NormType >(prj_h_norm_type_);
}
void ProposalImgScaleToCamCoordsParameter::set_prj_h_norm_type(::caffe::ProposalImgScaleToCamCoordsParameter_NormType value) {
  assert(::caffe::ProposalImgScaleToCamCoordsParameter_NormType_IsValid(value));
  set_has_prj_h_norm_type();
  prj_h_norm_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_norm_type)
}

// optional bool has_size3d_and_orien3d = 5 [default = false];
bool ProposalImgScaleToCamCoordsParameter::has_has_size3d_and_orien3d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_has_size3d_and_orien3d() {
  _has_bits_[0] |= 0x00000002u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_has_size3d_and_orien3d() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_size3d_and_orien3d() {
  has_size3d_and_orien3d_ = false;
  clear_has_has_size3d_and_orien3d();
}
bool ProposalImgScaleToCamCoordsParameter::has_size3d_and_orien3d() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.has_size3d_and_orien3d)
  return has_size3d_and_orien3d_;
}
void ProposalImgScaleToCamCoordsParameter::set_has_size3d_and_orien3d(bool value) {
  set_has_has_size3d_and_orien3d();
  has_size3d_and_orien3d_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.has_size3d_and_orien3d)
}

// optional .caffe.ProposalImgScaleToCamCoordsParameter.OrienType orien_type = 6 [default = PI2];
bool ProposalImgScaleToCamCoordsParameter::has_orien_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_orien_type() {
  _has_bits_[0] |= 0x00000200u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_orien_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void ProposalImgScaleToCamCoordsParameter::clear_orien_type() {
  orien_type_ = 1;
  clear_has_orien_type();
}
::caffe::ProposalImgScaleToCamCoordsParameter_OrienType ProposalImgScaleToCamCoordsParameter::orien_type() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.orien_type)
  return static_cast< ::caffe::ProposalImgScaleToCamCoordsParameter_OrienType >(orien_type_);
}
void ProposalImgScaleToCamCoordsParameter::set_orien_type(::caffe::ProposalImgScaleToCamCoordsParameter_OrienType value) {
  assert(::caffe::ProposalImgScaleToCamCoordsParameter_OrienType_IsValid(value));
  set_has_orien_type();
  orien_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.orien_type)
}

// repeated uint32 cls_ids_zero_size3d_w = 7;
int ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_w_size() const {
  return cls_ids_zero_size3d_w_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_cls_ids_zero_size3d_w() {
  cls_ids_zero_size3d_w_.Clear();
}
::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
  return cls_ids_zero_size3d_w_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_cls_ids_zero_size3d_w(int index, ::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
}
void ProposalImgScaleToCamCoordsParameter::add_cls_ids_zero_size3d_w(::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_w() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
  return cls_ids_zero_size3d_w_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_cls_ids_zero_size3d_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_w)
  return &cls_ids_zero_size3d_w_;
}

// repeated uint32 cls_ids_zero_size3d_l = 8;
int ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_l_size() const {
  return cls_ids_zero_size3d_l_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_cls_ids_zero_size3d_l() {
  cls_ids_zero_size3d_l_.Clear();
}
::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_l(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
  return cls_ids_zero_size3d_l_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_cls_ids_zero_size3d_l(int index, ::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_l_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
}
void ProposalImgScaleToCamCoordsParameter::add_cls_ids_zero_size3d_l(::google::protobuf::uint32 value) {
  cls_ids_zero_size3d_l_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::cls_ids_zero_size3d_l() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
  return cls_ids_zero_size3d_l_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_cls_ids_zero_size3d_l() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_size3d_l)
  return &cls_ids_zero_size3d_l_;
}

// repeated uint32 cls_ids_zero_orien3d = 9;
int ProposalImgScaleToCamCoordsParameter::cls_ids_zero_orien3d_size() const {
  return cls_ids_zero_orien3d_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_cls_ids_zero_orien3d() {
  cls_ids_zero_orien3d_.Clear();
}
::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cls_ids_zero_orien3d(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
  return cls_ids_zero_orien3d_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_cls_ids_zero_orien3d(int index, ::google::protobuf::uint32 value) {
  cls_ids_zero_orien3d_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
}
void ProposalImgScaleToCamCoordsParameter::add_cls_ids_zero_orien3d(::google::protobuf::uint32 value) {
  cls_ids_zero_orien3d_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProposalImgScaleToCamCoordsParameter::cls_ids_zero_orien3d() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
  return cls_ids_zero_orien3d_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProposalImgScaleToCamCoordsParameter::mutable_cls_ids_zero_orien3d() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cls_ids_zero_orien3d)
  return &cls_ids_zero_orien3d_;
}

// optional bool cmp_pts_corner_3d = 10 [default = false];
bool ProposalImgScaleToCamCoordsParameter::has_cmp_pts_corner_3d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_cmp_pts_corner_3d() {
  _has_bits_[0] |= 0x00000004u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_cmp_pts_corner_3d() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProposalImgScaleToCamCoordsParameter::clear_cmp_pts_corner_3d() {
  cmp_pts_corner_3d_ = false;
  clear_has_cmp_pts_corner_3d();
}
bool ProposalImgScaleToCamCoordsParameter::cmp_pts_corner_3d() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_3d)
  return cmp_pts_corner_3d_;
}
void ProposalImgScaleToCamCoordsParameter::set_cmp_pts_corner_3d(bool value) {
  set_has_cmp_pts_corner_3d();
  cmp_pts_corner_3d_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_3d)
}

// optional bool cmp_pts_corner_2d = 11 [default = false];
bool ProposalImgScaleToCamCoordsParameter::has_cmp_pts_corner_2d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_cmp_pts_corner_2d() {
  _has_bits_[0] |= 0x00000008u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_cmp_pts_corner_2d() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProposalImgScaleToCamCoordsParameter::clear_cmp_pts_corner_2d() {
  cmp_pts_corner_2d_ = false;
  clear_has_cmp_pts_corner_2d();
}
bool ProposalImgScaleToCamCoordsParameter::cmp_pts_corner_2d() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_2d)
  return cmp_pts_corner_2d_;
}
void ProposalImgScaleToCamCoordsParameter::set_cmp_pts_corner_2d(bool value) {
  set_has_cmp_pts_corner_2d();
  cmp_pts_corner_2d_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cmp_pts_corner_2d)
}

// repeated float ctr_2d_means = 12;
int ProposalImgScaleToCamCoordsParameter::ctr_2d_means_size() const {
  return ctr_2d_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_ctr_2d_means() {
  ctr_2d_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::ctr_2d_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
  return ctr_2d_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_ctr_2d_means(int index, float value) {
  ctr_2d_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
}
void ProposalImgScaleToCamCoordsParameter::add_ctr_2d_means(float value) {
  ctr_2d_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::ctr_2d_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
  return ctr_2d_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_ctr_2d_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_means)
  return &ctr_2d_means_;
}

// repeated float ctr_2d_stds = 13;
int ProposalImgScaleToCamCoordsParameter::ctr_2d_stds_size() const {
  return ctr_2d_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_ctr_2d_stds() {
  ctr_2d_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::ctr_2d_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
  return ctr_2d_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_ctr_2d_stds(int index, float value) {
  ctr_2d_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_ctr_2d_stds(float value) {
  ctr_2d_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::ctr_2d_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
  return ctr_2d_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_ctr_2d_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.ctr_2d_stds)
  return &ctr_2d_stds_;
}

// repeated float prj_h_means = 14;
int ProposalImgScaleToCamCoordsParameter::prj_h_means_size() const {
  return prj_h_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_prj_h_means() {
  prj_h_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::prj_h_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
  return prj_h_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_prj_h_means(int index, float value) {
  prj_h_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
}
void ProposalImgScaleToCamCoordsParameter::add_prj_h_means(float value) {
  prj_h_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::prj_h_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
  return prj_h_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_prj_h_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_means)
  return &prj_h_means_;
}

// repeated float prj_h_stds = 15;
int ProposalImgScaleToCamCoordsParameter::prj_h_stds_size() const {
  return prj_h_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_prj_h_stds() {
  prj_h_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::prj_h_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
  return prj_h_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_prj_h_stds(int index, float value) {
  prj_h_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_prj_h_stds(float value) {
  prj_h_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::prj_h_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
  return prj_h_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_prj_h_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.prj_h_stds)
  return &prj_h_stds_;
}

// repeated float real_h_means = 16;
int ProposalImgScaleToCamCoordsParameter::real_h_means_size() const {
  return real_h_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_real_h_means() {
  real_h_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::real_h_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
  return real_h_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_real_h_means(int index, float value) {
  real_h_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
}
void ProposalImgScaleToCamCoordsParameter::add_real_h_means(float value) {
  real_h_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_h_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
  return real_h_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_h_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_means)
  return &real_h_means_;
}

// repeated float real_h_stds = 17;
int ProposalImgScaleToCamCoordsParameter::real_h_stds_size() const {
  return real_h_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_real_h_stds() {
  real_h_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::real_h_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
  return real_h_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_real_h_stds(int index, float value) {
  real_h_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_real_h_stds(float value) {
  real_h_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_h_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
  return real_h_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_h_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_h_stds)
  return &real_h_stds_;
}

// repeated float real_w_means = 18;
int ProposalImgScaleToCamCoordsParameter::real_w_means_size() const {
  return real_w_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_real_w_means() {
  real_w_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::real_w_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
  return real_w_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_real_w_means(int index, float value) {
  real_w_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
}
void ProposalImgScaleToCamCoordsParameter::add_real_w_means(float value) {
  real_w_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_w_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
  return real_w_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_w_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_means)
  return &real_w_means_;
}

// repeated float real_w_stds = 19;
int ProposalImgScaleToCamCoordsParameter::real_w_stds_size() const {
  return real_w_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_real_w_stds() {
  real_w_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::real_w_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
  return real_w_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_real_w_stds(int index, float value) {
  real_w_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_real_w_stds(float value) {
  real_w_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_w_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
  return real_w_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_w_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_w_stds)
  return &real_w_stds_;
}

// repeated float real_l_means = 20;
int ProposalImgScaleToCamCoordsParameter::real_l_means_size() const {
  return real_l_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_real_l_means() {
  real_l_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::real_l_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
  return real_l_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_real_l_means(int index, float value) {
  real_l_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
}
void ProposalImgScaleToCamCoordsParameter::add_real_l_means(float value) {
  real_l_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_l_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
  return real_l_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_l_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_means)
  return &real_l_means_;
}

// repeated float real_l_stds = 21;
int ProposalImgScaleToCamCoordsParameter::real_l_stds_size() const {
  return real_l_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_real_l_stds() {
  real_l_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::real_l_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
  return real_l_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_real_l_stds(int index, float value) {
  real_l_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_real_l_stds(float value) {
  real_l_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::real_l_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
  return real_l_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_real_l_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.real_l_stds)
  return &real_l_stds_;
}

// repeated float sin_means = 22;
int ProposalImgScaleToCamCoordsParameter::sin_means_size() const {
  return sin_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_sin_means() {
  sin_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::sin_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
  return sin_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_sin_means(int index, float value) {
  sin_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
}
void ProposalImgScaleToCamCoordsParameter::add_sin_means(float value) {
  sin_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::sin_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
  return sin_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_sin_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_means)
  return &sin_means_;
}

// repeated float sin_stds = 23;
int ProposalImgScaleToCamCoordsParameter::sin_stds_size() const {
  return sin_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_sin_stds() {
  sin_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::sin_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
  return sin_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_sin_stds(int index, float value) {
  sin_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_sin_stds(float value) {
  sin_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::sin_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
  return sin_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_sin_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.sin_stds)
  return &sin_stds_;
}

// repeated float cos_means = 24;
int ProposalImgScaleToCamCoordsParameter::cos_means_size() const {
  return cos_means_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_cos_means() {
  cos_means_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::cos_means(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
  return cos_means_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_cos_means(int index, float value) {
  cos_means_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
}
void ProposalImgScaleToCamCoordsParameter::add_cos_means(float value) {
  cos_means_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::cos_means() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
  return cos_means_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_cos_means() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_means)
  return &cos_means_;
}

// repeated float cos_stds = 25;
int ProposalImgScaleToCamCoordsParameter::cos_stds_size() const {
  return cos_stds_.size();
}
void ProposalImgScaleToCamCoordsParameter::clear_cos_stds() {
  cos_stds_.Clear();
}
float ProposalImgScaleToCamCoordsParameter::cos_stds(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
  return cos_stds_.Get(index);
}
void ProposalImgScaleToCamCoordsParameter::set_cos_stds(int index, float value) {
  cos_stds_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
}
void ProposalImgScaleToCamCoordsParameter::add_cos_stds(float value) {
  cos_stds_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
}
const ::google::protobuf::RepeatedField< float >&
ProposalImgScaleToCamCoordsParameter::cos_stds() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
  return cos_stds_;
}
::google::protobuf::RepeatedField< float >*
ProposalImgScaleToCamCoordsParameter::mutable_cos_stds() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalImgScaleToCamCoordsParameter.cos_stds)
  return &cos_stds_;
}

// optional uint32 cam_info_idx_st_in_im_info = 26 [default = 0];
bool ProposalImgScaleToCamCoordsParameter::has_cam_info_idx_st_in_im_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_cam_info_idx_st_in_im_info() {
  _has_bits_[0] |= 0x00000010u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_cam_info_idx_st_in_im_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProposalImgScaleToCamCoordsParameter::clear_cam_info_idx_st_in_im_info() {
  cam_info_idx_st_in_im_info_ = 0u;
  clear_has_cam_info_idx_st_in_im_info();
}
::google::protobuf::uint32 ProposalImgScaleToCamCoordsParameter::cam_info_idx_st_in_im_info() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cam_info_idx_st_in_im_info)
  return cam_info_idx_st_in_im_info_;
}
void ProposalImgScaleToCamCoordsParameter::set_cam_info_idx_st_in_im_info(::google::protobuf::uint32 value) {
  set_has_cam_info_idx_st_in_im_info();
  cam_info_idx_st_in_im_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cam_info_idx_st_in_im_info)
}

// optional float im_width_scale = 27 [default = 1];
bool ProposalImgScaleToCamCoordsParameter::has_im_width_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_im_width_scale() {
  _has_bits_[0] |= 0x00000400u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_im_width_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
void ProposalImgScaleToCamCoordsParameter::clear_im_width_scale() {
  im_width_scale_ = 1;
  clear_has_im_width_scale();
}
float ProposalImgScaleToCamCoordsParameter::im_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.im_width_scale)
  return im_width_scale_;
}
void ProposalImgScaleToCamCoordsParameter::set_im_width_scale(float value) {
  set_has_im_width_scale();
  im_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.im_width_scale)
}

// optional float im_height_scale = 28 [default = 1];
bool ProposalImgScaleToCamCoordsParameter::has_im_height_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_im_height_scale() {
  _has_bits_[0] |= 0x00000800u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_im_height_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
void ProposalImgScaleToCamCoordsParameter::clear_im_height_scale() {
  im_height_scale_ = 1;
  clear_has_im_height_scale();
}
float ProposalImgScaleToCamCoordsParameter::im_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.im_height_scale)
  return im_height_scale_;
}
void ProposalImgScaleToCamCoordsParameter::set_im_height_scale(float value) {
  set_has_im_height_scale();
  im_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.im_height_scale)
}

// optional float cords_offset_x = 29 [default = 0];
bool ProposalImgScaleToCamCoordsParameter::has_cords_offset_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_cords_offset_x() {
  _has_bits_[0] |= 0x00000020u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_cords_offset_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProposalImgScaleToCamCoordsParameter::clear_cords_offset_x() {
  cords_offset_x_ = 0;
  clear_has_cords_offset_x();
}
float ProposalImgScaleToCamCoordsParameter::cords_offset_x() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_x)
  return cords_offset_x_;
}
void ProposalImgScaleToCamCoordsParameter::set_cords_offset_x(float value) {
  set_has_cords_offset_x();
  cords_offset_x_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_x)
}

// optional float cords_offset_y = 30 [default = 0];
bool ProposalImgScaleToCamCoordsParameter::has_cords_offset_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_cords_offset_y() {
  _has_bits_[0] |= 0x00000040u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_cords_offset_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProposalImgScaleToCamCoordsParameter::clear_cords_offset_y() {
  cords_offset_y_ = 0;
  clear_has_cords_offset_y();
}
float ProposalImgScaleToCamCoordsParameter::cords_offset_y() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_y)
  return cords_offset_y_;
}
void ProposalImgScaleToCamCoordsParameter::set_cords_offset_y(float value) {
  set_has_cords_offset_y();
  cords_offset_y_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.cords_offset_y)
}

// optional bool bbox_size_add_one = 31 [default = true];
bool ProposalImgScaleToCamCoordsParameter::has_bbox_size_add_one() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProposalImgScaleToCamCoordsParameter::set_has_bbox_size_add_one() {
  _has_bits_[0] |= 0x00000080u;
}
void ProposalImgScaleToCamCoordsParameter::clear_has_bbox_size_add_one() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProposalImgScaleToCamCoordsParameter::clear_bbox_size_add_one() {
  bbox_size_add_one_ = true;
  clear_has_bbox_size_add_one();
}
bool ProposalImgScaleToCamCoordsParameter::bbox_size_add_one() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalImgScaleToCamCoordsParameter.bbox_size_add_one)
  return bbox_size_add_one_;
}
void ProposalImgScaleToCamCoordsParameter::set_bbox_size_add_one(bool value) {
  set_has_bbox_size_add_one();
  bbox_size_add_one_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalImgScaleToCamCoordsParameter.bbox_size_add_one)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeformableConvolutionParameter::kNumOutputFieldNumber;
const int DeformableConvolutionParameter::kBiasTermFieldNumber;
const int DeformableConvolutionParameter::kPadFieldNumber;
const int DeformableConvolutionParameter::kKernelSizeFieldNumber;
const int DeformableConvolutionParameter::kStrideFieldNumber;
const int DeformableConvolutionParameter::kDilationFieldNumber;
const int DeformableConvolutionParameter::kPadHFieldNumber;
const int DeformableConvolutionParameter::kPadWFieldNumber;
const int DeformableConvolutionParameter::kKernelHFieldNumber;
const int DeformableConvolutionParameter::kKernelWFieldNumber;
const int DeformableConvolutionParameter::kStrideHFieldNumber;
const int DeformableConvolutionParameter::kStrideWFieldNumber;
const int DeformableConvolutionParameter::kGroupFieldNumber;
const int DeformableConvolutionParameter::kWeightFillerFieldNumber;
const int DeformableConvolutionParameter::kBiasFillerFieldNumber;
const int DeformableConvolutionParameter::kEngineFieldNumber;
const int DeformableConvolutionParameter::kAxisFieldNumber;
const int DeformableConvolutionParameter::kForceNdIm2ColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeformableConvolutionParameter::DeformableConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DeformableConvolutionParameter)
}
DeformableConvolutionParameter::DeformableConvolutionParameter(const DeformableConvolutionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pad_(from.pad_),
      kernel_size_(from.kernel_size_),
      stride_(from.stride_),
      dilation_(from.dilation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(group_));
  // @@protoc_insertion_point(copy_constructor:caffe.DeformableConvolutionParameter)
}

void DeformableConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&force_nd_im2col_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(force_nd_im2col_));
  axis_ = 1;
  bias_term_ = true;
  group_ = 1u;
}

DeformableConvolutionParameter::~DeformableConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.DeformableConvolutionParameter)
  SharedDtor();
}

void DeformableConvolutionParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void DeformableConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeformableConvolutionParameter::descriptor() {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeformableConvolutionParameter& DeformableConvolutionParameter::default_instance() {
  protobuf_caffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeformableConvolutionParameter* DeformableConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  DeformableConvolutionParameter* n = new DeformableConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeformableConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DeformableConvolutionParameter)
  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&stride_h_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(stride_h_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&stride_w_, 0, reinterpret_cast<char*>(&force_nd_im2col_) -
      reinterpret_cast<char*>(&stride_w_) + sizeof(force_nd_im2col_));
    axis_ = 1;
    bias_term_ = true;
    group_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeformableConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DeformableConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_pad())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pad())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_kernel_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stride = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_stride())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DeformableConvolutionParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::DeformableConvolutionParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 16 [default = 1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_force_nd_im2col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 dilation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_dilation())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(146u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dilation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DeformableConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DeformableConvolutionParameter)
  return false;
#undef DO_
}

void DeformableConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DeformableConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // repeated uint32 pad = 3;
  for (int i = 0, n = this->pad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0, n = this->kernel_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated uint32 stride = 6;
  for (int i = 0, n = this->stride_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0, n = this->dilation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->dilation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DeformableConvolutionParameter)
}

::google::protobuf::uint8* DeformableConvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DeformableConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // repeated uint32 pad = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->pad_, target);

  // repeated uint32 kernel_size = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->kernel_size_, target);

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated uint32 stride = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->stride_, target);

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->dilation_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DeformableConvolutionParameter)
  return target;
}

size_t DeformableConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DeformableConvolutionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 pad = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pad_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->kernel_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stride_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stride_size());
    total_size += data_size;
  }

  // repeated uint32 dilation = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dilation_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->dilation_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 2 + 1;
    }

    // optional int32 axis = 16 [default = 1];
    if (has_axis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeformableConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DeformableConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DeformableConvolutionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeformableConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DeformableConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DeformableConvolutionParameter)
    MergeFrom(*source);
  }
}

void DeformableConvolutionParameter::MergeFrom(const DeformableConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DeformableConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_h_ = from.pad_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      stride_h_ = from.stride_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      force_nd_im2col_ = from.force_nd_im2col_;
    }
    if (cached_has_bits & 0x00000800u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00001000u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00002000u) {
      group_ = from.group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeformableConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DeformableConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeformableConvolutionParameter::CopyFrom(const DeformableConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DeformableConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeformableConvolutionParameter::IsInitialized() const {
  return true;
}

void DeformableConvolutionParameter::Swap(DeformableConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeformableConvolutionParameter::InternalSwap(DeformableConvolutionParameter* other) {
  pad_.InternalSwap(&other->pad_);
  kernel_size_.InternalSwap(&other->kernel_size_);
  stride_.InternalSwap(&other->stride_);
  dilation_.InternalSwap(&other->dilation_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(engine_, other->engine_);
  std::swap(force_nd_im2col_, other->force_nd_im2col_);
  std::swap(axis_, other->axis_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(group_, other->group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeformableConvolutionParameter::GetMetadata() const {
  protobuf_caffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeformableConvolutionParameter

// optional uint32 num_output = 1;
bool DeformableConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeformableConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void DeformableConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeformableConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 DeformableConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.num_output)
  return num_output_;
}
void DeformableConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool DeformableConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DeformableConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00001000u;
}
void DeformableConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00001000u;
}
void DeformableConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool DeformableConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.bias_term)
  return bias_term_;
}
void DeformableConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
int DeformableConvolutionParameter::pad_size() const {
  return pad_.size();
}
void DeformableConvolutionParameter::clear_pad() {
  pad_.Clear();
}
::google::protobuf::uint32 DeformableConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.pad)
  return pad_.Get(index);
}
void DeformableConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.pad)
}
void DeformableConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.pad)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.pad)
  return pad_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
int DeformableConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
void DeformableConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
::google::protobuf::uint32 DeformableConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
void DeformableConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.kernel_size)
}
void DeformableConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.kernel_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.kernel_size)
  return kernel_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
int DeformableConvolutionParameter::stride_size() const {
  return stride_.size();
}
void DeformableConvolutionParameter::clear_stride() {
  stride_.Clear();
}
::google::protobuf::uint32 DeformableConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.stride)
  return stride_.Get(index);
}
void DeformableConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.stride)
}
void DeformableConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.stride)
  return stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
int DeformableConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
void DeformableConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
::google::protobuf::uint32 DeformableConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.dilation)
  return dilation_.Get(index);
}
void DeformableConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.dilation)
}
void DeformableConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeformableConvolutionParameter.dilation)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeformableConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.DeformableConvolutionParameter.dilation)
  return dilation_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeformableConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeformableConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
bool DeformableConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeformableConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
void DeformableConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeformableConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 DeformableConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.pad_h)
  return pad_h_;
}
void DeformableConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool DeformableConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeformableConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
void DeformableConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeformableConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 DeformableConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.pad_w)
  return pad_w_;
}
void DeformableConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
bool DeformableConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeformableConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
void DeformableConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeformableConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 DeformableConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.kernel_h)
  return kernel_h_;
}
void DeformableConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
bool DeformableConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeformableConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
void DeformableConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeformableConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 DeformableConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.kernel_w)
  return kernel_w_;
}
void DeformableConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
bool DeformableConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeformableConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
void DeformableConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeformableConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 DeformableConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.stride_h)
  return stride_h_;
}
void DeformableConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
bool DeformableConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeformableConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
void DeformableConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeformableConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 DeformableConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.stride_w)
  return stride_w_;
}
void DeformableConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
bool DeformableConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DeformableConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00002000u;
}
void DeformableConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00002000u;
}
void DeformableConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 DeformableConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.group)
  return group_;
}
void DeformableConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool DeformableConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeformableConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void DeformableConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeformableConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& DeformableConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* DeformableConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DeformableConvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* DeformableConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.DeformableConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void DeformableConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DeformableConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool DeformableConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeformableConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void DeformableConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeformableConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& DeformableConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* DeformableConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DeformableConvolutionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* DeformableConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.DeformableConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void DeformableConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DeformableConvolutionParameter.bias_filler)
}

// optional .caffe.DeformableConvolutionParameter.Engine engine = 15 [default = DEFAULT];
bool DeformableConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeformableConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
void DeformableConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeformableConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::DeformableConvolutionParameter_Engine DeformableConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.engine)
  return static_cast< ::caffe::DeformableConvolutionParameter_Engine >(engine_);
}
void DeformableConvolutionParameter::set_engine(::caffe::DeformableConvolutionParameter_Engine value) {
  assert(::caffe::DeformableConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
bool DeformableConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DeformableConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000800u;
}
void DeformableConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000800u;
}
void DeformableConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 DeformableConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.axis)
  return axis_;
}
void DeformableConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
bool DeformableConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DeformableConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00000400u;
}
void DeformableConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00000400u;
}
void DeformableConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
bool DeformableConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.DeformableConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
void DeformableConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeformableConvolutionParameter.force_nd_im2col)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
